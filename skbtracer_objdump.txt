
skbtracer.elf:	file format elf64-bpf

Disassembly of section .text:

0000000000000000 <get_event_buf>:
; INLINE struct event_t *get_event_buf(void) {
       0:	b7 06 00 00 00 00 00 00	r6 = 0
;     u32 ev_buff_id = 0;
       1:	63 6a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r6
       2:	bf a2 00 00 00 00 00 00	r2 = r10
       3:	07 02 00 00 fc ff ff ff	r2 += -4
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
       4:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       6:	85 00 00 00 01 00 00 00	call 1
;     if (!ev) return NULL;
       7:	15 00 1e 00 00 00 00 00	if r0 == 0 goto +30 <LBB0_2>
       8:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
       9:	7b 10 d8 00 00 00 00 00	*(u64 *)(r0 + 216) = r1
      10:	7b 10 d0 00 00 00 00 00	*(u64 *)(r0 + 208) = r1
      11:	7b 10 c8 00 00 00 00 00	*(u64 *)(r0 + 200) = r1
      12:	7b 10 c0 00 00 00 00 00	*(u64 *)(r0 + 192) = r1
      13:	7b 10 b8 00 00 00 00 00	*(u64 *)(r0 + 184) = r1
      14:	7b 10 b0 00 00 00 00 00	*(u64 *)(r0 + 176) = r1
      15:	7b 10 a8 00 00 00 00 00	*(u64 *)(r0 + 168) = r1
      16:	7b 10 a0 00 00 00 00 00	*(u64 *)(r0 + 160) = r1
      17:	7b 10 98 00 00 00 00 00	*(u64 *)(r0 + 152) = r1
      18:	7b 10 90 00 00 00 00 00	*(u64 *)(r0 + 144) = r1
      19:	7b 10 88 00 00 00 00 00	*(u64 *)(r0 + 136) = r1
      20:	7b 10 80 00 00 00 00 00	*(u64 *)(r0 + 128) = r1
      21:	7b 10 78 00 00 00 00 00	*(u64 *)(r0 + 120) = r1
      22:	7b 10 70 00 00 00 00 00	*(u64 *)(r0 + 112) = r1
      23:	7b 10 68 00 00 00 00 00	*(u64 *)(r0 + 104) = r1
      24:	7b 10 60 00 00 00 00 00	*(u64 *)(r0 + 96) = r1
      25:	7b 10 58 00 00 00 00 00	*(u64 *)(r0 + 88) = r1
      26:	7b 10 50 00 00 00 00 00	*(u64 *)(r0 + 80) = r1
      27:	7b 10 48 00 00 00 00 00	*(u64 *)(r0 + 72) = r1
      28:	7b 10 40 00 00 00 00 00	*(u64 *)(r0 + 64) = r1
      29:	7b 10 38 00 00 00 00 00	*(u64 *)(r0 + 56) = r1
      30:	7b 10 30 00 00 00 00 00	*(u64 *)(r0 + 48) = r1
      31:	7b 10 28 00 00 00 00 00	*(u64 *)(r0 + 40) = r1
      32:	7b 10 20 00 00 00 00 00	*(u64 *)(r0 + 32) = r1
      33:	7b 10 18 00 00 00 00 00	*(u64 *)(r0 + 24) = r1
      34:	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 16) = r1
      35:	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 8) = r1
      36:	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r1
      37:	bf 06 00 00 00 00 00 00	r6 = r0

0000000000000130 <LBB0_2>:
; }
      38:	bf 60 00 00 00 00 00 00	r0 = r6
      39:	95 00 00 00 00 00 00 00	exit

0000000000000140 <bpf_strncpy>:
;     for (j = 10; j < 64; j += 10) CPY(j);
      40:	71 23 00 00 00 00 00 00	r3 = *(u8 *)(r2 + 0)
      41:	15 03 b7 00 00 00 00 00	if r3 == 0 goto +183 <LBB1_3>
      42:	73 31 00 00 00 00 00 00	*(u8 *)(r1 + 0) = r3
      43:	71 23 01 00 00 00 00 00	r3 = *(u8 *)(r2 + 1)
      44:	15 03 b4 00 00 00 00 00	if r3 == 0 goto +180 <LBB1_3>
      45:	73 31 01 00 00 00 00 00	*(u8 *)(r1 + 1) = r3
      46:	71 23 02 00 00 00 00 00	r3 = *(u8 *)(r2 + 2)
      47:	15 03 b1 00 00 00 00 00	if r3 == 0 goto +177 <LBB1_3>
      48:	73 31 02 00 00 00 00 00	*(u8 *)(r1 + 2) = r3
      49:	71 23 03 00 00 00 00 00	r3 = *(u8 *)(r2 + 3)
      50:	15 03 ae 00 00 00 00 00	if r3 == 0 goto +174 <LBB1_3>
      51:	73 31 03 00 00 00 00 00	*(u8 *)(r1 + 3) = r3
      52:	71 23 04 00 00 00 00 00	r3 = *(u8 *)(r2 + 4)
      53:	15 03 ab 00 00 00 00 00	if r3 == 0 goto +171 <LBB1_3>
      54:	73 31 04 00 00 00 00 00	*(u8 *)(r1 + 4) = r3
      55:	71 23 05 00 00 00 00 00	r3 = *(u8 *)(r2 + 5)
      56:	15 03 a8 00 00 00 00 00	if r3 == 0 goto +168 <LBB1_3>
      57:	73 31 05 00 00 00 00 00	*(u8 *)(r1 + 5) = r3
      58:	71 23 06 00 00 00 00 00	r3 = *(u8 *)(r2 + 6)
      59:	15 03 a5 00 00 00 00 00	if r3 == 0 goto +165 <LBB1_3>
      60:	73 31 06 00 00 00 00 00	*(u8 *)(r1 + 6) = r3
      61:	71 23 07 00 00 00 00 00	r3 = *(u8 *)(r2 + 7)
      62:	15 03 a2 00 00 00 00 00	if r3 == 0 goto +162 <LBB1_3>
      63:	73 31 07 00 00 00 00 00	*(u8 *)(r1 + 7) = r3
      64:	71 23 08 00 00 00 00 00	r3 = *(u8 *)(r2 + 8)
      65:	15 03 9f 00 00 00 00 00	if r3 == 0 goto +159 <LBB1_3>
      66:	73 31 08 00 00 00 00 00	*(u8 *)(r1 + 8) = r3
      67:	71 23 09 00 00 00 00 00	r3 = *(u8 *)(r2 + 9)
      68:	15 03 9c 00 00 00 00 00	if r3 == 0 goto +156 <LBB1_3>
      69:	73 31 09 00 00 00 00 00	*(u8 *)(r1 + 9) = r3
      70:	71 23 0a 00 00 00 00 00	r3 = *(u8 *)(r2 + 10)
      71:	15 03 99 00 00 00 00 00	if r3 == 0 goto +153 <LBB1_3>
      72:	73 31 0a 00 00 00 00 00	*(u8 *)(r1 + 10) = r3
      73:	71 23 0b 00 00 00 00 00	r3 = *(u8 *)(r2 + 11)
      74:	15 03 96 00 00 00 00 00	if r3 == 0 goto +150 <LBB1_3>
      75:	73 31 0b 00 00 00 00 00	*(u8 *)(r1 + 11) = r3
      76:	71 23 0c 00 00 00 00 00	r3 = *(u8 *)(r2 + 12)
      77:	15 03 93 00 00 00 00 00	if r3 == 0 goto +147 <LBB1_3>
      78:	73 31 0c 00 00 00 00 00	*(u8 *)(r1 + 12) = r3
      79:	71 23 0d 00 00 00 00 00	r3 = *(u8 *)(r2 + 13)
      80:	15 03 90 00 00 00 00 00	if r3 == 0 goto +144 <LBB1_3>
      81:	73 31 0d 00 00 00 00 00	*(u8 *)(r1 + 13) = r3
      82:	71 23 0e 00 00 00 00 00	r3 = *(u8 *)(r2 + 14)
      83:	15 03 8d 00 00 00 00 00	if r3 == 0 goto +141 <LBB1_3>
      84:	73 31 0e 00 00 00 00 00	*(u8 *)(r1 + 14) = r3
      85:	71 23 0f 00 00 00 00 00	r3 = *(u8 *)(r2 + 15)
      86:	15 03 8a 00 00 00 00 00	if r3 == 0 goto +138 <LBB1_3>
      87:	73 31 0f 00 00 00 00 00	*(u8 *)(r1 + 15) = r3
      88:	71 23 10 00 00 00 00 00	r3 = *(u8 *)(r2 + 16)
      89:	15 03 87 00 00 00 00 00	if r3 == 0 goto +135 <LBB1_3>
      90:	73 31 10 00 00 00 00 00	*(u8 *)(r1 + 16) = r3
      91:	71 23 11 00 00 00 00 00	r3 = *(u8 *)(r2 + 17)
      92:	15 03 84 00 00 00 00 00	if r3 == 0 goto +132 <LBB1_3>
      93:	73 31 11 00 00 00 00 00	*(u8 *)(r1 + 17) = r3
      94:	71 23 12 00 00 00 00 00	r3 = *(u8 *)(r2 + 18)
      95:	15 03 81 00 00 00 00 00	if r3 == 0 goto +129 <LBB1_3>
      96:	73 31 12 00 00 00 00 00	*(u8 *)(r1 + 18) = r3
      97:	71 23 13 00 00 00 00 00	r3 = *(u8 *)(r2 + 19)
      98:	15 03 7e 00 00 00 00 00	if r3 == 0 goto +126 <LBB1_3>
      99:	73 31 13 00 00 00 00 00	*(u8 *)(r1 + 19) = r3
     100:	71 23 14 00 00 00 00 00	r3 = *(u8 *)(r2 + 20)
     101:	15 03 7b 00 00 00 00 00	if r3 == 0 goto +123 <LBB1_3>
     102:	73 31 14 00 00 00 00 00	*(u8 *)(r1 + 20) = r3
     103:	71 23 15 00 00 00 00 00	r3 = *(u8 *)(r2 + 21)
     104:	15 03 78 00 00 00 00 00	if r3 == 0 goto +120 <LBB1_3>
     105:	73 31 15 00 00 00 00 00	*(u8 *)(r1 + 21) = r3
     106:	71 23 16 00 00 00 00 00	r3 = *(u8 *)(r2 + 22)
     107:	15 03 75 00 00 00 00 00	if r3 == 0 goto +117 <LBB1_3>
     108:	73 31 16 00 00 00 00 00	*(u8 *)(r1 + 22) = r3
     109:	71 23 17 00 00 00 00 00	r3 = *(u8 *)(r2 + 23)
     110:	15 03 72 00 00 00 00 00	if r3 == 0 goto +114 <LBB1_3>
     111:	73 31 17 00 00 00 00 00	*(u8 *)(r1 + 23) = r3
     112:	71 23 18 00 00 00 00 00	r3 = *(u8 *)(r2 + 24)
     113:	15 03 6f 00 00 00 00 00	if r3 == 0 goto +111 <LBB1_3>
     114:	73 31 18 00 00 00 00 00	*(u8 *)(r1 + 24) = r3
     115:	71 23 19 00 00 00 00 00	r3 = *(u8 *)(r2 + 25)
     116:	15 03 6c 00 00 00 00 00	if r3 == 0 goto +108 <LBB1_3>
     117:	73 31 19 00 00 00 00 00	*(u8 *)(r1 + 25) = r3
     118:	71 23 1a 00 00 00 00 00	r3 = *(u8 *)(r2 + 26)
     119:	15 03 69 00 00 00 00 00	if r3 == 0 goto +105 <LBB1_3>
     120:	73 31 1a 00 00 00 00 00	*(u8 *)(r1 + 26) = r3
     121:	71 23 1b 00 00 00 00 00	r3 = *(u8 *)(r2 + 27)
     122:	15 03 66 00 00 00 00 00	if r3 == 0 goto +102 <LBB1_3>
     123:	73 31 1b 00 00 00 00 00	*(u8 *)(r1 + 27) = r3
     124:	71 23 1c 00 00 00 00 00	r3 = *(u8 *)(r2 + 28)
     125:	15 03 63 00 00 00 00 00	if r3 == 0 goto +99 <LBB1_3>
     126:	73 31 1c 00 00 00 00 00	*(u8 *)(r1 + 28) = r3
     127:	71 23 1d 00 00 00 00 00	r3 = *(u8 *)(r2 + 29)
     128:	15 03 60 00 00 00 00 00	if r3 == 0 goto +96 <LBB1_3>
     129:	73 31 1d 00 00 00 00 00	*(u8 *)(r1 + 29) = r3
     130:	71 23 1e 00 00 00 00 00	r3 = *(u8 *)(r2 + 30)
     131:	15 03 5d 00 00 00 00 00	if r3 == 0 goto +93 <LBB1_3>
     132:	73 31 1e 00 00 00 00 00	*(u8 *)(r1 + 30) = r3
     133:	71 23 1f 00 00 00 00 00	r3 = *(u8 *)(r2 + 31)
     134:	15 03 5a 00 00 00 00 00	if r3 == 0 goto +90 <LBB1_3>
     135:	73 31 1f 00 00 00 00 00	*(u8 *)(r1 + 31) = r3
     136:	71 23 20 00 00 00 00 00	r3 = *(u8 *)(r2 + 32)
     137:	15 03 57 00 00 00 00 00	if r3 == 0 goto +87 <LBB1_3>
     138:	73 31 20 00 00 00 00 00	*(u8 *)(r1 + 32) = r3
     139:	71 23 21 00 00 00 00 00	r3 = *(u8 *)(r2 + 33)
     140:	15 03 54 00 00 00 00 00	if r3 == 0 goto +84 <LBB1_3>
     141:	73 31 21 00 00 00 00 00	*(u8 *)(r1 + 33) = r3
     142:	71 23 22 00 00 00 00 00	r3 = *(u8 *)(r2 + 34)
     143:	15 03 51 00 00 00 00 00	if r3 == 0 goto +81 <LBB1_3>
     144:	73 31 22 00 00 00 00 00	*(u8 *)(r1 + 34) = r3
     145:	71 23 23 00 00 00 00 00	r3 = *(u8 *)(r2 + 35)
     146:	15 03 4e 00 00 00 00 00	if r3 == 0 goto +78 <LBB1_3>
     147:	73 31 23 00 00 00 00 00	*(u8 *)(r1 + 35) = r3
     148:	71 23 24 00 00 00 00 00	r3 = *(u8 *)(r2 + 36)
     149:	15 03 4b 00 00 00 00 00	if r3 == 0 goto +75 <LBB1_3>
     150:	73 31 24 00 00 00 00 00	*(u8 *)(r1 + 36) = r3
     151:	71 23 25 00 00 00 00 00	r3 = *(u8 *)(r2 + 37)
     152:	15 03 48 00 00 00 00 00	if r3 == 0 goto +72 <LBB1_3>
     153:	73 31 25 00 00 00 00 00	*(u8 *)(r1 + 37) = r3
     154:	71 23 26 00 00 00 00 00	r3 = *(u8 *)(r2 + 38)
     155:	15 03 45 00 00 00 00 00	if r3 == 0 goto +69 <LBB1_3>
     156:	73 31 26 00 00 00 00 00	*(u8 *)(r1 + 38) = r3
     157:	71 23 27 00 00 00 00 00	r3 = *(u8 *)(r2 + 39)
     158:	15 03 42 00 00 00 00 00	if r3 == 0 goto +66 <LBB1_3>
     159:	73 31 27 00 00 00 00 00	*(u8 *)(r1 + 39) = r3
     160:	71 23 28 00 00 00 00 00	r3 = *(u8 *)(r2 + 40)
     161:	15 03 3f 00 00 00 00 00	if r3 == 0 goto +63 <LBB1_3>
     162:	73 31 28 00 00 00 00 00	*(u8 *)(r1 + 40) = r3
     163:	71 23 29 00 00 00 00 00	r3 = *(u8 *)(r2 + 41)
     164:	15 03 3c 00 00 00 00 00	if r3 == 0 goto +60 <LBB1_3>
     165:	73 31 29 00 00 00 00 00	*(u8 *)(r1 + 41) = r3
     166:	71 23 2a 00 00 00 00 00	r3 = *(u8 *)(r2 + 42)
     167:	15 03 39 00 00 00 00 00	if r3 == 0 goto +57 <LBB1_3>
     168:	73 31 2a 00 00 00 00 00	*(u8 *)(r1 + 42) = r3
     169:	71 23 2b 00 00 00 00 00	r3 = *(u8 *)(r2 + 43)
     170:	15 03 36 00 00 00 00 00	if r3 == 0 goto +54 <LBB1_3>
     171:	73 31 2b 00 00 00 00 00	*(u8 *)(r1 + 43) = r3
     172:	71 23 2c 00 00 00 00 00	r3 = *(u8 *)(r2 + 44)
     173:	15 03 33 00 00 00 00 00	if r3 == 0 goto +51 <LBB1_3>
     174:	73 31 2c 00 00 00 00 00	*(u8 *)(r1 + 44) = r3
     175:	71 23 2d 00 00 00 00 00	r3 = *(u8 *)(r2 + 45)
     176:	15 03 30 00 00 00 00 00	if r3 == 0 goto +48 <LBB1_3>
     177:	73 31 2d 00 00 00 00 00	*(u8 *)(r1 + 45) = r3
     178:	71 23 2e 00 00 00 00 00	r3 = *(u8 *)(r2 + 46)
     179:	15 03 2d 00 00 00 00 00	if r3 == 0 goto +45 <LBB1_3>
     180:	73 31 2e 00 00 00 00 00	*(u8 *)(r1 + 46) = r3
     181:	71 23 2f 00 00 00 00 00	r3 = *(u8 *)(r2 + 47)
     182:	15 03 2a 00 00 00 00 00	if r3 == 0 goto +42 <LBB1_3>
     183:	73 31 2f 00 00 00 00 00	*(u8 *)(r1 + 47) = r3
     184:	71 23 30 00 00 00 00 00	r3 = *(u8 *)(r2 + 48)
     185:	15 03 27 00 00 00 00 00	if r3 == 0 goto +39 <LBB1_3>
     186:	73 31 30 00 00 00 00 00	*(u8 *)(r1 + 48) = r3
     187:	71 23 31 00 00 00 00 00	r3 = *(u8 *)(r2 + 49)
     188:	15 03 24 00 00 00 00 00	if r3 == 0 goto +36 <LBB1_3>
     189:	73 31 31 00 00 00 00 00	*(u8 *)(r1 + 49) = r3
     190:	71 23 32 00 00 00 00 00	r3 = *(u8 *)(r2 + 50)
     191:	15 03 21 00 00 00 00 00	if r3 == 0 goto +33 <LBB1_3>
     192:	73 31 32 00 00 00 00 00	*(u8 *)(r1 + 50) = r3
     193:	71 23 33 00 00 00 00 00	r3 = *(u8 *)(r2 + 51)
     194:	15 03 1e 00 00 00 00 00	if r3 == 0 goto +30 <LBB1_3>
     195:	73 31 33 00 00 00 00 00	*(u8 *)(r1 + 51) = r3
     196:	71 23 34 00 00 00 00 00	r3 = *(u8 *)(r2 + 52)
     197:	15 03 1b 00 00 00 00 00	if r3 == 0 goto +27 <LBB1_3>
     198:	73 31 34 00 00 00 00 00	*(u8 *)(r1 + 52) = r3
     199:	71 23 35 00 00 00 00 00	r3 = *(u8 *)(r2 + 53)
     200:	15 03 18 00 00 00 00 00	if r3 == 0 goto +24 <LBB1_3>
     201:	73 31 35 00 00 00 00 00	*(u8 *)(r1 + 53) = r3
     202:	71 23 36 00 00 00 00 00	r3 = *(u8 *)(r2 + 54)
     203:	15 03 15 00 00 00 00 00	if r3 == 0 goto +21 <LBB1_3>
     204:	73 31 36 00 00 00 00 00	*(u8 *)(r1 + 54) = r3
     205:	71 23 37 00 00 00 00 00	r3 = *(u8 *)(r2 + 55)
     206:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB1_3>
     207:	73 31 37 00 00 00 00 00	*(u8 *)(r1 + 55) = r3
     208:	71 23 38 00 00 00 00 00	r3 = *(u8 *)(r2 + 56)
     209:	15 03 0f 00 00 00 00 00	if r3 == 0 goto +15 <LBB1_3>
     210:	73 31 38 00 00 00 00 00	*(u8 *)(r1 + 56) = r3
     211:	71 23 39 00 00 00 00 00	r3 = *(u8 *)(r2 + 57)
     212:	15 03 0c 00 00 00 00 00	if r3 == 0 goto +12 <LBB1_3>
     213:	73 31 39 00 00 00 00 00	*(u8 *)(r1 + 57) = r3
     214:	71 23 3a 00 00 00 00 00	r3 = *(u8 *)(r2 + 58)
     215:	15 03 09 00 00 00 00 00	if r3 == 0 goto +9 <LBB1_3>
     216:	73 31 3a 00 00 00 00 00	*(u8 *)(r1 + 58) = r3
     217:	71 23 3b 00 00 00 00 00	r3 = *(u8 *)(r2 + 59)
     218:	15 03 06 00 00 00 00 00	if r3 == 0 goto +6 <LBB1_3>
     219:	73 31 3b 00 00 00 00 00	*(u8 *)(r1 + 59) = r3
;     CPY(64);
     220:	71 23 3c 00 00 00 00 00	r3 = *(u8 *)(r2 + 60)
     221:	15 03 03 00 00 00 00 00	if r3 == 0 goto +3 <LBB1_3>
     222:	73 31 3c 00 00 00 00 00	*(u8 *)(r1 + 60) = r3
     223:	71 23 3d 00 00 00 00 00	r3 = *(u8 *)(r2 + 61)
     224:	55 03 01 00 00 00 00 00	if r3 != 0 goto +1 <LBB1_63>

0000000000000708 <LBB1_3>:
; }
     225:	95 00 00 00 00 00 00 00	exit

0000000000000710 <LBB1_63>:
;     CPY(64);
     226:	73 31 3d 00 00 00 00 00	*(u8 *)(r1 + 61) = r3
     227:	71 23 3e 00 00 00 00 00	r3 = *(u8 *)(r2 + 62)
     228:	15 03 fc ff 00 00 00 00	if r3 == 0 goto -4 <LBB1_3>
     229:	73 31 3e 00 00 00 00 00	*(u8 *)(r1 + 62) = r3
     230:	71 22 3f 00 00 00 00 00	r2 = *(u8 *)(r2 + 63)
     231:	15 02 f9 ff 00 00 00 00	if r2 == 0 goto -7 <LBB1_3>
     232:	73 21 3f 00 00 00 00 00	*(u8 *)(r1 + 63) = r2
     233:	05 00 f7 ff 00 00 00 00	goto -9 <LBB1_3>

0000000000000750 <get_netns>:
; INLINE u32 get_netns(struct sk_buff *skb) {
     234:	bf 16 00 00 00 00 00 00	r6 = r1
     235:	b7 01 00 00 10 00 00 00	r1 = 16
     236:	bf 63 00 00 00 00 00 00	r3 = r6
     237:	0f 13 00 00 00 00 00 00	r3 += r1
     238:	bf a7 00 00 00 00 00 00	r7 = r10
     239:	07 07 00 00 f0 ff ff ff	r7 += -16
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     240:	bf 71 00 00 00 00 00 00	r1 = r7
     241:	b7 02 00 00 08 00 00 00	r2 = 8
     242:	85 00 00 00 71 00 00 00	call 113
     243:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     244:	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 16)
     245:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     246:	bf 71 00 00 00 00 00 00	r1 = r7
     247:	b7 02 00 00 08 00 00 00	r2 = 8
     248:	85 00 00 00 71 00 00 00	call 113
     249:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     250:	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 16)
     251:	0f 13 00 00 00 00 00 00	r3 += r1
     252:	bf a1 00 00 00 00 00 00	r1 = r10
     253:	07 01 00 00 fc ff ff ff	r1 += -4
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     254:	b7 02 00 00 04 00 00 00	r2 = 4
     255:	85 00 00 00 71 00 00 00	call 113
     256:	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 4)
;     if (netns == 0) {
     257:	55 00 18 00 00 00 00 00	if r0 != 0 goto +24 <LBB2_3>
     258:	b7 01 00 00 18 00 00 00	r1 = 24
     259:	0f 16 00 00 00 00 00 00	r6 += r1
     260:	bf a1 00 00 00 00 00 00	r1 = r10
     261:	07 01 00 00 f0 ff ff ff	r1 += -16
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     262:	b7 02 00 00 08 00 00 00	r2 = 8
     263:	bf 63 00 00 00 00 00 00	r3 = r6
     264:	85 00 00 00 71 00 00 00	call 113
     265:	b7 00 00 00 00 00 00 00	r0 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     266:	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 16)
;         if (sk != NULL)
     267:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB2_3>
     268:	b7 01 00 00 30 00 00 00	r1 = 48
     269:	0f 13 00 00 00 00 00 00	r3 += r1
     270:	bf a1 00 00 00 00 00 00	r1 = r10
     271:	07 01 00 00 f0 ff ff ff	r1 += -16
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     272:	b7 02 00 00 08 00 00 00	r2 = 8
     273:	85 00 00 00 71 00 00 00	call 113
     274:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     275:	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 16)
     276:	0f 13 00 00 00 00 00 00	r3 += r1
     277:	bf a1 00 00 00 00 00 00	r1 = r10
     278:	07 01 00 00 fc ff ff ff	r1 += -4
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     279:	b7 02 00 00 04 00 00 00	r2 = 4
     280:	85 00 00 00 71 00 00 00	call 113
     281:	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 4)

00000000000008d0 <LBB2_3>:
;     return netns;
     282:	95 00 00 00 00 00 00 00	exit

00000000000008d8 <get_pkt_type>:
; INLINE u8 get_pkt_type(struct sk_buff *skb) {
     283:	bf 13 00 00 00 00 00 00	r3 = r1
     284:	b7 01 00 00 00 00 00 00	r1 = 0
;     union ___skb_pkt_type type = {};
     285:	73 1a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r1
     286:	b7 01 00 00 80 00 00 00	r1 = 128
     287:	0f 13 00 00 00 00 00 00	r3 += r1
     288:	bf a1 00 00 00 00 00 00	r1 = r10
     289:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     290:	b7 02 00 00 01 00 00 00	r2 = 1
     291:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     292:	71 a0 f8 ff 00 00 00 00	r0 = *(u8 *)(r10 - 8)
     293:	57 00 00 00 07 00 00 00	r0 &= 7
     294:	95 00 00 00 00 00 00 00	exit

0000000000000938 <get_ip_version>:
; INLINE u8 get_ip_version(void *hdr) {
     295:	bf 13 00 00 00 00 00 00	r3 = r1
     296:	bf a1 00 00 00 00 00 00	r1 = r10
     297:	07 01 00 00 ff ff ff ff	r1 += -1
;     bpf_probe_read(&first_byte, 1, hdr);
     298:	b7 02 00 00 01 00 00 00	r2 = 1
     299:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     300:	71 a0 ff ff 00 00 00 00	r0 = *(u8 *)(r10 - 1)
     301:	77 00 00 00 04 00 00 00	r0 >>= 4
     302:	95 00 00 00 00 00 00 00	exit

0000000000000978 <get_ipv4_header_len>:
; INLINE u8 get_ipv4_header_len(void *hdr) {
     303:	bf 13 00 00 00 00 00 00	r3 = r1
     304:	bf a1 00 00 00 00 00 00	r1 = r10
     305:	07 01 00 00 ff ff ff ff	r1 += -1
;     bpf_probe_read(&first_byte, 1, hdr);
     306:	b7 02 00 00 01 00 00 00	r2 = 1
     307:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     308:	71 a0 ff ff 00 00 00 00	r0 = *(u8 *)(r10 - 1)
     309:	67 00 00 00 02 00 00 00	r0 <<= 2
     310:	57 00 00 00 3c 00 00 00	r0 &= 60
     311:	95 00 00 00 00 00 00 00	exit

00000000000009c0 <get_l2_header>:
; INLINE unsigned char *get_l2_header(struct sk_buff *skb) {
     312:	bf 16 00 00 00 00 00 00	r6 = r1
     313:	b7 01 00 00 c0 00 00 00	r1 = 192
     314:	bf 63 00 00 00 00 00 00	r3 = r6
     315:	0f 13 00 00 00 00 00 00	r3 += r1
     316:	bf a1 00 00 00 00 00 00	r1 = r10
     317:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     318:	b7 02 00 00 08 00 00 00	r2 = 8
     319:	85 00 00 00 71 00 00 00	call 113
     320:	b7 01 00 00 b6 00 00 00	r1 = 182
     321:	0f 16 00 00 00 00 00 00	r6 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     322:	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 8)
     323:	bf a1 00 00 00 00 00 00	r1 = r10
     324:	07 01 00 00 f6 ff ff ff	r1 += -10
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     325:	b7 02 00 00 02 00 00 00	r2 = 2
     326:	bf 63 00 00 00 00 00 00	r3 = r6
     327:	85 00 00 00 71 00 00 00	call 113
     328:	69 a1 f6 ff 00 00 00 00	r1 = *(u16 *)(r10 - 10)
;     return head + mac_header;
     329:	0f 17 00 00 00 00 00 00	r7 += r1
     330:	bf 70 00 00 00 00 00 00	r0 = r7
     331:	95 00 00 00 00 00 00 00	exit

0000000000000a60 <get_l3_header>:
; INLINE unsigned char *get_l3_header(struct sk_buff *skb) {
     332:	bf 17 00 00 00 00 00 00	r7 = r1
     333:	b7 01 00 00 c0 00 00 00	r1 = 192
     334:	bf 73 00 00 00 00 00 00	r3 = r7
     335:	0f 13 00 00 00 00 00 00	r3 += r1
     336:	bf a1 00 00 00 00 00 00	r1 = r10
     337:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     338:	b7 02 00 00 08 00 00 00	r2 = 8
     339:	85 00 00 00 71 00 00 00	call 113
     340:	b7 01 00 00 b6 00 00 00	r1 = 182
     341:	bf 73 00 00 00 00 00 00	r3 = r7
     342:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     343:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     344:	bf a1 00 00 00 00 00 00	r1 = r10
     345:	07 01 00 00 f6 ff ff ff	r1 += -10
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     346:	b7 02 00 00 02 00 00 00	r2 = 2
     347:	85 00 00 00 71 00 00 00	call 113
     348:	b7 01 00 00 b4 00 00 00	r1 = 180
     349:	0f 17 00 00 00 00 00 00	r7 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     350:	69 a8 f6 ff 00 00 00 00	r8 = *(u16 *)(r10 - 10)
     351:	bf a1 00 00 00 00 00 00	r1 = r10
     352:	07 01 00 00 f4 ff ff ff	r1 += -12
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     353:	b7 02 00 00 02 00 00 00	r2 = 2
     354:	bf 73 00 00 00 00 00 00	r3 = r7
     355:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     356:	07 08 00 00 0e 00 00 00	r8 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     357:	69 a1 f4 ff 00 00 00 00	r1 = *(u16 *)(r10 - 12)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     358:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB7_2>
     359:	bf 18 00 00 00 00 00 00	r8 = r1

0000000000000b40 <LBB7_2>:
;     return head + network_header;
     360:	57 08 00 00 ff ff 00 00	r8 &= 65535
     361:	0f 86 00 00 00 00 00 00	r6 += r8
     362:	bf 60 00 00 00 00 00 00	r0 = r6
     363:	95 00 00 00 00 00 00 00	exit

0000000000000b60 <get_l4_header>:
; INLINE unsigned char *get_l4_header(struct sk_buff *skb) {
     364:	bf 17 00 00 00 00 00 00	r7 = r1
     365:	b7 01 00 00 c0 00 00 00	r1 = 192
     366:	bf 73 00 00 00 00 00 00	r3 = r7
     367:	0f 13 00 00 00 00 00 00	r3 += r1
     368:	bf a1 00 00 00 00 00 00	r1 = r10
     369:	07 01 00 00 f0 ff ff ff	r1 += -16
;     unsigned char *head = BPF_CORE_READ(skb, head);
     370:	b7 02 00 00 08 00 00 00	r2 = 8
     371:	85 00 00 00 71 00 00 00	call 113
     372:	b7 01 00 00 b6 00 00 00	r1 = 182
     373:	bf 73 00 00 00 00 00 00	r3 = r7
     374:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     375:	79 a6 f0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 16)
     376:	bf a1 00 00 00 00 00 00	r1 = r10
     377:	07 01 00 00 ee ff ff ff	r1 += -18
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     378:	b7 02 00 00 02 00 00 00	r2 = 2
     379:	85 00 00 00 71 00 00 00	call 113
     380:	b7 01 00 00 b4 00 00 00	r1 = 180
     381:	0f 17 00 00 00 00 00 00	r7 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     382:	69 a8 ee ff 00 00 00 00	r8 = *(u16 *)(r10 - 18)
     383:	bf a1 00 00 00 00 00 00	r1 = r10
     384:	07 01 00 00 ec ff ff ff	r1 += -20
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     385:	b7 02 00 00 02 00 00 00	r2 = 2
     386:	bf 73 00 00 00 00 00 00	r3 = r7
     387:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     388:	07 08 00 00 0e 00 00 00	r8 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     389:	69 a1 ec ff 00 00 00 00	r1 = *(u16 *)(r10 - 20)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     390:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB8_2>
     391:	bf 18 00 00 00 00 00 00	r8 = r1

0000000000000c40 <LBB8_2>:
;     return head + network_header;
     392:	57 08 00 00 ff ff 00 00	r8 &= 65535
     393:	0f 86 00 00 00 00 00 00	r6 += r8
     394:	bf a1 00 00 00 00 00 00	r1 = r10
     395:	07 01 00 00 fe ff ff ff	r1 += -2
;     bpf_probe_read(&first_byte, 1, hdr);
     396:	b7 02 00 00 01 00 00 00	r2 = 1
     397:	bf 63 00 00 00 00 00 00	r3 = r6
     398:	85 00 00 00 04 00 00 00	call 4
     399:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     400:	71 a2 fe ff 00 00 00 00	r2 = *(u8 *)(r10 - 2)
;     if (ip_version == 6)
     401:	57 02 00 00 f0 00 00 00	r2 &= 240
     402:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB8_4>
     403:	bf a1 00 00 00 00 00 00	r1 = r10
     404:	07 01 00 00 ff ff ff ff	r1 += -1
;     bpf_probe_read(&first_byte, 1, hdr);
     405:	b7 02 00 00 01 00 00 00	r2 = 1
     406:	bf 63 00 00 00 00 00 00	r3 = r6
     407:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     408:	71 a1 ff ff 00 00 00 00	r1 = *(u8 *)(r10 - 1)
     409:	67 01 00 00 02 00 00 00	r1 <<= 2
     410:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000cd8 <LBB8_4>:
;     return l3_header + transport_size;
     411:	0f 16 00 00 00 00 00 00	r6 += r1
     412:	bf 60 00 00 00 00 00 00	r0 = r6
     413:	95 00 00 00 00 00 00 00	exit

0000000000000cf0 <set_event_info>:
; INLINE void set_event_info(struct sk_buff *skb, struct event_t *ev) {
     414:	bf 26 00 00 00 00 00 00	r6 = r2
;     ev->skb = (u64)skb;
     415:	7b 16 20 00 00 00 00 00	*(u64 *)(r6 + 32) = r1
;     ev->start_ns = bpf_ktime_get_ns();
     416:	85 00 00 00 05 00 00 00	call 5
     417:	7b 06 28 00 00 00 00 00	*(u64 *)(r6 + 40) = r0
; }
     418:	95 00 00 00 00 00 00 00	exit

0000000000000d18 <set_callstack>:
; INLINE void set_callstack(struct event_t *event, struct pt_regs *ctx) {
     419:	bf 16 00 00 00 00 00 00	r6 = r1
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
     420:	bf 21 00 00 00 00 00 00	r1 = r2
     421:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     423:	b7 03 00 00 00 00 00 00	r3 = 0
     424:	85 00 00 00 1b 00 00 00	call 27
     425:	63 06 30 00 00 00 00 00	*(u32 *)(r6 + 48) = r0
;     return;
     426:	95 00 00 00 00 00 00 00	exit

0000000000000d58 <set_pkt_info>:
; INLINE void set_pkt_info(struct sk_buff *skb, struct pkt_info_t *pkt_info) {
     427:	bf 26 00 00 00 00 00 00	r6 = r2
     428:	bf 17 00 00 00 00 00 00	r7 = r1
     429:	b7 01 00 00 10 00 00 00	r1 = 16
     430:	bf 79 00 00 00 00 00 00	r9 = r7
     431:	0f 19 00 00 00 00 00 00	r9 += r1
     432:	bf a1 00 00 00 00 00 00	r1 = r10
     433:	07 01 00 00 f0 ff ff ff	r1 += -16
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     434:	b7 02 00 00 08 00 00 00	r2 = 8
     435:	bf 93 00 00 00 00 00 00	r3 = r9
     436:	85 00 00 00 71 00 00 00	call 113
     437:	b7 01 00 00 70 00 00 00	r1 = 112
     438:	bf 73 00 00 00 00 00 00	r3 = r7
     439:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     440:	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 16)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     441:	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r1
     442:	bf a1 00 00 00 00 00 00	r1 = r10
     443:	07 01 00 00 f0 ff ff ff	r1 += -16
;     pkt_info->len = BPF_CORE_READ(skb, len);
     444:	b7 02 00 00 04 00 00 00	r2 = 4
     445:	85 00 00 00 71 00 00 00	call 113
     446:	61 a1 f0 ff 00 00 00 00	r1 = *(u32 *)(r10 - 16)
     447:	63 16 10 00 00 00 00 00	*(u32 *)(r6 + 16) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     448:	85 00 00 00 08 00 00 00	call 8
     449:	63 06 14 00 00 00 00 00	*(u32 *)(r6 + 20) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     450:	85 00 00 00 0e 00 00 00	call 14
     451:	57 00 00 00 ff ff 00 00	r0 &= 65535
     452:	63 06 18 00 00 00 00 00	*(u32 *)(r6 + 24) = r0
     453:	bf a8 00 00 00 00 00 00	r8 = r10
     454:	07 08 00 00 f0 ff ff ff	r8 += -16
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     455:	bf 81 00 00 00 00 00 00	r1 = r8
     456:	b7 02 00 00 08 00 00 00	r2 = 8
     457:	bf 93 00 00 00 00 00 00	r3 = r9
     458:	85 00 00 00 71 00 00 00	call 113
     459:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     460:	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 16)
     461:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     462:	bf 81 00 00 00 00 00 00	r1 = r8
     463:	b7 02 00 00 08 00 00 00	r2 = 8
     464:	85 00 00 00 71 00 00 00	call 113
     465:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     466:	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 16)
     467:	0f 13 00 00 00 00 00 00	r3 += r1
     468:	bf a1 00 00 00 00 00 00	r1 = r10
     469:	07 01 00 00 fc ff ff ff	r1 += -4
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     470:	b7 02 00 00 04 00 00 00	r2 = 4
     471:	85 00 00 00 71 00 00 00	call 113
     472:	61 a1 fc ff 00 00 00 00	r1 = *(u32 *)(r10 - 4)
;     if (netns == 0) {
     473:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB11_3>
     474:	b7 01 00 00 18 00 00 00	r1 = 24
     475:	bf 73 00 00 00 00 00 00	r3 = r7
     476:	0f 13 00 00 00 00 00 00	r3 += r1
     477:	bf a1 00 00 00 00 00 00	r1 = r10
     478:	07 01 00 00 f0 ff ff ff	r1 += -16
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     479:	b7 02 00 00 08 00 00 00	r2 = 8
     480:	85 00 00 00 71 00 00 00	call 113
     481:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     482:	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 16)
;         if (sk != NULL)
     483:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB11_3>
     484:	b7 01 00 00 30 00 00 00	r1 = 48
     485:	0f 13 00 00 00 00 00 00	r3 += r1
     486:	bf a1 00 00 00 00 00 00	r1 = r10
     487:	07 01 00 00 f0 ff ff ff	r1 += -16
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     488:	b7 02 00 00 08 00 00 00	r2 = 8
     489:	85 00 00 00 71 00 00 00	call 113
     490:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     491:	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 16)
     492:	0f 13 00 00 00 00 00 00	r3 += r1
     493:	bf a1 00 00 00 00 00 00	r1 = r10
     494:	07 01 00 00 fc ff ff ff	r1 += -4
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     495:	b7 02 00 00 04 00 00 00	r2 = 4
     496:	85 00 00 00 71 00 00 00	call 113
     497:	61 a1 fc ff 00 00 00 00	r1 = *(u32 *)(r10 - 4)

0000000000000f90 <LBB11_3>:
;     pkt_info->netns = get_netns(skb);
     498:	63 16 1c 00 00 00 00 00	*(u32 *)(r6 + 28) = r1
     499:	b7 01 00 00 80 00 00 00	r1 = 128
     500:	0f 17 00 00 00 00 00 00	r7 += r1
     501:	b7 08 00 00 00 00 00 00	r8 = 0
;     union ___skb_pkt_type type = {};
     502:	73 8a f0 ff 00 00 00 00	*(u8 *)(r10 - 16) = r8
     503:	bf a1 00 00 00 00 00 00	r1 = r10
     504:	07 01 00 00 f0 ff ff ff	r1 += -16
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     505:	b7 02 00 00 01 00 00 00	r2 = 1
     506:	bf 73 00 00 00 00 00 00	r3 = r7
     507:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     508:	71 a1 f0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 16)
;     pkt_info->ifname[0] = 0;
     509:	73 86 00 00 00 00 00 00	*(u8 *)(r6 + 0) = r8
;     return type.pkt_type;
     510:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     511:	73 16 20 00 00 00 00 00	*(u8 *)(r6 + 32) = r1
     512:	b7 01 00 00 00 00 00 00	r1 = 0
     513:	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 24)
     514:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     515:	bf 61 00 00 00 00 00 00	r1 = r6
     516:	b7 02 00 00 10 00 00 00	r2 = 16
     517:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     518:	71 61 00 00 00 00 00 00	r1 = *(u8 *)(r6 + 0)
     519:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB11_5>
     520:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     521:	73 16 02 00 00 00 00 00	*(u8 *)(r6 + 2) = r1
     522:	b7 01 00 00 69 00 00 00	r1 = 105
     523:	73 16 01 00 00 00 00 00	*(u8 *)(r6 + 1) = r1
     524:	b7 01 00 00 6e 00 00 00	r1 = 110
     525:	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0) = r1

0000000000001070 <LBB11_5>:
; }
     526:	95 00 00 00 00 00 00 00	exit

0000000000001078 <set_ether_info>:
; INLINE void set_ether_info(struct sk_buff *skb, struct l2_info_t *l2_info) {
     527:	bf 26 00 00 00 00 00 00	r6 = r2
     528:	bf 17 00 00 00 00 00 00	r7 = r1
     529:	b7 01 00 00 c0 00 00 00	r1 = 192
     530:	bf 73 00 00 00 00 00 00	r3 = r7
     531:	0f 13 00 00 00 00 00 00	r3 += r1
     532:	bf a1 00 00 00 00 00 00	r1 = r10
     533:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     534:	b7 02 00 00 08 00 00 00	r2 = 8
     535:	85 00 00 00 71 00 00 00	call 113
     536:	b7 01 00 00 b6 00 00 00	r1 = 182
     537:	0f 17 00 00 00 00 00 00	r7 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     538:	79 a8 f8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 8)
     539:	bf a1 00 00 00 00 00 00	r1 = r10
     540:	07 01 00 00 f6 ff ff ff	r1 += -10
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     541:	b7 02 00 00 02 00 00 00	r2 = 2
     542:	bf 73 00 00 00 00 00 00	r3 = r7
     543:	85 00 00 00 71 00 00 00	call 113
     544:	69 a1 f6 ff 00 00 00 00	r1 = *(u16 *)(r10 - 10)
;     return head + mac_header;
     545:	0f 18 00 00 00 00 00 00	r8 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     546:	bf 61 00 00 00 00 00 00	r1 = r6
     547:	b7 02 00 00 06 00 00 00	r2 = 6
     548:	bf 83 00 00 00 00 00 00	r3 = r8
     549:	85 00 00 00 04 00 00 00	call 4
; }
     550:	95 00 00 00 00 00 00 00	exit

0000000000001138 <set_ipv4_info>:
; INLINE void set_ipv4_info(struct sk_buff *skb, struct l3_info_t *l3_info) {
     551:	bf 26 00 00 00 00 00 00	r6 = r2
     552:	bf 18 00 00 00 00 00 00	r8 = r1
     553:	b7 01 00 00 c0 00 00 00	r1 = 192
     554:	bf 83 00 00 00 00 00 00	r3 = r8
     555:	0f 13 00 00 00 00 00 00	r3 += r1
     556:	bf a1 00 00 00 00 00 00	r1 = r10
     557:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     558:	b7 02 00 00 08 00 00 00	r2 = 8
     559:	85 00 00 00 71 00 00 00	call 113
     560:	b7 01 00 00 b6 00 00 00	r1 = 182
     561:	bf 83 00 00 00 00 00 00	r3 = r8
     562:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     563:	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 8)
     564:	bf a1 00 00 00 00 00 00	r1 = r10
     565:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     566:	b7 02 00 00 02 00 00 00	r2 = 2
     567:	85 00 00 00 71 00 00 00	call 113
     568:	b7 01 00 00 b4 00 00 00	r1 = 180
     569:	0f 18 00 00 00 00 00 00	r8 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     570:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     571:	bf a1 00 00 00 00 00 00	r1 = r10
     572:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     573:	b7 02 00 00 02 00 00 00	r2 = 2
     574:	bf 83 00 00 00 00 00 00	r3 = r8
     575:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     576:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     577:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     578:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB13_2>
     579:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001220 <LBB13_2>:
;     return head + network_header;
     580:	57 09 00 00 ff ff 00 00	r9 &= 65535
     581:	0f 97 00 00 00 00 00 00	r7 += r9
     582:	b7 01 00 00 0c 00 00 00	r1 = 12
     583:	bf 73 00 00 00 00 00 00	r3 = r7
     584:	0f 13 00 00 00 00 00 00	r3 += r1
     585:	bf a1 00 00 00 00 00 00	r1 = r10
     586:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     587:	b7 02 00 00 04 00 00 00	r2 = 4
     588:	85 00 00 00 71 00 00 00	call 113
     589:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     590:	63 16 00 00 00 00 00 00	*(u32 *)(r6 + 0) = r1
     591:	b7 01 00 00 10 00 00 00	r1 = 16
     592:	bf 73 00 00 00 00 00 00	r3 = r7
     593:	0f 13 00 00 00 00 00 00	r3 += r1
     594:	bf a1 00 00 00 00 00 00	r1 = r10
     595:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     596:	b7 02 00 00 04 00 00 00	r2 = 4
     597:	85 00 00 00 71 00 00 00	call 113
     598:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     599:	63 16 10 00 00 00 00 00	*(u32 *)(r6 + 16) = r1
     600:	b7 01 00 00 02 00 00 00	r1 = 2
     601:	bf 73 00 00 00 00 00 00	r3 = r7
     602:	0f 13 00 00 00 00 00 00	r3 += r1
     603:	bf a1 00 00 00 00 00 00	r1 = r10
     604:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     605:	b7 02 00 00 02 00 00 00	r2 = 2
     606:	85 00 00 00 71 00 00 00	call 113
     607:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     608:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     609:	6b 16 20 00 00 00 00 00	*(u16 *)(r6 + 32) = r1
     610:	b7 01 00 00 09 00 00 00	r1 = 9
     611:	bf 73 00 00 00 00 00 00	r3 = r7
     612:	0f 13 00 00 00 00 00 00	r3 += r1
     613:	bf a1 00 00 00 00 00 00	r1 = r10
     614:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->l4_proto = BPF_CORE_READ(iph, protocol);
     615:	b7 02 00 00 01 00 00 00	r2 = 1
     616:	85 00 00 00 71 00 00 00	call 113
     617:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     618:	73 16 23 00 00 00 00 00	*(u8 *)(r6 + 35) = r1
     619:	bf a1 00 00 00 00 00 00	r1 = r10
     620:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     621:	b7 02 00 00 01 00 00 00	r2 = 1
     622:	bf 73 00 00 00 00 00 00	r3 = r7
     623:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     624:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     625:	77 01 00 00 04 00 00 00	r1 >>= 4
;     l3_info->ip_version = get_ip_version(iph);
     626:	73 16 22 00 00 00 00 00	*(u8 *)(r6 + 34) = r1
; }
     627:	95 00 00 00 00 00 00 00	exit

00000000000013a0 <set_ipv6_info>:
; INLINE void set_ipv6_info(struct sk_buff *skb, struct l3_info_t *l3_info) {
     628:	bf 26 00 00 00 00 00 00	r6 = r2
     629:	bf 18 00 00 00 00 00 00	r8 = r1
     630:	b7 01 00 00 c0 00 00 00	r1 = 192
     631:	bf 83 00 00 00 00 00 00	r3 = r8
     632:	0f 13 00 00 00 00 00 00	r3 += r1
     633:	bf a1 00 00 00 00 00 00	r1 = r10
     634:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     635:	b7 02 00 00 08 00 00 00	r2 = 8
     636:	85 00 00 00 71 00 00 00	call 113
     637:	b7 01 00 00 b6 00 00 00	r1 = 182
     638:	bf 83 00 00 00 00 00 00	r3 = r8
     639:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     640:	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 8)
     641:	bf a1 00 00 00 00 00 00	r1 = r10
     642:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     643:	b7 02 00 00 02 00 00 00	r2 = 2
     644:	85 00 00 00 71 00 00 00	call 113
     645:	b7 01 00 00 b4 00 00 00	r1 = 180
     646:	0f 18 00 00 00 00 00 00	r8 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     647:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     648:	bf a1 00 00 00 00 00 00	r1 = r10
     649:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     650:	b7 02 00 00 02 00 00 00	r2 = 2
     651:	bf 83 00 00 00 00 00 00	r3 = r8
     652:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     653:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     654:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     655:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB14_2>
     656:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001488 <LBB14_2>:
;     return head + network_header;
     657:	57 09 00 00 ff ff 00 00	r9 &= 65535
     658:	0f 97 00 00 00 00 00 00	r7 += r9
     659:	b7 01 00 00 08 00 00 00	r1 = 8
     660:	bf 73 00 00 00 00 00 00	r3 = r7
     661:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     662:	bf 61 00 00 00 00 00 00	r1 = r6
     663:	b7 02 00 00 10 00 00 00	r2 = 16
     664:	85 00 00 00 04 00 00 00	call 4
     665:	b7 01 00 00 18 00 00 00	r1 = 24
     666:	bf 73 00 00 00 00 00 00	r3 = r7
     667:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     668:	bf 61 00 00 00 00 00 00	r1 = r6
     669:	07 01 00 00 10 00 00 00	r1 += 16
     670:	b7 02 00 00 10 00 00 00	r2 = 16
     671:	85 00 00 00 04 00 00 00	call 4
     672:	b7 01 00 00 04 00 00 00	r1 = 4
     673:	bf 73 00 00 00 00 00 00	r3 = r7
     674:	0f 13 00 00 00 00 00 00	r3 += r1
     675:	bf a1 00 00 00 00 00 00	r1 = r10
     676:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     677:	b7 02 00 00 02 00 00 00	r2 = 2
     678:	85 00 00 00 71 00 00 00	call 113
     679:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     680:	6b 16 20 00 00 00 00 00	*(u16 *)(r6 + 32) = r1
     681:	b7 01 00 00 06 00 00 00	r1 = 6
     682:	bf 73 00 00 00 00 00 00	r3 = r7
     683:	0f 13 00 00 00 00 00 00	r3 += r1
     684:	bf a1 00 00 00 00 00 00	r1 = r10
     685:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->l4_proto = BPF_CORE_READ(iph, nexthdr);
     686:	b7 02 00 00 01 00 00 00	r2 = 1
     687:	85 00 00 00 71 00 00 00	call 113
     688:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     689:	73 16 23 00 00 00 00 00	*(u8 *)(r6 + 35) = r1
     690:	bf a1 00 00 00 00 00 00	r1 = r10
     691:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     692:	b7 02 00 00 01 00 00 00	r2 = 1
     693:	bf 73 00 00 00 00 00 00	r3 = r7
     694:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     695:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     696:	77 01 00 00 04 00 00 00	r1 >>= 4
;     l3_info->ip_version = get_ip_version(iph);
     697:	73 16 22 00 00 00 00 00	*(u8 *)(r6 + 34) = r1
; }
     698:	95 00 00 00 00 00 00 00	exit

00000000000015d8 <set_tcp_info>:
; INLINE void set_tcp_info(struct sk_buff *skb, struct l4_info_t *l4_info) {
     699:	bf 26 00 00 00 00 00 00	r6 = r2
     700:	bf 18 00 00 00 00 00 00	r8 = r1
     701:	b7 01 00 00 c0 00 00 00	r1 = 192
     702:	bf 83 00 00 00 00 00 00	r3 = r8
     703:	0f 13 00 00 00 00 00 00	r3 += r1
     704:	bf a1 00 00 00 00 00 00	r1 = r10
     705:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     706:	b7 02 00 00 08 00 00 00	r2 = 8
     707:	85 00 00 00 71 00 00 00	call 113
     708:	b7 01 00 00 b6 00 00 00	r1 = 182
     709:	bf 83 00 00 00 00 00 00	r3 = r8
     710:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     711:	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 8)
     712:	bf a1 00 00 00 00 00 00	r1 = r10
     713:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     714:	b7 02 00 00 02 00 00 00	r2 = 2
     715:	85 00 00 00 71 00 00 00	call 113
     716:	b7 01 00 00 b4 00 00 00	r1 = 180
     717:	0f 18 00 00 00 00 00 00	r8 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     718:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     719:	bf a1 00 00 00 00 00 00	r1 = r10
     720:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     721:	b7 02 00 00 02 00 00 00	r2 = 2
     722:	bf 83 00 00 00 00 00 00	r3 = r8
     723:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     724:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     725:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     726:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB15_2>
     727:	bf 19 00 00 00 00 00 00	r9 = r1

00000000000016c0 <LBB15_2>:
;     return head + network_header;
     728:	57 09 00 00 ff ff 00 00	r9 &= 65535
     729:	0f 97 00 00 00 00 00 00	r7 += r9
     730:	bf a1 00 00 00 00 00 00	r1 = r10
     731:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     732:	b7 02 00 00 01 00 00 00	r2 = 1
     733:	bf 73 00 00 00 00 00 00	r3 = r7
     734:	85 00 00 00 04 00 00 00	call 4
     735:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     736:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     737:	57 02 00 00 f0 00 00 00	r2 &= 240
     738:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB15_4>
     739:	bf a1 00 00 00 00 00 00	r1 = r10
     740:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     741:	b7 02 00 00 01 00 00 00	r2 = 1
     742:	bf 73 00 00 00 00 00 00	r3 = r7
     743:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     744:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     745:	67 01 00 00 02 00 00 00	r1 <<= 2
     746:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001758 <LBB15_4>:
;     return l3_header + transport_size;
     747:	0f 17 00 00 00 00 00 00	r7 += r1
     748:	b7 01 00 00 00 00 00 00	r1 = 0
     749:	bf 73 00 00 00 00 00 00	r3 = r7
     750:	0f 13 00 00 00 00 00 00	r3 += r1
     751:	bf a1 00 00 00 00 00 00	r1 = r10
     752:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     753:	b7 02 00 00 02 00 00 00	r2 = 2
     754:	85 00 00 00 71 00 00 00	call 113
     755:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     756:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     757:	6b 16 00 00 00 00 00 00	*(u16 *)(r6 + 0) = r1
     758:	b7 01 00 00 02 00 00 00	r1 = 2
     759:	bf 73 00 00 00 00 00 00	r3 = r7
     760:	0f 13 00 00 00 00 00 00	r3 += r1
     761:	bf a1 00 00 00 00 00 00	r1 = r10
     762:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     763:	b7 02 00 00 02 00 00 00	r2 = 2
     764:	85 00 00 00 71 00 00 00	call 113
     765:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     766:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     767:	6b 16 02 00 00 00 00 00	*(u16 *)(r6 + 2) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     768:	07 07 00 00 0c 00 00 00	r7 += 12
     769:	07 06 00 00 04 00 00 00	r6 += 4
     770:	bf 61 00 00 00 00 00 00	r1 = r6
     771:	b7 02 00 00 02 00 00 00	r2 = 2
     772:	bf 73 00 00 00 00 00 00	r3 = r7
     773:	85 00 00 00 04 00 00 00	call 4
; }
     774:	95 00 00 00 00 00 00 00	exit

0000000000001838 <set_udp_info>:
; INLINE void set_udp_info(struct sk_buff *skb, struct l4_info_t *l4_info) {
     775:	bf 26 00 00 00 00 00 00	r6 = r2
     776:	bf 18 00 00 00 00 00 00	r8 = r1
     777:	b7 01 00 00 c0 00 00 00	r1 = 192
     778:	bf 83 00 00 00 00 00 00	r3 = r8
     779:	0f 13 00 00 00 00 00 00	r3 += r1
     780:	bf a1 00 00 00 00 00 00	r1 = r10
     781:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     782:	b7 02 00 00 08 00 00 00	r2 = 8
     783:	85 00 00 00 71 00 00 00	call 113
     784:	b7 01 00 00 b6 00 00 00	r1 = 182
     785:	bf 83 00 00 00 00 00 00	r3 = r8
     786:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     787:	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 8)
     788:	bf a1 00 00 00 00 00 00	r1 = r10
     789:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     790:	b7 02 00 00 02 00 00 00	r2 = 2
     791:	85 00 00 00 71 00 00 00	call 113
     792:	b7 01 00 00 b4 00 00 00	r1 = 180
     793:	0f 18 00 00 00 00 00 00	r8 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     794:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     795:	bf a1 00 00 00 00 00 00	r1 = r10
     796:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     797:	b7 02 00 00 02 00 00 00	r2 = 2
     798:	bf 83 00 00 00 00 00 00	r3 = r8
     799:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     800:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     801:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     802:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB16_2>
     803:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001920 <LBB16_2>:
;     return head + network_header;
     804:	57 09 00 00 ff ff 00 00	r9 &= 65535
     805:	0f 97 00 00 00 00 00 00	r7 += r9
     806:	bf a1 00 00 00 00 00 00	r1 = r10
     807:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     808:	b7 02 00 00 01 00 00 00	r2 = 1
     809:	bf 73 00 00 00 00 00 00	r3 = r7
     810:	85 00 00 00 04 00 00 00	call 4
     811:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     812:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     813:	57 02 00 00 f0 00 00 00	r2 &= 240
     814:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB16_4>
     815:	bf a1 00 00 00 00 00 00	r1 = r10
     816:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     817:	b7 02 00 00 01 00 00 00	r2 = 1
     818:	bf 73 00 00 00 00 00 00	r3 = r7
     819:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     820:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     821:	67 01 00 00 02 00 00 00	r1 <<= 2
     822:	57 01 00 00 3c 00 00 00	r1 &= 60

00000000000019b8 <LBB16_4>:
;     return l3_header + transport_size;
     823:	0f 17 00 00 00 00 00 00	r7 += r1
     824:	b7 01 00 00 00 00 00 00	r1 = 0
     825:	bf 73 00 00 00 00 00 00	r3 = r7
     826:	0f 13 00 00 00 00 00 00	r3 += r1
     827:	bf a1 00 00 00 00 00 00	r1 = r10
     828:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     829:	b7 02 00 00 02 00 00 00	r2 = 2
     830:	85 00 00 00 71 00 00 00	call 113
     831:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     832:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     833:	6b 16 00 00 00 00 00 00	*(u16 *)(r6 + 0) = r1
     834:	b7 01 00 00 02 00 00 00	r1 = 2
     835:	0f 17 00 00 00 00 00 00	r7 += r1
     836:	bf a1 00 00 00 00 00 00	r1 = r10
     837:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     838:	b7 02 00 00 02 00 00 00	r2 = 2
     839:	bf 73 00 00 00 00 00 00	r3 = r7
     840:	85 00 00 00 71 00 00 00	call 113
     841:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     842:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     843:	6b 16 02 00 00 00 00 00	*(u16 *)(r6 + 2) = r1
; }
     844:	95 00 00 00 00 00 00 00	exit

0000000000001a68 <set_icmp_info>:
; INLINE void set_icmp_info(struct sk_buff *skb, struct icmp_info_t *icmp_info) {
     845:	bf 26 00 00 00 00 00 00	r6 = r2
     846:	bf 18 00 00 00 00 00 00	r8 = r1
     847:	b7 01 00 00 c0 00 00 00	r1 = 192
     848:	bf 83 00 00 00 00 00 00	r3 = r8
     849:	0f 13 00 00 00 00 00 00	r3 += r1
     850:	bf a1 00 00 00 00 00 00	r1 = r10
     851:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     852:	b7 02 00 00 08 00 00 00	r2 = 8
     853:	85 00 00 00 71 00 00 00	call 113
     854:	b7 01 00 00 b6 00 00 00	r1 = 182
     855:	bf 83 00 00 00 00 00 00	r3 = r8
     856:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     857:	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 8)
     858:	bf a1 00 00 00 00 00 00	r1 = r10
     859:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     860:	b7 02 00 00 02 00 00 00	r2 = 2
     861:	85 00 00 00 71 00 00 00	call 113
     862:	b7 01 00 00 b4 00 00 00	r1 = 180
     863:	0f 18 00 00 00 00 00 00	r8 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     864:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     865:	bf a1 00 00 00 00 00 00	r1 = r10
     866:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     867:	b7 02 00 00 02 00 00 00	r2 = 2
     868:	bf 83 00 00 00 00 00 00	r3 = r8
     869:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     870:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     871:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     872:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB17_2>
     873:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001b50 <LBB17_2>:
;     return head + network_header;
     874:	57 09 00 00 ff ff 00 00	r9 &= 65535
     875:	0f 97 00 00 00 00 00 00	r7 += r9
     876:	bf a1 00 00 00 00 00 00	r1 = r10
     877:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     878:	b7 02 00 00 01 00 00 00	r2 = 1
     879:	bf 73 00 00 00 00 00 00	r3 = r7
     880:	85 00 00 00 04 00 00 00	call 4
     881:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     882:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     883:	57 02 00 00 f0 00 00 00	r2 &= 240
     884:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB17_4>
     885:	bf a1 00 00 00 00 00 00	r1 = r10
     886:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     887:	b7 02 00 00 01 00 00 00	r2 = 1
     888:	bf 73 00 00 00 00 00 00	r3 = r7
     889:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     890:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     891:	67 01 00 00 02 00 00 00	r1 <<= 2
     892:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001be8 <LBB17_4>:
;     return l3_header + transport_size;
     893:	0f 17 00 00 00 00 00 00	r7 += r1
     894:	bf a8 00 00 00 00 00 00	r8 = r10
     895:	07 08 00 00 f8 ff ff ff	r8 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     896:	bf 81 00 00 00 00 00 00	r1 = r8
     897:	b7 02 00 00 08 00 00 00	r2 = 8
     898:	bf 73 00 00 00 00 00 00	r3 = r7
     899:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     900:	71 81 00 00 00 00 00 00	r1 = *(u8 *)(r8 + 0)
     901:	73 16 04 00 00 00 00 00	*(u8 *)(r6 + 4) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     902:	69 81 04 00 00 00 00 00	r1 = *(u16 *)(r8 + 4)
     903:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     904:	6b 16 00 00 00 00 00 00	*(u16 *)(r6 + 0) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     905:	69 81 06 00 00 00 00 00	r1 = *(u16 *)(r8 + 6)
     906:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     907:	6b 16 02 00 00 00 00 00	*(u16 *)(r6 + 2) = r1
; }
     908:	95 00 00 00 00 00 00 00	exit

0000000000001c68 <set_iptables_info>:
;                               u64 delay, struct iptables_info_t *ipt_info) {
     909:	bf 56 00 00 00 00 00 00	r6 = r5
     910:	bf 49 00 00 00 00 00 00	r9 = r4
     911:	bf 38 00 00 00 00 00 00	r8 = r3
     912:	bf 27 00 00 00 00 00 00	r7 = r2
     913:	bf 13 00 00 00 00 00 00	r3 = r1
     914:	b7 01 00 00 38 00 00 00	r1 = 56
     915:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&ipt_info->tablename, XT_TABLE_MAXNAMELEN, &table->name);
     916:	bf 61 00 00 00 00 00 00	r1 = r6
     917:	b7 02 00 00 20 00 00 00	r2 = 32
     918:	85 00 00 00 04 00 00 00	call 4
     919:	b7 01 00 00 00 00 00 00	r1 = 0
     920:	bf 73 00 00 00 00 00 00	r3 = r7
     921:	0f 13 00 00 00 00 00 00	r3 += r1
     922:	bf a1 00 00 00 00 00 00	r1 = r10
     923:	07 01 00 00 fc ff ff ff	r1 += -4
;     ipt_info->hook = BPF_CORE_READ(state, hook);
     924:	b7 02 00 00 04 00 00 00	r2 = 4
     925:	85 00 00 00 71 00 00 00	call 113
     926:	61 a1 fc ff 00 00 00 00	r1 = *(u32 *)(r10 - 4)
;     ipt_info->delay = delay;
     927:	7b 96 28 00 00 00 00 00	*(u64 *)(r6 + 40) = r9
;     ipt_info->verdict = verdict;
     928:	63 86 24 00 00 00 00 00	*(u32 *)(r6 + 36) = r8
;     ipt_info->hook = BPF_CORE_READ(state, hook);
     929:	63 16 20 00 00 00 00 00	*(u32 *)(r6 + 32) = r1
     930:	b7 01 00 00 04 00 00 00	r1 = 4
     931:	0f 17 00 00 00 00 00 00	r7 += r1
     932:	bf a1 00 00 00 00 00 00	r1 = r10
     933:	07 01 00 00 fb ff ff ff	r1 += -5
;     ipt_info->pf = BPF_CORE_READ(state, pf);
     934:	b7 02 00 00 01 00 00 00	r2 = 1
     935:	bf 73 00 00 00 00 00 00	r3 = r7
     936:	85 00 00 00 71 00 00 00	call 113
     937:	71 a1 fb ff 00 00 00 00	r1 = *(u8 *)(r10 - 5)
     938:	73 16 30 00 00 00 00 00	*(u8 *)(r6 + 48) = r1
; }
     939:	95 00 00 00 00 00 00 00	exit

0000000000001d60 <filter_l3_and_l4_info>:
; INLINE bool filter_l3_and_l4_info(struct config *cfg, struct sk_buff *skb) {
     940:	bf 26 00 00 00 00 00 00	r6 = r2
;     u16 icmpid = cfg->icmpid;
     941:	69 12 0e 00 00 00 00 00	r2 = *(u16 *)(r1 + 14)
;     u16 port = cfg->port;
     942:	7b 2a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r2
     943:	69 12 0c 00 00 00 00 00	r2 = *(u16 *)(r1 + 12)
;     u8 proto = cfg->proto;
     944:	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r2
     945:	71 12 12 00 00 00 00 00	r2 = *(u8 *)(r1 + 18)
;     u32 addr = cfg->ip;
     946:	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r2
     947:	61 19 08 00 00 00 00 00	r9 = *(u32 *)(r1 + 8)
     948:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     949:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     950:	b7 01 00 00 c0 00 00 00	r1 = 192
     951:	bf 63 00 00 00 00 00 00	r3 = r6
     952:	0f 13 00 00 00 00 00 00	r3 += r1
     953:	bf a1 00 00 00 00 00 00	r1 = r10
     954:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     955:	b7 02 00 00 08 00 00 00	r2 = 8
     956:	85 00 00 00 71 00 00 00	call 113
     957:	b7 01 00 00 b6 00 00 00	r1 = 182
     958:	bf 63 00 00 00 00 00 00	r3 = r6
     959:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     960:	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 8)
     961:	bf a1 00 00 00 00 00 00	r1 = r10
     962:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     963:	b7 02 00 00 02 00 00 00	r2 = 2
     964:	85 00 00 00 71 00 00 00	call 113
     965:	b7 01 00 00 b4 00 00 00	r1 = 180
     966:	bf 63 00 00 00 00 00 00	r3 = r6
     967:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     968:	69 a8 f8 ff 00 00 00 00	r8 = *(u16 *)(r10 - 8)
     969:	bf a1 00 00 00 00 00 00	r1 = r10
     970:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     971:	b7 02 00 00 02 00 00 00	r2 = 2
     972:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     973:	07 08 00 00 0e 00 00 00	r8 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     974:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     975:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB19_2>
     976:	bf 18 00 00 00 00 00 00	r8 = r1

0000000000001e88 <LBB19_2>:
;     return head + network_header;
     977:	57 08 00 00 ff ff 00 00	r8 &= 65535
     978:	0f 87 00 00 00 00 00 00	r7 += r8
     979:	bf a1 00 00 00 00 00 00	r1 = r10
     980:	07 01 00 00 f8 ff ff ff	r1 += -8
     981:	b7 08 00 00 01 00 00 00	r8 = 1
;     bpf_probe_read(&first_byte, 1, hdr);
     982:	b7 02 00 00 01 00 00 00	r2 = 1
     983:	bf 73 00 00 00 00 00 00	r3 = r7
     984:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     985:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     986:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     987:	15 01 18 00 06 00 00 00	if r1 == 6 goto +24 <LBB19_9>
     988:	55 01 f0 00 04 00 00 00	if r1 != 4 goto +240 <LBB19_50>
;         if (addr != 0) {
     989:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB19_11>
     990:	b7 01 00 00 0c 00 00 00	r1 = 12
     991:	bf 73 00 00 00 00 00 00	r3 = r7
     992:	0f 13 00 00 00 00 00 00	r3 += r1
     993:	bf a1 00 00 00 00 00 00	r1 = r10
     994:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     995:	b7 02 00 00 04 00 00 00	r2 = 4
     996:	85 00 00 00 71 00 00 00	call 113
     997:	b7 01 00 00 10 00 00 00	r1 = 16
     998:	0f 17 00 00 00 00 00 00	r7 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     999:	61 a6 f8 ff 00 00 00 00	r6 = *(u32 *)(r10 - 8)
    1000:	bf a1 00 00 00 00 00 00	r1 = r10
    1001:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
    1002:	b7 02 00 00 04 00 00 00	r2 = 4
    1003:	bf 73 00 00 00 00 00 00	r3 = r7
    1004:	85 00 00 00 71 00 00 00	call 113
    1005:	b7 01 00 00 01 00 00 00	r1 = 1
    1006:	b7 08 00 00 01 00 00 00	r8 = 1
;             return addr != saddr && addr != daddr;
    1007:	5d 69 01 00 00 00 00 00	if r9 != r6 goto +1 <LBB19_7>
    1008:	b7 08 00 00 00 00 00 00	r8 = 0

0000000000001f88 <LBB19_7>:
;             daddr = BPF_CORE_READ(iph, daddr);
    1009:	61 a2 f8 ff 00 00 00 00	r2 = *(u32 *)(r10 - 8)
;             return addr != saddr && addr != daddr;
    1010:	5d 29 d9 00 00 00 00 00	if r9 != r2 goto +217 <LBB19_49>
    1011:	05 00 d7 00 00 00 00 00	goto +215 <LBB19_48>

0000000000001fa0 <LBB19_9>:
    1012:	b7 01 00 00 06 00 00 00	r1 = 6
    1013:	0f 17 00 00 00 00 00 00	r7 += r1
    1014:	bf a1 00 00 00 00 00 00	r1 = r10
    1015:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
    1016:	b7 02 00 00 01 00 00 00	r2 = 1
    1017:	bf 73 00 00 00 00 00 00	r3 = r7
    1018:	85 00 00 00 04 00 00 00	call 4
    1019:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
    1020:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
    1021:	b7 09 00 00 00 00 00 00	r9 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
    1022:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB19_13>
    1023:	b7 09 00 00 80 00 00 00	r9 = 128
    1024:	b7 03 00 00 81 00 00 00	r3 = 129
    1025:	b7 01 00 00 3a 00 00 00	r1 = 58
    1026:	05 00 0d 00 00 00 00 00	goto +13 <LBB19_13>

0000000000002018 <LBB19_11>:
    1027:	b7 01 00 00 09 00 00 00	r1 = 9
    1028:	0f 17 00 00 00 00 00 00	r7 += r1
    1029:	bf a1 00 00 00 00 00 00	r1 = r10
    1030:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
    1031:	b7 02 00 00 01 00 00 00	r2 = 1
    1032:	bf 73 00 00 00 00 00 00	r3 = r7
    1033:	85 00 00 00 04 00 00 00	call 4
    1034:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
    1035:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
    1036:	b7 09 00 00 00 00 00 00	r9 = 0
;         if (l4_proto == IPPROTO_ICMP) {
    1037:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB19_13>
    1038:	b7 09 00 00 08 00 00 00	r9 = 8
    1039:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000002080 <LBB19_13>:
;     if (proto != 0 && proto != l4_proto)
    1040:	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 24)
    1041:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB19_15>
    1042:	5d 12 ba 00 00 00 00 00	if r2 != r1 goto +186 <LBB19_50>

0000000000002098 <LBB19_15>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
    1043:	65 01 4f 00 10 00 00 00	if r1 s> 16 goto +79 <LBB19_30>
    1044:	15 01 50 00 01 00 00 00	if r1 == 1 goto +80 <LBB19_32>
    1045:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB19_18>
    1046:	05 00 b6 00 00 00 00 00	goto +182 <LBB19_50>

00000000000020b8 <LBB19_18>:
    1047:	b7 01 00 00 c0 00 00 00	r1 = 192
    1048:	bf 63 00 00 00 00 00 00	r3 = r6
    1049:	0f 13 00 00 00 00 00 00	r3 += r1
    1050:	bf a1 00 00 00 00 00 00	r1 = r10
    1051:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    1052:	b7 02 00 00 08 00 00 00	r2 = 8
    1053:	85 00 00 00 71 00 00 00	call 113
    1054:	b7 01 00 00 b6 00 00 00	r1 = 182
    1055:	bf 63 00 00 00 00 00 00	r3 = r6
    1056:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    1057:	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 8)
    1058:	bf a1 00 00 00 00 00 00	r1 = r10
    1059:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    1060:	b7 02 00 00 02 00 00 00	r2 = 2
    1061:	85 00 00 00 71 00 00 00	call 113
    1062:	b7 01 00 00 b4 00 00 00	r1 = 180
    1063:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    1064:	69 a8 f8 ff 00 00 00 00	r8 = *(u16 *)(r10 - 8)
    1065:	bf a1 00 00 00 00 00 00	r1 = r10
    1066:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    1067:	b7 02 00 00 02 00 00 00	r2 = 2
    1068:	bf 63 00 00 00 00 00 00	r3 = r6
    1069:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    1070:	07 08 00 00 0e 00 00 00	r8 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    1071:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    1072:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB19_20>
    1073:	bf 18 00 00 00 00 00 00	r8 = r1

0000000000002190 <LBB19_20>:
;     return head + network_header;
    1074:	57 08 00 00 ff ff 00 00	r8 &= 65535
    1075:	0f 87 00 00 00 00 00 00	r7 += r8
    1076:	bf a1 00 00 00 00 00 00	r1 = r10
    1077:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    1078:	b7 02 00 00 01 00 00 00	r2 = 1
    1079:	bf 73 00 00 00 00 00 00	r3 = r7
    1080:	85 00 00 00 04 00 00 00	call 4
    1081:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
    1082:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
    1083:	57 02 00 00 f0 00 00 00	r2 &= 240
    1084:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB19_22>
    1085:	bf a1 00 00 00 00 00 00	r1 = r10
    1086:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    1087:	b7 02 00 00 01 00 00 00	r2 = 1
    1088:	bf 73 00 00 00 00 00 00	r3 = r7
    1089:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
    1090:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    1091:	67 01 00 00 02 00 00 00	r1 <<= 2
    1092:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000002228 <LBB19_22>:
;     return l3_header + transport_size;
    1093:	0f 17 00 00 00 00 00 00	r7 += r1

0000000000002230 <LBB19_23>:
    1094:	79 a8 e0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 32)
;     if (port != 0) {
    1095:	bf 82 00 00 00 00 00 00	r2 = r8
    1096:	15 02 5c 00 00 00 00 00	if r2 == 0 goto +92 <LBB19_38>
;         if (l4_proto == IPPROTO_TCP) {
    1097:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
    1098:	15 02 6a 00 11 00 00 00	if r2 == 17 goto +106 <LBB19_45>
    1099:	55 02 59 00 06 00 00 00	if r2 != 6 goto +89 <LBB19_38>
    1100:	b7 01 00 00 00 00 00 00	r1 = 0
    1101:	bf 73 00 00 00 00 00 00	r3 = r7
    1102:	0f 13 00 00 00 00 00 00	r3 += r1
    1103:	bf a1 00 00 00 00 00 00	r1 = r10
    1104:	07 01 00 00 f4 ff ff ff	r1 += -12
;             sport = BPF_CORE_READ(th, source);
    1105:	b7 02 00 00 02 00 00 00	r2 = 2
    1106:	85 00 00 00 71 00 00 00	call 113
    1107:	b7 01 00 00 02 00 00 00	r1 = 2
    1108:	0f 17 00 00 00 00 00 00	r7 += r1
;             sport = BPF_CORE_READ(th, source);
    1109:	69 a6 f4 ff 00 00 00 00	r6 = *(u16 *)(r10 - 12)
    1110:	bf a1 00 00 00 00 00 00	r1 = r10
    1111:	07 01 00 00 f4 ff ff ff	r1 += -12
;             dport = BPF_CORE_READ(th, dest);
    1112:	b7 02 00 00 02 00 00 00	r2 = 2
    1113:	bf 73 00 00 00 00 00 00	r3 = r7
    1114:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
    1115:	bf 82 00 00 00 00 00 00	r2 = r8
    1116:	b7 01 00 00 01 00 00 00	r1 = 1
    1117:	b7 08 00 00 01 00 00 00	r8 = 1
    1118:	5d 62 01 00 00 00 00 00	if r2 != r6 goto +1 <LBB19_28>
    1119:	b7 08 00 00 00 00 00 00	r8 = 0

0000000000002300 <LBB19_28>:
;             dport = BPF_CORE_READ(th, dest);
    1120:	69 a3 f4 ff 00 00 00 00	r3 = *(u16 *)(r10 - 12)
;             return port != sport && port != dport;
    1121:	5d 32 6a 00 00 00 00 00	if r2 != r3 goto +106 <LBB19_49>
    1122:	05 00 68 00 00 00 00 00	goto +104 <LBB19_48>

0000000000002318 <LBB19_30>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
    1123:	15 01 b3 ff 11 00 00 00	if r1 == 17 goto -77 <LBB19_18>
    1124:	55 01 68 00 3a 00 00 00	if r1 != 58 goto +104 <LBB19_50>

0000000000002328 <LBB19_32>:
    1125:	7b 3a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r3
    1126:	b7 01 00 00 c0 00 00 00	r1 = 192
    1127:	bf 63 00 00 00 00 00 00	r3 = r6
    1128:	0f 13 00 00 00 00 00 00	r3 += r1
    1129:	bf a1 00 00 00 00 00 00	r1 = r10
    1130:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    1131:	b7 02 00 00 08 00 00 00	r2 = 8
    1132:	85 00 00 00 71 00 00 00	call 113
    1133:	b7 01 00 00 b6 00 00 00	r1 = 182
    1134:	bf 63 00 00 00 00 00 00	r3 = r6
    1135:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    1136:	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 8)
    1137:	bf a1 00 00 00 00 00 00	r1 = r10
    1138:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    1139:	b7 02 00 00 02 00 00 00	r2 = 2
    1140:	85 00 00 00 71 00 00 00	call 113
    1141:	b7 01 00 00 b4 00 00 00	r1 = 180
    1142:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    1143:	69 a8 f8 ff 00 00 00 00	r8 = *(u16 *)(r10 - 8)
    1144:	bf a1 00 00 00 00 00 00	r1 = r10
    1145:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    1146:	b7 02 00 00 02 00 00 00	r2 = 2
    1147:	bf 63 00 00 00 00 00 00	r3 = r6
    1148:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    1149:	07 08 00 00 0e 00 00 00	r8 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    1150:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    1151:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB19_34>
    1152:	bf 18 00 00 00 00 00 00	r8 = r1

0000000000002408 <LBB19_34>:
;     return head + network_header;
    1153:	57 08 00 00 ff ff 00 00	r8 &= 65535
    1154:	0f 87 00 00 00 00 00 00	r7 += r8
    1155:	bf a1 00 00 00 00 00 00	r1 = r10
    1156:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    1157:	b7 02 00 00 01 00 00 00	r2 = 1
    1158:	bf 73 00 00 00 00 00 00	r3 = r7
    1159:	85 00 00 00 04 00 00 00	call 4
    1160:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
    1161:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
    1162:	57 02 00 00 f0 00 00 00	r2 &= 240
    1163:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB19_36>
    1164:	bf a1 00 00 00 00 00 00	r1 = r10
    1165:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    1166:	b7 02 00 00 01 00 00 00	r2 = 1
    1167:	bf 73 00 00 00 00 00 00	r3 = r7
    1168:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
    1169:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    1170:	67 01 00 00 02 00 00 00	r1 <<= 2
    1171:	57 01 00 00 3c 00 00 00	r1 &= 60

00000000000024a0 <LBB19_36>:
;     return l3_header + transport_size;
    1172:	0f 17 00 00 00 00 00 00	r7 += r1
    1173:	bf a6 00 00 00 00 00 00	r6 = r10
    1174:	07 06 00 00 f8 ff ff ff	r6 += -8
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
    1175:	bf 61 00 00 00 00 00 00	r1 = r6
    1176:	b7 02 00 00 08 00 00 00	r2 = 8
    1177:	bf 73 00 00 00 00 00 00	r3 = r7
    1178:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
    1179:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
    1180:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
    1181:	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 48)
    1182:	1d 29 a7 ff 00 00 00 00	if r9 == r2 goto -89 <LBB19_23>
    1183:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
    1184:	07 02 00 00 f8 ff ff ff	r2 += -8
    1185:	b7 08 00 00 01 00 00 00	r8 = 1
    1186:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
    1187:	1d 23 a2 ff 00 00 00 00	if r3 == r2 goto -94 <LBB19_23>
    1188:	05 00 28 00 00 00 00 00	goto +40 <LBB19_50>

0000000000002528 <LBB19_38>:
;     if (proto != 0 && proto != l4_proto)
    1189:	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 24)
;     if (proto != 0 && icmpid != 0) {
    1190:	15 02 0c 00 00 00 00 00	if r2 == 0 goto +12 <LBB19_44>
    1191:	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 40)
;     if (proto != 0 && icmpid != 0) {
    1192:	15 02 0a 00 00 00 00 00	if r2 == 0 goto +10 <LBB19_44>
    1193:	b7 08 00 00 00 00 00 00	r8 = 0
;         if (proto != IPPROTO_ICMP)
    1194:	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 24)
    1195:	55 02 21 00 01 00 00 00	if r2 != 1 goto +33 <LBB19_50>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
    1196:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
    1197:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB19_43>
    1198:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB19_50>

0000000000002578 <LBB19_43>:
;         if (icmpid != ev_icmpid)
    1199:	57 01 00 00 ff ff 00 00	r1 &= 65535
    1200:	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 40)
    1201:	b7 08 00 00 01 00 00 00	r8 = 1
;         if (icmpid != ev_icmpid)
    1202:	5d 12 1a 00 00 00 00 00	if r2 != r1 goto +26 <LBB19_50>

0000000000002598 <LBB19_44>:
    1203:	b7 08 00 00 00 00 00 00	r8 = 0
    1204:	05 00 18 00 00 00 00 00	goto +24 <LBB19_50>

00000000000025a8 <LBB19_45>:
    1205:	b7 01 00 00 00 00 00 00	r1 = 0
    1206:	bf 73 00 00 00 00 00 00	r3 = r7
    1207:	0f 13 00 00 00 00 00 00	r3 += r1
    1208:	bf a1 00 00 00 00 00 00	r1 = r10
    1209:	07 01 00 00 f4 ff ff ff	r1 += -12
;             sport = BPF_CORE_READ(uh, source);
    1210:	b7 02 00 00 02 00 00 00	r2 = 2
    1211:	85 00 00 00 71 00 00 00	call 113
    1212:	b7 01 00 00 02 00 00 00	r1 = 2
    1213:	0f 17 00 00 00 00 00 00	r7 += r1
;             sport = BPF_CORE_READ(uh, source);
    1214:	69 a6 f4 ff 00 00 00 00	r6 = *(u16 *)(r10 - 12)
    1215:	bf a1 00 00 00 00 00 00	r1 = r10
    1216:	07 01 00 00 f4 ff ff ff	r1 += -12
;             dport = BPF_CORE_READ(uh, dest);
    1217:	b7 02 00 00 02 00 00 00	r2 = 2
    1218:	bf 73 00 00 00 00 00 00	r3 = r7
    1219:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
    1220:	bf 82 00 00 00 00 00 00	r2 = r8
    1221:	b7 01 00 00 01 00 00 00	r1 = 1
    1222:	b7 08 00 00 01 00 00 00	r8 = 1
    1223:	5d 62 01 00 00 00 00 00	if r2 != r6 goto +1 <LBB19_47>
    1224:	b7 08 00 00 00 00 00 00	r8 = 0

0000000000002648 <LBB19_47>:
;             dport = BPF_CORE_READ(uh, dest);
    1225:	69 a3 f4 ff 00 00 00 00	r3 = *(u16 *)(r10 - 12)
;             return port != sport && port != dport;
    1226:	5d 32 01 00 00 00 00 00	if r2 != r3 goto +1 <LBB19_49>

0000000000002658 <LBB19_48>:
    1227:	b7 01 00 00 00 00 00 00	r1 = 0

0000000000002660 <LBB19_49>:
    1228:	5f 18 00 00 00 00 00 00	r8 &= r1

0000000000002668 <LBB19_50>:
; }
    1229:	57 08 00 00 01 00 00 00	r8 &= 1
    1230:	bf 80 00 00 00 00 00 00	r0 = r8
    1231:	95 00 00 00 00 00 00 00	exit

0000000000002680 <filter_netns>:
; INLINE bool filter_netns(struct config *cfg, struct sk_buff *skb) {
    1232:	bf 27 00 00 00 00 00 00	r7 = r2
    1233:	bf 16 00 00 00 00 00 00	r6 = r1
    1234:	b7 01 00 00 10 00 00 00	r1 = 16
    1235:	bf 73 00 00 00 00 00 00	r3 = r7
    1236:	0f 13 00 00 00 00 00 00	r3 += r1
    1237:	bf a8 00 00 00 00 00 00	r8 = r10
    1238:	07 08 00 00 f0 ff ff ff	r8 += -16
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    1239:	bf 81 00 00 00 00 00 00	r1 = r8
    1240:	b7 02 00 00 08 00 00 00	r2 = 8
    1241:	85 00 00 00 71 00 00 00	call 113
    1242:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    1243:	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 16)
    1244:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    1245:	bf 81 00 00 00 00 00 00	r1 = r8
    1246:	b7 02 00 00 08 00 00 00	r2 = 8
    1247:	85 00 00 00 71 00 00 00	call 113
    1248:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    1249:	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 16)
    1250:	0f 13 00 00 00 00 00 00	r3 += r1
    1251:	bf a1 00 00 00 00 00 00	r1 = r10
    1252:	07 01 00 00 fc ff ff ff	r1 += -4
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    1253:	b7 02 00 00 04 00 00 00	r2 = 4
    1254:	85 00 00 00 71 00 00 00	call 113
    1255:	61 a1 fc ff 00 00 00 00	r1 = *(u32 *)(r10 - 4)
;     if (netns == 0) {
    1256:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB20_3>
    1257:	b7 01 00 00 18 00 00 00	r1 = 24
    1258:	0f 17 00 00 00 00 00 00	r7 += r1
    1259:	bf a1 00 00 00 00 00 00	r1 = r10
    1260:	07 01 00 00 f0 ff ff ff	r1 += -16
;         struct sock *sk = BPF_CORE_READ(skb, sk);
    1261:	b7 02 00 00 08 00 00 00	r2 = 8
    1262:	bf 73 00 00 00 00 00 00	r3 = r7
    1263:	85 00 00 00 71 00 00 00	call 113
    1264:	b7 00 00 00 00 00 00 00	r0 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
    1265:	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 16)
;         if (sk != NULL)
    1266:	15 03 15 00 00 00 00 00	if r3 == 0 goto +21 <LBB20_7>
    1267:	b7 01 00 00 30 00 00 00	r1 = 48
    1268:	0f 13 00 00 00 00 00 00	r3 += r1
    1269:	bf a1 00 00 00 00 00 00	r1 = r10
    1270:	07 01 00 00 f0 ff ff ff	r1 += -16
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
    1271:	b7 02 00 00 08 00 00 00	r2 = 8
    1272:	85 00 00 00 71 00 00 00	call 113
    1273:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
    1274:	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 16)
    1275:	0f 13 00 00 00 00 00 00	r3 += r1
    1276:	bf a1 00 00 00 00 00 00	r1 = r10
    1277:	07 01 00 00 fc ff ff ff	r1 += -4
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
    1278:	b7 02 00 00 04 00 00 00	r2 = 4
    1279:	85 00 00 00 71 00 00 00	call 113
    1280:	61 a1 fc ff 00 00 00 00	r1 = *(u32 *)(r10 - 4)

0000000000002808 <LBB20_3>:
    1281:	b7 00 00 00 00 00 00 00	r0 = 0
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
    1282:	61 62 00 00 00 00 00 00	r2 = *(u32 *)(r6 + 0)
    1283:	15 02 04 00 00 00 00 00	if r2 == 0 goto +4 <LBB20_7>
    1284:	15 01 03 00 00 00 00 00	if r1 == 0 goto +3 <LBB20_7>
    1285:	b7 00 00 00 01 00 00 00	r0 = 1
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
    1286:	5d 12 01 00 00 00 00 00	if r2 != r1 goto +1 <LBB20_7>
    1287:	b7 00 00 00 00 00 00 00	r0 = 0

0000000000002840 <LBB20_7>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
    1288:	57 00 00 00 01 00 00 00	r0 &= 1
    1289:	95 00 00 00 00 00 00 00	exit

0000000000002850 <filter_pid>:
; INLINE bool filter_pid(struct config *cfg) {
    1290:	bf 16 00 00 00 00 00 00	r6 = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
    1291:	85 00 00 00 0e 00 00 00	call 14
    1292:	bf 01 00 00 00 00 00 00	r1 = r0
;     return cfg->pid != 0 && cfg->pid != pid;
    1293:	77 01 00 00 20 00 00 00	r1 >>= 32
    1294:	61 63 04 00 00 00 00 00	r3 = *(u32 *)(r6 + 4)
    1295:	b7 00 00 00 01 00 00 00	r0 = 1
    1296:	b7 02 00 00 01 00 00 00	r2 = 1
    1297:	5d 13 01 00 00 00 00 00	if r3 != r1 goto +1 <LBB21_2>
    1298:	b7 02 00 00 00 00 00 00	r2 = 0

0000000000002898 <LBB21_2>:
;     return cfg->pid != 0 && cfg->pid != pid;
    1299:	55 03 01 00 00 00 00 00	if r3 != 0 goto +1 <LBB21_4>
    1300:	b7 00 00 00 00 00 00 00	r0 = 0

00000000000028a8 <LBB21_4>:
;     return cfg->pid != 0 && cfg->pid != pid;
    1301:	5f 20 00 00 00 00 00 00	r0 &= r2
    1302:	95 00 00 00 00 00 00 00	exit

00000000000028b8 <filter_dropstack>:
;     return cfg->dropstack == 0;
    1303:	71 11 10 00 00 00 00 00	r1 = *(u8 *)(r1 + 16)
    1304:	b7 00 00 00 01 00 00 00	r0 = 1
;     return cfg->dropstack == 0;
    1305:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB22_2>
    1306:	b7 00 00 00 00 00 00 00	r0 = 0

00000000000028d8 <LBB22_2>:
;     return cfg->dropstack == 0;
    1307:	95 00 00 00 00 00 00 00	exit

00000000000028e0 <filter_callstack>:
;     return cfg->callstack == 0;
    1308:	71 11 11 00 00 00 00 00	r1 = *(u8 *)(r1 + 17)
    1309:	b7 00 00 00 01 00 00 00	r0 = 1
;     return cfg->callstack == 0;
    1310:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB23_2>
    1311:	b7 00 00 00 00 00 00 00	r0 = 0

0000000000002900 <LBB23_2>:
;     return cfg->callstack == 0;
    1312:	95 00 00 00 00 00 00 00	exit

0000000000002908 <do_trace_skb>:
;                          struct pt_regs *ctx, struct sk_buff *skb) {
    1313:	7b 4a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r4
    1314:	bf 29 00 00 00 00 00 00	r9 = r2
    1315:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
    1316:	85 00 00 00 0e 00 00 00	call 14
    1317:	b7 08 00 00 00 00 00 00	r8 = 0
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
    1318:	61 91 04 00 00 00 00 00	r1 = *(u32 *)(r9 + 4)
    1319:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB24_2>
    1320:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
    1321:	5d 01 35 01 00 00 00 00	if r1 != r0 goto +309 <LBB24_86>

0000000000002950 <LBB24_2>:
    1322:	b7 01 00 00 10 00 00 00	r1 = 16
    1323:	79 a7 e0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 32)
    1324:	bf 73 00 00 00 00 00 00	r3 = r7
    1325:	0f 13 00 00 00 00 00 00	r3 += r1
    1326:	bf a6 00 00 00 00 00 00	r6 = r10
    1327:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    1328:	bf 61 00 00 00 00 00 00	r1 = r6
    1329:	b7 02 00 00 08 00 00 00	r2 = 8
    1330:	85 00 00 00 71 00 00 00	call 113
    1331:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    1332:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
    1333:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    1334:	bf 61 00 00 00 00 00 00	r1 = r6
    1335:	b7 02 00 00 08 00 00 00	r2 = 8
    1336:	85 00 00 00 71 00 00 00	call 113
    1337:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    1338:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
    1339:	0f 13 00 00 00 00 00 00	r3 += r1
    1340:	bf a1 00 00 00 00 00 00	r1 = r10
    1341:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    1342:	b7 02 00 00 04 00 00 00	r2 = 4
    1343:	85 00 00 00 71 00 00 00	call 113
    1344:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
    1345:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB24_5>
    1346:	b7 01 00 00 18 00 00 00	r1 = 24
    1347:	bf 73 00 00 00 00 00 00	r3 = r7
    1348:	0f 13 00 00 00 00 00 00	r3 += r1
    1349:	bf a1 00 00 00 00 00 00	r1 = r10
    1350:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
    1351:	b7 02 00 00 08 00 00 00	r2 = 8
    1352:	85 00 00 00 71 00 00 00	call 113
    1353:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
    1354:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB24_8>
    1355:	b7 01 00 00 30 00 00 00	r1 = 48
    1356:	0f 13 00 00 00 00 00 00	r3 += r1
    1357:	bf a1 00 00 00 00 00 00	r1 = r10
    1358:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
    1359:	b7 02 00 00 08 00 00 00	r2 = 8
    1360:	85 00 00 00 71 00 00 00	call 113
    1361:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
    1362:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
    1363:	0f 13 00 00 00 00 00 00	r3 += r1
    1364:	bf a1 00 00 00 00 00 00	r1 = r10
    1365:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
    1366:	b7 02 00 00 04 00 00 00	r2 = 4
    1367:	85 00 00 00 71 00 00 00	call 113
    1368:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000002ac8 <LBB24_5>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
    1369:	61 92 00 00 00 00 00 00	r2 = *(u32 *)(r9 + 0)
    1370:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB24_8>
    1371:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB24_8>
    1372:	5d 12 02 01 00 00 00 00	if r2 != r1 goto +258 <LBB24_86>

0000000000002ae8 <LBB24_8>:
;     u16 icmpid = cfg->icmpid;
    1373:	69 91 0e 00 00 00 00 00	r1 = *(u16 *)(r9 + 14)
;     u16 port = cfg->port;
    1374:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
    1375:	69 91 0c 00 00 00 00 00	r1 = *(u16 *)(r9 + 12)
;     u8 proto = cfg->proto;
    1376:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
    1377:	71 91 12 00 00 00 00 00	r1 = *(u8 *)(r9 + 18)
;     u32 addr = cfg->ip;
    1378:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
    1379:	61 96 08 00 00 00 00 00	r6 = *(u32 *)(r9 + 8)
    1380:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
    1381:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
    1382:	b7 01 00 00 c0 00 00 00	r1 = 192
    1383:	79 a7 e0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 32)
    1384:	bf 73 00 00 00 00 00 00	r3 = r7
    1385:	0f 13 00 00 00 00 00 00	r3 += r1
    1386:	bf a1 00 00 00 00 00 00	r1 = r10
    1387:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    1388:	b7 02 00 00 08 00 00 00	r2 = 8
    1389:	85 00 00 00 71 00 00 00	call 113
    1390:	b7 01 00 00 b6 00 00 00	r1 = 182
    1391:	bf 73 00 00 00 00 00 00	r3 = r7
    1392:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    1393:	79 a8 f8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 8)
    1394:	bf a1 00 00 00 00 00 00	r1 = r10
    1395:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    1396:	b7 02 00 00 02 00 00 00	r2 = 2
    1397:	85 00 00 00 71 00 00 00	call 113
    1398:	b7 01 00 00 b4 00 00 00	r1 = 180
    1399:	bf 73 00 00 00 00 00 00	r3 = r7
    1400:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    1401:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
    1402:	bf a1 00 00 00 00 00 00	r1 = r10
    1403:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    1404:	b7 02 00 00 02 00 00 00	r2 = 2
    1405:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    1406:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    1407:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    1408:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB24_10>
    1409:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000002c10 <LBB24_10>:
;     return head + network_header;
    1410:	57 09 00 00 ff ff 00 00	r9 &= 65535
    1411:	0f 98 00 00 00 00 00 00	r8 += r9
    1412:	bf a1 00 00 00 00 00 00	r1 = r10
    1413:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    1414:	b7 02 00 00 01 00 00 00	r2 = 1
    1415:	bf 83 00 00 00 00 00 00	r3 = r8
    1416:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
    1417:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    1418:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
    1419:	15 01 18 00 06 00 00 00	if r1 == 6 goto +24 <LBB24_17>
    1420:	55 01 d1 00 04 00 00 00	if r1 != 4 goto +209 <LBB24_48>
;         if (addr != 0) {
    1421:	bf 69 00 00 00 00 00 00	r9 = r6
    1422:	15 09 24 00 00 00 00 00	if r9 == 0 goto +36 <LBB24_15>
    1423:	b7 01 00 00 0c 00 00 00	r1 = 12
    1424:	bf 83 00 00 00 00 00 00	r3 = r8
    1425:	0f 13 00 00 00 00 00 00	r3 += r1
    1426:	bf a1 00 00 00 00 00 00	r1 = r10
    1427:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
    1428:	b7 02 00 00 04 00 00 00	r2 = 4
    1429:	85 00 00 00 71 00 00 00	call 113
    1430:	b7 01 00 00 10 00 00 00	r1 = 16
    1431:	0f 18 00 00 00 00 00 00	r8 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
    1432:	61 a7 f8 ff 00 00 00 00	r7 = *(u32 *)(r10 - 8)
    1433:	bf a1 00 00 00 00 00 00	r1 = r10
    1434:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
    1435:	b7 02 00 00 04 00 00 00	r2 = 4
    1436:	bf 83 00 00 00 00 00 00	r3 = r8
    1437:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
    1438:	1d 79 d6 00 00 00 00 00	if r9 == r7 goto +214 <LBB24_51>
    1439:	b7 08 00 00 00 00 00 00	r8 = 0
    1440:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
    1441:	bf 62 00 00 00 00 00 00	r2 = r6
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
    1442:	5d 12 bc 00 00 00 00 00	if r2 != r1 goto +188 <LBB24_86>
    1443:	05 00 d1 00 00 00 00 00	goto +209 <LBB24_51>

0000000000002d20 <LBB24_17>:
    1444:	b7 01 00 00 06 00 00 00	r1 = 6
    1445:	0f 18 00 00 00 00 00 00	r8 += r1
    1446:	bf a1 00 00 00 00 00 00	r1 = r10
    1447:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
    1448:	b7 02 00 00 01 00 00 00	r2 = 1
    1449:	bf 83 00 00 00 00 00 00	r3 = r8
    1450:	85 00 00 00 04 00 00 00	call 4
    1451:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
    1452:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
    1453:	b7 09 00 00 00 00 00 00	r9 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
    1454:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB24_19>
    1455:	b7 09 00 00 80 00 00 00	r9 = 128
    1456:	b7 03 00 00 81 00 00 00	r3 = 129
    1457:	b7 01 00 00 3a 00 00 00	r1 = 58
    1458:	05 00 0d 00 00 00 00 00	goto +13 <LBB24_19>

0000000000002d98 <LBB24_15>:
    1459:	b7 01 00 00 09 00 00 00	r1 = 9
    1460:	0f 18 00 00 00 00 00 00	r8 += r1
    1461:	bf a1 00 00 00 00 00 00	r1 = r10
    1462:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
    1463:	b7 02 00 00 01 00 00 00	r2 = 1
    1464:	bf 83 00 00 00 00 00 00	r3 = r8
    1465:	85 00 00 00 04 00 00 00	call 4
    1466:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
    1467:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
    1468:	b7 09 00 00 00 00 00 00	r9 = 0
;         if (l4_proto == IPPROTO_ICMP) {
    1469:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB24_19>
    1470:	b7 09 00 00 08 00 00 00	r9 = 8
    1471:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000002e00 <LBB24_19>:
;     if (proto != 0 && proto != l4_proto)
    1472:	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 48)
    1473:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB24_21>
    1474:	5d 12 9b 00 00 00 00 00	if r2 != r1 goto +155 <LBB24_48>

0000000000002e18 <LBB24_21>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
    1475:	65 01 4d 00 10 00 00 00	if r1 s> 16 goto +77 <LBB24_24>
    1476:	15 01 4e 00 01 00 00 00	if r1 == 1 goto +78 <LBB24_26>
    1477:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB24_32>
    1478:	05 00 97 00 00 00 00 00	goto +151 <LBB24_48>

0000000000002e38 <LBB24_32>:
    1479:	b7 01 00 00 c0 00 00 00	r1 = 192
    1480:	bf 73 00 00 00 00 00 00	r3 = r7
    1481:	0f 13 00 00 00 00 00 00	r3 += r1
    1482:	bf a1 00 00 00 00 00 00	r1 = r10
    1483:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    1484:	b7 02 00 00 08 00 00 00	r2 = 8
    1485:	85 00 00 00 71 00 00 00	call 113
    1486:	b7 01 00 00 b6 00 00 00	r1 = 182
    1487:	bf 73 00 00 00 00 00 00	r3 = r7
    1488:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    1489:	79 a8 f8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 8)
    1490:	bf a1 00 00 00 00 00 00	r1 = r10
    1491:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    1492:	b7 02 00 00 02 00 00 00	r2 = 2
    1493:	85 00 00 00 71 00 00 00	call 113
    1494:	b7 01 00 00 b4 00 00 00	r1 = 180
    1495:	bf 73 00 00 00 00 00 00	r3 = r7
    1496:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    1497:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
    1498:	bf a1 00 00 00 00 00 00	r1 = r10
    1499:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    1500:	b7 02 00 00 02 00 00 00	r2 = 2
    1501:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    1502:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    1503:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    1504:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB24_34>
    1505:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000002f10 <LBB24_34>:
;     return head + network_header;
    1506:	57 06 00 00 ff ff 00 00	r6 &= 65535
    1507:	0f 68 00 00 00 00 00 00	r8 += r6
    1508:	bf a1 00 00 00 00 00 00	r1 = r10
    1509:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    1510:	b7 02 00 00 01 00 00 00	r2 = 1
    1511:	bf 83 00 00 00 00 00 00	r3 = r8
    1512:	85 00 00 00 04 00 00 00	call 4
    1513:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
    1514:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
    1515:	57 02 00 00 f0 00 00 00	r2 &= 240
    1516:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB24_36>
    1517:	bf a1 00 00 00 00 00 00	r1 = r10
    1518:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    1519:	b7 02 00 00 01 00 00 00	r2 = 1
    1520:	bf 83 00 00 00 00 00 00	r3 = r8
    1521:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
    1522:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    1523:	67 01 00 00 02 00 00 00	r1 <<= 2
    1524:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000002fa8 <LBB24_36>:
;     return l3_header + transport_size;
    1525:	0f 18 00 00 00 00 00 00	r8 += r1

0000000000002fb0 <LBB24_37>:
    1526:	79 a7 c8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 56)
;     if (port != 0) {
    1527:	bf 72 00 00 00 00 00 00	r2 = r7
    1528:	15 02 59 00 00 00 00 00	if r2 == 0 goto +89 <LBB24_42>
;         if (l4_proto == IPPROTO_TCP) {
    1529:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
    1530:	15 02 66 00 11 00 00 00	if r2 == 17 goto +102 <LBB24_49>
    1531:	55 02 56 00 06 00 00 00	if r2 != 6 goto +86 <LBB24_42>
    1532:	b7 01 00 00 00 00 00 00	r1 = 0
    1533:	bf 83 00 00 00 00 00 00	r3 = r8
    1534:	0f 13 00 00 00 00 00 00	r3 += r1
    1535:	bf a1 00 00 00 00 00 00	r1 = r10
    1536:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
    1537:	b7 02 00 00 02 00 00 00	r2 = 2
    1538:	85 00 00 00 71 00 00 00	call 113
    1539:	b7 01 00 00 02 00 00 00	r1 = 2
    1540:	0f 18 00 00 00 00 00 00	r8 += r1
;             sport = BPF_CORE_READ(th, source);
    1541:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
    1542:	bf a1 00 00 00 00 00 00	r1 = r10
    1543:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
    1544:	b7 02 00 00 02 00 00 00	r2 = 2
    1545:	bf 83 00 00 00 00 00 00	r3 = r8
    1546:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
    1547:	bf 71 00 00 00 00 00 00	r1 = r7
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
    1548:	1d 61 68 00 00 00 00 00	if r1 == r6 goto +104 <LBB24_51>
    1549:	b7 08 00 00 00 00 00 00	r8 = 0
    1550:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
    1551:	5d 21 4f 00 00 00 00 00	if r1 != r2 goto +79 <LBB24_86>
    1552:	05 00 64 00 00 00 00 00	goto +100 <LBB24_51>

0000000000003088 <LBB24_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
    1553:	15 01 b5 ff 11 00 00 00	if r1 == 17 goto -75 <LBB24_32>
    1554:	55 01 4b 00 3a 00 00 00	if r1 != 58 goto +75 <LBB24_48>

0000000000003098 <LBB24_26>:
    1555:	7b 3a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r3
    1556:	b7 01 00 00 c0 00 00 00	r1 = 192
    1557:	bf 73 00 00 00 00 00 00	r3 = r7
    1558:	0f 13 00 00 00 00 00 00	r3 += r1
    1559:	bf a1 00 00 00 00 00 00	r1 = r10
    1560:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    1561:	b7 02 00 00 08 00 00 00	r2 = 8
    1562:	85 00 00 00 71 00 00 00	call 113
    1563:	b7 01 00 00 b6 00 00 00	r1 = 182
    1564:	bf 73 00 00 00 00 00 00	r3 = r7
    1565:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    1566:	79 a8 f8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 8)
    1567:	bf a1 00 00 00 00 00 00	r1 = r10
    1568:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    1569:	b7 02 00 00 02 00 00 00	r2 = 2
    1570:	85 00 00 00 71 00 00 00	call 113
    1571:	b7 01 00 00 b4 00 00 00	r1 = 180
    1572:	bf 73 00 00 00 00 00 00	r3 = r7
    1573:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    1574:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
    1575:	bf a1 00 00 00 00 00 00	r1 = r10
    1576:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    1577:	b7 02 00 00 02 00 00 00	r2 = 2
    1578:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    1579:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    1580:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    1581:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB24_28>
    1582:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000003178 <LBB24_28>:
;     return head + network_header;
    1583:	57 06 00 00 ff ff 00 00	r6 &= 65535
    1584:	0f 68 00 00 00 00 00 00	r8 += r6
    1585:	bf a1 00 00 00 00 00 00	r1 = r10
    1586:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    1587:	b7 02 00 00 01 00 00 00	r2 = 1
    1588:	bf 83 00 00 00 00 00 00	r3 = r8
    1589:	85 00 00 00 04 00 00 00	call 4
    1590:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
    1591:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
    1592:	57 02 00 00 f0 00 00 00	r2 &= 240
    1593:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB24_30>
    1594:	bf a1 00 00 00 00 00 00	r1 = r10
    1595:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    1596:	b7 02 00 00 01 00 00 00	r2 = 1
    1597:	bf 83 00 00 00 00 00 00	r3 = r8
    1598:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
    1599:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    1600:	67 01 00 00 02 00 00 00	r1 <<= 2
    1601:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000003210 <LBB24_30>:
;     return l3_header + transport_size;
    1602:	0f 18 00 00 00 00 00 00	r8 += r1
    1603:	bf a6 00 00 00 00 00 00	r6 = r10
    1604:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
    1605:	bf 61 00 00 00 00 00 00	r1 = r6
    1606:	b7 02 00 00 08 00 00 00	r2 = 8
    1607:	bf 83 00 00 00 00 00 00	r3 = r8
    1608:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
    1609:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
    1610:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
    1611:	79 a3 b8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 72)
    1612:	1d 29 a9 ff 00 00 00 00	if r9 == r2 goto -87 <LBB24_37>
    1613:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
    1614:	07 02 00 00 e8 ff ff ff	r2 += -24
    1615:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
    1616:	1d 23 a5 ff 00 00 00 00	if r3 == r2 goto -91 <LBB24_37>
    1617:	05 00 0c 00 00 00 00 00	goto +12 <LBB24_48>

0000000000003290 <LBB24_42>:
;     if (proto != 0 && proto != l4_proto)
    1618:	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 48)
;     if (proto != 0 && icmpid != 0) {
    1619:	15 02 21 00 00 00 00 00	if r2 == 0 goto +33 <LBB24_51>
    1620:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (proto != 0 && icmpid != 0) {
    1621:	15 02 1f 00 00 00 00 00	if r2 == 0 goto +31 <LBB24_51>
    1622:	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 48)
;     if (proto != 0 && icmpid != 0) {
    1623:	55 02 1d 00 01 00 00 00	if r2 != 1 goto +29 <LBB24_51>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
    1624:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
    1625:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB24_47>
    1626:	55 02 1a 00 01 00 00 00	if r2 != 1 goto +26 <LBB24_51>

00000000000032d8 <LBB24_47>:
;         if (icmpid != ev_icmpid)
    1627:	57 01 00 00 ff ff 00 00	r1 &= 65535
    1628:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
    1629:	1d 12 17 00 00 00 00 00	if r2 == r1 goto +23 <LBB24_51>

00000000000032f0 <LBB24_48>:
    1630:	b7 08 00 00 00 00 00 00	r8 = 0

00000000000032f8 <LBB24_86>:
; }
    1631:	bf 80 00 00 00 00 00 00	r0 = r8
    1632:	95 00 00 00 00 00 00 00	exit

0000000000003308 <LBB24_49>:
    1633:	b7 01 00 00 00 00 00 00	r1 = 0
    1634:	bf 83 00 00 00 00 00 00	r3 = r8
    1635:	0f 13 00 00 00 00 00 00	r3 += r1
    1636:	bf a1 00 00 00 00 00 00	r1 = r10
    1637:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
    1638:	b7 02 00 00 02 00 00 00	r2 = 2
    1639:	85 00 00 00 71 00 00 00	call 113
    1640:	b7 01 00 00 02 00 00 00	r1 = 2
    1641:	0f 18 00 00 00 00 00 00	r8 += r1
;             sport = BPF_CORE_READ(uh, source);
    1642:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
    1643:	bf a1 00 00 00 00 00 00	r1 = r10
    1644:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
    1645:	b7 02 00 00 02 00 00 00	r2 = 2
    1646:	bf 83 00 00 00 00 00 00	r3 = r8
    1647:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
    1648:	bf 71 00 00 00 00 00 00	r1 = r7
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
    1649:	1d 61 03 00 00 00 00 00	if r1 == r6 goto +3 <LBB24_51>
    1650:	b7 08 00 00 00 00 00 00	r8 = 0
    1651:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
    1652:	5d 21 ea ff 00 00 00 00	if r1 != r2 goto -22 <LBB24_86>

00000000000033a8 <LBB24_51>:
    1653:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
;     event->flags |= SKBTRACER_EVENT_IF;
    1654:	71 61 34 00 00 00 00 00	r1 = *(u8 *)(r6 + 52)
    1655:	47 01 00 00 01 00 00 00	r1 |= 1
    1656:	73 16 34 00 00 00 00 00	*(u8 *)(r6 + 52) = r1
    1657:	79 a7 e0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 32)
;     ev->skb = (u64)skb;
    1658:	7b 76 20 00 00 00 00 00	*(u64 *)(r6 + 32) = r7
;     ev->start_ns = bpf_ktime_get_ns();
    1659:	85 00 00 00 05 00 00 00	call 5
    1660:	7b 06 28 00 00 00 00 00	*(u64 *)(r6 + 40) = r0
    1661:	b7 01 00 00 10 00 00 00	r1 = 16
    1662:	bf 79 00 00 00 00 00 00	r9 = r7
    1663:	0f 19 00 00 00 00 00 00	r9 += r1
    1664:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
    1665:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
    1666:	b7 02 00 00 08 00 00 00	r2 = 8
    1667:	bf 93 00 00 00 00 00 00	r3 = r9
    1668:	85 00 00 00 71 00 00 00	call 113
    1669:	b7 01 00 00 70 00 00 00	r1 = 112
    1670:	bf 73 00 00 00 00 00 00	r3 = r7
    1671:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
    1672:	79 a8 f8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 8)
    1673:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
    1674:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
    1675:	b7 02 00 00 04 00 00 00	r2 = 4
    1676:	85 00 00 00 71 00 00 00	call 113
    1677:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
    1678:	63 16 4c 00 00 00 00 00	*(u32 *)(r6 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
    1679:	85 00 00 00 08 00 00 00	call 8
    1680:	63 06 50 00 00 00 00 00	*(u32 *)(r6 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
    1681:	85 00 00 00 0e 00 00 00	call 14
    1682:	57 00 00 00 ff ff 00 00	r0 &= 65535
    1683:	63 06 54 00 00 00 00 00	*(u32 *)(r6 + 84) = r0
    1684:	bf a6 00 00 00 00 00 00	r6 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
    1685:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    1686:	bf 61 00 00 00 00 00 00	r1 = r6
    1687:	b7 02 00 00 08 00 00 00	r2 = 8
    1688:	bf 93 00 00 00 00 00 00	r3 = r9
    1689:	bf 79 00 00 00 00 00 00	r9 = r7
    1690:	85 00 00 00 71 00 00 00	call 113
    1691:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    1692:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
    1693:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    1694:	bf 61 00 00 00 00 00 00	r1 = r6
    1695:	b7 02 00 00 08 00 00 00	r2 = 8
    1696:	85 00 00 00 71 00 00 00	call 113
    1697:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    1698:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
    1699:	0f 13 00 00 00 00 00 00	r3 += r1
    1700:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
    1701:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    1702:	b7 02 00 00 04 00 00 00	r2 = 4
    1703:	85 00 00 00 71 00 00 00	call 113
    1704:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
    1705:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB24_54>
    1706:	b7 01 00 00 18 00 00 00	r1 = 24
    1707:	bf 93 00 00 00 00 00 00	r3 = r9
    1708:	0f 13 00 00 00 00 00 00	r3 += r1
    1709:	bf a1 00 00 00 00 00 00	r1 = r10
    1710:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
    1711:	b7 02 00 00 08 00 00 00	r2 = 8
    1712:	85 00 00 00 71 00 00 00	call 113
    1713:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
    1714:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
    1715:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB24_54>
    1716:	b7 01 00 00 30 00 00 00	r1 = 48
    1717:	0f 13 00 00 00 00 00 00	r3 += r1
    1718:	bf a1 00 00 00 00 00 00	r1 = r10
    1719:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
    1720:	b7 02 00 00 08 00 00 00	r2 = 8
    1721:	85 00 00 00 71 00 00 00	call 113
    1722:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
    1723:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
    1724:	0f 13 00 00 00 00 00 00	r3 += r1
    1725:	bf a1 00 00 00 00 00 00	r1 = r10
    1726:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
    1727:	b7 02 00 00 04 00 00 00	r2 = 4
    1728:	85 00 00 00 71 00 00 00	call 113
    1729:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000003610 <LBB24_54>:
    1730:	79 a7 d8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 40)
;     pkt_info->netns = get_netns(skb);
    1731:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
    1732:	b7 01 00 00 80 00 00 00	r1 = 128
    1733:	bf 93 00 00 00 00 00 00	r3 = r9
    1734:	0f 13 00 00 00 00 00 00	r3 += r1
    1735:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
    1736:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
    1737:	bf a1 00 00 00 00 00 00	r1 = r10
    1738:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
    1739:	b7 02 00 00 01 00 00 00	r2 = 1
    1740:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
    1741:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
    1742:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
    1743:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
    1744:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
    1745:	b7 01 00 00 00 00 00 00	r1 = 0
    1746:	0f 18 00 00 00 00 00 00	r8 += r1
;     pkt_info->netns = get_netns(skb);
    1747:	bf 71 00 00 00 00 00 00	r1 = r7
    1748:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
    1749:	b7 02 00 00 10 00 00 00	r2 = 16
    1750:	bf 83 00 00 00 00 00 00	r3 = r8
    1751:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
    1752:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
    1753:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB24_56>
    1754:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
    1755:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
    1756:	b7 01 00 00 69 00 00 00	r1 = 105
    1757:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
    1758:	b7 01 00 00 6e 00 00 00	r1 = 110
    1759:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000003700 <LBB24_56>:
    1760:	b7 01 00 00 c0 00 00 00	r1 = 192
    1761:	bf 98 00 00 00 00 00 00	r8 = r9
    1762:	0f 18 00 00 00 00 00 00	r8 += r1
    1763:	bf a1 00 00 00 00 00 00	r1 = r10
    1764:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    1765:	b7 02 00 00 08 00 00 00	r2 = 8
    1766:	bf 83 00 00 00 00 00 00	r3 = r8
    1767:	85 00 00 00 71 00 00 00	call 113
    1768:	b7 01 00 00 b6 00 00 00	r1 = 182
    1769:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    1770:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
    1771:	bf a1 00 00 00 00 00 00	r1 = r10
    1772:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    1773:	b7 02 00 00 02 00 00 00	r2 = 2
    1774:	bf 93 00 00 00 00 00 00	r3 = r9
    1775:	85 00 00 00 71 00 00 00	call 113
    1776:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
    1777:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
    1778:	07 07 00 00 64 00 00 00	r7 += 100
    1779:	bf 71 00 00 00 00 00 00	r1 = r7
    1780:	b7 02 00 00 06 00 00 00	r2 = 6
    1781:	bf 63 00 00 00 00 00 00	r3 = r6
    1782:	85 00 00 00 04 00 00 00	call 4
    1783:	bf a1 00 00 00 00 00 00	r1 = r10
    1784:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    1785:	b7 02 00 00 08 00 00 00	r2 = 8
    1786:	bf 83 00 00 00 00 00 00	r3 = r8
    1787:	85 00 00 00 71 00 00 00	call 113
    1788:	79 a8 f8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 8)
    1789:	bf a1 00 00 00 00 00 00	r1 = r10
    1790:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    1791:	b7 02 00 00 02 00 00 00	r2 = 2
    1792:	bf 93 00 00 00 00 00 00	r3 = r9
    1793:	85 00 00 00 71 00 00 00	call 113
    1794:	b7 01 00 00 b4 00 00 00	r1 = 180
    1795:	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 32)
    1796:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    1797:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
    1798:	bf a1 00 00 00 00 00 00	r1 = r10
    1799:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    1800:	b7 02 00 00 02 00 00 00	r2 = 2
    1801:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    1802:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    1803:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    1804:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB24_58>
    1805:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000003870 <LBB24_58>:
;     return head + network_header;
    1806:	57 06 00 00 ff ff 00 00	r6 &= 65535
    1807:	0f 68 00 00 00 00 00 00	r8 += r6
    1808:	bf a1 00 00 00 00 00 00	r1 = r10
    1809:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    1810:	b7 02 00 00 01 00 00 00	r2 = 1
    1811:	bf 83 00 00 00 00 00 00	r3 = r8
    1812:	85 00 00 00 04 00 00 00	call 4
    1813:	b7 08 00 00 00 00 00 00	r8 = 0
;     return (first_byte >> 4) & 0x0f;
    1814:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    1815:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
    1816:	15 01 40 00 06 00 00 00	if r1 == 6 goto +64 <LBB24_63>
    1817:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB24_86>
    1818:	b7 01 00 00 00 08 00 00	r1 = 2048
    1819:	79 a7 d8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 40)
;         event->l2_info.l3_proto = ETH_P_IP;
    1820:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
    1821:	b7 01 00 00 c0 00 00 00	r1 = 192
    1822:	79 a6 e0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 32)
    1823:	bf 63 00 00 00 00 00 00	r3 = r6
    1824:	0f 13 00 00 00 00 00 00	r3 += r1
    1825:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
    1826:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    1827:	b7 02 00 00 08 00 00 00	r2 = 8
    1828:	85 00 00 00 71 00 00 00	call 113
    1829:	b7 01 00 00 b6 00 00 00	r1 = 182
    1830:	bf 63 00 00 00 00 00 00	r3 = r6
    1831:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    1832:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
    1833:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
    1834:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    1835:	b7 02 00 00 02 00 00 00	r2 = 2
    1836:	85 00 00 00 71 00 00 00	call 113
    1837:	b7 01 00 00 b4 00 00 00	r1 = 180
    1838:	bf 63 00 00 00 00 00 00	r3 = r6
    1839:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    1840:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
    1841:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
    1842:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    1843:	b7 02 00 00 02 00 00 00	r2 = 2
    1844:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    1845:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    1846:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    1847:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB24_62>
    1848:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000039c8 <LBB24_62>:
;     return head + network_header;
    1849:	57 06 00 00 ff ff 00 00	r6 &= 65535
    1850:	0f 69 00 00 00 00 00 00	r9 += r6
    1851:	b7 01 00 00 0c 00 00 00	r1 = 12
    1852:	bf 93 00 00 00 00 00 00	r3 = r9
    1853:	0f 13 00 00 00 00 00 00	r3 += r1
    1854:	bf a1 00 00 00 00 00 00	r1 = r10
    1855:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
    1856:	b7 02 00 00 04 00 00 00	r2 = 4
    1857:	85 00 00 00 71 00 00 00	call 113
    1858:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
    1859:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
    1860:	b7 01 00 00 10 00 00 00	r1 = 16
    1861:	bf 93 00 00 00 00 00 00	r3 = r9
    1862:	0f 13 00 00 00 00 00 00	r3 += r1
    1863:	bf a1 00 00 00 00 00 00	r1 = r10
    1864:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
    1865:	b7 02 00 00 04 00 00 00	r2 = 4
    1866:	85 00 00 00 71 00 00 00	call 113
    1867:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
    1868:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
    1869:	b7 01 00 00 02 00 00 00	r1 = 2
    1870:	bf 93 00 00 00 00 00 00	r3 = r9
    1871:	0f 13 00 00 00 00 00 00	r3 += r1
    1872:	bf a1 00 00 00 00 00 00	r1 = r10
    1873:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
    1874:	b7 02 00 00 02 00 00 00	r2 = 2
    1875:	85 00 00 00 71 00 00 00	call 113
    1876:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
    1877:	dc 01 00 00 10 00 00 00	r1 = be16 r1
    1878:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
    1879:	b7 01 00 00 09 00 00 00	r1 = 9
    1880:	05 00 39 00 00 00 00 00	goto +57 <LBB24_66>

0000000000003ac8 <LBB24_63>:
    1881:	b7 01 00 00 dd 86 00 00	r1 = 34525
    1882:	79 a7 d8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 40)
;         event->l2_info.l3_proto = ETH_P_IPV6;
    1883:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
    1884:	b7 01 00 00 c0 00 00 00	r1 = 192
    1885:	79 a6 e0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 32)
    1886:	bf 63 00 00 00 00 00 00	r3 = r6
    1887:	0f 13 00 00 00 00 00 00	r3 += r1
    1888:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
    1889:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    1890:	b7 02 00 00 08 00 00 00	r2 = 8
    1891:	85 00 00 00 71 00 00 00	call 113
    1892:	b7 01 00 00 b6 00 00 00	r1 = 182
    1893:	bf 63 00 00 00 00 00 00	r3 = r6
    1894:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    1895:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
    1896:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
    1897:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    1898:	b7 02 00 00 02 00 00 00	r2 = 2
    1899:	85 00 00 00 71 00 00 00	call 113
    1900:	b7 01 00 00 b4 00 00 00	r1 = 180
    1901:	bf 63 00 00 00 00 00 00	r3 = r6
    1902:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    1903:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
    1904:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
    1905:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    1906:	b7 02 00 00 02 00 00 00	r2 = 2
    1907:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    1908:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    1909:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    1910:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB24_65>
    1911:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000003bc0 <LBB24_65>:
;     return head + network_header;
    1912:	57 06 00 00 ff ff 00 00	r6 &= 65535
    1913:	0f 69 00 00 00 00 00 00	r9 += r6
    1914:	b7 01 00 00 08 00 00 00	r1 = 8
    1915:	bf 93 00 00 00 00 00 00	r3 = r9
    1916:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
    1917:	bf 71 00 00 00 00 00 00	r1 = r7
    1918:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
    1919:	b7 02 00 00 10 00 00 00	r2 = 16
    1920:	85 00 00 00 04 00 00 00	call 4
    1921:	b7 01 00 00 18 00 00 00	r1 = 24
    1922:	bf 93 00 00 00 00 00 00	r3 = r9
    1923:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
    1924:	bf 71 00 00 00 00 00 00	r1 = r7
    1925:	07 01 00 00 80 00 00 00	r1 += 128
    1926:	b7 02 00 00 10 00 00 00	r2 = 16
    1927:	85 00 00 00 04 00 00 00	call 4
    1928:	b7 01 00 00 04 00 00 00	r1 = 4
    1929:	bf 93 00 00 00 00 00 00	r3 = r9
    1930:	0f 13 00 00 00 00 00 00	r3 += r1
    1931:	bf a1 00 00 00 00 00 00	r1 = r10
    1932:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
    1933:	b7 02 00 00 02 00 00 00	r2 = 2
    1934:	85 00 00 00 71 00 00 00	call 113
    1935:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
    1936:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
    1937:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000003c90 <LBB24_66>:
    1938:	bf 93 00 00 00 00 00 00	r3 = r9
    1939:	0f 13 00 00 00 00 00 00	r3 += r1
    1940:	bf a1 00 00 00 00 00 00	r1 = r10
    1941:	07 01 00 00 f8 ff ff ff	r1 += -8
    1942:	b7 02 00 00 01 00 00 00	r2 = 1
    1943:	85 00 00 00 71 00 00 00	call 113
    1944:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    1945:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
    1946:	bf a1 00 00 00 00 00 00	r1 = r10
    1947:	07 01 00 00 f8 ff ff ff	r1 += -8
    1948:	b7 02 00 00 01 00 00 00	r2 = 1
    1949:	bf 93 00 00 00 00 00 00	r3 = r9
    1950:	85 00 00 00 04 00 00 00	call 4
    1951:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    1952:	57 01 00 00 f0 00 00 00	r1 &= 240
    1953:	77 01 00 00 04 00 00 00	r1 >>= 4
    1954:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
    1955:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
    1956:	65 01 50 00 10 00 00 00	if r1 s> 16 goto +80 <LBB24_69>
    1957:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB24_81>
    1958:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB24_71>
    1959:	05 00 b7 fe 00 00 00 00	goto -329 <LBB24_86>

0000000000003d40 <LBB24_71>:
    1960:	b7 01 00 00 c0 00 00 00	r1 = 192
    1961:	79 a7 e0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 32)
    1962:	bf 73 00 00 00 00 00 00	r3 = r7
    1963:	0f 13 00 00 00 00 00 00	r3 += r1
    1964:	bf a1 00 00 00 00 00 00	r1 = r10
    1965:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    1966:	b7 02 00 00 08 00 00 00	r2 = 8
    1967:	85 00 00 00 71 00 00 00	call 113
    1968:	b7 01 00 00 b6 00 00 00	r1 = 182
    1969:	bf 73 00 00 00 00 00 00	r3 = r7
    1970:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    1971:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
    1972:	bf a1 00 00 00 00 00 00	r1 = r10
    1973:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    1974:	b7 02 00 00 02 00 00 00	r2 = 2
    1975:	85 00 00 00 71 00 00 00	call 113
    1976:	b7 01 00 00 b4 00 00 00	r1 = 180
    1977:	0f 17 00 00 00 00 00 00	r7 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    1978:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
    1979:	bf a1 00 00 00 00 00 00	r1 = r10
    1980:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    1981:	b7 02 00 00 02 00 00 00	r2 = 2
    1982:	bf 73 00 00 00 00 00 00	r3 = r7
    1983:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    1984:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    1985:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    1986:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB24_73>
    1987:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000003e20 <LBB24_73>:
;     return head + network_header;
    1988:	57 06 00 00 ff ff 00 00	r6 &= 65535
    1989:	0f 69 00 00 00 00 00 00	r9 += r6
    1990:	bf a1 00 00 00 00 00 00	r1 = r10
    1991:	07 01 00 00 f8 ff ff ff	r1 += -8
    1992:	b7 08 00 00 01 00 00 00	r8 = 1
;     bpf_probe_read(&first_byte, 1, hdr);
    1993:	b7 02 00 00 01 00 00 00	r2 = 1
    1994:	bf 93 00 00 00 00 00 00	r3 = r9
    1995:	85 00 00 00 04 00 00 00	call 4
    1996:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
    1997:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
    1998:	57 02 00 00 f0 00 00 00	r2 &= 240
    1999:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
;     if (ip_version == 6)
    2000:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB24_75>
    2001:	bf a1 00 00 00 00 00 00	r1 = r10
    2002:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    2003:	b7 02 00 00 01 00 00 00	r2 = 1
    2004:	bf 93 00 00 00 00 00 00	r3 = r9
    2005:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
    2006:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    2007:	67 01 00 00 02 00 00 00	r1 <<= 2
    2008:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000003ec8 <LBB24_75>:
;     return l3_header + transport_size;
    2009:	0f 19 00 00 00 00 00 00	r9 += r1
    2010:	b7 01 00 00 00 00 00 00	r1 = 0
    2011:	bf 93 00 00 00 00 00 00	r3 = r9
    2012:	0f 13 00 00 00 00 00 00	r3 += r1
    2013:	bf a1 00 00 00 00 00 00	r1 = r10
    2014:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
    2015:	b7 02 00 00 02 00 00 00	r2 = 2
    2016:	85 00 00 00 71 00 00 00	call 113
    2017:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
    2018:	dc 01 00 00 10 00 00 00	r1 = be16 r1
    2019:	6b 16 98 00 00 00 00 00	*(u16 *)(r6 + 152) = r1
    2020:	b7 01 00 00 02 00 00 00	r1 = 2
    2021:	bf 93 00 00 00 00 00 00	r3 = r9
    2022:	0f 13 00 00 00 00 00 00	r3 += r1
    2023:	bf a1 00 00 00 00 00 00	r1 = r10
    2024:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
    2025:	b7 02 00 00 02 00 00 00	r2 = 2
    2026:	85 00 00 00 71 00 00 00	call 113
    2027:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
    2028:	dc 01 00 00 10 00 00 00	r1 = be16 r1
    2029:	6b 16 9a 00 00 00 00 00	*(u16 *)(r6 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
    2030:	07 09 00 00 0c 00 00 00	r9 += 12
    2031:	07 06 00 00 9c 00 00 00	r6 += 156
    2032:	bf 61 00 00 00 00 00 00	r1 = r6
    2033:	b7 02 00 00 02 00 00 00	r2 = 2
    2034:	bf 93 00 00 00 00 00 00	r3 = r9
    2035:	85 00 00 00 04 00 00 00	call 4
    2036:	05 00 6a fe 00 00 00 00	goto -406 <LBB24_86>

0000000000003fa8 <LBB24_69>:
;     if (l4_proto == IPPROTO_TCP) {
    2037:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB24_76>
    2038:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB24_81>
    2039:	05 00 67 fe 00 00 00 00	goto -409 <LBB24_86>

0000000000003fc0 <LBB24_81>:
    2040:	b7 01 00 00 c0 00 00 00	r1 = 192
    2041:	79 a7 e0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 32)
    2042:	bf 73 00 00 00 00 00 00	r3 = r7
    2043:	0f 13 00 00 00 00 00 00	r3 += r1
    2044:	bf a1 00 00 00 00 00 00	r1 = r10
    2045:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2046:	b7 02 00 00 08 00 00 00	r2 = 8
    2047:	85 00 00 00 71 00 00 00	call 113
    2048:	b7 01 00 00 b6 00 00 00	r1 = 182
    2049:	bf 73 00 00 00 00 00 00	r3 = r7
    2050:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2051:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
    2052:	bf a1 00 00 00 00 00 00	r1 = r10
    2053:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    2054:	b7 02 00 00 02 00 00 00	r2 = 2
    2055:	85 00 00 00 71 00 00 00	call 113
    2056:	b7 01 00 00 b4 00 00 00	r1 = 180
    2057:	0f 17 00 00 00 00 00 00	r7 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    2058:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
    2059:	bf a1 00 00 00 00 00 00	r1 = r10
    2060:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    2061:	b7 02 00 00 02 00 00 00	r2 = 2
    2062:	bf 73 00 00 00 00 00 00	r3 = r7
    2063:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    2064:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    2065:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    2066:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB24_83>
    2067:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000040a0 <LBB24_83>:
;     return head + network_header;
    2068:	57 06 00 00 ff ff 00 00	r6 &= 65535
    2069:	0f 69 00 00 00 00 00 00	r9 += r6
    2070:	bf a1 00 00 00 00 00 00	r1 = r10
    2071:	07 01 00 00 f8 ff ff ff	r1 += -8
    2072:	b7 08 00 00 01 00 00 00	r8 = 1
;     bpf_probe_read(&first_byte, 1, hdr);
    2073:	b7 02 00 00 01 00 00 00	r2 = 1
    2074:	bf 93 00 00 00 00 00 00	r3 = r9
    2075:	85 00 00 00 04 00 00 00	call 4
    2076:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
    2077:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
    2078:	57 02 00 00 f0 00 00 00	r2 &= 240
    2079:	79 a7 d8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 40)
;     if (ip_version == 6)
    2080:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB24_85>
    2081:	bf a1 00 00 00 00 00 00	r1 = r10
    2082:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    2083:	b7 02 00 00 01 00 00 00	r2 = 1
    2084:	bf 93 00 00 00 00 00 00	r3 = r9
    2085:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
    2086:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    2087:	67 01 00 00 02 00 00 00	r1 <<= 2
    2088:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000004148 <LBB24_85>:
;     return l3_header + transport_size;
    2089:	0f 19 00 00 00 00 00 00	r9 += r1
    2090:	bf a6 00 00 00 00 00 00	r6 = r10
    2091:	07 06 00 00 f8 ff ff ff	r6 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
    2092:	bf 61 00 00 00 00 00 00	r1 = r6
    2093:	b7 02 00 00 08 00 00 00	r2 = 8
    2094:	bf 93 00 00 00 00 00 00	r3 = r9
    2095:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
    2096:	71 61 00 00 00 00 00 00	r1 = *(u8 *)(r6 + 0)
    2097:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
    2098:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
    2099:	dc 01 00 00 10 00 00 00	r1 = be16 r1
    2100:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
    2101:	69 61 06 00 00 00 00 00	r1 = *(u16 *)(r6 + 6)
    2102:	dc 01 00 00 10 00 00 00	r1 = be16 r1
    2103:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
    2104:	05 00 26 fe 00 00 00 00	goto -474 <LBB24_86>

00000000000041c8 <LBB24_76>:
    2105:	b7 01 00 00 c0 00 00 00	r1 = 192
    2106:	79 a7 e0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 32)
    2107:	bf 73 00 00 00 00 00 00	r3 = r7
    2108:	0f 13 00 00 00 00 00 00	r3 += r1
    2109:	bf a1 00 00 00 00 00 00	r1 = r10
    2110:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2111:	b7 02 00 00 08 00 00 00	r2 = 8
    2112:	85 00 00 00 71 00 00 00	call 113
    2113:	b7 01 00 00 b6 00 00 00	r1 = 182
    2114:	bf 73 00 00 00 00 00 00	r3 = r7
    2115:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2116:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
    2117:	bf a1 00 00 00 00 00 00	r1 = r10
    2118:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    2119:	b7 02 00 00 02 00 00 00	r2 = 2
    2120:	85 00 00 00 71 00 00 00	call 113
    2121:	b7 01 00 00 b4 00 00 00	r1 = 180
    2122:	0f 17 00 00 00 00 00 00	r7 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    2123:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
    2124:	bf a1 00 00 00 00 00 00	r1 = r10
    2125:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    2126:	b7 02 00 00 02 00 00 00	r2 = 2
    2127:	bf 73 00 00 00 00 00 00	r3 = r7
    2128:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    2129:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    2130:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    2131:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB24_78>
    2132:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000042a8 <LBB24_78>:
;     return head + network_header;
    2133:	57 06 00 00 ff ff 00 00	r6 &= 65535
    2134:	0f 69 00 00 00 00 00 00	r9 += r6
    2135:	bf a1 00 00 00 00 00 00	r1 = r10
    2136:	07 01 00 00 f8 ff ff ff	r1 += -8
    2137:	b7 08 00 00 01 00 00 00	r8 = 1
;     bpf_probe_read(&first_byte, 1, hdr);
    2138:	b7 02 00 00 01 00 00 00	r2 = 1
    2139:	bf 93 00 00 00 00 00 00	r3 = r9
    2140:	85 00 00 00 04 00 00 00	call 4
    2141:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
    2142:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
    2143:	57 02 00 00 f0 00 00 00	r2 &= 240
    2144:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
;     if (ip_version == 6)
    2145:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB24_80>
    2146:	bf a1 00 00 00 00 00 00	r1 = r10
    2147:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    2148:	b7 02 00 00 01 00 00 00	r2 = 1
    2149:	bf 93 00 00 00 00 00 00	r3 = r9
    2150:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
    2151:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    2152:	67 01 00 00 02 00 00 00	r1 <<= 2
    2153:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000004350 <LBB24_80>:
;     return l3_header + transport_size;
    2154:	0f 19 00 00 00 00 00 00	r9 += r1
    2155:	b7 01 00 00 00 00 00 00	r1 = 0
    2156:	bf 93 00 00 00 00 00 00	r3 = r9
    2157:	0f 13 00 00 00 00 00 00	r3 += r1
    2158:	bf a1 00 00 00 00 00 00	r1 = r10
    2159:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
    2160:	b7 02 00 00 02 00 00 00	r2 = 2
    2161:	85 00 00 00 71 00 00 00	call 113
    2162:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
    2163:	dc 01 00 00 10 00 00 00	r1 = be16 r1
    2164:	6b 16 98 00 00 00 00 00	*(u16 *)(r6 + 152) = r1
    2165:	b7 01 00 00 02 00 00 00	r1 = 2
    2166:	0f 19 00 00 00 00 00 00	r9 += r1
    2167:	bf a1 00 00 00 00 00 00	r1 = r10
    2168:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
    2169:	b7 02 00 00 02 00 00 00	r2 = 2
    2170:	bf 93 00 00 00 00 00 00	r3 = r9
    2171:	85 00 00 00 71 00 00 00	call 113
    2172:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
    2173:	dc 01 00 00 10 00 00 00	r1 = be16 r1
    2174:	6b 16 9a 00 00 00 00 00	*(u16 *)(r6 + 154) = r1
    2175:	05 00 df fd 00 00 00 00	goto -545 <LBB24_86>

0000000000004400 <do_trace>:
; INLINE int do_trace(struct pt_regs *ctx, struct sk_buff *skb, const char *func_name) {
    2176:	7b 3a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r3
    2177:	7b 2a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r2
    2178:	bf 17 00 00 00 00 00 00	r7 = r1
    2179:	b7 06 00 00 00 00 00 00	r6 = 0
;     GET_CFG();
    2180:	63 6a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r6
    2181:	bf a2 00 00 00 00 00 00	r2 = r10
    2182:	07 02 00 00 e4 ff ff ff	r2 += -28
;     GET_CFG();
    2183:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    2185:	85 00 00 00 01 00 00 00	call 1
    2186:	bf 09 00 00 00 00 00 00	r9 = r0
    2187:	15 09 67 01 00 00 00 00	if r9 == 0 goto +359 <LBB25_51>
    2188:	61 91 08 00 00 00 00 00	r1 = *(u32 *)(r9 + 8)
    2189:	dc 01 00 00 20 00 00 00	r1 = be32 r1
    2190:	63 19 08 00 00 00 00 00	*(u32 *)(r9 + 8) = r1
;     u32 ev_buff_id = 0;
    2191:	63 6a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r6
    2192:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
    2193:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
    2194:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    2196:	85 00 00 00 01 00 00 00	call 1
    2197:	bf 08 00 00 00 00 00 00	r8 = r0
;     if (!ev) return NULL;
    2198:	55 08 01 00 00 00 00 00	if r8 != 0 goto +1 <LBB25_3>
    2199:	05 00 5b 01 00 00 00 00	goto +347 <LBB25_51>

00000000000044c0 <LBB25_3>:
    2200:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
    2201:	7b 18 d8 00 00 00 00 00	*(u64 *)(r8 + 216) = r1
    2202:	7b 18 d0 00 00 00 00 00	*(u64 *)(r8 + 208) = r1
    2203:	7b 18 c8 00 00 00 00 00	*(u64 *)(r8 + 200) = r1
    2204:	7b 18 c0 00 00 00 00 00	*(u64 *)(r8 + 192) = r1
    2205:	7b 18 b8 00 00 00 00 00	*(u64 *)(r8 + 184) = r1
    2206:	7b 18 b0 00 00 00 00 00	*(u64 *)(r8 + 176) = r1
    2207:	7b 18 a8 00 00 00 00 00	*(u64 *)(r8 + 168) = r1
    2208:	7b 18 a0 00 00 00 00 00	*(u64 *)(r8 + 160) = r1
    2209:	7b 18 98 00 00 00 00 00	*(u64 *)(r8 + 152) = r1
    2210:	7b 18 90 00 00 00 00 00	*(u64 *)(r8 + 144) = r1
    2211:	7b 18 88 00 00 00 00 00	*(u64 *)(r8 + 136) = r1
    2212:	7b 18 80 00 00 00 00 00	*(u64 *)(r8 + 128) = r1
    2213:	7b 18 78 00 00 00 00 00	*(u64 *)(r8 + 120) = r1
    2214:	7b 18 70 00 00 00 00 00	*(u64 *)(r8 + 112) = r1
    2215:	7b 18 68 00 00 00 00 00	*(u64 *)(r8 + 104) = r1
    2216:	7b 18 60 00 00 00 00 00	*(u64 *)(r8 + 96) = r1
    2217:	7b 18 58 00 00 00 00 00	*(u64 *)(r8 + 88) = r1
    2218:	7b 18 50 00 00 00 00 00	*(u64 *)(r8 + 80) = r1
    2219:	7b 18 48 00 00 00 00 00	*(u64 *)(r8 + 72) = r1
    2220:	7b 18 40 00 00 00 00 00	*(u64 *)(r8 + 64) = r1
    2221:	7b 18 38 00 00 00 00 00	*(u64 *)(r8 + 56) = r1
    2222:	7b 18 30 00 00 00 00 00	*(u64 *)(r8 + 48) = r1
    2223:	7b 18 28 00 00 00 00 00	*(u64 *)(r8 + 40) = r1
    2224:	7b 18 20 00 00 00 00 00	*(u64 *)(r8 + 32) = r1
    2225:	7b 18 18 00 00 00 00 00	*(u64 *)(r8 + 24) = r1
    2226:	7b 18 10 00 00 00 00 00	*(u64 *)(r8 + 16) = r1
    2227:	7b 18 08 00 00 00 00 00	*(u64 *)(r8 + 8) = r1
    2228:	7b 18 00 00 00 00 00 00	*(u64 *)(r8 + 0) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
    2229:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
    2230:	61 91 04 00 00 00 00 00	r1 = *(u32 *)(r9 + 4)
    2231:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB25_5>
    2232:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
    2233:	5d 01 39 01 00 00 00 00	if r1 != r0 goto +313 <LBB25_51>

00000000000045d0 <LBB25_5>:
    2234:	b7 01 00 00 10 00 00 00	r1 = 16
    2235:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
    2236:	0f 13 00 00 00 00 00 00	r3 += r1
    2237:	bf a6 00 00 00 00 00 00	r6 = r10
    2238:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    2239:	bf 61 00 00 00 00 00 00	r1 = r6
    2240:	b7 02 00 00 08 00 00 00	r2 = 8
    2241:	85 00 00 00 71 00 00 00	call 113
    2242:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    2243:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
    2244:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    2245:	bf 61 00 00 00 00 00 00	r1 = r6
    2246:	b7 02 00 00 08 00 00 00	r2 = 8
    2247:	85 00 00 00 71 00 00 00	call 113
    2248:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    2249:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
    2250:	0f 13 00 00 00 00 00 00	r3 += r1
    2251:	bf a1 00 00 00 00 00 00	r1 = r10
    2252:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    2253:	b7 02 00 00 04 00 00 00	r2 = 4
    2254:	85 00 00 00 71 00 00 00	call 113
    2255:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
    2256:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB25_8>
    2257:	b7 01 00 00 18 00 00 00	r1 = 24
    2258:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
    2259:	0f 13 00 00 00 00 00 00	r3 += r1
    2260:	bf a1 00 00 00 00 00 00	r1 = r10
    2261:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
    2262:	b7 02 00 00 08 00 00 00	r2 = 8
    2263:	85 00 00 00 71 00 00 00	call 113
    2264:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
    2265:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB25_11>
    2266:	b7 01 00 00 30 00 00 00	r1 = 48
    2267:	0f 13 00 00 00 00 00 00	r3 += r1
    2268:	bf a1 00 00 00 00 00 00	r1 = r10
    2269:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
    2270:	b7 02 00 00 08 00 00 00	r2 = 8
    2271:	85 00 00 00 71 00 00 00	call 113
    2272:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
    2273:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
    2274:	0f 13 00 00 00 00 00 00	r3 += r1
    2275:	bf a1 00 00 00 00 00 00	r1 = r10
    2276:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
    2277:	b7 02 00 00 04 00 00 00	r2 = 4
    2278:	85 00 00 00 71 00 00 00	call 113
    2279:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000004740 <LBB25_8>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
    2280:	61 92 00 00 00 00 00 00	r2 = *(u32 *)(r9 + 0)
    2281:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB25_11>
    2282:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB25_11>
    2283:	5d 12 07 01 00 00 00 00	if r2 != r1 goto +263 <LBB25_51>

0000000000004760 <LBB25_11>:
    2284:	7b 7a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r7
;     u16 icmpid = cfg->icmpid;
    2285:	69 91 0e 00 00 00 00 00	r1 = *(u16 *)(r9 + 14)
;     u16 port = cfg->port;
    2286:	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r1
    2287:	69 91 0c 00 00 00 00 00	r1 = *(u16 *)(r9 + 12)
;     u8 proto = cfg->proto;
    2288:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
    2289:	71 91 12 00 00 00 00 00	r1 = *(u8 *)(r9 + 18)
;     u32 addr = cfg->ip;
    2290:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
    2291:	61 91 08 00 00 00 00 00	r1 = *(u32 *)(r9 + 8)
    2292:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
    2293:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
    2294:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
    2295:	b7 01 00 00 c0 00 00 00	r1 = 192
    2296:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
    2297:	bf 63 00 00 00 00 00 00	r3 = r6
    2298:	0f 13 00 00 00 00 00 00	r3 += r1
    2299:	bf a1 00 00 00 00 00 00	r1 = r10
    2300:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2301:	b7 02 00 00 08 00 00 00	r2 = 8
    2302:	85 00 00 00 71 00 00 00	call 113
    2303:	b7 01 00 00 b6 00 00 00	r1 = 182
    2304:	bf 63 00 00 00 00 00 00	r3 = r6
    2305:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2306:	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 8)
    2307:	bf a1 00 00 00 00 00 00	r1 = r10
    2308:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    2309:	b7 02 00 00 02 00 00 00	r2 = 2
    2310:	85 00 00 00 71 00 00 00	call 113
    2311:	b7 01 00 00 b4 00 00 00	r1 = 180
    2312:	bf 63 00 00 00 00 00 00	r3 = r6
    2313:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    2314:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
    2315:	bf a1 00 00 00 00 00 00	r1 = r10
    2316:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    2317:	b7 02 00 00 02 00 00 00	r2 = 2
    2318:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    2319:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    2320:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    2321:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB25_13>
    2322:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000004898 <LBB25_13>:
;     return head + network_header;
    2323:	57 06 00 00 ff ff 00 00	r6 &= 65535
    2324:	0f 67 00 00 00 00 00 00	r7 += r6
    2325:	bf a1 00 00 00 00 00 00	r1 = r10
    2326:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    2327:	b7 02 00 00 01 00 00 00	r2 = 1
    2328:	bf 73 00 00 00 00 00 00	r3 = r7
    2329:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
    2330:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    2331:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
    2332:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB25_20>
    2333:	55 01 d5 00 04 00 00 00	if r1 != 4 goto +213 <LBB25_51>
;         if (addr != 0) {
    2334:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
    2335:	bf 16 00 00 00 00 00 00	r6 = r1
    2336:	15 06 25 00 00 00 00 00	if r6 == 0 goto +37 <LBB25_18>
    2337:	b7 01 00 00 0c 00 00 00	r1 = 12
    2338:	bf 73 00 00 00 00 00 00	r3 = r7
    2339:	0f 13 00 00 00 00 00 00	r3 += r1
    2340:	bf a1 00 00 00 00 00 00	r1 = r10
    2341:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
    2342:	b7 02 00 00 04 00 00 00	r2 = 4
    2343:	85 00 00 00 71 00 00 00	call 113
    2344:	b7 01 00 00 10 00 00 00	r1 = 16
    2345:	0f 17 00 00 00 00 00 00	r7 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
    2346:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
    2347:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
    2348:	bf a1 00 00 00 00 00 00	r1 = r10
    2349:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
    2350:	b7 02 00 00 04 00 00 00	r2 = 4
    2351:	bf 73 00 00 00 00 00 00	r3 = r7
    2352:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
    2353:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
    2354:	1d 16 d5 00 00 00 00 00	if r6 == r1 goto +213 <LBB25_54>
    2355:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
    2356:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
    2357:	5d 12 bd 00 00 00 00 00	if r2 != r1 goto +189 <LBB25_51>
    2358:	05 00 d1 00 00 00 00 00	goto +209 <LBB25_54>

00000000000049b8 <LBB25_20>:
    2359:	b7 01 00 00 06 00 00 00	r1 = 6
    2360:	0f 17 00 00 00 00 00 00	r7 += r1
    2361:	bf a1 00 00 00 00 00 00	r1 = r10
    2362:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
    2363:	b7 02 00 00 01 00 00 00	r2 = 1
    2364:	bf 73 00 00 00 00 00 00	r3 = r7
    2365:	85 00 00 00 04 00 00 00	call 4
    2366:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
    2367:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
    2368:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
    2369:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB25_22>
    2370:	b7 04 00 00 80 00 00 00	r4 = 128
    2371:	b7 03 00 00 81 00 00 00	r3 = 129
    2372:	b7 01 00 00 3a 00 00 00	r1 = 58
    2373:	05 00 0d 00 00 00 00 00	goto +13 <LBB25_22>

0000000000004a30 <LBB25_18>:
    2374:	b7 01 00 00 09 00 00 00	r1 = 9
    2375:	0f 17 00 00 00 00 00 00	r7 += r1
    2376:	bf a1 00 00 00 00 00 00	r1 = r10
    2377:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
    2378:	b7 02 00 00 01 00 00 00	r2 = 1
    2379:	bf 73 00 00 00 00 00 00	r3 = r7
    2380:	85 00 00 00 04 00 00 00	call 4
    2381:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
    2382:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
    2383:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
    2384:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB25_22>
    2385:	b7 04 00 00 08 00 00 00	r4 = 8
    2386:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000004a98 <LBB25_22>:
;     if (proto != 0 && proto != l4_proto)
    2387:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
    2388:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB25_24>
    2389:	5d 12 9d 00 00 00 00 00	if r2 != r1 goto +157 <LBB25_51>

0000000000004ab0 <LBB25_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
    2390:	65 01 4c 00 10 00 00 00	if r1 s> 16 goto +76 <LBB25_27>
    2391:	15 01 4d 00 01 00 00 00	if r1 == 1 goto +77 <LBB25_29>
    2392:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB25_35>
    2393:	05 00 99 00 00 00 00 00	goto +153 <LBB25_51>

0000000000004ad0 <LBB25_35>:
    2394:	b7 01 00 00 c0 00 00 00	r1 = 192
    2395:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
    2396:	bf 63 00 00 00 00 00 00	r3 = r6
    2397:	0f 13 00 00 00 00 00 00	r3 += r1
    2398:	bf a1 00 00 00 00 00 00	r1 = r10
    2399:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2400:	b7 02 00 00 08 00 00 00	r2 = 8
    2401:	85 00 00 00 71 00 00 00	call 113
    2402:	b7 01 00 00 b6 00 00 00	r1 = 182
    2403:	bf 63 00 00 00 00 00 00	r3 = r6
    2404:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2405:	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 8)
    2406:	bf a1 00 00 00 00 00 00	r1 = r10
    2407:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    2408:	b7 02 00 00 02 00 00 00	r2 = 2
    2409:	85 00 00 00 71 00 00 00	call 113
    2410:	b7 01 00 00 b4 00 00 00	r1 = 180
    2411:	bf 63 00 00 00 00 00 00	r3 = r6
    2412:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    2413:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
    2414:	bf a1 00 00 00 00 00 00	r1 = r10
    2415:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    2416:	b7 02 00 00 02 00 00 00	r2 = 2
    2417:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    2418:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    2419:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    2420:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB25_37>
    2421:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000004bb0 <LBB25_37>:
;     return head + network_header;
    2422:	57 06 00 00 ff ff 00 00	r6 &= 65535
    2423:	0f 67 00 00 00 00 00 00	r7 += r6
    2424:	bf a1 00 00 00 00 00 00	r1 = r10
    2425:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    2426:	b7 02 00 00 01 00 00 00	r2 = 1
    2427:	bf 73 00 00 00 00 00 00	r3 = r7
    2428:	85 00 00 00 04 00 00 00	call 4
    2429:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
    2430:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
    2431:	57 02 00 00 f0 00 00 00	r2 &= 240
    2432:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB25_39>
    2433:	bf a1 00 00 00 00 00 00	r1 = r10
    2434:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    2435:	b7 02 00 00 01 00 00 00	r2 = 1
    2436:	bf 73 00 00 00 00 00 00	r3 = r7
    2437:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
    2438:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    2439:	67 01 00 00 02 00 00 00	r1 <<= 2
    2440:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000004c48 <LBB25_39>:
;     return l3_header + transport_size;
    2441:	0f 17 00 00 00 00 00 00	r7 += r1

0000000000004c50 <LBB25_40>:
;     if (port != 0) {
    2442:	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 72)
    2443:	15 02 5b 00 00 00 00 00	if r2 == 0 goto +91 <LBB25_45>
;         if (l4_proto == IPPROTO_TCP) {
    2444:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
    2445:	15 02 67 00 11 00 00 00	if r2 == 17 goto +103 <LBB25_52>
    2446:	55 02 58 00 06 00 00 00	if r2 != 6 goto +88 <LBB25_45>
    2447:	b7 01 00 00 00 00 00 00	r1 = 0
    2448:	bf 73 00 00 00 00 00 00	r3 = r7
    2449:	0f 13 00 00 00 00 00 00	r3 += r1
    2450:	bf a1 00 00 00 00 00 00	r1 = r10
    2451:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
    2452:	b7 02 00 00 02 00 00 00	r2 = 2
    2453:	85 00 00 00 71 00 00 00	call 113
    2454:	b7 01 00 00 02 00 00 00	r1 = 2
    2455:	0f 17 00 00 00 00 00 00	r7 += r1
;             sport = BPF_CORE_READ(th, source);
    2456:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
    2457:	bf a1 00 00 00 00 00 00	r1 = r10
    2458:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
    2459:	b7 02 00 00 02 00 00 00	r2 = 2
    2460:	bf 73 00 00 00 00 00 00	r3 = r7
    2461:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
    2462:	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 72)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
    2463:	1d 61 68 00 00 00 00 00	if r1 == r6 goto +104 <LBB25_54>
    2464:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
    2465:	5d 21 51 00 00 00 00 00	if r1 != r2 goto +81 <LBB25_51>
    2466:	05 00 65 00 00 00 00 00	goto +101 <LBB25_54>

0000000000004d18 <LBB25_27>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
    2467:	15 01 b6 ff 11 00 00 00	if r1 == 17 goto -74 <LBB25_35>
    2468:	55 01 4e 00 3a 00 00 00	if r1 != 58 goto +78 <LBB25_51>

0000000000004d28 <LBB25_29>:
    2469:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r4
    2470:	7b 3a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r3
    2471:	b7 01 00 00 c0 00 00 00	r1 = 192
    2472:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
    2473:	bf 63 00 00 00 00 00 00	r3 = r6
    2474:	0f 13 00 00 00 00 00 00	r3 += r1
    2475:	bf a1 00 00 00 00 00 00	r1 = r10
    2476:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2477:	b7 02 00 00 08 00 00 00	r2 = 8
    2478:	85 00 00 00 71 00 00 00	call 113
    2479:	b7 01 00 00 b6 00 00 00	r1 = 182
    2480:	bf 63 00 00 00 00 00 00	r3 = r6
    2481:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2482:	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 8)
    2483:	bf a1 00 00 00 00 00 00	r1 = r10
    2484:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    2485:	b7 02 00 00 02 00 00 00	r2 = 2
    2486:	85 00 00 00 71 00 00 00	call 113
    2487:	b7 01 00 00 b4 00 00 00	r1 = 180
    2488:	bf 63 00 00 00 00 00 00	r3 = r6
    2489:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    2490:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
    2491:	bf a1 00 00 00 00 00 00	r1 = r10
    2492:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    2493:	b7 02 00 00 02 00 00 00	r2 = 2
    2494:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    2495:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    2496:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    2497:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB25_31>
    2498:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000004e18 <LBB25_31>:
;     return head + network_header;
    2499:	57 06 00 00 ff ff 00 00	r6 &= 65535
    2500:	0f 67 00 00 00 00 00 00	r7 += r6
    2501:	bf a1 00 00 00 00 00 00	r1 = r10
    2502:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    2503:	b7 02 00 00 01 00 00 00	r2 = 1
    2504:	bf 73 00 00 00 00 00 00	r3 = r7
    2505:	85 00 00 00 04 00 00 00	call 4
    2506:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
    2507:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
    2508:	57 02 00 00 f0 00 00 00	r2 &= 240
    2509:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB25_33>
    2510:	bf a1 00 00 00 00 00 00	r1 = r10
    2511:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    2512:	b7 02 00 00 01 00 00 00	r2 = 1
    2513:	bf 73 00 00 00 00 00 00	r3 = r7
    2514:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
    2515:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    2516:	67 01 00 00 02 00 00 00	r1 <<= 2
    2517:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000004eb0 <LBB25_33>:
;     return l3_header + transport_size;
    2518:	0f 17 00 00 00 00 00 00	r7 += r1
    2519:	bf a6 00 00 00 00 00 00	r6 = r10
    2520:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
    2521:	bf 61 00 00 00 00 00 00	r1 = r6
    2522:	b7 02 00 00 08 00 00 00	r2 = 8
    2523:	bf 73 00 00 00 00 00 00	r3 = r7
    2524:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
    2525:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
    2526:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
    2527:	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 64)
    2528:	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 96)
    2529:	1d 24 a8 ff 00 00 00 00	if r4 == r2 goto -88 <LBB25_40>
    2530:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
    2531:	07 02 00 00 e8 ff ff ff	r2 += -24
    2532:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
    2533:	1d 23 a4 ff 00 00 00 00	if r3 == r2 goto -92 <LBB25_40>
    2534:	05 00 0c 00 00 00 00 00	goto +12 <LBB25_51>

0000000000004f38 <LBB25_45>:
;     if (proto != 0 && proto != l4_proto)
    2535:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
    2536:	15 02 1f 00 00 00 00 00	if r2 == 0 goto +31 <LBB25_54>
    2537:	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 88)
;     if (proto != 0 && icmpid != 0) {
    2538:	15 02 1d 00 00 00 00 00	if r2 == 0 goto +29 <LBB25_54>
    2539:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
    2540:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB25_54>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
    2541:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
    2542:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB25_50>
    2543:	55 02 18 00 01 00 00 00	if r2 != 1 goto +24 <LBB25_54>

0000000000004f80 <LBB25_50>:
;         if (icmpid != ev_icmpid)
    2544:	57 01 00 00 ff ff 00 00	r1 &= 65535
    2545:	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 88)
    2546:	1d 12 15 00 00 00 00 00	if r2 == r1 goto +21 <LBB25_54>

0000000000004f98 <LBB25_51>:
; }
    2547:	b7 00 00 00 00 00 00 00	r0 = 0
    2548:	95 00 00 00 00 00 00 00	exit

0000000000004fa8 <LBB25_52>:
    2549:	b7 01 00 00 00 00 00 00	r1 = 0
    2550:	bf 73 00 00 00 00 00 00	r3 = r7
    2551:	0f 13 00 00 00 00 00 00	r3 += r1
    2552:	bf a1 00 00 00 00 00 00	r1 = r10
    2553:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
    2554:	b7 02 00 00 02 00 00 00	r2 = 2
    2555:	85 00 00 00 71 00 00 00	call 113
    2556:	b7 01 00 00 02 00 00 00	r1 = 2
    2557:	0f 17 00 00 00 00 00 00	r7 += r1
;             sport = BPF_CORE_READ(uh, source);
    2558:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
    2559:	bf a1 00 00 00 00 00 00	r1 = r10
    2560:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
    2561:	b7 02 00 00 02 00 00 00	r2 = 2
    2562:	bf 73 00 00 00 00 00 00	r3 = r7
    2563:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
    2564:	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 72)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
    2565:	1d 61 02 00 00 00 00 00	if r1 == r6 goto +2 <LBB25_54>
    2566:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
    2567:	5d 21 eb ff 00 00 00 00	if r1 != r2 goto -21 <LBB25_51>

0000000000005040 <LBB25_54>:
;     event->flags |= SKBTRACER_EVENT_IF;
    2568:	71 81 34 00 00 00 00 00	r1 = *(u8 *)(r8 + 52)
    2569:	47 01 00 00 01 00 00 00	r1 |= 1
    2570:	73 18 34 00 00 00 00 00	*(u8 *)(r8 + 52) = r1
    2571:	79 a7 d8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 40)
;     ev->skb = (u64)skb;
    2572:	7b 78 20 00 00 00 00 00	*(u64 *)(r8 + 32) = r7
;     ev->start_ns = bpf_ktime_get_ns();
    2573:	85 00 00 00 05 00 00 00	call 5
    2574:	7b 08 28 00 00 00 00 00	*(u64 *)(r8 + 40) = r0
    2575:	b7 01 00 00 10 00 00 00	r1 = 16
    2576:	bf 76 00 00 00 00 00 00	r6 = r7
    2577:	0f 16 00 00 00 00 00 00	r6 += r1
    2578:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
    2579:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
    2580:	b7 02 00 00 08 00 00 00	r2 = 8
    2581:	bf 63 00 00 00 00 00 00	r3 = r6
    2582:	85 00 00 00 71 00 00 00	call 113
    2583:	b7 01 00 00 70 00 00 00	r1 = 112
    2584:	bf 73 00 00 00 00 00 00	r3 = r7
    2585:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
    2586:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
    2587:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
    2588:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
    2589:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
    2590:	b7 02 00 00 04 00 00 00	r2 = 4
    2591:	85 00 00 00 71 00 00 00	call 113
    2592:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
    2593:	63 18 4c 00 00 00 00 00	*(u32 *)(r8 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
    2594:	85 00 00 00 08 00 00 00	call 8
    2595:	63 08 50 00 00 00 00 00	*(u32 *)(r8 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
    2596:	85 00 00 00 0e 00 00 00	call 14
    2597:	57 00 00 00 ff ff 00 00	r0 &= 65535
    2598:	63 08 54 00 00 00 00 00	*(u32 *)(r8 + 84) = r0
    2599:	bf a7 00 00 00 00 00 00	r7 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
    2600:	07 07 00 00 f8 ff ff ff	r7 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    2601:	bf 71 00 00 00 00 00 00	r1 = r7
    2602:	b7 02 00 00 08 00 00 00	r2 = 8
    2603:	bf 63 00 00 00 00 00 00	r3 = r6
    2604:	85 00 00 00 71 00 00 00	call 113
    2605:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    2606:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
    2607:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    2608:	bf 71 00 00 00 00 00 00	r1 = r7
    2609:	79 a7 d8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 40)
    2610:	b7 02 00 00 08 00 00 00	r2 = 8
    2611:	85 00 00 00 71 00 00 00	call 113
    2612:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    2613:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
    2614:	0f 13 00 00 00 00 00 00	r3 += r1
    2615:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
    2616:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    2617:	b7 02 00 00 04 00 00 00	r2 = 4
    2618:	85 00 00 00 71 00 00 00	call 113
    2619:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
    2620:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB25_57>
    2621:	b7 01 00 00 18 00 00 00	r1 = 24
    2622:	bf 73 00 00 00 00 00 00	r3 = r7
    2623:	0f 13 00 00 00 00 00 00	r3 += r1
    2624:	bf a1 00 00 00 00 00 00	r1 = r10
    2625:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
    2626:	b7 02 00 00 08 00 00 00	r2 = 8
    2627:	85 00 00 00 71 00 00 00	call 113
    2628:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
    2629:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
    2630:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB25_57>
    2631:	b7 01 00 00 30 00 00 00	r1 = 48
    2632:	0f 13 00 00 00 00 00 00	r3 += r1
    2633:	bf a1 00 00 00 00 00 00	r1 = r10
    2634:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
    2635:	b7 02 00 00 08 00 00 00	r2 = 8
    2636:	85 00 00 00 71 00 00 00	call 113
    2637:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
    2638:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
    2639:	0f 13 00 00 00 00 00 00	r3 += r1
    2640:	bf a1 00 00 00 00 00 00	r1 = r10
    2641:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
    2642:	b7 02 00 00 04 00 00 00	r2 = 4
    2643:	85 00 00 00 71 00 00 00	call 113
    2644:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

00000000000052a8 <LBB25_57>:
;     pkt_info->netns = get_netns(skb);
    2645:	63 18 58 00 00 00 00 00	*(u32 *)(r8 + 88) = r1
    2646:	b7 01 00 00 80 00 00 00	r1 = 128
    2647:	bf 73 00 00 00 00 00 00	r3 = r7
    2648:	0f 13 00 00 00 00 00 00	r3 += r1
    2649:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
    2650:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
    2651:	bf a1 00 00 00 00 00 00	r1 = r10
    2652:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
    2653:	b7 02 00 00 01 00 00 00	r2 = 1
    2654:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
    2655:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
    2656:	73 68 3c 00 00 00 00 00	*(u8 *)(r8 + 60) = r6
;     return type.pkt_type;
    2657:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
    2658:	73 18 5c 00 00 00 00 00	*(u8 *)(r8 + 92) = r1
    2659:	b7 01 00 00 00 00 00 00	r1 = 0
    2660:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
    2661:	0f 13 00 00 00 00 00 00	r3 += r1
;     pkt_info->ifname[0] = 0;
    2662:	bf 81 00 00 00 00 00 00	r1 = r8
    2663:	07 01 00 00 3c 00 00 00	r1 += 60
    2664:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
    2665:	b7 02 00 00 10 00 00 00	r2 = 16
    2666:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
    2667:	71 81 3c 00 00 00 00 00	r1 = *(u8 *)(r8 + 60)
    2668:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB25_59>
    2669:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
    2670:	73 18 3e 00 00 00 00 00	*(u8 *)(r8 + 62) = r1
    2671:	b7 01 00 00 69 00 00 00	r1 = 105
    2672:	73 18 3d 00 00 00 00 00	*(u8 *)(r8 + 61) = r1
    2673:	b7 01 00 00 6e 00 00 00	r1 = 110
    2674:	73 18 3c 00 00 00 00 00	*(u8 *)(r8 + 60) = r1

0000000000005398 <LBB25_59>:
    2675:	b7 01 00 00 c0 00 00 00	r1 = 192
    2676:	bf 73 00 00 00 00 00 00	r3 = r7
    2677:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2678:	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r3
    2679:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2680:	07 01 00 00 f8 ff ff ff	r1 += -8
    2681:	b7 02 00 00 08 00 00 00	r2 = 8
    2682:	85 00 00 00 71 00 00 00	call 113
    2683:	b7 01 00 00 b6 00 00 00	r1 = 182
    2684:	0f 17 00 00 00 00 00 00	r7 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2685:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
    2686:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2687:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    2688:	b7 02 00 00 02 00 00 00	r2 = 2
    2689:	bf 73 00 00 00 00 00 00	r3 = r7
    2690:	85 00 00 00 71 00 00 00	call 113
    2691:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
    2692:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
    2693:	bf 81 00 00 00 00 00 00	r1 = r8
    2694:	07 01 00 00 64 00 00 00	r1 += 100
    2695:	b7 02 00 00 06 00 00 00	r2 = 6
    2696:	bf 63 00 00 00 00 00 00	r3 = r6
    2697:	85 00 00 00 04 00 00 00	call 4
    2698:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2699:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2700:	b7 02 00 00 08 00 00 00	r2 = 8
    2701:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
    2702:	85 00 00 00 71 00 00 00	call 113
    2703:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
    2704:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2705:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    2706:	b7 02 00 00 02 00 00 00	r2 = 2
    2707:	bf 73 00 00 00 00 00 00	r3 = r7
    2708:	85 00 00 00 71 00 00 00	call 113
    2709:	b7 01 00 00 b4 00 00 00	r1 = 180
    2710:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
    2711:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    2712:	69 a7 f8 ff 00 00 00 00	r7 = *(u16 *)(r10 - 8)
    2713:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2714:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    2715:	b7 02 00 00 02 00 00 00	r2 = 2
    2716:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    2717:	07 07 00 00 0e 00 00 00	r7 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    2718:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    2719:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB25_61>
    2720:	bf 17 00 00 00 00 00 00	r7 = r1

0000000000005508 <LBB25_61>:
;     return head + network_header;
    2721:	57 07 00 00 ff ff 00 00	r7 &= 65535
    2722:	0f 76 00 00 00 00 00 00	r6 += r7
    2723:	bf a1 00 00 00 00 00 00	r1 = r10
    2724:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    2725:	b7 02 00 00 01 00 00 00	r2 = 1
    2726:	bf 63 00 00 00 00 00 00	r3 = r6
    2727:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
    2728:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    2729:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
    2730:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB25_66>
    2731:	55 01 47 ff 04 00 00 00	if r1 != 4 goto -185 <LBB25_51>
    2732:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
    2733:	6b 18 6a 00 00 00 00 00	*(u16 *)(r8 + 106) = r1
    2734:	b7 01 00 00 c0 00 00 00	r1 = 192
    2735:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
    2736:	bf 63 00 00 00 00 00 00	r3 = r6
    2737:	0f 13 00 00 00 00 00 00	r3 += r1
    2738:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
    2739:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2740:	b7 02 00 00 08 00 00 00	r2 = 8
    2741:	85 00 00 00 71 00 00 00	call 113
    2742:	b7 01 00 00 b6 00 00 00	r1 = 182
    2743:	bf 63 00 00 00 00 00 00	r3 = r6
    2744:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2745:	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 8)
    2746:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
    2747:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    2748:	b7 02 00 00 02 00 00 00	r2 = 2
    2749:	85 00 00 00 71 00 00 00	call 113
    2750:	b7 01 00 00 b4 00 00 00	r1 = 180
    2751:	bf 63 00 00 00 00 00 00	r3 = r6
    2752:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    2753:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
    2754:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
    2755:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    2756:	b7 02 00 00 02 00 00 00	r2 = 2
    2757:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    2758:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    2759:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    2760:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB25_65>
    2761:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000005650 <LBB25_65>:
;     return head + network_header;
    2762:	57 06 00 00 ff ff 00 00	r6 &= 65535
    2763:	0f 67 00 00 00 00 00 00	r7 += r6
    2764:	b7 01 00 00 0c 00 00 00	r1 = 12
    2765:	bf 73 00 00 00 00 00 00	r3 = r7
    2766:	0f 13 00 00 00 00 00 00	r3 += r1
    2767:	bf a1 00 00 00 00 00 00	r1 = r10
    2768:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
    2769:	b7 02 00 00 04 00 00 00	r2 = 4
    2770:	85 00 00 00 71 00 00 00	call 113
    2771:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
    2772:	63 18 70 00 00 00 00 00	*(u32 *)(r8 + 112) = r1
    2773:	b7 01 00 00 10 00 00 00	r1 = 16
    2774:	bf 73 00 00 00 00 00 00	r3 = r7
    2775:	0f 13 00 00 00 00 00 00	r3 += r1
    2776:	bf a1 00 00 00 00 00 00	r1 = r10
    2777:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
    2778:	b7 02 00 00 04 00 00 00	r2 = 4
    2779:	85 00 00 00 71 00 00 00	call 113
    2780:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
    2781:	63 18 80 00 00 00 00 00	*(u32 *)(r8 + 128) = r1
    2782:	b7 01 00 00 02 00 00 00	r1 = 2
    2783:	bf 73 00 00 00 00 00 00	r3 = r7
    2784:	0f 13 00 00 00 00 00 00	r3 += r1
    2785:	bf a1 00 00 00 00 00 00	r1 = r10
    2786:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
    2787:	b7 02 00 00 02 00 00 00	r2 = 2
    2788:	85 00 00 00 71 00 00 00	call 113
    2789:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
    2790:	dc 01 00 00 10 00 00 00	r1 = be16 r1
    2791:	6b 18 90 00 00 00 00 00	*(u16 *)(r8 + 144) = r1
    2792:	b7 01 00 00 09 00 00 00	r1 = 9
    2793:	05 00 38 00 00 00 00 00	goto +56 <LBB25_69>

0000000000005750 <LBB25_66>:
    2794:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
    2795:	6b 18 6a 00 00 00 00 00	*(u16 *)(r8 + 106) = r1
    2796:	b7 01 00 00 c0 00 00 00	r1 = 192
    2797:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
    2798:	bf 63 00 00 00 00 00 00	r3 = r6
    2799:	0f 13 00 00 00 00 00 00	r3 += r1
    2800:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
    2801:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2802:	b7 02 00 00 08 00 00 00	r2 = 8
    2803:	85 00 00 00 71 00 00 00	call 113
    2804:	b7 01 00 00 b6 00 00 00	r1 = 182
    2805:	bf 63 00 00 00 00 00 00	r3 = r6
    2806:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2807:	79 a7 f8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 8)
    2808:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
    2809:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    2810:	b7 02 00 00 02 00 00 00	r2 = 2
    2811:	85 00 00 00 71 00 00 00	call 113
    2812:	b7 01 00 00 b4 00 00 00	r1 = 180
    2813:	bf 63 00 00 00 00 00 00	r3 = r6
    2814:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    2815:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
    2816:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
    2817:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    2818:	b7 02 00 00 02 00 00 00	r2 = 2
    2819:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    2820:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    2821:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    2822:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB25_68>
    2823:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000005840 <LBB25_68>:
;     return head + network_header;
    2824:	57 06 00 00 ff ff 00 00	r6 &= 65535
    2825:	0f 67 00 00 00 00 00 00	r7 += r6
    2826:	b7 01 00 00 08 00 00 00	r1 = 8
    2827:	bf 73 00 00 00 00 00 00	r3 = r7
    2828:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
    2829:	bf 81 00 00 00 00 00 00	r1 = r8
    2830:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
    2831:	b7 02 00 00 10 00 00 00	r2 = 16
    2832:	85 00 00 00 04 00 00 00	call 4
    2833:	b7 01 00 00 18 00 00 00	r1 = 24
    2834:	bf 73 00 00 00 00 00 00	r3 = r7
    2835:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
    2836:	bf 81 00 00 00 00 00 00	r1 = r8
    2837:	07 01 00 00 80 00 00 00	r1 += 128
    2838:	b7 02 00 00 10 00 00 00	r2 = 16
    2839:	85 00 00 00 04 00 00 00	call 4
    2840:	b7 01 00 00 04 00 00 00	r1 = 4
    2841:	bf 73 00 00 00 00 00 00	r3 = r7
    2842:	0f 13 00 00 00 00 00 00	r3 += r1
    2843:	bf a1 00 00 00 00 00 00	r1 = r10
    2844:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
    2845:	b7 02 00 00 02 00 00 00	r2 = 2
    2846:	85 00 00 00 71 00 00 00	call 113
    2847:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
    2848:	6b 18 90 00 00 00 00 00	*(u16 *)(r8 + 144) = r1
    2849:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000005910 <LBB25_69>:
    2850:	bf 73 00 00 00 00 00 00	r3 = r7
    2851:	0f 13 00 00 00 00 00 00	r3 += r1
    2852:	bf a1 00 00 00 00 00 00	r1 = r10
    2853:	07 01 00 00 f8 ff ff ff	r1 += -8
    2854:	b7 02 00 00 01 00 00 00	r2 = 1
    2855:	85 00 00 00 71 00 00 00	call 113
    2856:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    2857:	73 18 93 00 00 00 00 00	*(u8 *)(r8 + 147) = r1
    2858:	bf a1 00 00 00 00 00 00	r1 = r10
    2859:	07 01 00 00 f8 ff ff ff	r1 += -8
    2860:	b7 02 00 00 01 00 00 00	r2 = 1
    2861:	bf 73 00 00 00 00 00 00	r3 = r7
    2862:	85 00 00 00 04 00 00 00	call 4
    2863:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    2864:	57 01 00 00 f0 00 00 00	r1 &= 240
    2865:	77 01 00 00 04 00 00 00	r1 >>= 4
    2866:	73 18 92 00 00 00 00 00	*(u8 *)(r8 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
    2867:	71 81 93 00 00 00 00 00	r1 = *(u8 *)(r8 + 147)
;     if (l4_proto == IPPROTO_TCP) {
    2868:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB25_72>
    2869:	15 01 53 00 01 00 00 00	if r1 == 1 goto +83 <LBB25_84>
    2870:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB25_74>
    2871:	05 00 bb fe 00 00 00 00	goto -325 <LBB25_51>

00000000000059c0 <LBB25_74>:
    2872:	b7 01 00 00 c0 00 00 00	r1 = 192
    2873:	79 a7 d8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 40)
    2874:	bf 73 00 00 00 00 00 00	r3 = r7
    2875:	0f 13 00 00 00 00 00 00	r3 += r1
    2876:	bf a1 00 00 00 00 00 00	r1 = r10
    2877:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2878:	b7 02 00 00 08 00 00 00	r2 = 8
    2879:	85 00 00 00 71 00 00 00	call 113
    2880:	b7 01 00 00 b6 00 00 00	r1 = 182
    2881:	bf 73 00 00 00 00 00 00	r3 = r7
    2882:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2883:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    2884:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
    2885:	bf a1 00 00 00 00 00 00	r1 = r10
    2886:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    2887:	b7 02 00 00 02 00 00 00	r2 = 2
    2888:	85 00 00 00 71 00 00 00	call 113
    2889:	b7 01 00 00 b4 00 00 00	r1 = 180
    2890:	0f 17 00 00 00 00 00 00	r7 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    2891:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
    2892:	bf a1 00 00 00 00 00 00	r1 = r10
    2893:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    2894:	b7 02 00 00 02 00 00 00	r2 = 2
    2895:	bf 73 00 00 00 00 00 00	r3 = r7
    2896:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    2897:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    2898:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    2899:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB25_76>
    2900:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000005aa8 <LBB25_76>:
;     return head + network_header;
    2901:	57 06 00 00 ff ff 00 00	r6 &= 65535
    2902:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
    2903:	0f 61 00 00 00 00 00 00	r1 += r6
    2904:	bf 16 00 00 00 00 00 00	r6 = r1
    2905:	bf a1 00 00 00 00 00 00	r1 = r10
    2906:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    2907:	b7 02 00 00 01 00 00 00	r2 = 1
    2908:	bf 63 00 00 00 00 00 00	r3 = r6
    2909:	85 00 00 00 04 00 00 00	call 4
    2910:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
    2911:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
    2912:	57 02 00 00 f0 00 00 00	r2 &= 240
    2913:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB25_78>
    2914:	bf a1 00 00 00 00 00 00	r1 = r10
    2915:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    2916:	b7 02 00 00 01 00 00 00	r2 = 1
    2917:	bf 63 00 00 00 00 00 00	r3 = r6
    2918:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
    2919:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    2920:	67 01 00 00 02 00 00 00	r1 <<= 2
    2921:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000005b50 <LBB25_78>:
;     return l3_header + transport_size;
    2922:	0f 16 00 00 00 00 00 00	r6 += r1
    2923:	b7 01 00 00 00 00 00 00	r1 = 0
    2924:	bf 63 00 00 00 00 00 00	r3 = r6
    2925:	0f 13 00 00 00 00 00 00	r3 += r1
    2926:	bf a1 00 00 00 00 00 00	r1 = r10
    2927:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
    2928:	b7 02 00 00 02 00 00 00	r2 = 2
    2929:	85 00 00 00 71 00 00 00	call 113
    2930:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
    2931:	dc 01 00 00 10 00 00 00	r1 = be16 r1
    2932:	6b 18 98 00 00 00 00 00	*(u16 *)(r8 + 152) = r1
    2933:	b7 01 00 00 02 00 00 00	r1 = 2
    2934:	bf 63 00 00 00 00 00 00	r3 = r6
    2935:	0f 13 00 00 00 00 00 00	r3 += r1
    2936:	bf a1 00 00 00 00 00 00	r1 = r10
    2937:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
    2938:	b7 02 00 00 02 00 00 00	r2 = 2
    2939:	85 00 00 00 71 00 00 00	call 113
    2940:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
    2941:	dc 01 00 00 10 00 00 00	r1 = be16 r1
    2942:	6b 18 9a 00 00 00 00 00	*(u16 *)(r8 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
    2943:	07 06 00 00 0c 00 00 00	r6 += 12
    2944:	bf 81 00 00 00 00 00 00	r1 = r8
    2945:	07 01 00 00 9c 00 00 00	r1 += 156
    2946:	b7 02 00 00 02 00 00 00	r2 = 2
    2947:	bf 63 00 00 00 00 00 00	r3 = r6
    2948:	85 00 00 00 04 00 00 00	call 4
    2949:	05 00 8b 00 00 00 00 00	goto +139 <LBB25_89>

0000000000005c30 <LBB25_72>:
;     if (l4_proto == IPPROTO_TCP) {
    2950:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB25_79>
    2951:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB25_84>
    2952:	05 00 6a fe 00 00 00 00	goto -406 <LBB25_51>

0000000000005c48 <LBB25_84>:
    2953:	b7 01 00 00 c0 00 00 00	r1 = 192
    2954:	79 a7 d8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 40)
    2955:	bf 73 00 00 00 00 00 00	r3 = r7
    2956:	0f 13 00 00 00 00 00 00	r3 += r1
    2957:	bf a1 00 00 00 00 00 00	r1 = r10
    2958:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2959:	b7 02 00 00 08 00 00 00	r2 = 8
    2960:	85 00 00 00 71 00 00 00	call 113
    2961:	b7 01 00 00 b6 00 00 00	r1 = 182
    2962:	bf 73 00 00 00 00 00 00	r3 = r7
    2963:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    2964:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    2965:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
    2966:	bf a1 00 00 00 00 00 00	r1 = r10
    2967:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    2968:	b7 02 00 00 02 00 00 00	r2 = 2
    2969:	85 00 00 00 71 00 00 00	call 113
    2970:	b7 01 00 00 b4 00 00 00	r1 = 180
    2971:	0f 17 00 00 00 00 00 00	r7 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    2972:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
    2973:	bf a1 00 00 00 00 00 00	r1 = r10
    2974:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    2975:	b7 02 00 00 02 00 00 00	r2 = 2
    2976:	bf 73 00 00 00 00 00 00	r3 = r7
    2977:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    2978:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    2979:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    2980:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB25_86>
    2981:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000005d30 <LBB25_86>:
;     return head + network_header;
    2982:	57 06 00 00 ff ff 00 00	r6 &= 65535
    2983:	79 a7 c8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 56)
;     return head + network_header;
    2984:	0f 67 00 00 00 00 00 00	r7 += r6
    2985:	bf a1 00 00 00 00 00 00	r1 = r10
    2986:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    2987:	b7 02 00 00 01 00 00 00	r2 = 1
    2988:	bf 73 00 00 00 00 00 00	r3 = r7
    2989:	85 00 00 00 04 00 00 00	call 4
    2990:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
    2991:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
    2992:	57 02 00 00 f0 00 00 00	r2 &= 240
    2993:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB25_88>
    2994:	bf a1 00 00 00 00 00 00	r1 = r10
    2995:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    2996:	b7 02 00 00 01 00 00 00	r2 = 1
    2997:	bf 73 00 00 00 00 00 00	r3 = r7
    2998:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
    2999:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    3000:	67 01 00 00 02 00 00 00	r1 <<= 2
    3001:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000005dd0 <LBB25_88>:
;     return l3_header + transport_size;
    3002:	0f 17 00 00 00 00 00 00	r7 += r1
    3003:	bf a6 00 00 00 00 00 00	r6 = r10
    3004:	07 06 00 00 f8 ff ff ff	r6 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
    3005:	bf 61 00 00 00 00 00 00	r1 = r6
    3006:	b7 02 00 00 08 00 00 00	r2 = 8
    3007:	bf 73 00 00 00 00 00 00	r3 = r7
    3008:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
    3009:	71 61 00 00 00 00 00 00	r1 = *(u8 *)(r6 + 0)
    3010:	73 18 a4 00 00 00 00 00	*(u8 *)(r8 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
    3011:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
    3012:	dc 01 00 00 10 00 00 00	r1 = be16 r1
    3013:	6b 18 a0 00 00 00 00 00	*(u16 *)(r8 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
    3014:	69 61 06 00 00 00 00 00	r1 = *(u16 *)(r6 + 6)
    3015:	dc 01 00 00 10 00 00 00	r1 = be16 r1
    3016:	6b 18 a2 00 00 00 00 00	*(u16 *)(r8 + 162) = r1
    3017:	05 00 47 00 00 00 00 00	goto +71 <LBB25_89>

0000000000005e50 <LBB25_79>:
    3018:	b7 01 00 00 c0 00 00 00	r1 = 192
    3019:	79 a7 d8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 40)
    3020:	bf 73 00 00 00 00 00 00	r3 = r7
    3021:	0f 13 00 00 00 00 00 00	r3 += r1
    3022:	bf a1 00 00 00 00 00 00	r1 = r10
    3023:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    3024:	b7 02 00 00 08 00 00 00	r2 = 8
    3025:	85 00 00 00 71 00 00 00	call 113
    3026:	b7 01 00 00 b6 00 00 00	r1 = 182
    3027:	bf 73 00 00 00 00 00 00	r3 = r7
    3028:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    3029:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    3030:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
    3031:	bf a1 00 00 00 00 00 00	r1 = r10
    3032:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    3033:	b7 02 00 00 02 00 00 00	r2 = 2
    3034:	85 00 00 00 71 00 00 00	call 113
    3035:	b7 01 00 00 b4 00 00 00	r1 = 180
    3036:	0f 17 00 00 00 00 00 00	r7 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    3037:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
    3038:	bf a1 00 00 00 00 00 00	r1 = r10
    3039:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    3040:	b7 02 00 00 02 00 00 00	r2 = 2
    3041:	bf 73 00 00 00 00 00 00	r3 = r7
    3042:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    3043:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    3044:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    3045:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB25_81>
    3046:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000005f38 <LBB25_81>:
;     return head + network_header;
    3047:	57 06 00 00 ff ff 00 00	r6 &= 65535
    3048:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
    3049:	0f 61 00 00 00 00 00 00	r1 += r6
    3050:	bf 16 00 00 00 00 00 00	r6 = r1
    3051:	bf a1 00 00 00 00 00 00	r1 = r10
    3052:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    3053:	b7 02 00 00 01 00 00 00	r2 = 1
    3054:	bf 63 00 00 00 00 00 00	r3 = r6
    3055:	85 00 00 00 04 00 00 00	call 4
    3056:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
    3057:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
    3058:	57 02 00 00 f0 00 00 00	r2 &= 240
    3059:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB25_83>
    3060:	bf a1 00 00 00 00 00 00	r1 = r10
    3061:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    3062:	b7 02 00 00 01 00 00 00	r2 = 1
    3063:	bf 63 00 00 00 00 00 00	r3 = r6
    3064:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
    3065:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    3066:	67 01 00 00 02 00 00 00	r1 <<= 2
    3067:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000005fe0 <LBB25_83>:
;     return l3_header + transport_size;
    3068:	0f 16 00 00 00 00 00 00	r6 += r1
    3069:	b7 01 00 00 00 00 00 00	r1 = 0
    3070:	bf 63 00 00 00 00 00 00	r3 = r6
    3071:	0f 13 00 00 00 00 00 00	r3 += r1
    3072:	bf a1 00 00 00 00 00 00	r1 = r10
    3073:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
    3074:	b7 02 00 00 02 00 00 00	r2 = 2
    3075:	85 00 00 00 71 00 00 00	call 113
    3076:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
    3077:	dc 01 00 00 10 00 00 00	r1 = be16 r1
    3078:	6b 18 98 00 00 00 00 00	*(u16 *)(r8 + 152) = r1
    3079:	b7 01 00 00 02 00 00 00	r1 = 2
    3080:	0f 16 00 00 00 00 00 00	r6 += r1
    3081:	bf a1 00 00 00 00 00 00	r1 = r10
    3082:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
    3083:	b7 02 00 00 02 00 00 00	r2 = 2
    3084:	bf 63 00 00 00 00 00 00	r3 = r6
    3085:	85 00 00 00 71 00 00 00	call 113
    3086:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
    3087:	dc 01 00 00 10 00 00 00	r1 = be16 r1
    3088:	6b 18 9a 00 00 00 00 00	*(u16 *)(r8 + 154) = r1

0000000000006088 <LBB25_89>:
;     return cfg->callstack == 0;
    3089:	71 91 11 00 00 00 00 00	r1 = *(u8 *)(r9 + 17)
    3090:	79 a6 b0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 80)
;     if (!filter_callstack(cfg))
    3091:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB25_91>
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
    3092:	bf 61 00 00 00 00 00 00	r1 = r6
    3093:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    3095:	b7 03 00 00 00 00 00 00	r3 = 0
    3096:	85 00 00 00 1b 00 00 00	call 27
    3097:	63 08 30 00 00 00 00 00	*(u32 *)(r8 + 48) = r0

00000000000060d0 <LBB25_91>:
    3098:	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 48)
;     for (j = 10; j < 64; j += 10) CPY(j);
    3099:	71 21 00 00 00 00 00 00	r1 = *(u8 *)(r2 + 0)
    3100:	15 01 1e 00 00 00 00 00	if r1 == 0 goto +30 <LBB25_108>
    3101:	73 18 00 00 00 00 00 00	*(u8 *)(r8 + 0) = r1
    3102:	71 21 01 00 00 00 00 00	r1 = *(u8 *)(r2 + 1)
    3103:	15 01 1b 00 00 00 00 00	if r1 == 0 goto +27 <LBB25_108>
    3104:	73 18 01 00 00 00 00 00	*(u8 *)(r8 + 1) = r1
    3105:	71 21 02 00 00 00 00 00	r1 = *(u8 *)(r2 + 2)
    3106:	15 01 18 00 00 00 00 00	if r1 == 0 goto +24 <LBB25_108>
    3107:	73 18 02 00 00 00 00 00	*(u8 *)(r8 + 2) = r1
    3108:	71 21 03 00 00 00 00 00	r1 = *(u8 *)(r2 + 3)
    3109:	15 01 15 00 00 00 00 00	if r1 == 0 goto +21 <LBB25_108>
    3110:	73 18 03 00 00 00 00 00	*(u8 *)(r8 + 3) = r1
    3111:	71 21 04 00 00 00 00 00	r1 = *(u8 *)(r2 + 4)
    3112:	15 01 12 00 00 00 00 00	if r1 == 0 goto +18 <LBB25_108>
    3113:	73 18 04 00 00 00 00 00	*(u8 *)(r8 + 4) = r1
    3114:	71 21 05 00 00 00 00 00	r1 = *(u8 *)(r2 + 5)
    3115:	15 01 0f 00 00 00 00 00	if r1 == 0 goto +15 <LBB25_108>
    3116:	73 18 05 00 00 00 00 00	*(u8 *)(r8 + 5) = r1
    3117:	71 21 06 00 00 00 00 00	r1 = *(u8 *)(r2 + 6)
    3118:	15 01 0c 00 00 00 00 00	if r1 == 0 goto +12 <LBB25_108>
    3119:	73 18 06 00 00 00 00 00	*(u8 *)(r8 + 6) = r1
    3120:	71 21 07 00 00 00 00 00	r1 = *(u8 *)(r2 + 7)
    3121:	15 01 09 00 00 00 00 00	if r1 == 0 goto +9 <LBB25_108>
    3122:	73 18 07 00 00 00 00 00	*(u8 *)(r8 + 7) = r1
    3123:	71 21 08 00 00 00 00 00	r1 = *(u8 *)(r2 + 8)
    3124:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB25_108>
    3125:	73 18 08 00 00 00 00 00	*(u8 *)(r8 + 8) = r1
    3126:	71 21 09 00 00 00 00 00	r1 = *(u8 *)(r2 + 9)
    3127:	15 01 03 00 00 00 00 00	if r1 == 0 goto +3 <LBB25_108>
    3128:	73 18 09 00 00 00 00 00	*(u8 *)(r8 + 9) = r1
    3129:	71 21 0a 00 00 00 00 00	r1 = *(u8 *)(r2 + 10)
    3130:	55 01 09 00 00 00 00 00	if r1 != 0 goto +9 <LBB25_94>

00000000000061d8 <LBB25_108>:
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
    3131:	bf 61 00 00 00 00 00 00	r1 = r6
    3132:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    3134:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
    3136:	bf 84 00 00 00 00 00 00	r4 = r8
    3137:	b7 05 00 00 e0 00 00 00	r5 = 224
    3138:	85 00 00 00 19 00 00 00	call 25
    3139:	05 00 af fd 00 00 00 00	goto -593 <LBB25_51>

0000000000006220 <LBB25_94>:
;     for (j = 10; j < 64; j += 10) CPY(j);
    3140:	73 18 0a 00 00 00 00 00	*(u8 *)(r8 + 10) = r1
    3141:	71 21 0b 00 00 00 00 00	r1 = *(u8 *)(r2 + 11)
    3142:	15 01 f4 ff 00 00 00 00	if r1 == 0 goto -12 <LBB25_108>
    3143:	73 18 0b 00 00 00 00 00	*(u8 *)(r8 + 11) = r1
    3144:	71 21 0c 00 00 00 00 00	r1 = *(u8 *)(r2 + 12)
    3145:	15 01 f1 ff 00 00 00 00	if r1 == 0 goto -15 <LBB25_108>
    3146:	73 18 0c 00 00 00 00 00	*(u8 *)(r8 + 12) = r1
    3147:	71 21 0d 00 00 00 00 00	r1 = *(u8 *)(r2 + 13)
    3148:	15 01 ee ff 00 00 00 00	if r1 == 0 goto -18 <LBB25_108>
    3149:	73 18 0d 00 00 00 00 00	*(u8 *)(r8 + 13) = r1
    3150:	71 21 0e 00 00 00 00 00	r1 = *(u8 *)(r2 + 14)
    3151:	15 01 eb ff 00 00 00 00	if r1 == 0 goto -21 <LBB25_108>
    3152:	73 18 0e 00 00 00 00 00	*(u8 *)(r8 + 14) = r1
    3153:	71 21 0f 00 00 00 00 00	r1 = *(u8 *)(r2 + 15)
    3154:	15 01 e8 ff 00 00 00 00	if r1 == 0 goto -24 <LBB25_108>
    3155:	73 18 0f 00 00 00 00 00	*(u8 *)(r8 + 15) = r1
    3156:	71 21 10 00 00 00 00 00	r1 = *(u8 *)(r2 + 16)
    3157:	15 01 e5 ff 00 00 00 00	if r1 == 0 goto -27 <LBB25_108>
    3158:	73 18 10 00 00 00 00 00	*(u8 *)(r8 + 16) = r1
    3159:	71 21 11 00 00 00 00 00	r1 = *(u8 *)(r2 + 17)
    3160:	15 01 e2 ff 00 00 00 00	if r1 == 0 goto -30 <LBB25_108>
    3161:	73 18 11 00 00 00 00 00	*(u8 *)(r8 + 17) = r1
    3162:	71 21 12 00 00 00 00 00	r1 = *(u8 *)(r2 + 18)
    3163:	15 01 df ff 00 00 00 00	if r1 == 0 goto -33 <LBB25_108>
    3164:	73 18 12 00 00 00 00 00	*(u8 *)(r8 + 18) = r1
    3165:	71 21 13 00 00 00 00 00	r1 = *(u8 *)(r2 + 19)
    3166:	15 01 dc ff 00 00 00 00	if r1 == 0 goto -36 <LBB25_108>
    3167:	73 18 13 00 00 00 00 00	*(u8 *)(r8 + 19) = r1
    3168:	71 21 14 00 00 00 00 00	r1 = *(u8 *)(r2 + 20)
    3169:	15 01 d9 ff 00 00 00 00	if r1 == 0 goto -39 <LBB25_108>
    3170:	73 18 14 00 00 00 00 00	*(u8 *)(r8 + 20) = r1
    3171:	71 21 15 00 00 00 00 00	r1 = *(u8 *)(r2 + 21)
    3172:	15 01 d6 ff 00 00 00 00	if r1 == 0 goto -42 <LBB25_108>
    3173:	73 18 15 00 00 00 00 00	*(u8 *)(r8 + 21) = r1
    3174:	71 21 16 00 00 00 00 00	r1 = *(u8 *)(r2 + 22)
    3175:	15 01 d3 ff 00 00 00 00	if r1 == 0 goto -45 <LBB25_108>
    3176:	73 18 16 00 00 00 00 00	*(u8 *)(r8 + 22) = r1
    3177:	71 21 17 00 00 00 00 00	r1 = *(u8 *)(r2 + 23)
    3178:	15 01 d0 ff 00 00 00 00	if r1 == 0 goto -48 <LBB25_108>
    3179:	73 18 17 00 00 00 00 00	*(u8 *)(r8 + 23) = r1
    3180:	71 21 18 00 00 00 00 00	r1 = *(u8 *)(r2 + 24)
    3181:	15 01 cd ff 00 00 00 00	if r1 == 0 goto -51 <LBB25_108>
    3182:	73 18 18 00 00 00 00 00	*(u8 *)(r8 + 24) = r1
    3183:	71 21 19 00 00 00 00 00	r1 = *(u8 *)(r2 + 25)
    3184:	15 01 ca ff 00 00 00 00	if r1 == 0 goto -54 <LBB25_108>
    3185:	73 18 19 00 00 00 00 00	*(u8 *)(r8 + 25) = r1
    3186:	71 21 1a 00 00 00 00 00	r1 = *(u8 *)(r2 + 26)
    3187:	15 01 c7 ff 00 00 00 00	if r1 == 0 goto -57 <LBB25_108>
    3188:	73 18 1a 00 00 00 00 00	*(u8 *)(r8 + 26) = r1
    3189:	71 21 1b 00 00 00 00 00	r1 = *(u8 *)(r2 + 27)
    3190:	15 01 c4 ff 00 00 00 00	if r1 == 0 goto -60 <LBB25_108>
    3191:	73 18 1b 00 00 00 00 00	*(u8 *)(r8 + 27) = r1
    3192:	71 21 1c 00 00 00 00 00	r1 = *(u8 *)(r2 + 28)
    3193:	15 01 c1 ff 00 00 00 00	if r1 == 0 goto -63 <LBB25_108>
    3194:	73 18 1c 00 00 00 00 00	*(u8 *)(r8 + 28) = r1
    3195:	71 21 1d 00 00 00 00 00	r1 = *(u8 *)(r2 + 29)
    3196:	15 01 be ff 00 00 00 00	if r1 == 0 goto -66 <LBB25_108>
    3197:	73 18 1d 00 00 00 00 00	*(u8 *)(r8 + 29) = r1
    3198:	71 21 1e 00 00 00 00 00	r1 = *(u8 *)(r2 + 30)
    3199:	15 01 bb ff 00 00 00 00	if r1 == 0 goto -69 <LBB25_108>
    3200:	73 18 1e 00 00 00 00 00	*(u8 *)(r8 + 30) = r1
    3201:	71 21 1f 00 00 00 00 00	r1 = *(u8 *)(r2 + 31)
    3202:	15 01 b8 ff 00 00 00 00	if r1 == 0 goto -72 <LBB25_108>
    3203:	73 18 1f 00 00 00 00 00	*(u8 *)(r8 + 31) = r1
    3204:	71 21 20 00 00 00 00 00	r1 = *(u8 *)(r2 + 32)
    3205:	15 01 b5 ff 00 00 00 00	if r1 == 0 goto -75 <LBB25_108>
    3206:	73 18 20 00 00 00 00 00	*(u8 *)(r8 + 32) = r1
    3207:	71 21 21 00 00 00 00 00	r1 = *(u8 *)(r2 + 33)
    3208:	15 01 b2 ff 00 00 00 00	if r1 == 0 goto -78 <LBB25_108>
    3209:	73 18 21 00 00 00 00 00	*(u8 *)(r8 + 33) = r1
    3210:	71 21 22 00 00 00 00 00	r1 = *(u8 *)(r2 + 34)
    3211:	15 01 af ff 00 00 00 00	if r1 == 0 goto -81 <LBB25_108>
    3212:	73 18 22 00 00 00 00 00	*(u8 *)(r8 + 34) = r1
    3213:	71 21 23 00 00 00 00 00	r1 = *(u8 *)(r2 + 35)
    3214:	15 01 ac ff 00 00 00 00	if r1 == 0 goto -84 <LBB25_108>
    3215:	73 18 23 00 00 00 00 00	*(u8 *)(r8 + 35) = r1
    3216:	71 21 24 00 00 00 00 00	r1 = *(u8 *)(r2 + 36)
    3217:	15 01 a9 ff 00 00 00 00	if r1 == 0 goto -87 <LBB25_108>
    3218:	73 18 24 00 00 00 00 00	*(u8 *)(r8 + 36) = r1
    3219:	71 21 25 00 00 00 00 00	r1 = *(u8 *)(r2 + 37)
    3220:	15 01 a6 ff 00 00 00 00	if r1 == 0 goto -90 <LBB25_108>
    3221:	73 18 25 00 00 00 00 00	*(u8 *)(r8 + 37) = r1
    3222:	71 21 26 00 00 00 00 00	r1 = *(u8 *)(r2 + 38)
    3223:	15 01 a3 ff 00 00 00 00	if r1 == 0 goto -93 <LBB25_108>
    3224:	73 18 26 00 00 00 00 00	*(u8 *)(r8 + 38) = r1
    3225:	71 21 27 00 00 00 00 00	r1 = *(u8 *)(r2 + 39)
    3226:	15 01 a0 ff 00 00 00 00	if r1 == 0 goto -96 <LBB25_108>
    3227:	73 18 27 00 00 00 00 00	*(u8 *)(r8 + 39) = r1
    3228:	71 21 28 00 00 00 00 00	r1 = *(u8 *)(r2 + 40)
    3229:	15 01 9d ff 00 00 00 00	if r1 == 0 goto -99 <LBB25_108>
    3230:	73 18 28 00 00 00 00 00	*(u8 *)(r8 + 40) = r1
    3231:	71 21 29 00 00 00 00 00	r1 = *(u8 *)(r2 + 41)
    3232:	15 01 9a ff 00 00 00 00	if r1 == 0 goto -102 <LBB25_108>
    3233:	73 18 29 00 00 00 00 00	*(u8 *)(r8 + 41) = r1
    3234:	71 21 2a 00 00 00 00 00	r1 = *(u8 *)(r2 + 42)
    3235:	15 01 97 ff 00 00 00 00	if r1 == 0 goto -105 <LBB25_108>
    3236:	73 18 2a 00 00 00 00 00	*(u8 *)(r8 + 42) = r1
    3237:	71 21 2b 00 00 00 00 00	r1 = *(u8 *)(r2 + 43)
    3238:	15 01 94 ff 00 00 00 00	if r1 == 0 goto -108 <LBB25_108>
    3239:	73 18 2b 00 00 00 00 00	*(u8 *)(r8 + 43) = r1
    3240:	71 21 2c 00 00 00 00 00	r1 = *(u8 *)(r2 + 44)
    3241:	15 01 91 ff 00 00 00 00	if r1 == 0 goto -111 <LBB25_108>
    3242:	73 18 2c 00 00 00 00 00	*(u8 *)(r8 + 44) = r1
    3243:	71 21 2d 00 00 00 00 00	r1 = *(u8 *)(r2 + 45)
    3244:	15 01 8e ff 00 00 00 00	if r1 == 0 goto -114 <LBB25_108>
    3245:	73 18 2d 00 00 00 00 00	*(u8 *)(r8 + 45) = r1
    3246:	71 21 2e 00 00 00 00 00	r1 = *(u8 *)(r2 + 46)
    3247:	15 01 8b ff 00 00 00 00	if r1 == 0 goto -117 <LBB25_108>
    3248:	73 18 2e 00 00 00 00 00	*(u8 *)(r8 + 46) = r1
    3249:	71 21 2f 00 00 00 00 00	r1 = *(u8 *)(r2 + 47)
    3250:	15 01 88 ff 00 00 00 00	if r1 == 0 goto -120 <LBB25_108>
    3251:	73 18 2f 00 00 00 00 00	*(u8 *)(r8 + 47) = r1
    3252:	71 21 30 00 00 00 00 00	r1 = *(u8 *)(r2 + 48)
    3253:	15 01 85 ff 00 00 00 00	if r1 == 0 goto -123 <LBB25_108>
    3254:	73 18 30 00 00 00 00 00	*(u8 *)(r8 + 48) = r1
    3255:	71 21 31 00 00 00 00 00	r1 = *(u8 *)(r2 + 49)
    3256:	15 01 82 ff 00 00 00 00	if r1 == 0 goto -126 <LBB25_108>
    3257:	73 18 31 00 00 00 00 00	*(u8 *)(r8 + 49) = r1
    3258:	71 21 32 00 00 00 00 00	r1 = *(u8 *)(r2 + 50)
    3259:	15 01 7f ff 00 00 00 00	if r1 == 0 goto -129 <LBB25_108>
    3260:	73 18 32 00 00 00 00 00	*(u8 *)(r8 + 50) = r1
    3261:	71 21 33 00 00 00 00 00	r1 = *(u8 *)(r2 + 51)
    3262:	15 01 7c ff 00 00 00 00	if r1 == 0 goto -132 <LBB25_108>
    3263:	73 18 33 00 00 00 00 00	*(u8 *)(r8 + 51) = r1
    3264:	71 21 34 00 00 00 00 00	r1 = *(u8 *)(r2 + 52)
    3265:	15 01 79 ff 00 00 00 00	if r1 == 0 goto -135 <LBB25_108>
    3266:	73 18 34 00 00 00 00 00	*(u8 *)(r8 + 52) = r1
    3267:	71 21 35 00 00 00 00 00	r1 = *(u8 *)(r2 + 53)
    3268:	15 01 76 ff 00 00 00 00	if r1 == 0 goto -138 <LBB25_108>
    3269:	73 18 35 00 00 00 00 00	*(u8 *)(r8 + 53) = r1
    3270:	71 21 36 00 00 00 00 00	r1 = *(u8 *)(r2 + 54)
    3271:	15 01 73 ff 00 00 00 00	if r1 == 0 goto -141 <LBB25_108>
    3272:	73 18 36 00 00 00 00 00	*(u8 *)(r8 + 54) = r1
    3273:	71 21 37 00 00 00 00 00	r1 = *(u8 *)(r2 + 55)
    3274:	15 01 70 ff 00 00 00 00	if r1 == 0 goto -144 <LBB25_108>
    3275:	73 18 37 00 00 00 00 00	*(u8 *)(r8 + 55) = r1
    3276:	71 21 38 00 00 00 00 00	r1 = *(u8 *)(r2 + 56)
    3277:	15 01 6d ff 00 00 00 00	if r1 == 0 goto -147 <LBB25_108>
    3278:	73 18 38 00 00 00 00 00	*(u8 *)(r8 + 56) = r1
    3279:	71 21 39 00 00 00 00 00	r1 = *(u8 *)(r2 + 57)
    3280:	15 01 6a ff 00 00 00 00	if r1 == 0 goto -150 <LBB25_108>
    3281:	73 18 39 00 00 00 00 00	*(u8 *)(r8 + 57) = r1
    3282:	71 21 3a 00 00 00 00 00	r1 = *(u8 *)(r2 + 58)
    3283:	15 01 67 ff 00 00 00 00	if r1 == 0 goto -153 <LBB25_108>
    3284:	73 18 3a 00 00 00 00 00	*(u8 *)(r8 + 58) = r1
    3285:	71 21 3b 00 00 00 00 00	r1 = *(u8 *)(r2 + 59)
    3286:	15 01 64 ff 00 00 00 00	if r1 == 0 goto -156 <LBB25_108>
    3287:	73 18 3b 00 00 00 00 00	*(u8 *)(r8 + 59) = r1
;     CPY(64);
    3288:	71 21 3c 00 00 00 00 00	r1 = *(u8 *)(r2 + 60)
    3289:	15 01 61 ff 00 00 00 00	if r1 == 0 goto -159 <LBB25_108>
    3290:	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 64)
    3291:	73 13 00 00 00 00 00 00	*(u8 *)(r3 + 0) = r1
    3292:	71 21 3d 00 00 00 00 00	r1 = *(u8 *)(r2 + 61)
    3293:	15 01 5d ff 00 00 00 00	if r1 == 0 goto -163 <LBB25_108>
    3294:	73 18 3d 00 00 00 00 00	*(u8 *)(r8 + 61) = r1
    3295:	71 21 3e 00 00 00 00 00	r1 = *(u8 *)(r2 + 62)
    3296:	15 01 5a ff 00 00 00 00	if r1 == 0 goto -166 <LBB25_108>
    3297:	73 18 3e 00 00 00 00 00	*(u8 *)(r8 + 62) = r1
    3298:	71 21 3f 00 00 00 00 00	r1 = *(u8 *)(r2 + 63)
    3299:	15 01 57 ff 00 00 00 00	if r1 == 0 goto -169 <LBB25_108>
    3300:	73 18 3f 00 00 00 00 00	*(u8 *)(r8 + 63) = r1
    3301:	05 00 55 ff 00 00 00 00	goto -171 <LBB25_108>

0000000000006730 <__ipt_do_table_in>:
;     struct ipt_do_table_args args = {
    3302:	7b 4a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r4
    3303:	7b 3a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r3
    3304:	7b 2a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r2
;     args.start_ns = bpf_ktime_get_ns();
    3305:	85 00 00 00 05 00 00 00	call 5
    3306:	7b 0a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r0
;     pid = bpf_get_current_pid_tgid();
    3307:	85 00 00 00 0e 00 00 00	call 14
    3308:	63 0a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r0
    3309:	bf a2 00 00 00 00 00 00	r2 = r10
    3310:	07 02 00 00 fc ff ff ff	r2 += -4
    3311:	bf a3 00 00 00 00 00 00	r3 = r10
    3312:	07 03 00 00 d8 ff ff ff	r3 += -40
;     bpf_map_update_elem(&skbtracer_ipt, &pid, &args, BPF_ANY);
    3313:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    3315:	b7 04 00 00 00 00 00 00	r4 = 0
    3316:	85 00 00 00 02 00 00 00	call 2
;     return 0;
    3317:	b7 00 00 00 00 00 00 00	r0 = 0
    3318:	95 00 00 00 00 00 00 00	exit

00000000000067b8 <__ipt_do_table_out>:
; INLINE int __ipt_do_table_out(struct pt_regs *ctx, struct sk_buff *skb) {
    3319:	bf 16 00 00 00 00 00 00	r6 = r1
;     pid = bpf_get_current_pid_tgid();
    3320:	85 00 00 00 0e 00 00 00	call 14
    3321:	63 0a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r0
    3322:	bf a2 00 00 00 00 00 00	r2 = r10
    3323:	07 02 00 00 e4 ff ff ff	r2 += -28
;     args = bpf_map_lookup_elem(&skbtracer_ipt, &pid);
    3324:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    3326:	85 00 00 00 01 00 00 00	call 1
    3327:	bf 08 00 00 00 00 00 00	r8 = r0
;     if (args == NULL) return 0;
    3328:	15 08 7e 01 00 00 00 00	if r8 == 0 goto +382 <LBB49_91>
    3329:	7b 6a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r6
    3330:	bf a2 00 00 00 00 00 00	r2 = r10
    3331:	07 02 00 00 e4 ff ff ff	r2 += -28
;     bpf_map_delete_elem(&skbtracer_ipt, &pid);
    3332:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    3334:	85 00 00 00 03 00 00 00	call 3
    3335:	b7 07 00 00 00 00 00 00	r7 = 0
;     GET_CFG();
    3336:	63 7a e0 ff 00 00 00 00	*(u32 *)(r10 - 32) = r7
    3337:	bf a2 00 00 00 00 00 00	r2 = r10
    3338:	07 02 00 00 e0 ff ff ff	r2 += -32
;     GET_CFG();
    3339:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    3341:	85 00 00 00 01 00 00 00	call 1
    3342:	bf 06 00 00 00 00 00 00	r6 = r0
    3343:	15 06 6f 01 00 00 00 00	if r6 == 0 goto +367 <LBB49_91>
    3344:	61 61 08 00 00 00 00 00	r1 = *(u32 *)(r6 + 8)
    3345:	dc 01 00 00 20 00 00 00	r1 = be32 r1
    3346:	63 16 08 00 00 00 00 00	*(u32 *)(r6 + 8) = r1
;     u32 ev_buff_id = 0;
    3347:	63 7a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r7
    3348:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
    3349:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
    3350:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    3352:	85 00 00 00 01 00 00 00	call 1
;     if (!ev) return NULL;
    3353:	55 00 01 00 00 00 00 00	if r0 != 0 goto +1 <LBB49_4>
    3354:	05 00 64 01 00 00 00 00	goto +356 <LBB49_91>

00000000000068d8 <LBB49_4>:
    3355:	7b 0a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r0
    3356:	bf 07 00 00 00 00 00 00	r7 = r0
    3357:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
    3358:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
    3359:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
    3360:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
    3361:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
    3362:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
    3363:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
    3364:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
    3365:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
    3366:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
    3367:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
    3368:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
    3369:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
    3370:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
    3371:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
    3372:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
    3373:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
    3374:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
    3375:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
    3376:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
    3377:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
    3378:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
    3379:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
    3380:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
    3381:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
    3382:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
    3383:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
    3384:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
    3385:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     if (!do_trace_skb(event, cfg, ctx, args->skb)) return 0;
    3386:	79 81 00 00 00 00 00 00	r1 = *(u64 *)(r8 + 0)
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
    3387:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
    3388:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
    3389:	61 61 04 00 00 00 00 00	r1 = *(u32 *)(r6 + 4)
    3390:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB49_6>
    3391:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
    3392:	5d 01 3e 01 00 00 00 00	if r1 != r0 goto +318 <LBB49_91>

0000000000006a08 <LBB49_6>:
    3393:	b7 01 00 00 10 00 00 00	r1 = 16
    3394:	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 48)
    3395:	0f 13 00 00 00 00 00 00	r3 += r1
    3396:	bf a9 00 00 00 00 00 00	r9 = r10
    3397:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    3398:	bf 91 00 00 00 00 00 00	r1 = r9
    3399:	b7 02 00 00 08 00 00 00	r2 = 8
    3400:	85 00 00 00 71 00 00 00	call 113
    3401:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    3402:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
    3403:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    3404:	bf 91 00 00 00 00 00 00	r1 = r9
    3405:	b7 02 00 00 08 00 00 00	r2 = 8
    3406:	85 00 00 00 71 00 00 00	call 113
    3407:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    3408:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
    3409:	0f 13 00 00 00 00 00 00	r3 += r1
    3410:	bf a1 00 00 00 00 00 00	r1 = r10
    3411:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    3412:	b7 02 00 00 04 00 00 00	r2 = 4
    3413:	85 00 00 00 71 00 00 00	call 113
    3414:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
    3415:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB49_9>
    3416:	b7 01 00 00 18 00 00 00	r1 = 24
    3417:	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 48)
    3418:	0f 13 00 00 00 00 00 00	r3 += r1
    3419:	bf a1 00 00 00 00 00 00	r1 = r10
    3420:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
    3421:	b7 02 00 00 08 00 00 00	r2 = 8
    3422:	85 00 00 00 71 00 00 00	call 113
    3423:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
    3424:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB49_12>
    3425:	b7 01 00 00 30 00 00 00	r1 = 48
    3426:	0f 13 00 00 00 00 00 00	r3 += r1
    3427:	bf a1 00 00 00 00 00 00	r1 = r10
    3428:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
    3429:	b7 02 00 00 08 00 00 00	r2 = 8
    3430:	85 00 00 00 71 00 00 00	call 113
    3431:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
    3432:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
    3433:	0f 13 00 00 00 00 00 00	r3 += r1
    3434:	bf a1 00 00 00 00 00 00	r1 = r10
    3435:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
    3436:	b7 02 00 00 04 00 00 00	r2 = 4
    3437:	85 00 00 00 71 00 00 00	call 113
    3438:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000006b78 <LBB49_9>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
    3439:	61 62 00 00 00 00 00 00	r2 = *(u32 *)(r6 + 0)
    3440:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB49_12>
    3441:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB49_12>
    3442:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB49_91>

0000000000006b98 <LBB49_12>:
;     u16 icmpid = cfg->icmpid;
    3443:	69 61 0e 00 00 00 00 00	r1 = *(u16 *)(r6 + 14)
;     u16 port = cfg->port;
    3444:	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r1
    3445:	69 61 0c 00 00 00 00 00	r1 = *(u16 *)(r6 + 12)
;     u8 proto = cfg->proto;
    3446:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
    3447:	71 61 12 00 00 00 00 00	r1 = *(u8 *)(r6 + 18)
;     u32 addr = cfg->ip;
    3448:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
    3449:	61 61 08 00 00 00 00 00	r1 = *(u32 *)(r6 + 8)
    3450:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
    3451:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
    3452:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
    3453:	b7 01 00 00 c0 00 00 00	r1 = 192
    3454:	79 a9 d0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 48)
    3455:	bf 93 00 00 00 00 00 00	r3 = r9
    3456:	0f 13 00 00 00 00 00 00	r3 += r1
    3457:	bf a1 00 00 00 00 00 00	r1 = r10
    3458:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    3459:	b7 02 00 00 08 00 00 00	r2 = 8
    3460:	85 00 00 00 71 00 00 00	call 113
    3461:	b7 01 00 00 b6 00 00 00	r1 = 182
    3462:	bf 93 00 00 00 00 00 00	r3 = r9
    3463:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    3464:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
    3465:	bf a1 00 00 00 00 00 00	r1 = r10
    3466:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    3467:	b7 02 00 00 02 00 00 00	r2 = 2
    3468:	85 00 00 00 71 00 00 00	call 113
    3469:	b7 01 00 00 b4 00 00 00	r1 = 180
    3470:	bf 93 00 00 00 00 00 00	r3 = r9
    3471:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    3472:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
    3473:	bf a1 00 00 00 00 00 00	r1 = r10
    3474:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    3475:	b7 02 00 00 02 00 00 00	r2 = 2
    3476:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    3477:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    3478:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    3479:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB49_14>
    3480:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000006cc8 <LBB49_14>:
;     return head + network_header;
    3481:	57 09 00 00 ff ff 00 00	r9 &= 65535
    3482:	0f 96 00 00 00 00 00 00	r6 += r9
    3483:	bf a1 00 00 00 00 00 00	r1 = r10
    3484:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    3485:	b7 02 00 00 01 00 00 00	r2 = 1
    3486:	bf 63 00 00 00 00 00 00	r3 = r6
    3487:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
    3488:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    3489:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
    3490:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB49_21>
    3491:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB49_91>
;         if (addr != 0) {
    3492:	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 72)
    3493:	bf 19 00 00 00 00 00 00	r9 = r1
    3494:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB49_19>
    3495:	b7 01 00 00 0c 00 00 00	r1 = 12
    3496:	bf 63 00 00 00 00 00 00	r3 = r6
    3497:	0f 13 00 00 00 00 00 00	r3 += r1
    3498:	bf a1 00 00 00 00 00 00	r1 = r10
    3499:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
    3500:	b7 02 00 00 04 00 00 00	r2 = 4
    3501:	85 00 00 00 71 00 00 00	call 113
    3502:	b7 01 00 00 10 00 00 00	r1 = 16
    3503:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
    3504:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
    3505:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
    3506:	bf a1 00 00 00 00 00 00	r1 = r10
    3507:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
    3508:	b7 02 00 00 04 00 00 00	r2 = 4
    3509:	bf 63 00 00 00 00 00 00	r3 = r6
    3510:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
    3511:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
    3512:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB49_55>
    3513:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
    3514:	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 72)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
    3515:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB49_91>
    3516:	05 00 da 00 00 00 00 00	goto +218 <LBB49_55>

0000000000006de8 <LBB49_21>:
    3517:	b7 01 00 00 06 00 00 00	r1 = 6
    3518:	0f 16 00 00 00 00 00 00	r6 += r1
    3519:	bf a1 00 00 00 00 00 00	r1 = r10
    3520:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
    3521:	b7 02 00 00 01 00 00 00	r2 = 1
    3522:	bf 63 00 00 00 00 00 00	r3 = r6
    3523:	85 00 00 00 04 00 00 00	call 4
    3524:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
    3525:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
    3526:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
    3527:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB49_23>
    3528:	b7 04 00 00 80 00 00 00	r4 = 128
    3529:	b7 03 00 00 81 00 00 00	r3 = 129
    3530:	b7 01 00 00 3a 00 00 00	r1 = 58
    3531:	05 00 0d 00 00 00 00 00	goto +13 <LBB49_23>

0000000000006e60 <LBB49_19>:
    3532:	b7 01 00 00 09 00 00 00	r1 = 9
    3533:	0f 16 00 00 00 00 00 00	r6 += r1
    3534:	bf a1 00 00 00 00 00 00	r1 = r10
    3535:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
    3536:	b7 02 00 00 01 00 00 00	r2 = 1
    3537:	bf 63 00 00 00 00 00 00	r3 = r6
    3538:	85 00 00 00 04 00 00 00	call 4
    3539:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
    3540:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
    3541:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
    3542:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB49_23>
    3543:	b7 04 00 00 08 00 00 00	r4 = 8
    3544:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000006ec8 <LBB49_23>:
;     if (proto != 0 && proto != l4_proto)
    3545:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
    3546:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB49_25>
    3547:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB49_91>

0000000000006ee0 <LBB49_25>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
    3548:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB49_28>
    3549:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB49_30>
    3550:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB49_36>
    3551:	05 00 9f 00 00 00 00 00	goto +159 <LBB49_91>

0000000000006f00 <LBB49_36>:
    3552:	b7 01 00 00 c0 00 00 00	r1 = 192
    3553:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
    3554:	bf 63 00 00 00 00 00 00	r3 = r6
    3555:	0f 13 00 00 00 00 00 00	r3 += r1
    3556:	bf a1 00 00 00 00 00 00	r1 = r10
    3557:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    3558:	b7 02 00 00 08 00 00 00	r2 = 8
    3559:	85 00 00 00 71 00 00 00	call 113
    3560:	b7 01 00 00 b6 00 00 00	r1 = 182
    3561:	bf 63 00 00 00 00 00 00	r3 = r6
    3562:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    3563:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
    3564:	bf a1 00 00 00 00 00 00	r1 = r10
    3565:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    3566:	b7 02 00 00 02 00 00 00	r2 = 2
    3567:	85 00 00 00 71 00 00 00	call 113
    3568:	b7 01 00 00 b4 00 00 00	r1 = 180
    3569:	bf 63 00 00 00 00 00 00	r3 = r6
    3570:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    3571:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
    3572:	bf a1 00 00 00 00 00 00	r1 = r10
    3573:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    3574:	b7 02 00 00 02 00 00 00	r2 = 2
    3575:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    3576:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    3577:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    3578:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB49_38>
    3579:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000006fe0 <LBB49_38>:
;     return head + network_header;
    3580:	57 06 00 00 ff ff 00 00	r6 &= 65535
    3581:	0f 69 00 00 00 00 00 00	r9 += r6
    3582:	bf a1 00 00 00 00 00 00	r1 = r10
    3583:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    3584:	b7 02 00 00 01 00 00 00	r2 = 1
    3585:	bf 93 00 00 00 00 00 00	r3 = r9
    3586:	85 00 00 00 04 00 00 00	call 4
    3587:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
    3588:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
    3589:	57 02 00 00 f0 00 00 00	r2 &= 240
    3590:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB49_40>
    3591:	bf a1 00 00 00 00 00 00	r1 = r10
    3592:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    3593:	b7 02 00 00 01 00 00 00	r2 = 1
    3594:	bf 93 00 00 00 00 00 00	r3 = r9
    3595:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
    3596:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    3597:	67 01 00 00 02 00 00 00	r1 <<= 2
    3598:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000007078 <LBB49_40>:
;     return l3_header + transport_size;
    3599:	0f 19 00 00 00 00 00 00	r9 += r1
    3600:	7b 9a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r9

0000000000007088 <LBB49_41>:
    3601:	79 a9 b0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 80)
;     if (port != 0) {
    3602:	bf 92 00 00 00 00 00 00	r2 = r9
    3603:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB49_46>
;         if (l4_proto == IPPROTO_TCP) {
    3604:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
    3605:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB49_53>
    3606:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB49_46>
    3607:	b7 01 00 00 00 00 00 00	r1 = 0
    3608:	79 a6 b8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 72)
    3609:	bf 63 00 00 00 00 00 00	r3 = r6
    3610:	0f 13 00 00 00 00 00 00	r3 += r1
    3611:	bf a1 00 00 00 00 00 00	r1 = r10
    3612:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
    3613:	b7 02 00 00 02 00 00 00	r2 = 2
    3614:	85 00 00 00 71 00 00 00	call 113
    3615:	b7 01 00 00 02 00 00 00	r1 = 2
    3616:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
    3617:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
    3618:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
    3619:	bf a1 00 00 00 00 00 00	r1 = r10
    3620:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
    3621:	b7 02 00 00 02 00 00 00	r2 = 2
    3622:	bf 63 00 00 00 00 00 00	r3 = r6
    3623:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
    3624:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
    3625:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
    3626:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB49_55>
    3627:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
    3628:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB49_91>
    3629:	05 00 69 00 00 00 00 00	goto +105 <LBB49_55>

0000000000007170 <LBB49_28>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
    3630:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB49_36>
    3631:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB49_91>

0000000000007180 <LBB49_30>:
    3632:	7b 4a 98 ff 00 00 00 00	*(u64 *)(r10 - 104) = r4
    3633:	7b 3a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r3
    3634:	b7 01 00 00 c0 00 00 00	r1 = 192
    3635:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
    3636:	bf 63 00 00 00 00 00 00	r3 = r6
    3637:	0f 13 00 00 00 00 00 00	r3 += r1
    3638:	bf a1 00 00 00 00 00 00	r1 = r10
    3639:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    3640:	b7 02 00 00 08 00 00 00	r2 = 8
    3641:	85 00 00 00 71 00 00 00	call 113
    3642:	b7 01 00 00 b6 00 00 00	r1 = 182
    3643:	bf 63 00 00 00 00 00 00	r3 = r6
    3644:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    3645:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
    3646:	bf a1 00 00 00 00 00 00	r1 = r10
    3647:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    3648:	b7 02 00 00 02 00 00 00	r2 = 2
    3649:	85 00 00 00 71 00 00 00	call 113
    3650:	b7 01 00 00 b4 00 00 00	r1 = 180
    3651:	bf 63 00 00 00 00 00 00	r3 = r6
    3652:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    3653:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
    3654:	bf a1 00 00 00 00 00 00	r1 = r10
    3655:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    3656:	b7 02 00 00 02 00 00 00	r2 = 2
    3657:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    3658:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    3659:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    3660:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB49_32>
    3661:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000007270 <LBB49_32>:
;     return head + network_header;
    3662:	57 06 00 00 ff ff 00 00	r6 &= 65535
    3663:	0f 69 00 00 00 00 00 00	r9 += r6
    3664:	bf a1 00 00 00 00 00 00	r1 = r10
    3665:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    3666:	b7 02 00 00 01 00 00 00	r2 = 1
    3667:	bf 93 00 00 00 00 00 00	r3 = r9
    3668:	85 00 00 00 04 00 00 00	call 4
    3669:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
    3670:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
    3671:	57 02 00 00 f0 00 00 00	r2 &= 240
    3672:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB49_34>
    3673:	bf a1 00 00 00 00 00 00	r1 = r10
    3674:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    3675:	b7 02 00 00 01 00 00 00	r2 = 1
    3676:	bf 93 00 00 00 00 00 00	r3 = r9
    3677:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
    3678:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    3679:	67 01 00 00 02 00 00 00	r1 <<= 2
    3680:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000007308 <LBB49_34>:
;     return l3_header + transport_size;
    3681:	0f 19 00 00 00 00 00 00	r9 += r1
    3682:	bf a6 00 00 00 00 00 00	r6 = r10
    3683:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
    3684:	bf 61 00 00 00 00 00 00	r1 = r6
    3685:	b7 02 00 00 08 00 00 00	r2 = 8
    3686:	7b 9a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r9
    3687:	bf 93 00 00 00 00 00 00	r3 = r9
    3688:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
    3689:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
    3690:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
    3691:	79 a3 a0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 96)
    3692:	79 a4 98 ff 00 00 00 00	r4 = *(u64 *)(r10 - 104)
    3693:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB49_41>
    3694:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
    3695:	07 02 00 00 e8 ff ff ff	r2 += -24
    3696:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
    3697:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB49_41>
    3698:	05 00 0c 00 00 00 00 00	goto +12 <LBB49_91>

0000000000007398 <LBB49_46>:
;     if (proto != 0 && proto != l4_proto)
    3699:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (proto != 0 && icmpid != 0) {
    3700:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB49_55>
    3701:	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 88)
;     if (proto != 0 && icmpid != 0) {
    3702:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB49_55>
    3703:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (proto != 0 && icmpid != 0) {
    3704:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB49_55>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
    3705:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
    3706:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB49_51>
    3707:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB49_55>

00000000000073e0 <LBB49_51>:
;         if (icmpid != ev_icmpid)
    3708:	57 01 00 00 ff ff 00 00	r1 &= 65535
    3709:	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 88)
    3710:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB49_55>

00000000000073f8 <LBB49_91>:
; }
    3711:	b7 00 00 00 00 00 00 00	r0 = 0
    3712:	95 00 00 00 00 00 00 00	exit

0000000000007408 <LBB49_53>:
    3713:	b7 01 00 00 00 00 00 00	r1 = 0
    3714:	79 a6 b8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 72)
    3715:	bf 63 00 00 00 00 00 00	r3 = r6
    3716:	0f 13 00 00 00 00 00 00	r3 += r1
    3717:	bf a1 00 00 00 00 00 00	r1 = r10
    3718:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
    3719:	b7 02 00 00 02 00 00 00	r2 = 2
    3720:	85 00 00 00 71 00 00 00	call 113
    3721:	b7 01 00 00 02 00 00 00	r1 = 2
    3722:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
    3723:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
    3724:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
    3725:	bf a1 00 00 00 00 00 00	r1 = r10
    3726:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
    3727:	b7 02 00 00 02 00 00 00	r2 = 2
    3728:	bf 63 00 00 00 00 00 00	r3 = r6
    3729:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
    3730:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
    3731:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
    3732:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB49_55>
    3733:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
    3734:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB49_91>

00000000000074b8 <LBB49_55>:
;     event->flags |= SKBTRACER_EVENT_IF;
    3735:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
    3736:	47 01 00 00 01 00 00 00	r1 |= 1
    3737:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
    3738:	79 a9 d0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 48)
;     ev->skb = (u64)skb;
    3739:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
    3740:	85 00 00 00 05 00 00 00	call 5
    3741:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
    3742:	b7 01 00 00 10 00 00 00	r1 = 16
    3743:	bf 96 00 00 00 00 00 00	r6 = r9
    3744:	0f 16 00 00 00 00 00 00	r6 += r1
    3745:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
    3746:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
    3747:	b7 02 00 00 08 00 00 00	r2 = 8
    3748:	bf 63 00 00 00 00 00 00	r3 = r6
    3749:	85 00 00 00 71 00 00 00	call 113
    3750:	b7 01 00 00 70 00 00 00	r1 = 112
    3751:	bf 93 00 00 00 00 00 00	r3 = r9
    3752:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
    3753:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
    3754:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
    3755:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
    3756:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
    3757:	b7 02 00 00 04 00 00 00	r2 = 4
    3758:	85 00 00 00 71 00 00 00	call 113
    3759:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
    3760:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
    3761:	85 00 00 00 08 00 00 00	call 8
    3762:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
    3763:	85 00 00 00 0e 00 00 00	call 14
    3764:	57 00 00 00 ff ff 00 00	r0 &= 65535
    3765:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
    3766:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
    3767:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    3768:	bf 91 00 00 00 00 00 00	r1 = r9
    3769:	b7 02 00 00 08 00 00 00	r2 = 8
    3770:	bf 63 00 00 00 00 00 00	r3 = r6
    3771:	85 00 00 00 71 00 00 00	call 113
    3772:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    3773:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
    3774:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    3775:	bf 91 00 00 00 00 00 00	r1 = r9
    3776:	79 a9 d0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 48)
    3777:	b7 02 00 00 08 00 00 00	r2 = 8
    3778:	85 00 00 00 71 00 00 00	call 113
    3779:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    3780:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
    3781:	0f 13 00 00 00 00 00 00	r3 += r1
    3782:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
    3783:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
    3784:	b7 02 00 00 04 00 00 00	r2 = 4
    3785:	85 00 00 00 71 00 00 00	call 113
    3786:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
    3787:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB49_58>
    3788:	b7 01 00 00 18 00 00 00	r1 = 24
    3789:	bf 93 00 00 00 00 00 00	r3 = r9
    3790:	0f 13 00 00 00 00 00 00	r3 += r1
    3791:	bf a1 00 00 00 00 00 00	r1 = r10
    3792:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
    3793:	b7 02 00 00 08 00 00 00	r2 = 8
    3794:	85 00 00 00 71 00 00 00	call 113
    3795:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
    3796:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
    3797:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB49_58>
    3798:	b7 01 00 00 30 00 00 00	r1 = 48
    3799:	0f 13 00 00 00 00 00 00	r3 += r1
    3800:	bf a1 00 00 00 00 00 00	r1 = r10
    3801:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
    3802:	b7 02 00 00 08 00 00 00	r2 = 8
    3803:	85 00 00 00 71 00 00 00	call 113
    3804:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
    3805:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
    3806:	0f 13 00 00 00 00 00 00	r3 += r1
    3807:	bf a1 00 00 00 00 00 00	r1 = r10
    3808:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
    3809:	b7 02 00 00 04 00 00 00	r2 = 4
    3810:	85 00 00 00 71 00 00 00	call 113
    3811:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000007720 <LBB49_58>:
;     pkt_info->netns = get_netns(skb);
    3812:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
    3813:	b7 01 00 00 80 00 00 00	r1 = 128
    3814:	bf 93 00 00 00 00 00 00	r3 = r9
    3815:	0f 13 00 00 00 00 00 00	r3 += r1
    3816:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
    3817:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
    3818:	bf a1 00 00 00 00 00 00	r1 = r10
    3819:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
    3820:	b7 02 00 00 01 00 00 00	r2 = 1
    3821:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
    3822:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
    3823:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
    3824:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
    3825:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
    3826:	b7 01 00 00 00 00 00 00	r1 = 0
    3827:	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 64)
    3828:	0f 13 00 00 00 00 00 00	r3 += r1
    3829:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     pkt_info->ifname[0] = 0;
    3830:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
    3831:	b7 02 00 00 10 00 00 00	r2 = 16
    3832:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
    3833:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
    3834:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB49_60>
    3835:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
    3836:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
    3837:	b7 01 00 00 69 00 00 00	r1 = 105
    3838:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
    3839:	b7 01 00 00 6e 00 00 00	r1 = 110
    3840:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000007808 <LBB49_60>:
    3841:	b7 01 00 00 c0 00 00 00	r1 = 192
    3842:	bf 93 00 00 00 00 00 00	r3 = r9
    3843:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    3844:	7b 3a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r3
    3845:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
    3846:	07 01 00 00 f8 ff ff ff	r1 += -8
    3847:	b7 02 00 00 08 00 00 00	r2 = 8
    3848:	85 00 00 00 71 00 00 00	call 113
    3849:	b7 01 00 00 b6 00 00 00	r1 = 182
    3850:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    3851:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
    3852:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
    3853:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    3854:	b7 02 00 00 02 00 00 00	r2 = 2
    3855:	bf 93 00 00 00 00 00 00	r3 = r9
    3856:	85 00 00 00 71 00 00 00	call 113
    3857:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
    3858:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
    3859:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
    3860:	07 01 00 00 64 00 00 00	r1 += 100
    3861:	b7 02 00 00 06 00 00 00	r2 = 6
    3862:	bf 63 00 00 00 00 00 00	r3 = r6
    3863:	85 00 00 00 04 00 00 00	call 4
    3864:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
    3865:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    3866:	b7 02 00 00 08 00 00 00	r2 = 8
    3867:	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 64)
    3868:	85 00 00 00 71 00 00 00	call 113
    3869:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
    3870:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
    3871:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    3872:	b7 02 00 00 02 00 00 00	r2 = 2
    3873:	bf 93 00 00 00 00 00 00	r3 = r9
    3874:	85 00 00 00 71 00 00 00	call 113
    3875:	b7 01 00 00 b4 00 00 00	r1 = 180
    3876:	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 48)
    3877:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    3878:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
    3879:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
    3880:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    3881:	b7 02 00 00 02 00 00 00	r2 = 2
    3882:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    3883:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    3884:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    3885:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB49_62>
    3886:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000007978 <LBB49_62>:
;     return head + network_header;
    3887:	57 09 00 00 ff ff 00 00	r9 &= 65535
    3888:	0f 96 00 00 00 00 00 00	r6 += r9
    3889:	bf a1 00 00 00 00 00 00	r1 = r10
    3890:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    3891:	b7 02 00 00 01 00 00 00	r2 = 1
    3892:	bf 63 00 00 00 00 00 00	r3 = r6
    3893:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
    3894:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    3895:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
    3896:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB49_67>
    3897:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB49_91>
    3898:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
    3899:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
    3900:	b7 01 00 00 c0 00 00 00	r1 = 192
    3901:	79 a9 d0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 48)
    3902:	bf 93 00 00 00 00 00 00	r3 = r9
    3903:	0f 13 00 00 00 00 00 00	r3 += r1
    3904:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
    3905:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    3906:	b7 02 00 00 08 00 00 00	r2 = 8
    3907:	85 00 00 00 71 00 00 00	call 113
    3908:	b7 01 00 00 b6 00 00 00	r1 = 182
    3909:	bf 93 00 00 00 00 00 00	r3 = r9
    3910:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    3911:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
    3912:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
    3913:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    3914:	b7 02 00 00 02 00 00 00	r2 = 2
    3915:	85 00 00 00 71 00 00 00	call 113
    3916:	b7 01 00 00 b4 00 00 00	r1 = 180
    3917:	bf 93 00 00 00 00 00 00	r3 = r9
    3918:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    3919:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
    3920:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
    3921:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    3922:	b7 02 00 00 02 00 00 00	r2 = 2
    3923:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    3924:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    3925:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    3926:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB49_66>
    3927:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000007ac0 <LBB49_66>:
;     return head + network_header;
    3928:	57 09 00 00 ff ff 00 00	r9 &= 65535
    3929:	0f 96 00 00 00 00 00 00	r6 += r9
    3930:	b7 01 00 00 0c 00 00 00	r1 = 12
    3931:	bf 63 00 00 00 00 00 00	r3 = r6
    3932:	0f 13 00 00 00 00 00 00	r3 += r1
    3933:	bf a1 00 00 00 00 00 00	r1 = r10
    3934:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
    3935:	b7 02 00 00 04 00 00 00	r2 = 4
    3936:	85 00 00 00 71 00 00 00	call 113
    3937:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
    3938:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
    3939:	b7 01 00 00 10 00 00 00	r1 = 16
    3940:	bf 63 00 00 00 00 00 00	r3 = r6
    3941:	0f 13 00 00 00 00 00 00	r3 += r1
    3942:	bf a1 00 00 00 00 00 00	r1 = r10
    3943:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
    3944:	b7 02 00 00 04 00 00 00	r2 = 4
    3945:	85 00 00 00 71 00 00 00	call 113
    3946:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
    3947:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
    3948:	b7 01 00 00 02 00 00 00	r1 = 2
    3949:	bf 63 00 00 00 00 00 00	r3 = r6
    3950:	0f 13 00 00 00 00 00 00	r3 += r1
    3951:	bf a1 00 00 00 00 00 00	r1 = r10
    3952:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
    3953:	b7 02 00 00 02 00 00 00	r2 = 2
    3954:	85 00 00 00 71 00 00 00	call 113
    3955:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
    3956:	dc 01 00 00 10 00 00 00	r1 = be16 r1
    3957:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
    3958:	b7 01 00 00 09 00 00 00	r1 = 9
    3959:	05 00 39 00 00 00 00 00	goto +57 <LBB49_70>

0000000000007bc0 <LBB49_67>:
    3960:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
    3961:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
    3962:	b7 01 00 00 c0 00 00 00	r1 = 192
    3963:	79 a9 d0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 48)
    3964:	bf 93 00 00 00 00 00 00	r3 = r9
    3965:	0f 13 00 00 00 00 00 00	r3 += r1
    3966:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
    3967:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    3968:	b7 02 00 00 08 00 00 00	r2 = 8
    3969:	85 00 00 00 71 00 00 00	call 113
    3970:	b7 01 00 00 b6 00 00 00	r1 = 182
    3971:	bf 93 00 00 00 00 00 00	r3 = r9
    3972:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    3973:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
    3974:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
    3975:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    3976:	b7 02 00 00 02 00 00 00	r2 = 2
    3977:	85 00 00 00 71 00 00 00	call 113
    3978:	b7 01 00 00 b4 00 00 00	r1 = 180
    3979:	bf 93 00 00 00 00 00 00	r3 = r9
    3980:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    3981:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
    3982:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
    3983:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    3984:	b7 02 00 00 02 00 00 00	r2 = 2
    3985:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    3986:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    3987:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    3988:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB49_69>
    3989:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000007cb0 <LBB49_69>:
;     return head + network_header;
    3990:	57 09 00 00 ff ff 00 00	r9 &= 65535
    3991:	0f 96 00 00 00 00 00 00	r6 += r9
    3992:	b7 01 00 00 08 00 00 00	r1 = 8
    3993:	bf 63 00 00 00 00 00 00	r3 = r6
    3994:	0f 13 00 00 00 00 00 00	r3 += r1
    3995:	79 a9 c8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 56)
;         set_ipv6_info(skb, &event->l3_info);
    3996:	bf 91 00 00 00 00 00 00	r1 = r9
    3997:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
    3998:	b7 02 00 00 10 00 00 00	r2 = 16
    3999:	85 00 00 00 04 00 00 00	call 4
    4000:	b7 01 00 00 18 00 00 00	r1 = 24
    4001:	bf 63 00 00 00 00 00 00	r3 = r6
    4002:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
    4003:	bf 91 00 00 00 00 00 00	r1 = r9
    4004:	07 01 00 00 80 00 00 00	r1 += 128
    4005:	b7 02 00 00 10 00 00 00	r2 = 16
    4006:	85 00 00 00 04 00 00 00	call 4
    4007:	b7 01 00 00 04 00 00 00	r1 = 4
    4008:	bf 63 00 00 00 00 00 00	r3 = r6
    4009:	0f 13 00 00 00 00 00 00	r3 += r1
    4010:	bf a1 00 00 00 00 00 00	r1 = r10
    4011:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
    4012:	b7 02 00 00 02 00 00 00	r2 = 2
    4013:	85 00 00 00 71 00 00 00	call 113
    4014:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
    4015:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
    4016:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000007d88 <LBB49_70>:
    4017:	bf 63 00 00 00 00 00 00	r3 = r6
    4018:	0f 13 00 00 00 00 00 00	r3 += r1
    4019:	bf a1 00 00 00 00 00 00	r1 = r10
    4020:	07 01 00 00 f8 ff ff ff	r1 += -8
    4021:	b7 02 00 00 01 00 00 00	r2 = 1
    4022:	85 00 00 00 71 00 00 00	call 113
    4023:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    4024:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
    4025:	bf a1 00 00 00 00 00 00	r1 = r10
    4026:	07 01 00 00 f8 ff ff ff	r1 += -8
    4027:	b7 02 00 00 01 00 00 00	r2 = 1
    4028:	bf 63 00 00 00 00 00 00	r3 = r6
    4029:	85 00 00 00 04 00 00 00	call 4
    4030:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    4031:	57 01 00 00 f0 00 00 00	r1 &= 240
    4032:	77 01 00 00 04 00 00 00	r1 >>= 4
    4033:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
    4034:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
    4035:	65 01 50 00 10 00 00 00	if r1 s> 16 goto +80 <LBB49_73>
    4036:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB49_85>
    4037:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB49_75>
    4038:	05 00 b8 fe 00 00 00 00	goto -328 <LBB49_91>

0000000000007e38 <LBB49_75>:
    4039:	b7 01 00 00 c0 00 00 00	r1 = 192
    4040:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
    4041:	bf 63 00 00 00 00 00 00	r3 = r6
    4042:	0f 13 00 00 00 00 00 00	r3 += r1
    4043:	bf a1 00 00 00 00 00 00	r1 = r10
    4044:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    4045:	b7 02 00 00 08 00 00 00	r2 = 8
    4046:	85 00 00 00 71 00 00 00	call 113
    4047:	b7 01 00 00 b6 00 00 00	r1 = 182
    4048:	bf 63 00 00 00 00 00 00	r3 = r6
    4049:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    4050:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    4051:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
    4052:	bf a1 00 00 00 00 00 00	r1 = r10
    4053:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    4054:	b7 02 00 00 02 00 00 00	r2 = 2
    4055:	85 00 00 00 71 00 00 00	call 113
    4056:	b7 01 00 00 b4 00 00 00	r1 = 180
    4057:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    4058:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
    4059:	bf a1 00 00 00 00 00 00	r1 = r10
    4060:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    4061:	b7 02 00 00 02 00 00 00	r2 = 2
    4062:	bf 63 00 00 00 00 00 00	r3 = r6
    4063:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    4064:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    4065:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    4066:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB49_77>
    4067:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000007f20 <LBB49_77>:
;     return head + network_header;
    4068:	57 09 00 00 ff ff 00 00	r9 &= 65535
    4069:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
;     return head + network_header;
    4070:	0f 96 00 00 00 00 00 00	r6 += r9
    4071:	bf a1 00 00 00 00 00 00	r1 = r10
    4072:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    4073:	b7 02 00 00 01 00 00 00	r2 = 1
    4074:	bf 63 00 00 00 00 00 00	r3 = r6
    4075:	85 00 00 00 04 00 00 00	call 4
    4076:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
    4077:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
    4078:	57 02 00 00 f0 00 00 00	r2 &= 240
    4079:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB49_79>
    4080:	bf a1 00 00 00 00 00 00	r1 = r10
    4081:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    4082:	b7 02 00 00 01 00 00 00	r2 = 1
    4083:	bf 63 00 00 00 00 00 00	r3 = r6
    4084:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
    4085:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    4086:	67 01 00 00 02 00 00 00	r1 <<= 2
    4087:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000007fc0 <LBB49_79>:
;     return l3_header + transport_size;
    4088:	0f 16 00 00 00 00 00 00	r6 += r1
    4089:	b7 01 00 00 00 00 00 00	r1 = 0
    4090:	bf 63 00 00 00 00 00 00	r3 = r6
    4091:	0f 13 00 00 00 00 00 00	r3 += r1
    4092:	bf a1 00 00 00 00 00 00	r1 = r10
    4093:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
    4094:	b7 02 00 00 02 00 00 00	r2 = 2
    4095:	85 00 00 00 71 00 00 00	call 113
    4096:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
    4097:	dc 01 00 00 10 00 00 00	r1 = be16 r1
    4098:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
    4099:	b7 01 00 00 02 00 00 00	r1 = 2
    4100:	bf 63 00 00 00 00 00 00	r3 = r6
    4101:	0f 13 00 00 00 00 00 00	r3 += r1
    4102:	bf a1 00 00 00 00 00 00	r1 = r10
    4103:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
    4104:	b7 02 00 00 02 00 00 00	r2 = 2
    4105:	85 00 00 00 71 00 00 00	call 113
    4106:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
    4107:	dc 01 00 00 10 00 00 00	r1 = be16 r1
    4108:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
    4109:	07 06 00 00 0c 00 00 00	r6 += 12
    4110:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
    4111:	07 01 00 00 9c 00 00 00	r1 += 156
    4112:	b7 02 00 00 02 00 00 00	r2 = 2
    4113:	bf 63 00 00 00 00 00 00	r3 = r6
    4114:	85 00 00 00 04 00 00 00	call 4
    4115:	05 00 8a 00 00 00 00 00	goto +138 <LBB49_90>

00000000000080a0 <LBB49_73>:
;     if (l4_proto == IPPROTO_TCP) {
    4116:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB49_80>
    4117:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB49_85>
    4118:	05 00 68 fe 00 00 00 00	goto -408 <LBB49_91>

00000000000080b8 <LBB49_85>:
    4119:	b7 01 00 00 c0 00 00 00	r1 = 192
    4120:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
    4121:	bf 63 00 00 00 00 00 00	r3 = r6
    4122:	0f 13 00 00 00 00 00 00	r3 += r1
    4123:	bf a1 00 00 00 00 00 00	r1 = r10
    4124:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    4125:	b7 02 00 00 08 00 00 00	r2 = 8
    4126:	85 00 00 00 71 00 00 00	call 113
    4127:	b7 01 00 00 b6 00 00 00	r1 = 182
    4128:	bf 63 00 00 00 00 00 00	r3 = r6
    4129:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    4130:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    4131:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
    4132:	bf a1 00 00 00 00 00 00	r1 = r10
    4133:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    4134:	b7 02 00 00 02 00 00 00	r2 = 2
    4135:	85 00 00 00 71 00 00 00	call 113
    4136:	b7 01 00 00 b4 00 00 00	r1 = 180
    4137:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    4138:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
    4139:	bf a1 00 00 00 00 00 00	r1 = r10
    4140:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    4141:	b7 02 00 00 02 00 00 00	r2 = 2
    4142:	bf 63 00 00 00 00 00 00	r3 = r6
    4143:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    4144:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    4145:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    4146:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB49_87>
    4147:	bf 19 00 00 00 00 00 00	r9 = r1

00000000000081a0 <LBB49_87>:
;     return head + network_header;
    4148:	57 09 00 00 ff ff 00 00	r9 &= 65535
    4149:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
;     return head + network_header;
    4150:	0f 96 00 00 00 00 00 00	r6 += r9
    4151:	bf a1 00 00 00 00 00 00	r1 = r10
    4152:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    4153:	b7 02 00 00 01 00 00 00	r2 = 1
    4154:	bf 63 00 00 00 00 00 00	r3 = r6
    4155:	85 00 00 00 04 00 00 00	call 4
    4156:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
    4157:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
    4158:	57 02 00 00 f0 00 00 00	r2 &= 240
    4159:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB49_89>
    4160:	bf a1 00 00 00 00 00 00	r1 = r10
    4161:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    4162:	b7 02 00 00 01 00 00 00	r2 = 1
    4163:	bf 63 00 00 00 00 00 00	r3 = r6
    4164:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
    4165:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    4166:	67 01 00 00 02 00 00 00	r1 <<= 2
    4167:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000008240 <LBB49_89>:
;     return l3_header + transport_size;
    4168:	0f 16 00 00 00 00 00 00	r6 += r1
    4169:	bf a9 00 00 00 00 00 00	r9 = r10
    4170:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
    4171:	bf 91 00 00 00 00 00 00	r1 = r9
    4172:	b7 02 00 00 08 00 00 00	r2 = 8
    4173:	bf 63 00 00 00 00 00 00	r3 = r6
    4174:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
    4175:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
    4176:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
    4177:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
    4178:	dc 01 00 00 10 00 00 00	r1 = be16 r1
    4179:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
    4180:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
    4181:	dc 01 00 00 10 00 00 00	r1 = be16 r1
    4182:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
    4183:	05 00 46 00 00 00 00 00	goto +70 <LBB49_90>

00000000000082c0 <LBB49_80>:
    4184:	b7 01 00 00 c0 00 00 00	r1 = 192
    4185:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
    4186:	bf 63 00 00 00 00 00 00	r3 = r6
    4187:	0f 13 00 00 00 00 00 00	r3 += r1
    4188:	bf a1 00 00 00 00 00 00	r1 = r10
    4189:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
    4190:	b7 02 00 00 08 00 00 00	r2 = 8
    4191:	85 00 00 00 71 00 00 00	call 113
    4192:	b7 01 00 00 b6 00 00 00	r1 = 182
    4193:	bf 63 00 00 00 00 00 00	r3 = r6
    4194:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
    4195:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    4196:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
    4197:	bf a1 00 00 00 00 00 00	r1 = r10
    4198:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    4199:	b7 02 00 00 02 00 00 00	r2 = 2
    4200:	85 00 00 00 71 00 00 00	call 113
    4201:	b7 01 00 00 b4 00 00 00	r1 = 180
    4202:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
    4203:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
    4204:	bf a1 00 00 00 00 00 00	r1 = r10
    4205:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    4206:	b7 02 00 00 02 00 00 00	r2 = 2
    4207:	bf 63 00 00 00 00 00 00	r3 = r6
    4208:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    4209:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
    4210:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
    4211:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB49_82>
    4212:	bf 19 00 00 00 00 00 00	r9 = r1

00000000000083a8 <LBB49_82>:
;     return head + network_header;
    4213:	57 09 00 00 ff ff 00 00	r9 &= 65535
    4214:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
;     return head + network_header;
    4215:	0f 96 00 00 00 00 00 00	r6 += r9
    4216:	bf a1 00 00 00 00 00 00	r1 = r10
    4217:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    4218:	b7 02 00 00 01 00 00 00	r2 = 1
    4219:	bf 63 00 00 00 00 00 00	r3 = r6
    4220:	85 00 00 00 04 00 00 00	call 4
    4221:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
    4222:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
    4223:	57 02 00 00 f0 00 00 00	r2 &= 240
    4224:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB49_84>
    4225:	bf a1 00 00 00 00 00 00	r1 = r10
    4226:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
    4227:	b7 02 00 00 01 00 00 00	r2 = 1
    4228:	bf 63 00 00 00 00 00 00	r3 = r6
    4229:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
    4230:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    4231:	67 01 00 00 02 00 00 00	r1 <<= 2
    4232:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000008448 <LBB49_84>:
;     return l3_header + transport_size;
    4233:	0f 16 00 00 00 00 00 00	r6 += r1
    4234:	b7 01 00 00 00 00 00 00	r1 = 0
    4235:	bf 63 00 00 00 00 00 00	r3 = r6
    4236:	0f 13 00 00 00 00 00 00	r3 += r1
    4237:	bf a1 00 00 00 00 00 00	r1 = r10
    4238:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
    4239:	b7 02 00 00 02 00 00 00	r2 = 2
    4240:	85 00 00 00 71 00 00 00	call 113
    4241:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
    4242:	dc 01 00 00 10 00 00 00	r1 = be16 r1
    4243:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
    4244:	b7 01 00 00 02 00 00 00	r1 = 2
    4245:	0f 16 00 00 00 00 00 00	r6 += r1
    4246:	bf a1 00 00 00 00 00 00	r1 = r10
    4247:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
    4248:	b7 02 00 00 02 00 00 00	r2 = 2
    4249:	bf 63 00 00 00 00 00 00	r3 = r6
    4250:	85 00 00 00 71 00 00 00	call 113
    4251:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
    4252:	dc 01 00 00 10 00 00 00	r1 = be16 r1
    4253:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

00000000000084f0 <LBB49_90>:
;     event->flags |= SKBTRACER_EVENT_IPTABLE;
    4254:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
    4255:	47 01 00 00 02 00 00 00	r1 |= 2
    4256:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
    4257:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
;     verdict = PT_REGS_RC(ctx);
    4258:	79 11 50 00 00 00 00 00	r1 = *(u64 *)(r1 + 80)
;     ipt_delay = bpf_ktime_get_ns() - args->start_ns;
    4259:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
    4260:	85 00 00 00 05 00 00 00	call 5
    4261:	bf 09 00 00 00 00 00 00	r9 = r0
    4262:	b7 01 00 00 38 00 00 00	r1 = 56
;     set_iptables_info(args->table, args->state, verdict, ipt_delay,
    4263:	79 83 10 00 00 00 00 00	r3 = *(u64 *)(r8 + 16)
    4264:	0f 13 00 00 00 00 00 00	r3 += r1
;     ipt_delay = bpf_ktime_get_ns() - args->start_ns;
    4265:	79 81 18 00 00 00 00 00	r1 = *(u64 *)(r8 + 24)
;     set_iptables_info(args->table, args->state, verdict, ipt_delay,
    4266:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
    4267:	79 86 08 00 00 00 00 00	r6 = *(u64 *)(r8 + 8)
    4268:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;                       &event->ipt_info);
    4269:	07 01 00 00 a8 00 00 00	r1 += 168
;     bpf_probe_read(&ipt_info->tablename, XT_TABLE_MAXNAMELEN, &table->name);
    4270:	b7 02 00 00 20 00 00 00	r2 = 32
    4271:	85 00 00 00 04 00 00 00	call 4
    4272:	b7 01 00 00 00 00 00 00	r1 = 0
    4273:	bf 63 00 00 00 00 00 00	r3 = r6
    4274:	0f 13 00 00 00 00 00 00	r3 += r1
    4275:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IPTABLE;
    4276:	07 01 00 00 f8 ff ff ff	r1 += -8
;     ipt_info->hook = BPF_CORE_READ(state, hook);
    4277:	b7 02 00 00 04 00 00 00	r2 = 4
    4278:	85 00 00 00 71 00 00 00	call 113
;     ipt_delay = bpf_ktime_get_ns() - args->start_ns;
    4279:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
    4280:	1f 19 00 00 00 00 00 00	r9 -= r1
;     ipt_info->hook = BPF_CORE_READ(state, hook);
    4281:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;     ipt_info->delay = delay;
    4282:	7b 97 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r9
;     ipt_info->verdict = verdict;
    4283:	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 48)
    4284:	63 27 cc 00 00 00 00 00	*(u32 *)(r7 + 204) = r2
;     ipt_info->hook = BPF_CORE_READ(state, hook);
    4285:	63 17 c8 00 00 00 00 00	*(u32 *)(r7 + 200) = r1
    4286:	b7 01 00 00 04 00 00 00	r1 = 4
    4287:	0f 16 00 00 00 00 00 00	r6 += r1
    4288:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IPTABLE;
    4289:	07 01 00 00 f8 ff ff ff	r1 += -8
;     ipt_info->pf = BPF_CORE_READ(state, pf);
    4290:	b7 02 00 00 01 00 00 00	r2 = 1
    4291:	bf 63 00 00 00 00 00 00	r3 = r6
    4292:	85 00 00 00 71 00 00 00	call 113
    4293:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
    4294:	73 17 d8 00 00 00 00 00	*(u8 *)(r7 + 216) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
    4295:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
    4296:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    4298:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
    4300:	bf 74 00 00 00 00 00 00	r4 = r7
    4301:	b7 05 00 00 e0 00 00 00	r5 = 224
    4302:	85 00 00 00 19 00 00 00	call 25
    4303:	05 00 af fd 00 00 00 00	goto -593 <LBB49_91>

Disassembly of section kprobe/netif_rx:

0000000000000000 <k_netif_rx>:
; int k_netif_rx(struct pt_regs *ctx) {
       0:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM1(ctx);
       1:	79 11 70 00 00 00 00 00	r1 = *(u64 *)(r1 + 112)
       2:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       3:	b7 06 00 00 00 00 00 00	r6 = 0
;     GET_CFG();
       4:	63 6a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r6
       5:	bf a2 00 00 00 00 00 00	r2 = r10
       6:	07 02 00 00 e4 ff ff ff	r2 += -28
;     GET_CFG();
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	85 00 00 00 01 00 00 00	call 1
      10:	bf 08 00 00 00 00 00 00	r8 = r0
      11:	15 08 6d 01 00 00 00 00	if r8 == 0 goto +365 <LBB26_92>
      12:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
      13:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      14:	63 18 08 00 00 00 00 00	*(u32 *)(r8 + 8) = r1
;     u32 ev_buff_id = 0;
      15:	63 6a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r6
      16:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      17:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      18:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      20:	85 00 00 00 01 00 00 00	call 1
      21:	bf 07 00 00 00 00 00 00	r7 = r0
;     if (!ev) return NULL;
      22:	55 07 01 00 00 00 00 00	if r7 != 0 goto +1 <LBB26_3>
      23:	05 00 61 01 00 00 00 00	goto +353 <LBB26_92>

00000000000000c0 <LBB26_3>:
      24:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      25:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      26:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      27:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      28:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      29:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      30:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      31:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      32:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      33:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      34:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      35:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      36:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      37:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      38:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      39:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      40:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      41:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      42:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      43:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      44:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      45:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      46:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      47:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      48:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      49:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      50:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      51:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      52:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      53:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      54:	61 81 04 00 00 00 00 00	r1 = *(u32 *)(r8 + 4)
      55:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB26_5>
      56:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      57:	5d 01 3f 01 00 00 00 00	if r1 != r0 goto +319 <LBB26_92>

00000000000001d0 <LBB26_5>:
      58:	b7 01 00 00 10 00 00 00	r1 = 16
      59:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
      60:	bf 93 00 00 00 00 00 00	r3 = r9
      61:	0f 13 00 00 00 00 00 00	r3 += r1
      62:	bf a6 00 00 00 00 00 00	r6 = r10
      63:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      64:	bf 61 00 00 00 00 00 00	r1 = r6
      65:	b7 02 00 00 08 00 00 00	r2 = 8
      66:	85 00 00 00 71 00 00 00	call 113
      67:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      68:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      69:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      70:	bf 61 00 00 00 00 00 00	r1 = r6
      71:	b7 02 00 00 08 00 00 00	r2 = 8
      72:	85 00 00 00 71 00 00 00	call 113
      73:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      74:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      75:	0f 13 00 00 00 00 00 00	r3 += r1
      76:	bf a1 00 00 00 00 00 00	r1 = r10
      77:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      78:	b7 02 00 00 04 00 00 00	r2 = 4
      79:	85 00 00 00 71 00 00 00	call 113
      80:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      81:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB26_8>
      82:	b7 01 00 00 18 00 00 00	r1 = 24
      83:	bf 93 00 00 00 00 00 00	r3 = r9
      84:	0f 13 00 00 00 00 00 00	r3 += r1
      85:	bf a1 00 00 00 00 00 00	r1 = r10
      86:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
      87:	b7 02 00 00 08 00 00 00	r2 = 8
      88:	85 00 00 00 71 00 00 00	call 113
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
      90:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB26_11>
      91:	b7 01 00 00 30 00 00 00	r1 = 48
      92:	0f 13 00 00 00 00 00 00	r3 += r1
      93:	bf a1 00 00 00 00 00 00	r1 = r10
      94:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      95:	b7 02 00 00 08 00 00 00	r2 = 8
      96:	85 00 00 00 71 00 00 00	call 113
      97:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      98:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     102:	b7 02 00 00 04 00 00 00	r2 = 4
     103:	85 00 00 00 71 00 00 00	call 113
     104:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000348 <LBB26_8>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     105:	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0)
     106:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB26_11>
     107:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB26_11>
     108:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB26_92>

0000000000000368 <LBB26_11>:
;     u16 icmpid = cfg->icmpid;
     109:	69 81 0e 00 00 00 00 00	r1 = *(u16 *)(r8 + 14)
;     u16 port = cfg->port;
     110:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     111:	69 81 0c 00 00 00 00 00	r1 = *(u16 *)(r8 + 12)
;     u8 proto = cfg->proto;
     112:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     113:	71 81 12 00 00 00 00 00	r1 = *(u8 *)(r8 + 18)
;     u32 addr = cfg->ip;
     114:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     115:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
     116:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     117:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     118:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     119:	b7 01 00 00 c0 00 00 00	r1 = 192
     120:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     121:	bf 93 00 00 00 00 00 00	r3 = r9
     122:	0f 13 00 00 00 00 00 00	r3 += r1
     123:	bf a1 00 00 00 00 00 00	r1 = r10
     124:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     125:	b7 02 00 00 08 00 00 00	r2 = 8
     126:	85 00 00 00 71 00 00 00	call 113
     127:	b7 01 00 00 b6 00 00 00	r1 = 182
     128:	bf 93 00 00 00 00 00 00	r3 = r9
     129:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     130:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     131:	bf a1 00 00 00 00 00 00	r1 = r10
     132:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     133:	b7 02 00 00 02 00 00 00	r2 = 2
     134:	85 00 00 00 71 00 00 00	call 113
     135:	b7 01 00 00 b4 00 00 00	r1 = 180
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     138:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     139:	bf a1 00 00 00 00 00 00	r1 = r10
     140:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     141:	b7 02 00 00 02 00 00 00	r2 = 2
     142:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     143:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     144:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     145:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB26_13>
     146:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000498 <LBB26_13>:
;     return head + network_header;
     147:	57 09 00 00 ff ff 00 00	r9 &= 65535
     148:	0f 96 00 00 00 00 00 00	r6 += r9
     149:	bf a1 00 00 00 00 00 00	r1 = r10
     150:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     151:	b7 02 00 00 01 00 00 00	r2 = 1
     152:	bf 63 00 00 00 00 00 00	r3 = r6
     153:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     154:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     155:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     156:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB26_20>
     157:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB26_92>
;         if (addr != 0) {
     158:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     159:	bf 19 00 00 00 00 00 00	r9 = r1
     160:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB26_18>
     161:	b7 01 00 00 0c 00 00 00	r1 = 12
     162:	bf 63 00 00 00 00 00 00	r3 = r6
     163:	0f 13 00 00 00 00 00 00	r3 += r1
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     166:	b7 02 00 00 04 00 00 00	r2 = 4
     167:	85 00 00 00 71 00 00 00	call 113
     168:	b7 01 00 00 10 00 00 00	r1 = 16
     169:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     170:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     171:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     172:	bf a1 00 00 00 00 00 00	r1 = r10
     173:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     174:	b7 02 00 00 04 00 00 00	r2 = 4
     175:	bf 63 00 00 00 00 00 00	r3 = r6
     176:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     177:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     178:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB26_54>
     179:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     180:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     181:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB26_92>
     182:	05 00 da 00 00 00 00 00	goto +218 <LBB26_54>

00000000000005b8 <LBB26_20>:
     183:	b7 01 00 00 06 00 00 00	r1 = 6
     184:	0f 16 00 00 00 00 00 00	r6 += r1
     185:	bf a1 00 00 00 00 00 00	r1 = r10
     186:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     187:	b7 02 00 00 01 00 00 00	r2 = 1
     188:	bf 63 00 00 00 00 00 00	r3 = r6
     189:	85 00 00 00 04 00 00 00	call 4
     190:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     191:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     192:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     193:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB26_22>
     194:	b7 04 00 00 80 00 00 00	r4 = 128
     195:	b7 03 00 00 81 00 00 00	r3 = 129
     196:	b7 01 00 00 3a 00 00 00	r1 = 58
     197:	05 00 0d 00 00 00 00 00	goto +13 <LBB26_22>

0000000000000630 <LBB26_18>:
     198:	b7 01 00 00 09 00 00 00	r1 = 9
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     208:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB26_22>
     209:	b7 04 00 00 08 00 00 00	r4 = 8
     210:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000698 <LBB26_22>:
;     if (proto != 0 && proto != l4_proto)
     211:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     212:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB26_24>
     213:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB26_92>

00000000000006b0 <LBB26_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     214:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB26_27>
     215:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB26_29>
     216:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB26_35>
     217:	05 00 9f 00 00 00 00 00	goto +159 <LBB26_92>

00000000000006d0 <LBB26_35>:
     218:	b7 01 00 00 c0 00 00 00	r1 = 192
     219:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     220:	bf 63 00 00 00 00 00 00	r3 = r6
     221:	0f 13 00 00 00 00 00 00	r3 += r1
     222:	bf a1 00 00 00 00 00 00	r1 = r10
     223:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     224:	b7 02 00 00 08 00 00 00	r2 = 8
     225:	85 00 00 00 71 00 00 00	call 113
     226:	b7 01 00 00 b6 00 00 00	r1 = 182
     227:	bf 63 00 00 00 00 00 00	r3 = r6
     228:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     229:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     230:	bf a1 00 00 00 00 00 00	r1 = r10
     231:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     232:	b7 02 00 00 02 00 00 00	r2 = 2
     233:	85 00 00 00 71 00 00 00	call 113
     234:	b7 01 00 00 b4 00 00 00	r1 = 180
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     237:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     238:	bf a1 00 00 00 00 00 00	r1 = r10
     239:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     240:	b7 02 00 00 02 00 00 00	r2 = 2
     241:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     242:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     243:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     244:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB26_37>
     245:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000007b0 <LBB26_37>:
;     return head + network_header;
     246:	57 06 00 00 ff ff 00 00	r6 &= 65535
     247:	0f 69 00 00 00 00 00 00	r9 += r6
     248:	bf a1 00 00 00 00 00 00	r1 = r10
     249:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     250:	b7 02 00 00 01 00 00 00	r2 = 1
     251:	bf 93 00 00 00 00 00 00	r3 = r9
     252:	85 00 00 00 04 00 00 00	call 4
     253:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     254:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     255:	57 02 00 00 f0 00 00 00	r2 &= 240
     256:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB26_39>
     257:	bf a1 00 00 00 00 00 00	r1 = r10
     258:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     259:	b7 02 00 00 01 00 00 00	r2 = 1
     260:	bf 93 00 00 00 00 00 00	r3 = r9
     261:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     262:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     263:	67 01 00 00 02 00 00 00	r1 <<= 2
     264:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000848 <LBB26_39>:
;     return l3_header + transport_size;
     265:	0f 19 00 00 00 00 00 00	r9 += r1
     266:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9

0000000000000858 <LBB26_40>:
     267:	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 72)
;     if (port != 0) {
     268:	bf 92 00 00 00 00 00 00	r2 = r9
     269:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB26_45>
;         if (l4_proto == IPPROTO_TCP) {
     270:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     271:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB26_52>
     272:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB26_45>
     273:	b7 01 00 00 00 00 00 00	r1 = 0
     274:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     275:	bf 63 00 00 00 00 00 00	r3 = r6
     276:	0f 13 00 00 00 00 00 00	r3 += r1
     277:	bf a1 00 00 00 00 00 00	r1 = r10
     278:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     279:	b7 02 00 00 02 00 00 00	r2 = 2
     280:	85 00 00 00 71 00 00 00	call 113
     281:	b7 01 00 00 02 00 00 00	r1 = 2
     282:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     283:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     284:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     285:	bf a1 00 00 00 00 00 00	r1 = r10
     286:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     287:	b7 02 00 00 02 00 00 00	r2 = 2
     288:	bf 63 00 00 00 00 00 00	r3 = r6
     289:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     290:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     291:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     292:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB26_54>
     293:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     294:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB26_92>
     295:	05 00 69 00 00 00 00 00	goto +105 <LBB26_54>

0000000000000940 <LBB26_27>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     296:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB26_35>
     297:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB26_92>

0000000000000950 <LBB26_29>:
     298:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r4
     299:	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r3
     300:	b7 01 00 00 c0 00 00 00	r1 = 192
     301:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     302:	bf 63 00 00 00 00 00 00	r3 = r6
     303:	0f 13 00 00 00 00 00 00	r3 += r1
     304:	bf a1 00 00 00 00 00 00	r1 = r10
     305:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     306:	b7 02 00 00 08 00 00 00	r2 = 8
     307:	85 00 00 00 71 00 00 00	call 113
     308:	b7 01 00 00 b6 00 00 00	r1 = 182
     309:	bf 63 00 00 00 00 00 00	r3 = r6
     310:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     311:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     312:	bf a1 00 00 00 00 00 00	r1 = r10
     313:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     314:	b7 02 00 00 02 00 00 00	r2 = 2
     315:	85 00 00 00 71 00 00 00	call 113
     316:	b7 01 00 00 b4 00 00 00	r1 = 180
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     319:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     320:	bf a1 00 00 00 00 00 00	r1 = r10
     321:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     322:	b7 02 00 00 02 00 00 00	r2 = 2
     323:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     324:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     325:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     326:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB26_31>
     327:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000a40 <LBB26_31>:
;     return head + network_header;
     328:	57 06 00 00 ff ff 00 00	r6 &= 65535
     329:	0f 69 00 00 00 00 00 00	r9 += r6
     330:	bf a1 00 00 00 00 00 00	r1 = r10
     331:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     332:	b7 02 00 00 01 00 00 00	r2 = 1
     333:	bf 93 00 00 00 00 00 00	r3 = r9
     334:	85 00 00 00 04 00 00 00	call 4
     335:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     336:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     337:	57 02 00 00 f0 00 00 00	r2 &= 240
     338:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB26_33>
     339:	bf a1 00 00 00 00 00 00	r1 = r10
     340:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     341:	b7 02 00 00 01 00 00 00	r2 = 1
     342:	bf 93 00 00 00 00 00 00	r3 = r9
     343:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     344:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     345:	67 01 00 00 02 00 00 00	r1 <<= 2
     346:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000ad8 <LBB26_33>:
;     return l3_header + transport_size;
     347:	0f 19 00 00 00 00 00 00	r9 += r1
     348:	bf a6 00 00 00 00 00 00	r6 = r10
     349:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     350:	bf 61 00 00 00 00 00 00	r1 = r6
     351:	b7 02 00 00 08 00 00 00	r2 = 8
     352:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
     353:	bf 93 00 00 00 00 00 00	r3 = r9
     354:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     355:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     356:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     357:	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 88)
     358:	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 96)
     359:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB26_40>
     360:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     361:	07 02 00 00 e8 ff ff ff	r2 += -24
     362:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     363:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB26_40>
     364:	05 00 0c 00 00 00 00 00	goto +12 <LBB26_92>

0000000000000b68 <LBB26_45>:
;     if (proto != 0 && proto != l4_proto)
     365:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     366:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB26_54>
     367:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
;     if (proto != 0 && icmpid != 0) {
     368:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB26_54>
     369:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     370:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB26_54>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     371:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     372:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB26_50>
     373:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB26_54>

0000000000000bb0 <LBB26_50>:
;         if (icmpid != ev_icmpid)
     374:	57 01 00 00 ff ff 00 00	r1 &= 65535
     375:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
     376:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB26_54>

0000000000000bc8 <LBB26_92>:
;     return do_trace(ctx, skb, "netif_rx");
     377:	b7 00 00 00 00 00 00 00	r0 = 0
     378:	95 00 00 00 00 00 00 00	exit

0000000000000bd8 <LBB26_52>:
     379:	b7 01 00 00 00 00 00 00	r1 = 0
     380:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     381:	bf 63 00 00 00 00 00 00	r3 = r6
     382:	0f 13 00 00 00 00 00 00	r3 += r1
     383:	bf a1 00 00 00 00 00 00	r1 = r10
     384:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     385:	b7 02 00 00 02 00 00 00	r2 = 2
     386:	85 00 00 00 71 00 00 00	call 113
     387:	b7 01 00 00 02 00 00 00	r1 = 2
     388:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     389:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     390:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     391:	bf a1 00 00 00 00 00 00	r1 = r10
     392:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     393:	b7 02 00 00 02 00 00 00	r2 = 2
     394:	bf 63 00 00 00 00 00 00	r3 = r6
     395:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     396:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     397:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     398:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB26_54>
     399:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     400:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB26_92>

0000000000000c88 <LBB26_54>:
;     event->flags |= SKBTRACER_EVENT_IF;
     401:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     402:	47 01 00 00 01 00 00 00	r1 |= 1
     403:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     404:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
;     ev->skb = (u64)skb;
     405:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     406:	85 00 00 00 05 00 00 00	call 5
     407:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     408:	b7 01 00 00 10 00 00 00	r1 = 16
     409:	bf 96 00 00 00 00 00 00	r6 = r9
     410:	0f 16 00 00 00 00 00 00	r6 += r1
     411:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     412:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     413:	b7 02 00 00 08 00 00 00	r2 = 8
     414:	bf 63 00 00 00 00 00 00	r3 = r6
     415:	85 00 00 00 71 00 00 00	call 113
     416:	b7 01 00 00 70 00 00 00	r1 = 112
     417:	bf 93 00 00 00 00 00 00	r3 = r9
     418:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     419:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     420:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     421:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     422:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     423:	b7 02 00 00 04 00 00 00	r2 = 4
     424:	85 00 00 00 71 00 00 00	call 113
     425:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     426:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     427:	85 00 00 00 08 00 00 00	call 8
     428:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     429:	85 00 00 00 0e 00 00 00	call 14
     430:	57 00 00 00 ff ff 00 00	r0 &= 65535
     431:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     432:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     433:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     434:	bf 91 00 00 00 00 00 00	r1 = r9
     435:	b7 02 00 00 08 00 00 00	r2 = 8
     436:	bf 63 00 00 00 00 00 00	r3 = r6
     437:	85 00 00 00 71 00 00 00	call 113
     438:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     439:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     440:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     441:	bf 91 00 00 00 00 00 00	r1 = r9
     442:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     443:	b7 02 00 00 08 00 00 00	r2 = 8
     444:	85 00 00 00 71 00 00 00	call 113
     445:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     446:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     447:	0f 13 00 00 00 00 00 00	r3 += r1
     448:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     449:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     450:	b7 02 00 00 04 00 00 00	r2 = 4
     451:	85 00 00 00 71 00 00 00	call 113
     452:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     453:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB26_57>
     454:	b7 01 00 00 18 00 00 00	r1 = 24
     455:	bf 93 00 00 00 00 00 00	r3 = r9
     456:	0f 13 00 00 00 00 00 00	r3 += r1
     457:	bf a1 00 00 00 00 00 00	r1 = r10
     458:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     459:	b7 02 00 00 08 00 00 00	r2 = 8
     460:	85 00 00 00 71 00 00 00	call 113
     461:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     462:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     463:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB26_57>
     464:	b7 01 00 00 30 00 00 00	r1 = 48
     465:	0f 13 00 00 00 00 00 00	r3 += r1
     466:	bf a1 00 00 00 00 00 00	r1 = r10
     467:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     468:	b7 02 00 00 08 00 00 00	r2 = 8
     469:	85 00 00 00 71 00 00 00	call 113
     470:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     471:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     472:	0f 13 00 00 00 00 00 00	r3 += r1
     473:	bf a1 00 00 00 00 00 00	r1 = r10
     474:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     475:	b7 02 00 00 04 00 00 00	r2 = 4
     476:	85 00 00 00 71 00 00 00	call 113
     477:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000ef0 <LBB26_57>:
;     pkt_info->netns = get_netns(skb);
     478:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     479:	b7 01 00 00 80 00 00 00	r1 = 128
     480:	bf 93 00 00 00 00 00 00	r3 = r9
     481:	0f 13 00 00 00 00 00 00	r3 += r1
     482:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     483:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     484:	bf a1 00 00 00 00 00 00	r1 = r10
     485:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     486:	b7 02 00 00 01 00 00 00	r2 = 1
     487:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     488:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     489:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     490:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     491:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     492:	b7 01 00 00 00 00 00 00	r1 = 0
     493:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     494:	0f 13 00 00 00 00 00 00	r3 += r1
;     pkt_info->ifname[0] = 0;
     495:	bf 71 00 00 00 00 00 00	r1 = r7
     496:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     497:	b7 02 00 00 10 00 00 00	r2 = 16
     498:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     499:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     500:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB26_59>
     501:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     502:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     503:	b7 01 00 00 69 00 00 00	r1 = 105
     504:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     505:	b7 01 00 00 6e 00 00 00	r1 = 110
     506:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000000fd8 <LBB26_59>:
     507:	b7 01 00 00 c0 00 00 00	r1 = 192
     508:	bf 93 00 00 00 00 00 00	r3 = r9
     509:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     510:	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r3
     511:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     512:	07 01 00 00 f8 ff ff ff	r1 += -8
     513:	b7 02 00 00 08 00 00 00	r2 = 8
     514:	85 00 00 00 71 00 00 00	call 113
     515:	b7 01 00 00 b6 00 00 00	r1 = 182
     516:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     517:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     518:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     519:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     520:	b7 02 00 00 02 00 00 00	r2 = 2
     521:	bf 93 00 00 00 00 00 00	r3 = r9
     522:	85 00 00 00 71 00 00 00	call 113
     523:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     524:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     525:	bf 71 00 00 00 00 00 00	r1 = r7
     526:	07 01 00 00 64 00 00 00	r1 += 100
     527:	b7 02 00 00 06 00 00 00	r2 = 6
     528:	bf 63 00 00 00 00 00 00	r3 = r6
     529:	85 00 00 00 04 00 00 00	call 4
     530:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     531:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	b7 02 00 00 08 00 00 00	r2 = 8
     533:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     534:	85 00 00 00 71 00 00 00	call 113
     535:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     536:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     537:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     538:	b7 02 00 00 02 00 00 00	r2 = 2
     539:	bf 93 00 00 00 00 00 00	r3 = r9
     540:	85 00 00 00 71 00 00 00	call 113
     541:	b7 01 00 00 b4 00 00 00	r1 = 180
     542:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
     543:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     544:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     547:	b7 02 00 00 02 00 00 00	r2 = 2
     548:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     549:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     550:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     551:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB26_61>
     552:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001148 <LBB26_61>:
;     return head + network_header;
     553:	57 09 00 00 ff ff 00 00	r9 &= 65535
     554:	0f 96 00 00 00 00 00 00	r6 += r9
     555:	bf a1 00 00 00 00 00 00	r1 = r10
     556:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     557:	b7 02 00 00 01 00 00 00	r2 = 1
     558:	bf 63 00 00 00 00 00 00	r3 = r6
     559:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     560:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     561:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     562:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB26_66>
     563:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB26_92>
     564:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     565:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     566:	b7 01 00 00 c0 00 00 00	r1 = 192
     567:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     568:	bf 93 00 00 00 00 00 00	r3 = r9
     569:	0f 13 00 00 00 00 00 00	r3 += r1
     570:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     572:	b7 02 00 00 08 00 00 00	r2 = 8
     573:	85 00 00 00 71 00 00 00	call 113
     574:	b7 01 00 00 b6 00 00 00	r1 = 182
     575:	bf 93 00 00 00 00 00 00	r3 = r9
     576:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     577:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     578:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     579:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     580:	b7 02 00 00 02 00 00 00	r2 = 2
     581:	85 00 00 00 71 00 00 00	call 113
     582:	b7 01 00 00 b4 00 00 00	r1 = 180
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     585:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     586:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     587:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     588:	b7 02 00 00 02 00 00 00	r2 = 2
     589:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     590:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     591:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     592:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB26_65>
     593:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001290 <LBB26_65>:
;     return head + network_header;
     594:	57 09 00 00 ff ff 00 00	r9 &= 65535
     595:	0f 96 00 00 00 00 00 00	r6 += r9
     596:	b7 01 00 00 0c 00 00 00	r1 = 12
     597:	bf 63 00 00 00 00 00 00	r3 = r6
     598:	0f 13 00 00 00 00 00 00	r3 += r1
     599:	bf a1 00 00 00 00 00 00	r1 = r10
     600:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     601:	b7 02 00 00 04 00 00 00	r2 = 4
     602:	85 00 00 00 71 00 00 00	call 113
     603:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     604:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     605:	b7 01 00 00 10 00 00 00	r1 = 16
     606:	bf 63 00 00 00 00 00 00	r3 = r6
     607:	0f 13 00 00 00 00 00 00	r3 += r1
     608:	bf a1 00 00 00 00 00 00	r1 = r10
     609:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     610:	b7 02 00 00 04 00 00 00	r2 = 4
     611:	85 00 00 00 71 00 00 00	call 113
     612:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     613:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     614:	b7 01 00 00 02 00 00 00	r1 = 2
     615:	bf 63 00 00 00 00 00 00	r3 = r6
     616:	0f 13 00 00 00 00 00 00	r3 += r1
     617:	bf a1 00 00 00 00 00 00	r1 = r10
     618:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     619:	b7 02 00 00 02 00 00 00	r2 = 2
     620:	85 00 00 00 71 00 00 00	call 113
     621:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     622:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     623:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     624:	b7 01 00 00 09 00 00 00	r1 = 9
     625:	05 00 38 00 00 00 00 00	goto +56 <LBB26_69>

0000000000001390 <LBB26_66>:
     626:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     627:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     628:	b7 01 00 00 c0 00 00 00	r1 = 192
     629:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     630:	bf 93 00 00 00 00 00 00	r3 = r9
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     634:	b7 02 00 00 08 00 00 00	r2 = 8
     635:	85 00 00 00 71 00 00 00	call 113
     636:	b7 01 00 00 b6 00 00 00	r1 = 182
     637:	bf 93 00 00 00 00 00 00	r3 = r9
     638:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     639:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     640:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     641:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     642:	b7 02 00 00 02 00 00 00	r2 = 2
     643:	85 00 00 00 71 00 00 00	call 113
     644:	b7 01 00 00 b4 00 00 00	r1 = 180
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     647:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     648:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     649:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     650:	b7 02 00 00 02 00 00 00	r2 = 2
     651:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     652:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     653:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     654:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB26_68>
     655:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001480 <LBB26_68>:
;     return head + network_header;
     656:	57 09 00 00 ff ff 00 00	r9 &= 65535
     657:	0f 96 00 00 00 00 00 00	r6 += r9
     658:	b7 01 00 00 08 00 00 00	r1 = 8
     659:	bf 63 00 00 00 00 00 00	r3 = r6
     660:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
     661:	bf 71 00 00 00 00 00 00	r1 = r7
     662:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     663:	b7 02 00 00 10 00 00 00	r2 = 16
     664:	85 00 00 00 04 00 00 00	call 4
     665:	b7 01 00 00 18 00 00 00	r1 = 24
     666:	bf 63 00 00 00 00 00 00	r3 = r6
     667:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     668:	bf 71 00 00 00 00 00 00	r1 = r7
     669:	07 01 00 00 80 00 00 00	r1 += 128
     670:	b7 02 00 00 10 00 00 00	r2 = 16
     671:	85 00 00 00 04 00 00 00	call 4
     672:	b7 01 00 00 04 00 00 00	r1 = 4
     673:	bf 63 00 00 00 00 00 00	r3 = r6
     674:	0f 13 00 00 00 00 00 00	r3 += r1
     675:	bf a1 00 00 00 00 00 00	r1 = r10
     676:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     677:	b7 02 00 00 02 00 00 00	r2 = 2
     678:	85 00 00 00 71 00 00 00	call 113
     679:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     680:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     681:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000001550 <LBB26_69>:
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
     684:	bf a1 00 00 00 00 00 00	r1 = r10
     685:	07 01 00 00 f8 ff ff ff	r1 += -8
     686:	b7 02 00 00 01 00 00 00	r2 = 1
     687:	85 00 00 00 71 00 00 00	call 113
     688:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     689:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     690:	bf a1 00 00 00 00 00 00	r1 = r10
     691:	07 01 00 00 f8 ff ff ff	r1 += -8
     692:	b7 02 00 00 01 00 00 00	r2 = 1
     693:	bf 63 00 00 00 00 00 00	r3 = r6
     694:	85 00 00 00 04 00 00 00	call 4
     695:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     696:	57 01 00 00 f0 00 00 00	r1 &= 240
     697:	77 01 00 00 04 00 00 00	r1 >>= 4
     698:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     699:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     700:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB26_72>
     701:	15 01 53 00 01 00 00 00	if r1 == 1 goto +83 <LBB26_84>
     702:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB26_74>
     703:	05 00 b9 fe 00 00 00 00	goto -327 <LBB26_92>

0000000000001600 <LBB26_74>:
     704:	b7 01 00 00 c0 00 00 00	r1 = 192
     705:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     706:	bf 93 00 00 00 00 00 00	r3 = r9
     707:	0f 13 00 00 00 00 00 00	r3 += r1
     708:	bf a1 00 00 00 00 00 00	r1 = r10
     709:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     710:	b7 02 00 00 08 00 00 00	r2 = 8
     711:	85 00 00 00 71 00 00 00	call 113
     712:	b7 01 00 00 b6 00 00 00	r1 = 182
     713:	bf 93 00 00 00 00 00 00	r3 = r9
     714:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     715:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     716:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     717:	bf a1 00 00 00 00 00 00	r1 = r10
     718:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     719:	b7 02 00 00 02 00 00 00	r2 = 2
     720:	85 00 00 00 71 00 00 00	call 113
     721:	b7 01 00 00 b4 00 00 00	r1 = 180
     722:	0f 19 00 00 00 00 00 00	r9 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     723:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     726:	b7 02 00 00 02 00 00 00	r2 = 2
     727:	bf 93 00 00 00 00 00 00	r3 = r9
     728:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     729:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     730:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     731:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB26_76>
     732:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000016e8 <LBB26_76>:
;     return head + network_header;
     733:	57 06 00 00 ff ff 00 00	r6 &= 65535
     734:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
     735:	0f 61 00 00 00 00 00 00	r1 += r6
     736:	bf 16 00 00 00 00 00 00	r6 = r1
     737:	bf a1 00 00 00 00 00 00	r1 = r10
     738:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     739:	b7 02 00 00 01 00 00 00	r2 = 1
     740:	bf 63 00 00 00 00 00 00	r3 = r6
     741:	85 00 00 00 04 00 00 00	call 4
     742:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     743:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     744:	57 02 00 00 f0 00 00 00	r2 &= 240
     745:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB26_78>
     746:	bf a1 00 00 00 00 00 00	r1 = r10
     747:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     748:	b7 02 00 00 01 00 00 00	r2 = 1
     749:	bf 63 00 00 00 00 00 00	r3 = r6
     750:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     751:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     752:	67 01 00 00 02 00 00 00	r1 <<= 2
     753:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001790 <LBB26_78>:
;     return l3_header + transport_size;
     754:	0f 16 00 00 00 00 00 00	r6 += r1
     755:	b7 01 00 00 00 00 00 00	r1 = 0
     756:	bf 63 00 00 00 00 00 00	r3 = r6
     757:	0f 13 00 00 00 00 00 00	r3 += r1
     758:	bf a1 00 00 00 00 00 00	r1 = r10
     759:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     760:	b7 02 00 00 02 00 00 00	r2 = 2
     761:	85 00 00 00 71 00 00 00	call 113
     762:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     763:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     764:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     765:	b7 01 00 00 02 00 00 00	r1 = 2
     766:	bf 63 00 00 00 00 00 00	r3 = r6
     767:	0f 13 00 00 00 00 00 00	r3 += r1
     768:	bf a1 00 00 00 00 00 00	r1 = r10
     769:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     770:	b7 02 00 00 02 00 00 00	r2 = 2
     771:	85 00 00 00 71 00 00 00	call 113
     772:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     773:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     774:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     775:	07 06 00 00 0c 00 00 00	r6 += 12
     776:	bf 71 00 00 00 00 00 00	r1 = r7
     777:	07 01 00 00 9c 00 00 00	r1 += 156
     778:	b7 02 00 00 02 00 00 00	r2 = 2
     779:	bf 63 00 00 00 00 00 00	r3 = r6
     780:	85 00 00 00 04 00 00 00	call 4
     781:	05 00 8a 00 00 00 00 00	goto +138 <LBB26_89>

0000000000001870 <LBB26_72>:
;     if (l4_proto == IPPROTO_TCP) {
     782:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB26_79>
     783:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB26_84>
     784:	05 00 68 fe 00 00 00 00	goto -408 <LBB26_92>

0000000000001888 <LBB26_84>:
     785:	b7 01 00 00 c0 00 00 00	r1 = 192
     786:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     787:	bf 63 00 00 00 00 00 00	r3 = r6
     788:	0f 13 00 00 00 00 00 00	r3 += r1
     789:	bf a1 00 00 00 00 00 00	r1 = r10
     790:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     791:	b7 02 00 00 08 00 00 00	r2 = 8
     792:	85 00 00 00 71 00 00 00	call 113
     793:	b7 01 00 00 b6 00 00 00	r1 = 182
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     796:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     797:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     798:	bf a1 00 00 00 00 00 00	r1 = r10
     799:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     800:	b7 02 00 00 02 00 00 00	r2 = 2
     801:	85 00 00 00 71 00 00 00	call 113
     802:	b7 01 00 00 b4 00 00 00	r1 = 180
     803:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     804:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     805:	bf a1 00 00 00 00 00 00	r1 = r10
     806:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     807:	b7 02 00 00 02 00 00 00	r2 = 2
     808:	bf 63 00 00 00 00 00 00	r3 = r6
     809:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     810:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     811:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     812:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB26_86>
     813:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001970 <LBB26_86>:
;     return head + network_header;
     814:	57 09 00 00 ff ff 00 00	r9 &= 65535
     815:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     816:	0f 96 00 00 00 00 00 00	r6 += r9
     817:	bf a1 00 00 00 00 00 00	r1 = r10
     818:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     819:	b7 02 00 00 01 00 00 00	r2 = 1
     820:	bf 63 00 00 00 00 00 00	r3 = r6
     821:	85 00 00 00 04 00 00 00	call 4
     822:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     823:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     824:	57 02 00 00 f0 00 00 00	r2 &= 240
     825:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB26_88>
     826:	bf a1 00 00 00 00 00 00	r1 = r10
     827:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     828:	b7 02 00 00 01 00 00 00	r2 = 1
     829:	bf 63 00 00 00 00 00 00	r3 = r6
     830:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     831:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     832:	67 01 00 00 02 00 00 00	r1 <<= 2
     833:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a10 <LBB26_88>:
;     return l3_header + transport_size;
     834:	0f 16 00 00 00 00 00 00	r6 += r1
     835:	bf a9 00 00 00 00 00 00	r9 = r10
     836:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     837:	bf 91 00 00 00 00 00 00	r1 = r9
     838:	b7 02 00 00 08 00 00 00	r2 = 8
     839:	bf 63 00 00 00 00 00 00	r3 = r6
     840:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     841:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     842:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     843:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     844:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     845:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     846:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     847:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     848:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     849:	05 00 46 00 00 00 00 00	goto +70 <LBB26_89>

0000000000001a90 <LBB26_79>:
     850:	b7 01 00 00 c0 00 00 00	r1 = 192
     851:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     852:	bf 63 00 00 00 00 00 00	r3 = r6
     853:	0f 13 00 00 00 00 00 00	r3 += r1
     854:	bf a1 00 00 00 00 00 00	r1 = r10
     855:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     856:	b7 02 00 00 08 00 00 00	r2 = 8
     857:	85 00 00 00 71 00 00 00	call 113
     858:	b7 01 00 00 b6 00 00 00	r1 = 182
     859:	bf 63 00 00 00 00 00 00	r3 = r6
     860:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     861:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     862:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     863:	bf a1 00 00 00 00 00 00	r1 = r10
     864:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     865:	b7 02 00 00 02 00 00 00	r2 = 2
     866:	85 00 00 00 71 00 00 00	call 113
     867:	b7 01 00 00 b4 00 00 00	r1 = 180
     868:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     869:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     870:	bf a1 00 00 00 00 00 00	r1 = r10
     871:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     872:	b7 02 00 00 02 00 00 00	r2 = 2
     873:	bf 63 00 00 00 00 00 00	r3 = r6
     874:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     875:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     876:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     877:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB26_81>
     878:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001b78 <LBB26_81>:
;     return head + network_header;
     879:	57 09 00 00 ff ff 00 00	r9 &= 65535
     880:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     881:	0f 96 00 00 00 00 00 00	r6 += r9
     882:	bf a1 00 00 00 00 00 00	r1 = r10
     883:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     884:	b7 02 00 00 01 00 00 00	r2 = 1
     885:	bf 63 00 00 00 00 00 00	r3 = r6
     886:	85 00 00 00 04 00 00 00	call 4
     887:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     888:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     889:	57 02 00 00 f0 00 00 00	r2 &= 240
     890:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB26_83>
     891:	bf a1 00 00 00 00 00 00	r1 = r10
     892:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     893:	b7 02 00 00 01 00 00 00	r2 = 1
     894:	bf 63 00 00 00 00 00 00	r3 = r6
     895:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     896:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     897:	67 01 00 00 02 00 00 00	r1 <<= 2
     898:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c18 <LBB26_83>:
;     return l3_header + transport_size;
     899:	0f 16 00 00 00 00 00 00	r6 += r1
     900:	b7 01 00 00 00 00 00 00	r1 = 0
     901:	bf 63 00 00 00 00 00 00	r3 = r6
     902:	0f 13 00 00 00 00 00 00	r3 += r1
     903:	bf a1 00 00 00 00 00 00	r1 = r10
     904:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     905:	b7 02 00 00 02 00 00 00	r2 = 2
     906:	85 00 00 00 71 00 00 00	call 113
     907:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     908:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     909:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     910:	b7 01 00 00 02 00 00 00	r1 = 2
     911:	0f 16 00 00 00 00 00 00	r6 += r1
     912:	bf a1 00 00 00 00 00 00	r1 = r10
     913:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     914:	b7 02 00 00 02 00 00 00	r2 = 2
     915:	bf 63 00 00 00 00 00 00	r3 = r6
     916:	85 00 00 00 71 00 00 00	call 113
     917:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     918:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     919:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001cc0 <LBB26_89>:
     920:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
;     return cfg->callstack == 0;
     921:	71 81 11 00 00 00 00 00	r1 = *(u8 *)(r8 + 17)
;     if (!filter_callstack(cfg))
     922:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB26_91>
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
     923:	bf 61 00 00 00 00 00 00	r1 = r6
     924:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     926:	b7 03 00 00 00 00 00 00	r3 = 0
     927:	85 00 00 00 1b 00 00 00	call 27
     928:	63 07 30 00 00 00 00 00	*(u32 *)(r7 + 48) = r0

0000000000001d08 <LBB26_91>:
     929:	b7 01 00 00 78 00 00 00	r1 = 120
;     for (j = 10; j < 64; j += 10) CPY(j);
     930:	73 17 07 00 00 00 00 00	*(u8 *)(r7 + 7) = r1
     931:	b7 01 00 00 72 00 00 00	r1 = 114
     932:	73 17 06 00 00 00 00 00	*(u8 *)(r7 + 6) = r1
     933:	b7 01 00 00 5f 00 00 00	r1 = 95
     934:	73 17 05 00 00 00 00 00	*(u8 *)(r7 + 5) = r1
     935:	b7 01 00 00 66 00 00 00	r1 = 102
     936:	73 17 04 00 00 00 00 00	*(u8 *)(r7 + 4) = r1
     937:	b7 01 00 00 69 00 00 00	r1 = 105
     938:	73 17 03 00 00 00 00 00	*(u8 *)(r7 + 3) = r1
     939:	b7 01 00 00 74 00 00 00	r1 = 116
     940:	73 17 02 00 00 00 00 00	*(u8 *)(r7 + 2) = r1
     941:	b7 01 00 00 65 00 00 00	r1 = 101
     942:	73 17 01 00 00 00 00 00	*(u8 *)(r7 + 1) = r1
     943:	b7 01 00 00 6e 00 00 00	r1 = 110
     944:	73 17 00 00 00 00 00 00	*(u8 *)(r7 + 0) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     945:	bf 61 00 00 00 00 00 00	r1 = r6
     946:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     948:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     950:	bf 74 00 00 00 00 00 00	r4 = r7
     951:	b7 05 00 00 e0 00 00 00	r5 = 224
     952:	85 00 00 00 19 00 00 00	call 25
     953:	05 00 bf fd 00 00 00 00	goto -577 <LBB26_92>

Disassembly of section kprobe/__netif_receive_skb:

0000000000000000 <k_nif_rcv_skb>:
; int k_nif_rcv_skb(struct pt_regs *ctx) {
       0:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM1(ctx);
       1:	79 11 70 00 00 00 00 00	r1 = *(u64 *)(r1 + 112)
       2:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       3:	b7 06 00 00 00 00 00 00	r6 = 0
;     GET_CFG();
       4:	63 6a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r6
       5:	bf a2 00 00 00 00 00 00	r2 = r10
       6:	07 02 00 00 e4 ff ff ff	r2 += -28
;     GET_CFG();
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	85 00 00 00 01 00 00 00	call 1
      10:	bf 08 00 00 00 00 00 00	r8 = r0
      11:	15 08 6d 01 00 00 00 00	if r8 == 0 goto +365 <LBB27_92>
      12:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
      13:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      14:	63 18 08 00 00 00 00 00	*(u32 *)(r8 + 8) = r1
;     u32 ev_buff_id = 0;
      15:	63 6a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r6
      16:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      17:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      18:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      20:	85 00 00 00 01 00 00 00	call 1
      21:	bf 07 00 00 00 00 00 00	r7 = r0
;     if (!ev) return NULL;
      22:	55 07 01 00 00 00 00 00	if r7 != 0 goto +1 <LBB27_3>
      23:	05 00 61 01 00 00 00 00	goto +353 <LBB27_92>

00000000000000c0 <LBB27_3>:
      24:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      25:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      26:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      27:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      28:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      29:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      30:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      31:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      32:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      33:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      34:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      35:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      36:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      37:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      38:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      39:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      40:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      41:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      42:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      43:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      44:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      45:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      46:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      47:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      48:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      49:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      50:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      51:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      52:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      53:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      54:	61 81 04 00 00 00 00 00	r1 = *(u32 *)(r8 + 4)
      55:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB27_5>
      56:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      57:	5d 01 3f 01 00 00 00 00	if r1 != r0 goto +319 <LBB27_92>

00000000000001d0 <LBB27_5>:
      58:	b7 01 00 00 10 00 00 00	r1 = 16
      59:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
      60:	bf 93 00 00 00 00 00 00	r3 = r9
      61:	0f 13 00 00 00 00 00 00	r3 += r1
      62:	bf a6 00 00 00 00 00 00	r6 = r10
      63:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      64:	bf 61 00 00 00 00 00 00	r1 = r6
      65:	b7 02 00 00 08 00 00 00	r2 = 8
      66:	85 00 00 00 71 00 00 00	call 113
      67:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      68:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      69:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      70:	bf 61 00 00 00 00 00 00	r1 = r6
      71:	b7 02 00 00 08 00 00 00	r2 = 8
      72:	85 00 00 00 71 00 00 00	call 113
      73:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      74:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      75:	0f 13 00 00 00 00 00 00	r3 += r1
      76:	bf a1 00 00 00 00 00 00	r1 = r10
      77:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      78:	b7 02 00 00 04 00 00 00	r2 = 4
      79:	85 00 00 00 71 00 00 00	call 113
      80:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      81:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB27_8>
      82:	b7 01 00 00 18 00 00 00	r1 = 24
      83:	bf 93 00 00 00 00 00 00	r3 = r9
      84:	0f 13 00 00 00 00 00 00	r3 += r1
      85:	bf a1 00 00 00 00 00 00	r1 = r10
      86:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
      87:	b7 02 00 00 08 00 00 00	r2 = 8
      88:	85 00 00 00 71 00 00 00	call 113
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
      90:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB27_11>
      91:	b7 01 00 00 30 00 00 00	r1 = 48
      92:	0f 13 00 00 00 00 00 00	r3 += r1
      93:	bf a1 00 00 00 00 00 00	r1 = r10
      94:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      95:	b7 02 00 00 08 00 00 00	r2 = 8
      96:	85 00 00 00 71 00 00 00	call 113
      97:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      98:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     102:	b7 02 00 00 04 00 00 00	r2 = 4
     103:	85 00 00 00 71 00 00 00	call 113
     104:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000348 <LBB27_8>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     105:	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0)
     106:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB27_11>
     107:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB27_11>
     108:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB27_92>

0000000000000368 <LBB27_11>:
;     u16 icmpid = cfg->icmpid;
     109:	69 81 0e 00 00 00 00 00	r1 = *(u16 *)(r8 + 14)
;     u16 port = cfg->port;
     110:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     111:	69 81 0c 00 00 00 00 00	r1 = *(u16 *)(r8 + 12)
;     u8 proto = cfg->proto;
     112:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     113:	71 81 12 00 00 00 00 00	r1 = *(u8 *)(r8 + 18)
;     u32 addr = cfg->ip;
     114:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     115:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
     116:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     117:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     118:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     119:	b7 01 00 00 c0 00 00 00	r1 = 192
     120:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     121:	bf 93 00 00 00 00 00 00	r3 = r9
     122:	0f 13 00 00 00 00 00 00	r3 += r1
     123:	bf a1 00 00 00 00 00 00	r1 = r10
     124:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     125:	b7 02 00 00 08 00 00 00	r2 = 8
     126:	85 00 00 00 71 00 00 00	call 113
     127:	b7 01 00 00 b6 00 00 00	r1 = 182
     128:	bf 93 00 00 00 00 00 00	r3 = r9
     129:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     130:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     131:	bf a1 00 00 00 00 00 00	r1 = r10
     132:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     133:	b7 02 00 00 02 00 00 00	r2 = 2
     134:	85 00 00 00 71 00 00 00	call 113
     135:	b7 01 00 00 b4 00 00 00	r1 = 180
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     138:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     139:	bf a1 00 00 00 00 00 00	r1 = r10
     140:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     141:	b7 02 00 00 02 00 00 00	r2 = 2
     142:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     143:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     144:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     145:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB27_13>
     146:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000498 <LBB27_13>:
;     return head + network_header;
     147:	57 09 00 00 ff ff 00 00	r9 &= 65535
     148:	0f 96 00 00 00 00 00 00	r6 += r9
     149:	bf a1 00 00 00 00 00 00	r1 = r10
     150:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     151:	b7 02 00 00 01 00 00 00	r2 = 1
     152:	bf 63 00 00 00 00 00 00	r3 = r6
     153:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     154:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     155:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     156:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB27_20>
     157:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB27_92>
;         if (addr != 0) {
     158:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     159:	bf 19 00 00 00 00 00 00	r9 = r1
     160:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB27_18>
     161:	b7 01 00 00 0c 00 00 00	r1 = 12
     162:	bf 63 00 00 00 00 00 00	r3 = r6
     163:	0f 13 00 00 00 00 00 00	r3 += r1
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     166:	b7 02 00 00 04 00 00 00	r2 = 4
     167:	85 00 00 00 71 00 00 00	call 113
     168:	b7 01 00 00 10 00 00 00	r1 = 16
     169:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     170:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     171:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     172:	bf a1 00 00 00 00 00 00	r1 = r10
     173:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     174:	b7 02 00 00 04 00 00 00	r2 = 4
     175:	bf 63 00 00 00 00 00 00	r3 = r6
     176:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     177:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     178:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB27_54>
     179:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     180:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     181:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB27_92>
     182:	05 00 da 00 00 00 00 00	goto +218 <LBB27_54>

00000000000005b8 <LBB27_20>:
     183:	b7 01 00 00 06 00 00 00	r1 = 6
     184:	0f 16 00 00 00 00 00 00	r6 += r1
     185:	bf a1 00 00 00 00 00 00	r1 = r10
     186:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     187:	b7 02 00 00 01 00 00 00	r2 = 1
     188:	bf 63 00 00 00 00 00 00	r3 = r6
     189:	85 00 00 00 04 00 00 00	call 4
     190:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     191:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     192:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     193:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB27_22>
     194:	b7 04 00 00 80 00 00 00	r4 = 128
     195:	b7 03 00 00 81 00 00 00	r3 = 129
     196:	b7 01 00 00 3a 00 00 00	r1 = 58
     197:	05 00 0d 00 00 00 00 00	goto +13 <LBB27_22>

0000000000000630 <LBB27_18>:
     198:	b7 01 00 00 09 00 00 00	r1 = 9
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     208:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB27_22>
     209:	b7 04 00 00 08 00 00 00	r4 = 8
     210:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000698 <LBB27_22>:
;     if (proto != 0 && proto != l4_proto)
     211:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     212:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB27_24>
     213:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB27_92>

00000000000006b0 <LBB27_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     214:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB27_27>
     215:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB27_29>
     216:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB27_35>
     217:	05 00 9f 00 00 00 00 00	goto +159 <LBB27_92>

00000000000006d0 <LBB27_35>:
     218:	b7 01 00 00 c0 00 00 00	r1 = 192
     219:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     220:	bf 63 00 00 00 00 00 00	r3 = r6
     221:	0f 13 00 00 00 00 00 00	r3 += r1
     222:	bf a1 00 00 00 00 00 00	r1 = r10
     223:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     224:	b7 02 00 00 08 00 00 00	r2 = 8
     225:	85 00 00 00 71 00 00 00	call 113
     226:	b7 01 00 00 b6 00 00 00	r1 = 182
     227:	bf 63 00 00 00 00 00 00	r3 = r6
     228:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     229:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     230:	bf a1 00 00 00 00 00 00	r1 = r10
     231:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     232:	b7 02 00 00 02 00 00 00	r2 = 2
     233:	85 00 00 00 71 00 00 00	call 113
     234:	b7 01 00 00 b4 00 00 00	r1 = 180
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     237:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     238:	bf a1 00 00 00 00 00 00	r1 = r10
     239:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     240:	b7 02 00 00 02 00 00 00	r2 = 2
     241:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     242:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     243:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     244:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB27_37>
     245:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000007b0 <LBB27_37>:
;     return head + network_header;
     246:	57 06 00 00 ff ff 00 00	r6 &= 65535
     247:	0f 69 00 00 00 00 00 00	r9 += r6
     248:	bf a1 00 00 00 00 00 00	r1 = r10
     249:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     250:	b7 02 00 00 01 00 00 00	r2 = 1
     251:	bf 93 00 00 00 00 00 00	r3 = r9
     252:	85 00 00 00 04 00 00 00	call 4
     253:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     254:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     255:	57 02 00 00 f0 00 00 00	r2 &= 240
     256:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB27_39>
     257:	bf a1 00 00 00 00 00 00	r1 = r10
     258:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     259:	b7 02 00 00 01 00 00 00	r2 = 1
     260:	bf 93 00 00 00 00 00 00	r3 = r9
     261:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     262:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     263:	67 01 00 00 02 00 00 00	r1 <<= 2
     264:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000848 <LBB27_39>:
;     return l3_header + transport_size;
     265:	0f 19 00 00 00 00 00 00	r9 += r1
     266:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9

0000000000000858 <LBB27_40>:
     267:	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 72)
;     if (port != 0) {
     268:	bf 92 00 00 00 00 00 00	r2 = r9
     269:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB27_45>
;         if (l4_proto == IPPROTO_TCP) {
     270:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     271:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB27_52>
     272:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB27_45>
     273:	b7 01 00 00 00 00 00 00	r1 = 0
     274:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     275:	bf 63 00 00 00 00 00 00	r3 = r6
     276:	0f 13 00 00 00 00 00 00	r3 += r1
     277:	bf a1 00 00 00 00 00 00	r1 = r10
     278:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     279:	b7 02 00 00 02 00 00 00	r2 = 2
     280:	85 00 00 00 71 00 00 00	call 113
     281:	b7 01 00 00 02 00 00 00	r1 = 2
     282:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     283:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     284:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     285:	bf a1 00 00 00 00 00 00	r1 = r10
     286:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     287:	b7 02 00 00 02 00 00 00	r2 = 2
     288:	bf 63 00 00 00 00 00 00	r3 = r6
     289:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     290:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     291:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     292:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB27_54>
     293:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     294:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB27_92>
     295:	05 00 69 00 00 00 00 00	goto +105 <LBB27_54>

0000000000000940 <LBB27_27>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     296:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB27_35>
     297:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB27_92>

0000000000000950 <LBB27_29>:
     298:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r4
     299:	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r3
     300:	b7 01 00 00 c0 00 00 00	r1 = 192
     301:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     302:	bf 63 00 00 00 00 00 00	r3 = r6
     303:	0f 13 00 00 00 00 00 00	r3 += r1
     304:	bf a1 00 00 00 00 00 00	r1 = r10
     305:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     306:	b7 02 00 00 08 00 00 00	r2 = 8
     307:	85 00 00 00 71 00 00 00	call 113
     308:	b7 01 00 00 b6 00 00 00	r1 = 182
     309:	bf 63 00 00 00 00 00 00	r3 = r6
     310:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     311:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     312:	bf a1 00 00 00 00 00 00	r1 = r10
     313:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     314:	b7 02 00 00 02 00 00 00	r2 = 2
     315:	85 00 00 00 71 00 00 00	call 113
     316:	b7 01 00 00 b4 00 00 00	r1 = 180
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     319:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     320:	bf a1 00 00 00 00 00 00	r1 = r10
     321:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     322:	b7 02 00 00 02 00 00 00	r2 = 2
     323:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     324:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     325:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     326:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB27_31>
     327:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000a40 <LBB27_31>:
;     return head + network_header;
     328:	57 06 00 00 ff ff 00 00	r6 &= 65535
     329:	0f 69 00 00 00 00 00 00	r9 += r6
     330:	bf a1 00 00 00 00 00 00	r1 = r10
     331:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     332:	b7 02 00 00 01 00 00 00	r2 = 1
     333:	bf 93 00 00 00 00 00 00	r3 = r9
     334:	85 00 00 00 04 00 00 00	call 4
     335:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     336:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     337:	57 02 00 00 f0 00 00 00	r2 &= 240
     338:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB27_33>
     339:	bf a1 00 00 00 00 00 00	r1 = r10
     340:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     341:	b7 02 00 00 01 00 00 00	r2 = 1
     342:	bf 93 00 00 00 00 00 00	r3 = r9
     343:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     344:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     345:	67 01 00 00 02 00 00 00	r1 <<= 2
     346:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000ad8 <LBB27_33>:
;     return l3_header + transport_size;
     347:	0f 19 00 00 00 00 00 00	r9 += r1
     348:	bf a6 00 00 00 00 00 00	r6 = r10
     349:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     350:	bf 61 00 00 00 00 00 00	r1 = r6
     351:	b7 02 00 00 08 00 00 00	r2 = 8
     352:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
     353:	bf 93 00 00 00 00 00 00	r3 = r9
     354:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     355:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     356:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     357:	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 88)
     358:	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 96)
     359:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB27_40>
     360:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     361:	07 02 00 00 e8 ff ff ff	r2 += -24
     362:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     363:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB27_40>
     364:	05 00 0c 00 00 00 00 00	goto +12 <LBB27_92>

0000000000000b68 <LBB27_45>:
;     if (proto != 0 && proto != l4_proto)
     365:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     366:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB27_54>
     367:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
;     if (proto != 0 && icmpid != 0) {
     368:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB27_54>
     369:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     370:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB27_54>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     371:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     372:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB27_50>
     373:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB27_54>

0000000000000bb0 <LBB27_50>:
;         if (icmpid != ev_icmpid)
     374:	57 01 00 00 ff ff 00 00	r1 &= 65535
     375:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
     376:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB27_54>

0000000000000bc8 <LBB27_92>:
;     return do_trace(ctx, skb, "__netif_receive_skb");
     377:	b7 00 00 00 00 00 00 00	r0 = 0
     378:	95 00 00 00 00 00 00 00	exit

0000000000000bd8 <LBB27_52>:
     379:	b7 01 00 00 00 00 00 00	r1 = 0
     380:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     381:	bf 63 00 00 00 00 00 00	r3 = r6
     382:	0f 13 00 00 00 00 00 00	r3 += r1
     383:	bf a1 00 00 00 00 00 00	r1 = r10
     384:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     385:	b7 02 00 00 02 00 00 00	r2 = 2
     386:	85 00 00 00 71 00 00 00	call 113
     387:	b7 01 00 00 02 00 00 00	r1 = 2
     388:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     389:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     390:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     391:	bf a1 00 00 00 00 00 00	r1 = r10
     392:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     393:	b7 02 00 00 02 00 00 00	r2 = 2
     394:	bf 63 00 00 00 00 00 00	r3 = r6
     395:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     396:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     397:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     398:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB27_54>
     399:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     400:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB27_92>

0000000000000c88 <LBB27_54>:
;     event->flags |= SKBTRACER_EVENT_IF;
     401:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     402:	47 01 00 00 01 00 00 00	r1 |= 1
     403:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     404:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
;     ev->skb = (u64)skb;
     405:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     406:	85 00 00 00 05 00 00 00	call 5
     407:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     408:	b7 01 00 00 10 00 00 00	r1 = 16
     409:	bf 96 00 00 00 00 00 00	r6 = r9
     410:	0f 16 00 00 00 00 00 00	r6 += r1
     411:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     412:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     413:	b7 02 00 00 08 00 00 00	r2 = 8
     414:	bf 63 00 00 00 00 00 00	r3 = r6
     415:	85 00 00 00 71 00 00 00	call 113
     416:	b7 01 00 00 70 00 00 00	r1 = 112
     417:	bf 93 00 00 00 00 00 00	r3 = r9
     418:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     419:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     420:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     421:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     422:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     423:	b7 02 00 00 04 00 00 00	r2 = 4
     424:	85 00 00 00 71 00 00 00	call 113
     425:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     426:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     427:	85 00 00 00 08 00 00 00	call 8
     428:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     429:	85 00 00 00 0e 00 00 00	call 14
     430:	57 00 00 00 ff ff 00 00	r0 &= 65535
     431:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     432:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     433:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     434:	bf 91 00 00 00 00 00 00	r1 = r9
     435:	b7 02 00 00 08 00 00 00	r2 = 8
     436:	bf 63 00 00 00 00 00 00	r3 = r6
     437:	85 00 00 00 71 00 00 00	call 113
     438:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     439:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     440:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     441:	bf 91 00 00 00 00 00 00	r1 = r9
     442:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     443:	b7 02 00 00 08 00 00 00	r2 = 8
     444:	85 00 00 00 71 00 00 00	call 113
     445:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     446:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     447:	0f 13 00 00 00 00 00 00	r3 += r1
     448:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     449:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     450:	b7 02 00 00 04 00 00 00	r2 = 4
     451:	85 00 00 00 71 00 00 00	call 113
     452:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     453:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB27_57>
     454:	b7 01 00 00 18 00 00 00	r1 = 24
     455:	bf 93 00 00 00 00 00 00	r3 = r9
     456:	0f 13 00 00 00 00 00 00	r3 += r1
     457:	bf a1 00 00 00 00 00 00	r1 = r10
     458:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     459:	b7 02 00 00 08 00 00 00	r2 = 8
     460:	85 00 00 00 71 00 00 00	call 113
     461:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     462:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     463:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB27_57>
     464:	b7 01 00 00 30 00 00 00	r1 = 48
     465:	0f 13 00 00 00 00 00 00	r3 += r1
     466:	bf a1 00 00 00 00 00 00	r1 = r10
     467:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     468:	b7 02 00 00 08 00 00 00	r2 = 8
     469:	85 00 00 00 71 00 00 00	call 113
     470:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     471:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     472:	0f 13 00 00 00 00 00 00	r3 += r1
     473:	bf a1 00 00 00 00 00 00	r1 = r10
     474:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     475:	b7 02 00 00 04 00 00 00	r2 = 4
     476:	85 00 00 00 71 00 00 00	call 113
     477:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000ef0 <LBB27_57>:
;     pkt_info->netns = get_netns(skb);
     478:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     479:	b7 01 00 00 80 00 00 00	r1 = 128
     480:	bf 93 00 00 00 00 00 00	r3 = r9
     481:	0f 13 00 00 00 00 00 00	r3 += r1
     482:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     483:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     484:	bf a1 00 00 00 00 00 00	r1 = r10
     485:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     486:	b7 02 00 00 01 00 00 00	r2 = 1
     487:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     488:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     489:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     490:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     491:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     492:	b7 01 00 00 00 00 00 00	r1 = 0
     493:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     494:	0f 13 00 00 00 00 00 00	r3 += r1
;     pkt_info->ifname[0] = 0;
     495:	bf 71 00 00 00 00 00 00	r1 = r7
     496:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     497:	b7 02 00 00 10 00 00 00	r2 = 16
     498:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     499:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     500:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB27_59>
     501:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     502:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     503:	b7 01 00 00 69 00 00 00	r1 = 105
     504:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     505:	b7 01 00 00 6e 00 00 00	r1 = 110
     506:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000000fd8 <LBB27_59>:
     507:	b7 01 00 00 c0 00 00 00	r1 = 192
     508:	bf 93 00 00 00 00 00 00	r3 = r9
     509:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     510:	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r3
     511:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     512:	07 01 00 00 f8 ff ff ff	r1 += -8
     513:	b7 02 00 00 08 00 00 00	r2 = 8
     514:	85 00 00 00 71 00 00 00	call 113
     515:	b7 01 00 00 b6 00 00 00	r1 = 182
     516:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     517:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     518:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     519:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     520:	b7 02 00 00 02 00 00 00	r2 = 2
     521:	bf 93 00 00 00 00 00 00	r3 = r9
     522:	85 00 00 00 71 00 00 00	call 113
     523:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     524:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     525:	bf 71 00 00 00 00 00 00	r1 = r7
     526:	07 01 00 00 64 00 00 00	r1 += 100
     527:	b7 02 00 00 06 00 00 00	r2 = 6
     528:	bf 63 00 00 00 00 00 00	r3 = r6
     529:	85 00 00 00 04 00 00 00	call 4
     530:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     531:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	b7 02 00 00 08 00 00 00	r2 = 8
     533:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     534:	85 00 00 00 71 00 00 00	call 113
     535:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     536:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     537:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     538:	b7 02 00 00 02 00 00 00	r2 = 2
     539:	bf 93 00 00 00 00 00 00	r3 = r9
     540:	85 00 00 00 71 00 00 00	call 113
     541:	b7 01 00 00 b4 00 00 00	r1 = 180
     542:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
     543:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     544:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     547:	b7 02 00 00 02 00 00 00	r2 = 2
     548:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     549:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     550:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     551:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB27_61>
     552:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001148 <LBB27_61>:
;     return head + network_header;
     553:	57 09 00 00 ff ff 00 00	r9 &= 65535
     554:	0f 96 00 00 00 00 00 00	r6 += r9
     555:	bf a1 00 00 00 00 00 00	r1 = r10
     556:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     557:	b7 02 00 00 01 00 00 00	r2 = 1
     558:	bf 63 00 00 00 00 00 00	r3 = r6
     559:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     560:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     561:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     562:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB27_66>
     563:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB27_92>
     564:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     565:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     566:	b7 01 00 00 c0 00 00 00	r1 = 192
     567:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     568:	bf 93 00 00 00 00 00 00	r3 = r9
     569:	0f 13 00 00 00 00 00 00	r3 += r1
     570:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     572:	b7 02 00 00 08 00 00 00	r2 = 8
     573:	85 00 00 00 71 00 00 00	call 113
     574:	b7 01 00 00 b6 00 00 00	r1 = 182
     575:	bf 93 00 00 00 00 00 00	r3 = r9
     576:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     577:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     578:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     579:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     580:	b7 02 00 00 02 00 00 00	r2 = 2
     581:	85 00 00 00 71 00 00 00	call 113
     582:	b7 01 00 00 b4 00 00 00	r1 = 180
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     585:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     586:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     587:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     588:	b7 02 00 00 02 00 00 00	r2 = 2
     589:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     590:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     591:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     592:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB27_65>
     593:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001290 <LBB27_65>:
;     return head + network_header;
     594:	57 09 00 00 ff ff 00 00	r9 &= 65535
     595:	0f 96 00 00 00 00 00 00	r6 += r9
     596:	b7 01 00 00 0c 00 00 00	r1 = 12
     597:	bf 63 00 00 00 00 00 00	r3 = r6
     598:	0f 13 00 00 00 00 00 00	r3 += r1
     599:	bf a1 00 00 00 00 00 00	r1 = r10
     600:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     601:	b7 02 00 00 04 00 00 00	r2 = 4
     602:	85 00 00 00 71 00 00 00	call 113
     603:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     604:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     605:	b7 01 00 00 10 00 00 00	r1 = 16
     606:	bf 63 00 00 00 00 00 00	r3 = r6
     607:	0f 13 00 00 00 00 00 00	r3 += r1
     608:	bf a1 00 00 00 00 00 00	r1 = r10
     609:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     610:	b7 02 00 00 04 00 00 00	r2 = 4
     611:	85 00 00 00 71 00 00 00	call 113
     612:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     613:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     614:	b7 01 00 00 02 00 00 00	r1 = 2
     615:	bf 63 00 00 00 00 00 00	r3 = r6
     616:	0f 13 00 00 00 00 00 00	r3 += r1
     617:	bf a1 00 00 00 00 00 00	r1 = r10
     618:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     619:	b7 02 00 00 02 00 00 00	r2 = 2
     620:	85 00 00 00 71 00 00 00	call 113
     621:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     622:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     623:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     624:	b7 01 00 00 09 00 00 00	r1 = 9
     625:	05 00 38 00 00 00 00 00	goto +56 <LBB27_69>

0000000000001390 <LBB27_66>:
     626:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     627:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     628:	b7 01 00 00 c0 00 00 00	r1 = 192
     629:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     630:	bf 93 00 00 00 00 00 00	r3 = r9
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     634:	b7 02 00 00 08 00 00 00	r2 = 8
     635:	85 00 00 00 71 00 00 00	call 113
     636:	b7 01 00 00 b6 00 00 00	r1 = 182
     637:	bf 93 00 00 00 00 00 00	r3 = r9
     638:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     639:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     640:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     641:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     642:	b7 02 00 00 02 00 00 00	r2 = 2
     643:	85 00 00 00 71 00 00 00	call 113
     644:	b7 01 00 00 b4 00 00 00	r1 = 180
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     647:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     648:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     649:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     650:	b7 02 00 00 02 00 00 00	r2 = 2
     651:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     652:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     653:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     654:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB27_68>
     655:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001480 <LBB27_68>:
;     return head + network_header;
     656:	57 09 00 00 ff ff 00 00	r9 &= 65535
     657:	0f 96 00 00 00 00 00 00	r6 += r9
     658:	b7 01 00 00 08 00 00 00	r1 = 8
     659:	bf 63 00 00 00 00 00 00	r3 = r6
     660:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
     661:	bf 71 00 00 00 00 00 00	r1 = r7
     662:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     663:	b7 02 00 00 10 00 00 00	r2 = 16
     664:	85 00 00 00 04 00 00 00	call 4
     665:	b7 01 00 00 18 00 00 00	r1 = 24
     666:	bf 63 00 00 00 00 00 00	r3 = r6
     667:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     668:	bf 71 00 00 00 00 00 00	r1 = r7
     669:	07 01 00 00 80 00 00 00	r1 += 128
     670:	b7 02 00 00 10 00 00 00	r2 = 16
     671:	85 00 00 00 04 00 00 00	call 4
     672:	b7 01 00 00 04 00 00 00	r1 = 4
     673:	bf 63 00 00 00 00 00 00	r3 = r6
     674:	0f 13 00 00 00 00 00 00	r3 += r1
     675:	bf a1 00 00 00 00 00 00	r1 = r10
     676:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     677:	b7 02 00 00 02 00 00 00	r2 = 2
     678:	85 00 00 00 71 00 00 00	call 113
     679:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     680:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     681:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000001550 <LBB27_69>:
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
     684:	bf a1 00 00 00 00 00 00	r1 = r10
     685:	07 01 00 00 f8 ff ff ff	r1 += -8
     686:	b7 02 00 00 01 00 00 00	r2 = 1
     687:	85 00 00 00 71 00 00 00	call 113
     688:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     689:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     690:	bf a1 00 00 00 00 00 00	r1 = r10
     691:	07 01 00 00 f8 ff ff ff	r1 += -8
     692:	b7 02 00 00 01 00 00 00	r2 = 1
     693:	bf 63 00 00 00 00 00 00	r3 = r6
     694:	85 00 00 00 04 00 00 00	call 4
     695:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     696:	57 01 00 00 f0 00 00 00	r1 &= 240
     697:	77 01 00 00 04 00 00 00	r1 >>= 4
     698:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     699:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     700:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB27_72>
     701:	15 01 53 00 01 00 00 00	if r1 == 1 goto +83 <LBB27_84>
     702:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB27_74>
     703:	05 00 b9 fe 00 00 00 00	goto -327 <LBB27_92>

0000000000001600 <LBB27_74>:
     704:	b7 01 00 00 c0 00 00 00	r1 = 192
     705:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     706:	bf 93 00 00 00 00 00 00	r3 = r9
     707:	0f 13 00 00 00 00 00 00	r3 += r1
     708:	bf a1 00 00 00 00 00 00	r1 = r10
     709:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     710:	b7 02 00 00 08 00 00 00	r2 = 8
     711:	85 00 00 00 71 00 00 00	call 113
     712:	b7 01 00 00 b6 00 00 00	r1 = 182
     713:	bf 93 00 00 00 00 00 00	r3 = r9
     714:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     715:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     716:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     717:	bf a1 00 00 00 00 00 00	r1 = r10
     718:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     719:	b7 02 00 00 02 00 00 00	r2 = 2
     720:	85 00 00 00 71 00 00 00	call 113
     721:	b7 01 00 00 b4 00 00 00	r1 = 180
     722:	0f 19 00 00 00 00 00 00	r9 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     723:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     726:	b7 02 00 00 02 00 00 00	r2 = 2
     727:	bf 93 00 00 00 00 00 00	r3 = r9
     728:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     729:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     730:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     731:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB27_76>
     732:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000016e8 <LBB27_76>:
;     return head + network_header;
     733:	57 06 00 00 ff ff 00 00	r6 &= 65535
     734:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
     735:	0f 61 00 00 00 00 00 00	r1 += r6
     736:	bf 16 00 00 00 00 00 00	r6 = r1
     737:	bf a1 00 00 00 00 00 00	r1 = r10
     738:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     739:	b7 02 00 00 01 00 00 00	r2 = 1
     740:	bf 63 00 00 00 00 00 00	r3 = r6
     741:	85 00 00 00 04 00 00 00	call 4
     742:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     743:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     744:	57 02 00 00 f0 00 00 00	r2 &= 240
     745:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB27_78>
     746:	bf a1 00 00 00 00 00 00	r1 = r10
     747:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     748:	b7 02 00 00 01 00 00 00	r2 = 1
     749:	bf 63 00 00 00 00 00 00	r3 = r6
     750:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     751:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     752:	67 01 00 00 02 00 00 00	r1 <<= 2
     753:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001790 <LBB27_78>:
;     return l3_header + transport_size;
     754:	0f 16 00 00 00 00 00 00	r6 += r1
     755:	b7 01 00 00 00 00 00 00	r1 = 0
     756:	bf 63 00 00 00 00 00 00	r3 = r6
     757:	0f 13 00 00 00 00 00 00	r3 += r1
     758:	bf a1 00 00 00 00 00 00	r1 = r10
     759:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     760:	b7 02 00 00 02 00 00 00	r2 = 2
     761:	85 00 00 00 71 00 00 00	call 113
     762:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     763:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     764:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     765:	b7 01 00 00 02 00 00 00	r1 = 2
     766:	bf 63 00 00 00 00 00 00	r3 = r6
     767:	0f 13 00 00 00 00 00 00	r3 += r1
     768:	bf a1 00 00 00 00 00 00	r1 = r10
     769:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     770:	b7 02 00 00 02 00 00 00	r2 = 2
     771:	85 00 00 00 71 00 00 00	call 113
     772:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     773:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     774:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     775:	07 06 00 00 0c 00 00 00	r6 += 12
     776:	bf 71 00 00 00 00 00 00	r1 = r7
     777:	07 01 00 00 9c 00 00 00	r1 += 156
     778:	b7 02 00 00 02 00 00 00	r2 = 2
     779:	bf 63 00 00 00 00 00 00	r3 = r6
     780:	85 00 00 00 04 00 00 00	call 4
     781:	05 00 8a 00 00 00 00 00	goto +138 <LBB27_89>

0000000000001870 <LBB27_72>:
;     if (l4_proto == IPPROTO_TCP) {
     782:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB27_79>
     783:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB27_84>
     784:	05 00 68 fe 00 00 00 00	goto -408 <LBB27_92>

0000000000001888 <LBB27_84>:
     785:	b7 01 00 00 c0 00 00 00	r1 = 192
     786:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     787:	bf 63 00 00 00 00 00 00	r3 = r6
     788:	0f 13 00 00 00 00 00 00	r3 += r1
     789:	bf a1 00 00 00 00 00 00	r1 = r10
     790:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     791:	b7 02 00 00 08 00 00 00	r2 = 8
     792:	85 00 00 00 71 00 00 00	call 113
     793:	b7 01 00 00 b6 00 00 00	r1 = 182
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     796:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     797:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     798:	bf a1 00 00 00 00 00 00	r1 = r10
     799:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     800:	b7 02 00 00 02 00 00 00	r2 = 2
     801:	85 00 00 00 71 00 00 00	call 113
     802:	b7 01 00 00 b4 00 00 00	r1 = 180
     803:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     804:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     805:	bf a1 00 00 00 00 00 00	r1 = r10
     806:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     807:	b7 02 00 00 02 00 00 00	r2 = 2
     808:	bf 63 00 00 00 00 00 00	r3 = r6
     809:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     810:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     811:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     812:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB27_86>
     813:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001970 <LBB27_86>:
;     return head + network_header;
     814:	57 09 00 00 ff ff 00 00	r9 &= 65535
     815:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     816:	0f 96 00 00 00 00 00 00	r6 += r9
     817:	bf a1 00 00 00 00 00 00	r1 = r10
     818:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     819:	b7 02 00 00 01 00 00 00	r2 = 1
     820:	bf 63 00 00 00 00 00 00	r3 = r6
     821:	85 00 00 00 04 00 00 00	call 4
     822:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     823:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     824:	57 02 00 00 f0 00 00 00	r2 &= 240
     825:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB27_88>
     826:	bf a1 00 00 00 00 00 00	r1 = r10
     827:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     828:	b7 02 00 00 01 00 00 00	r2 = 1
     829:	bf 63 00 00 00 00 00 00	r3 = r6
     830:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     831:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     832:	67 01 00 00 02 00 00 00	r1 <<= 2
     833:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a10 <LBB27_88>:
;     return l3_header + transport_size;
     834:	0f 16 00 00 00 00 00 00	r6 += r1
     835:	bf a9 00 00 00 00 00 00	r9 = r10
     836:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     837:	bf 91 00 00 00 00 00 00	r1 = r9
     838:	b7 02 00 00 08 00 00 00	r2 = 8
     839:	bf 63 00 00 00 00 00 00	r3 = r6
     840:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     841:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     842:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     843:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     844:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     845:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     846:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     847:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     848:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     849:	05 00 46 00 00 00 00 00	goto +70 <LBB27_89>

0000000000001a90 <LBB27_79>:
     850:	b7 01 00 00 c0 00 00 00	r1 = 192
     851:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     852:	bf 63 00 00 00 00 00 00	r3 = r6
     853:	0f 13 00 00 00 00 00 00	r3 += r1
     854:	bf a1 00 00 00 00 00 00	r1 = r10
     855:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     856:	b7 02 00 00 08 00 00 00	r2 = 8
     857:	85 00 00 00 71 00 00 00	call 113
     858:	b7 01 00 00 b6 00 00 00	r1 = 182
     859:	bf 63 00 00 00 00 00 00	r3 = r6
     860:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     861:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     862:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     863:	bf a1 00 00 00 00 00 00	r1 = r10
     864:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     865:	b7 02 00 00 02 00 00 00	r2 = 2
     866:	85 00 00 00 71 00 00 00	call 113
     867:	b7 01 00 00 b4 00 00 00	r1 = 180
     868:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     869:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     870:	bf a1 00 00 00 00 00 00	r1 = r10
     871:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     872:	b7 02 00 00 02 00 00 00	r2 = 2
     873:	bf 63 00 00 00 00 00 00	r3 = r6
     874:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     875:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     876:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     877:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB27_81>
     878:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001b78 <LBB27_81>:
;     return head + network_header;
     879:	57 09 00 00 ff ff 00 00	r9 &= 65535
     880:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     881:	0f 96 00 00 00 00 00 00	r6 += r9
     882:	bf a1 00 00 00 00 00 00	r1 = r10
     883:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     884:	b7 02 00 00 01 00 00 00	r2 = 1
     885:	bf 63 00 00 00 00 00 00	r3 = r6
     886:	85 00 00 00 04 00 00 00	call 4
     887:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     888:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     889:	57 02 00 00 f0 00 00 00	r2 &= 240
     890:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB27_83>
     891:	bf a1 00 00 00 00 00 00	r1 = r10
     892:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     893:	b7 02 00 00 01 00 00 00	r2 = 1
     894:	bf 63 00 00 00 00 00 00	r3 = r6
     895:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     896:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     897:	67 01 00 00 02 00 00 00	r1 <<= 2
     898:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c18 <LBB27_83>:
;     return l3_header + transport_size;
     899:	0f 16 00 00 00 00 00 00	r6 += r1
     900:	b7 01 00 00 00 00 00 00	r1 = 0
     901:	bf 63 00 00 00 00 00 00	r3 = r6
     902:	0f 13 00 00 00 00 00 00	r3 += r1
     903:	bf a1 00 00 00 00 00 00	r1 = r10
     904:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     905:	b7 02 00 00 02 00 00 00	r2 = 2
     906:	85 00 00 00 71 00 00 00	call 113
     907:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     908:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     909:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     910:	b7 01 00 00 02 00 00 00	r1 = 2
     911:	0f 16 00 00 00 00 00 00	r6 += r1
     912:	bf a1 00 00 00 00 00 00	r1 = r10
     913:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     914:	b7 02 00 00 02 00 00 00	r2 = 2
     915:	bf 63 00 00 00 00 00 00	r3 = r6
     916:	85 00 00 00 71 00 00 00	call 113
     917:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     918:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     919:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001cc0 <LBB27_89>:
     920:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
;     return cfg->callstack == 0;
     921:	71 81 11 00 00 00 00 00	r1 = *(u8 *)(r8 + 17)
;     if (!filter_callstack(cfg))
     922:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB27_91>
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
     923:	bf 61 00 00 00 00 00 00	r1 = r6
     924:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     926:	b7 03 00 00 00 00 00 00	r3 = 0
     927:	85 00 00 00 1b 00 00 00	call 27
     928:	63 07 30 00 00 00 00 00	*(u32 *)(r7 + 48) = r0

0000000000001d08 <LBB27_91>:
     929:	b7 01 00 00 62 00 00 00	r1 = 98
;     for (j = 10; j < 64; j += 10) CPY(j);
     930:	73 17 12 00 00 00 00 00	*(u8 *)(r7 + 18) = r1
     931:	b7 01 00 00 6b 00 00 00	r1 = 107
     932:	73 17 11 00 00 00 00 00	*(u8 *)(r7 + 17) = r1
     933:	b7 01 00 00 73 00 00 00	r1 = 115
     934:	73 17 10 00 00 00 00 00	*(u8 *)(r7 + 16) = r1
     935:	b7 01 00 00 76 00 00 00	r1 = 118
     936:	73 17 0d 00 00 00 00 00	*(u8 *)(r7 + 13) = r1
     937:	b7 01 00 00 63 00 00 00	r1 = 99
     938:	73 17 0a 00 00 00 00 00	*(u8 *)(r7 + 10) = r1
     939:	b7 01 00 00 72 00 00 00	r1 = 114
     940:	73 17 08 00 00 00 00 00	*(u8 *)(r7 + 8) = r1
     941:	b7 01 00 00 66 00 00 00	r1 = 102
     942:	73 17 06 00 00 00 00 00	*(u8 *)(r7 + 6) = r1
     943:	b7 01 00 00 69 00 00 00	r1 = 105
     944:	73 17 0c 00 00 00 00 00	*(u8 *)(r7 + 12) = r1
     945:	73 17 05 00 00 00 00 00	*(u8 *)(r7 + 5) = r1
     946:	b7 01 00 00 74 00 00 00	r1 = 116
     947:	73 17 04 00 00 00 00 00	*(u8 *)(r7 + 4) = r1
     948:	b7 01 00 00 65 00 00 00	r1 = 101
     949:	73 17 0e 00 00 00 00 00	*(u8 *)(r7 + 14) = r1
     950:	73 17 0b 00 00 00 00 00	*(u8 *)(r7 + 11) = r1
     951:	73 17 09 00 00 00 00 00	*(u8 *)(r7 + 9) = r1
     952:	73 17 03 00 00 00 00 00	*(u8 *)(r7 + 3) = r1
     953:	b7 01 00 00 6e 00 00 00	r1 = 110
     954:	73 17 02 00 00 00 00 00	*(u8 *)(r7 + 2) = r1
     955:	b7 01 00 00 5f 00 00 00	r1 = 95
     956:	73 17 0f 00 00 00 00 00	*(u8 *)(r7 + 15) = r1
     957:	73 17 07 00 00 00 00 00	*(u8 *)(r7 + 7) = r1
     958:	73 17 01 00 00 00 00 00	*(u8 *)(r7 + 1) = r1
     959:	73 17 00 00 00 00 00 00	*(u8 *)(r7 + 0) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     960:	bf 61 00 00 00 00 00 00	r1 = r6
     961:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     963:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     965:	bf 74 00 00 00 00 00 00	r4 = r7
     966:	b7 05 00 00 e0 00 00 00	r5 = 224
     967:	85 00 00 00 19 00 00 00	call 25
     968:	05 00 b0 fd 00 00 00 00	goto -592 <LBB27_92>

Disassembly of section kprobe/tpacket_rcv:

0000000000000000 <k_tpacket_rcv>:
; int k_tpacket_rcv(struct pt_regs *ctx) {
       0:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM1(ctx);
       1:	79 11 70 00 00 00 00 00	r1 = *(u64 *)(r1 + 112)
       2:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       3:	b7 06 00 00 00 00 00 00	r6 = 0
;     GET_CFG();
       4:	63 6a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r6
       5:	bf a2 00 00 00 00 00 00	r2 = r10
       6:	07 02 00 00 e4 ff ff ff	r2 += -28
;     GET_CFG();
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	85 00 00 00 01 00 00 00	call 1
      10:	bf 08 00 00 00 00 00 00	r8 = r0
      11:	15 08 6d 01 00 00 00 00	if r8 == 0 goto +365 <LBB28_92>
      12:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
      13:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      14:	63 18 08 00 00 00 00 00	*(u32 *)(r8 + 8) = r1
;     u32 ev_buff_id = 0;
      15:	63 6a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r6
      16:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      17:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      18:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      20:	85 00 00 00 01 00 00 00	call 1
      21:	bf 07 00 00 00 00 00 00	r7 = r0
;     if (!ev) return NULL;
      22:	55 07 01 00 00 00 00 00	if r7 != 0 goto +1 <LBB28_3>
      23:	05 00 61 01 00 00 00 00	goto +353 <LBB28_92>

00000000000000c0 <LBB28_3>:
      24:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      25:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      26:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      27:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      28:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      29:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      30:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      31:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      32:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      33:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      34:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      35:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      36:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      37:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      38:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      39:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      40:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      41:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      42:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      43:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      44:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      45:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      46:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      47:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      48:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      49:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      50:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      51:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      52:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      53:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      54:	61 81 04 00 00 00 00 00	r1 = *(u32 *)(r8 + 4)
      55:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB28_5>
      56:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      57:	5d 01 3f 01 00 00 00 00	if r1 != r0 goto +319 <LBB28_92>

00000000000001d0 <LBB28_5>:
      58:	b7 01 00 00 10 00 00 00	r1 = 16
      59:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
      60:	bf 93 00 00 00 00 00 00	r3 = r9
      61:	0f 13 00 00 00 00 00 00	r3 += r1
      62:	bf a6 00 00 00 00 00 00	r6 = r10
      63:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      64:	bf 61 00 00 00 00 00 00	r1 = r6
      65:	b7 02 00 00 08 00 00 00	r2 = 8
      66:	85 00 00 00 71 00 00 00	call 113
      67:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      68:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      69:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      70:	bf 61 00 00 00 00 00 00	r1 = r6
      71:	b7 02 00 00 08 00 00 00	r2 = 8
      72:	85 00 00 00 71 00 00 00	call 113
      73:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      74:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      75:	0f 13 00 00 00 00 00 00	r3 += r1
      76:	bf a1 00 00 00 00 00 00	r1 = r10
      77:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      78:	b7 02 00 00 04 00 00 00	r2 = 4
      79:	85 00 00 00 71 00 00 00	call 113
      80:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      81:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB28_8>
      82:	b7 01 00 00 18 00 00 00	r1 = 24
      83:	bf 93 00 00 00 00 00 00	r3 = r9
      84:	0f 13 00 00 00 00 00 00	r3 += r1
      85:	bf a1 00 00 00 00 00 00	r1 = r10
      86:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
      87:	b7 02 00 00 08 00 00 00	r2 = 8
      88:	85 00 00 00 71 00 00 00	call 113
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
      90:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB28_11>
      91:	b7 01 00 00 30 00 00 00	r1 = 48
      92:	0f 13 00 00 00 00 00 00	r3 += r1
      93:	bf a1 00 00 00 00 00 00	r1 = r10
      94:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      95:	b7 02 00 00 08 00 00 00	r2 = 8
      96:	85 00 00 00 71 00 00 00	call 113
      97:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      98:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     102:	b7 02 00 00 04 00 00 00	r2 = 4
     103:	85 00 00 00 71 00 00 00	call 113
     104:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000348 <LBB28_8>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     105:	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0)
     106:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB28_11>
     107:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB28_11>
     108:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB28_92>

0000000000000368 <LBB28_11>:
;     u16 icmpid = cfg->icmpid;
     109:	69 81 0e 00 00 00 00 00	r1 = *(u16 *)(r8 + 14)
;     u16 port = cfg->port;
     110:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     111:	69 81 0c 00 00 00 00 00	r1 = *(u16 *)(r8 + 12)
;     u8 proto = cfg->proto;
     112:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     113:	71 81 12 00 00 00 00 00	r1 = *(u8 *)(r8 + 18)
;     u32 addr = cfg->ip;
     114:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     115:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
     116:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     117:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     118:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     119:	b7 01 00 00 c0 00 00 00	r1 = 192
     120:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     121:	bf 93 00 00 00 00 00 00	r3 = r9
     122:	0f 13 00 00 00 00 00 00	r3 += r1
     123:	bf a1 00 00 00 00 00 00	r1 = r10
     124:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     125:	b7 02 00 00 08 00 00 00	r2 = 8
     126:	85 00 00 00 71 00 00 00	call 113
     127:	b7 01 00 00 b6 00 00 00	r1 = 182
     128:	bf 93 00 00 00 00 00 00	r3 = r9
     129:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     130:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     131:	bf a1 00 00 00 00 00 00	r1 = r10
     132:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     133:	b7 02 00 00 02 00 00 00	r2 = 2
     134:	85 00 00 00 71 00 00 00	call 113
     135:	b7 01 00 00 b4 00 00 00	r1 = 180
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     138:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     139:	bf a1 00 00 00 00 00 00	r1 = r10
     140:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     141:	b7 02 00 00 02 00 00 00	r2 = 2
     142:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     143:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     144:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     145:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB28_13>
     146:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000498 <LBB28_13>:
;     return head + network_header;
     147:	57 09 00 00 ff ff 00 00	r9 &= 65535
     148:	0f 96 00 00 00 00 00 00	r6 += r9
     149:	bf a1 00 00 00 00 00 00	r1 = r10
     150:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     151:	b7 02 00 00 01 00 00 00	r2 = 1
     152:	bf 63 00 00 00 00 00 00	r3 = r6
     153:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     154:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     155:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     156:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB28_20>
     157:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB28_92>
;         if (addr != 0) {
     158:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     159:	bf 19 00 00 00 00 00 00	r9 = r1
     160:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB28_18>
     161:	b7 01 00 00 0c 00 00 00	r1 = 12
     162:	bf 63 00 00 00 00 00 00	r3 = r6
     163:	0f 13 00 00 00 00 00 00	r3 += r1
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     166:	b7 02 00 00 04 00 00 00	r2 = 4
     167:	85 00 00 00 71 00 00 00	call 113
     168:	b7 01 00 00 10 00 00 00	r1 = 16
     169:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     170:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     171:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     172:	bf a1 00 00 00 00 00 00	r1 = r10
     173:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     174:	b7 02 00 00 04 00 00 00	r2 = 4
     175:	bf 63 00 00 00 00 00 00	r3 = r6
     176:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     177:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     178:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB28_54>
     179:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     180:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     181:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB28_92>
     182:	05 00 da 00 00 00 00 00	goto +218 <LBB28_54>

00000000000005b8 <LBB28_20>:
     183:	b7 01 00 00 06 00 00 00	r1 = 6
     184:	0f 16 00 00 00 00 00 00	r6 += r1
     185:	bf a1 00 00 00 00 00 00	r1 = r10
     186:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     187:	b7 02 00 00 01 00 00 00	r2 = 1
     188:	bf 63 00 00 00 00 00 00	r3 = r6
     189:	85 00 00 00 04 00 00 00	call 4
     190:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     191:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     192:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     193:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB28_22>
     194:	b7 04 00 00 80 00 00 00	r4 = 128
     195:	b7 03 00 00 81 00 00 00	r3 = 129
     196:	b7 01 00 00 3a 00 00 00	r1 = 58
     197:	05 00 0d 00 00 00 00 00	goto +13 <LBB28_22>

0000000000000630 <LBB28_18>:
     198:	b7 01 00 00 09 00 00 00	r1 = 9
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     208:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB28_22>
     209:	b7 04 00 00 08 00 00 00	r4 = 8
     210:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000698 <LBB28_22>:
;     if (proto != 0 && proto != l4_proto)
     211:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     212:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB28_24>
     213:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB28_92>

00000000000006b0 <LBB28_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     214:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB28_27>
     215:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB28_29>
     216:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB28_35>
     217:	05 00 9f 00 00 00 00 00	goto +159 <LBB28_92>

00000000000006d0 <LBB28_35>:
     218:	b7 01 00 00 c0 00 00 00	r1 = 192
     219:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     220:	bf 63 00 00 00 00 00 00	r3 = r6
     221:	0f 13 00 00 00 00 00 00	r3 += r1
     222:	bf a1 00 00 00 00 00 00	r1 = r10
     223:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     224:	b7 02 00 00 08 00 00 00	r2 = 8
     225:	85 00 00 00 71 00 00 00	call 113
     226:	b7 01 00 00 b6 00 00 00	r1 = 182
     227:	bf 63 00 00 00 00 00 00	r3 = r6
     228:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     229:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     230:	bf a1 00 00 00 00 00 00	r1 = r10
     231:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     232:	b7 02 00 00 02 00 00 00	r2 = 2
     233:	85 00 00 00 71 00 00 00	call 113
     234:	b7 01 00 00 b4 00 00 00	r1 = 180
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     237:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     238:	bf a1 00 00 00 00 00 00	r1 = r10
     239:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     240:	b7 02 00 00 02 00 00 00	r2 = 2
     241:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     242:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     243:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     244:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB28_37>
     245:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000007b0 <LBB28_37>:
;     return head + network_header;
     246:	57 06 00 00 ff ff 00 00	r6 &= 65535
     247:	0f 69 00 00 00 00 00 00	r9 += r6
     248:	bf a1 00 00 00 00 00 00	r1 = r10
     249:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     250:	b7 02 00 00 01 00 00 00	r2 = 1
     251:	bf 93 00 00 00 00 00 00	r3 = r9
     252:	85 00 00 00 04 00 00 00	call 4
     253:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     254:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     255:	57 02 00 00 f0 00 00 00	r2 &= 240
     256:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB28_39>
     257:	bf a1 00 00 00 00 00 00	r1 = r10
     258:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     259:	b7 02 00 00 01 00 00 00	r2 = 1
     260:	bf 93 00 00 00 00 00 00	r3 = r9
     261:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     262:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     263:	67 01 00 00 02 00 00 00	r1 <<= 2
     264:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000848 <LBB28_39>:
;     return l3_header + transport_size;
     265:	0f 19 00 00 00 00 00 00	r9 += r1
     266:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9

0000000000000858 <LBB28_40>:
     267:	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 72)
;     if (port != 0) {
     268:	bf 92 00 00 00 00 00 00	r2 = r9
     269:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB28_45>
;         if (l4_proto == IPPROTO_TCP) {
     270:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     271:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB28_52>
     272:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB28_45>
     273:	b7 01 00 00 00 00 00 00	r1 = 0
     274:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     275:	bf 63 00 00 00 00 00 00	r3 = r6
     276:	0f 13 00 00 00 00 00 00	r3 += r1
     277:	bf a1 00 00 00 00 00 00	r1 = r10
     278:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     279:	b7 02 00 00 02 00 00 00	r2 = 2
     280:	85 00 00 00 71 00 00 00	call 113
     281:	b7 01 00 00 02 00 00 00	r1 = 2
     282:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     283:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     284:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     285:	bf a1 00 00 00 00 00 00	r1 = r10
     286:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     287:	b7 02 00 00 02 00 00 00	r2 = 2
     288:	bf 63 00 00 00 00 00 00	r3 = r6
     289:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     290:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     291:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     292:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB28_54>
     293:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     294:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB28_92>
     295:	05 00 69 00 00 00 00 00	goto +105 <LBB28_54>

0000000000000940 <LBB28_27>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     296:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB28_35>
     297:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB28_92>

0000000000000950 <LBB28_29>:
     298:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r4
     299:	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r3
     300:	b7 01 00 00 c0 00 00 00	r1 = 192
     301:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     302:	bf 63 00 00 00 00 00 00	r3 = r6
     303:	0f 13 00 00 00 00 00 00	r3 += r1
     304:	bf a1 00 00 00 00 00 00	r1 = r10
     305:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     306:	b7 02 00 00 08 00 00 00	r2 = 8
     307:	85 00 00 00 71 00 00 00	call 113
     308:	b7 01 00 00 b6 00 00 00	r1 = 182
     309:	bf 63 00 00 00 00 00 00	r3 = r6
     310:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     311:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     312:	bf a1 00 00 00 00 00 00	r1 = r10
     313:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     314:	b7 02 00 00 02 00 00 00	r2 = 2
     315:	85 00 00 00 71 00 00 00	call 113
     316:	b7 01 00 00 b4 00 00 00	r1 = 180
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     319:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     320:	bf a1 00 00 00 00 00 00	r1 = r10
     321:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     322:	b7 02 00 00 02 00 00 00	r2 = 2
     323:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     324:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     325:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     326:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB28_31>
     327:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000a40 <LBB28_31>:
;     return head + network_header;
     328:	57 06 00 00 ff ff 00 00	r6 &= 65535
     329:	0f 69 00 00 00 00 00 00	r9 += r6
     330:	bf a1 00 00 00 00 00 00	r1 = r10
     331:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     332:	b7 02 00 00 01 00 00 00	r2 = 1
     333:	bf 93 00 00 00 00 00 00	r3 = r9
     334:	85 00 00 00 04 00 00 00	call 4
     335:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     336:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     337:	57 02 00 00 f0 00 00 00	r2 &= 240
     338:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB28_33>
     339:	bf a1 00 00 00 00 00 00	r1 = r10
     340:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     341:	b7 02 00 00 01 00 00 00	r2 = 1
     342:	bf 93 00 00 00 00 00 00	r3 = r9
     343:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     344:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     345:	67 01 00 00 02 00 00 00	r1 <<= 2
     346:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000ad8 <LBB28_33>:
;     return l3_header + transport_size;
     347:	0f 19 00 00 00 00 00 00	r9 += r1
     348:	bf a6 00 00 00 00 00 00	r6 = r10
     349:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     350:	bf 61 00 00 00 00 00 00	r1 = r6
     351:	b7 02 00 00 08 00 00 00	r2 = 8
     352:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
     353:	bf 93 00 00 00 00 00 00	r3 = r9
     354:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     355:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     356:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     357:	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 88)
     358:	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 96)
     359:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB28_40>
     360:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     361:	07 02 00 00 e8 ff ff ff	r2 += -24
     362:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     363:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB28_40>
     364:	05 00 0c 00 00 00 00 00	goto +12 <LBB28_92>

0000000000000b68 <LBB28_45>:
;     if (proto != 0 && proto != l4_proto)
     365:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     366:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB28_54>
     367:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
;     if (proto != 0 && icmpid != 0) {
     368:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB28_54>
     369:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     370:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB28_54>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     371:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     372:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB28_50>
     373:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB28_54>

0000000000000bb0 <LBB28_50>:
;         if (icmpid != ev_icmpid)
     374:	57 01 00 00 ff ff 00 00	r1 &= 65535
     375:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
     376:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB28_54>

0000000000000bc8 <LBB28_92>:
;     return do_trace(ctx, skb, "tpacket_rcv");
     377:	b7 00 00 00 00 00 00 00	r0 = 0
     378:	95 00 00 00 00 00 00 00	exit

0000000000000bd8 <LBB28_52>:
     379:	b7 01 00 00 00 00 00 00	r1 = 0
     380:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     381:	bf 63 00 00 00 00 00 00	r3 = r6
     382:	0f 13 00 00 00 00 00 00	r3 += r1
     383:	bf a1 00 00 00 00 00 00	r1 = r10
     384:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     385:	b7 02 00 00 02 00 00 00	r2 = 2
     386:	85 00 00 00 71 00 00 00	call 113
     387:	b7 01 00 00 02 00 00 00	r1 = 2
     388:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     389:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     390:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     391:	bf a1 00 00 00 00 00 00	r1 = r10
     392:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     393:	b7 02 00 00 02 00 00 00	r2 = 2
     394:	bf 63 00 00 00 00 00 00	r3 = r6
     395:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     396:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     397:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     398:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB28_54>
     399:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     400:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB28_92>

0000000000000c88 <LBB28_54>:
;     event->flags |= SKBTRACER_EVENT_IF;
     401:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     402:	47 01 00 00 01 00 00 00	r1 |= 1
     403:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     404:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
;     ev->skb = (u64)skb;
     405:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     406:	85 00 00 00 05 00 00 00	call 5
     407:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     408:	b7 01 00 00 10 00 00 00	r1 = 16
     409:	bf 96 00 00 00 00 00 00	r6 = r9
     410:	0f 16 00 00 00 00 00 00	r6 += r1
     411:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     412:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     413:	b7 02 00 00 08 00 00 00	r2 = 8
     414:	bf 63 00 00 00 00 00 00	r3 = r6
     415:	85 00 00 00 71 00 00 00	call 113
     416:	b7 01 00 00 70 00 00 00	r1 = 112
     417:	bf 93 00 00 00 00 00 00	r3 = r9
     418:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     419:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     420:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     421:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     422:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     423:	b7 02 00 00 04 00 00 00	r2 = 4
     424:	85 00 00 00 71 00 00 00	call 113
     425:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     426:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     427:	85 00 00 00 08 00 00 00	call 8
     428:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     429:	85 00 00 00 0e 00 00 00	call 14
     430:	57 00 00 00 ff ff 00 00	r0 &= 65535
     431:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     432:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     433:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     434:	bf 91 00 00 00 00 00 00	r1 = r9
     435:	b7 02 00 00 08 00 00 00	r2 = 8
     436:	bf 63 00 00 00 00 00 00	r3 = r6
     437:	85 00 00 00 71 00 00 00	call 113
     438:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     439:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     440:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     441:	bf 91 00 00 00 00 00 00	r1 = r9
     442:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     443:	b7 02 00 00 08 00 00 00	r2 = 8
     444:	85 00 00 00 71 00 00 00	call 113
     445:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     446:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     447:	0f 13 00 00 00 00 00 00	r3 += r1
     448:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     449:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     450:	b7 02 00 00 04 00 00 00	r2 = 4
     451:	85 00 00 00 71 00 00 00	call 113
     452:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     453:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB28_57>
     454:	b7 01 00 00 18 00 00 00	r1 = 24
     455:	bf 93 00 00 00 00 00 00	r3 = r9
     456:	0f 13 00 00 00 00 00 00	r3 += r1
     457:	bf a1 00 00 00 00 00 00	r1 = r10
     458:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     459:	b7 02 00 00 08 00 00 00	r2 = 8
     460:	85 00 00 00 71 00 00 00	call 113
     461:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     462:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     463:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB28_57>
     464:	b7 01 00 00 30 00 00 00	r1 = 48
     465:	0f 13 00 00 00 00 00 00	r3 += r1
     466:	bf a1 00 00 00 00 00 00	r1 = r10
     467:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     468:	b7 02 00 00 08 00 00 00	r2 = 8
     469:	85 00 00 00 71 00 00 00	call 113
     470:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     471:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     472:	0f 13 00 00 00 00 00 00	r3 += r1
     473:	bf a1 00 00 00 00 00 00	r1 = r10
     474:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     475:	b7 02 00 00 04 00 00 00	r2 = 4
     476:	85 00 00 00 71 00 00 00	call 113
     477:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000ef0 <LBB28_57>:
;     pkt_info->netns = get_netns(skb);
     478:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     479:	b7 01 00 00 80 00 00 00	r1 = 128
     480:	bf 93 00 00 00 00 00 00	r3 = r9
     481:	0f 13 00 00 00 00 00 00	r3 += r1
     482:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     483:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     484:	bf a1 00 00 00 00 00 00	r1 = r10
     485:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     486:	b7 02 00 00 01 00 00 00	r2 = 1
     487:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     488:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     489:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     490:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     491:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     492:	b7 01 00 00 00 00 00 00	r1 = 0
     493:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     494:	0f 13 00 00 00 00 00 00	r3 += r1
;     pkt_info->ifname[0] = 0;
     495:	bf 71 00 00 00 00 00 00	r1 = r7
     496:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     497:	b7 02 00 00 10 00 00 00	r2 = 16
     498:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     499:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     500:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB28_59>
     501:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     502:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     503:	b7 01 00 00 69 00 00 00	r1 = 105
     504:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     505:	b7 01 00 00 6e 00 00 00	r1 = 110
     506:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000000fd8 <LBB28_59>:
     507:	b7 01 00 00 c0 00 00 00	r1 = 192
     508:	bf 93 00 00 00 00 00 00	r3 = r9
     509:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     510:	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r3
     511:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     512:	07 01 00 00 f8 ff ff ff	r1 += -8
     513:	b7 02 00 00 08 00 00 00	r2 = 8
     514:	85 00 00 00 71 00 00 00	call 113
     515:	b7 01 00 00 b6 00 00 00	r1 = 182
     516:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     517:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     518:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     519:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     520:	b7 02 00 00 02 00 00 00	r2 = 2
     521:	bf 93 00 00 00 00 00 00	r3 = r9
     522:	85 00 00 00 71 00 00 00	call 113
     523:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     524:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     525:	bf 71 00 00 00 00 00 00	r1 = r7
     526:	07 01 00 00 64 00 00 00	r1 += 100
     527:	b7 02 00 00 06 00 00 00	r2 = 6
     528:	bf 63 00 00 00 00 00 00	r3 = r6
     529:	85 00 00 00 04 00 00 00	call 4
     530:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     531:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	b7 02 00 00 08 00 00 00	r2 = 8
     533:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     534:	85 00 00 00 71 00 00 00	call 113
     535:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     536:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     537:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     538:	b7 02 00 00 02 00 00 00	r2 = 2
     539:	bf 93 00 00 00 00 00 00	r3 = r9
     540:	85 00 00 00 71 00 00 00	call 113
     541:	b7 01 00 00 b4 00 00 00	r1 = 180
     542:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
     543:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     544:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     547:	b7 02 00 00 02 00 00 00	r2 = 2
     548:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     549:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     550:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     551:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB28_61>
     552:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001148 <LBB28_61>:
;     return head + network_header;
     553:	57 09 00 00 ff ff 00 00	r9 &= 65535
     554:	0f 96 00 00 00 00 00 00	r6 += r9
     555:	bf a1 00 00 00 00 00 00	r1 = r10
     556:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     557:	b7 02 00 00 01 00 00 00	r2 = 1
     558:	bf 63 00 00 00 00 00 00	r3 = r6
     559:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     560:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     561:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     562:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB28_66>
     563:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB28_92>
     564:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     565:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     566:	b7 01 00 00 c0 00 00 00	r1 = 192
     567:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     568:	bf 93 00 00 00 00 00 00	r3 = r9
     569:	0f 13 00 00 00 00 00 00	r3 += r1
     570:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     572:	b7 02 00 00 08 00 00 00	r2 = 8
     573:	85 00 00 00 71 00 00 00	call 113
     574:	b7 01 00 00 b6 00 00 00	r1 = 182
     575:	bf 93 00 00 00 00 00 00	r3 = r9
     576:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     577:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     578:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     579:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     580:	b7 02 00 00 02 00 00 00	r2 = 2
     581:	85 00 00 00 71 00 00 00	call 113
     582:	b7 01 00 00 b4 00 00 00	r1 = 180
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     585:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     586:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     587:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     588:	b7 02 00 00 02 00 00 00	r2 = 2
     589:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     590:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     591:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     592:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB28_65>
     593:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001290 <LBB28_65>:
;     return head + network_header;
     594:	57 09 00 00 ff ff 00 00	r9 &= 65535
     595:	0f 96 00 00 00 00 00 00	r6 += r9
     596:	b7 01 00 00 0c 00 00 00	r1 = 12
     597:	bf 63 00 00 00 00 00 00	r3 = r6
     598:	0f 13 00 00 00 00 00 00	r3 += r1
     599:	bf a1 00 00 00 00 00 00	r1 = r10
     600:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     601:	b7 02 00 00 04 00 00 00	r2 = 4
     602:	85 00 00 00 71 00 00 00	call 113
     603:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     604:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     605:	b7 01 00 00 10 00 00 00	r1 = 16
     606:	bf 63 00 00 00 00 00 00	r3 = r6
     607:	0f 13 00 00 00 00 00 00	r3 += r1
     608:	bf a1 00 00 00 00 00 00	r1 = r10
     609:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     610:	b7 02 00 00 04 00 00 00	r2 = 4
     611:	85 00 00 00 71 00 00 00	call 113
     612:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     613:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     614:	b7 01 00 00 02 00 00 00	r1 = 2
     615:	bf 63 00 00 00 00 00 00	r3 = r6
     616:	0f 13 00 00 00 00 00 00	r3 += r1
     617:	bf a1 00 00 00 00 00 00	r1 = r10
     618:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     619:	b7 02 00 00 02 00 00 00	r2 = 2
     620:	85 00 00 00 71 00 00 00	call 113
     621:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     622:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     623:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     624:	b7 01 00 00 09 00 00 00	r1 = 9
     625:	05 00 38 00 00 00 00 00	goto +56 <LBB28_69>

0000000000001390 <LBB28_66>:
     626:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     627:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     628:	b7 01 00 00 c0 00 00 00	r1 = 192
     629:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     630:	bf 93 00 00 00 00 00 00	r3 = r9
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     634:	b7 02 00 00 08 00 00 00	r2 = 8
     635:	85 00 00 00 71 00 00 00	call 113
     636:	b7 01 00 00 b6 00 00 00	r1 = 182
     637:	bf 93 00 00 00 00 00 00	r3 = r9
     638:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     639:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     640:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     641:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     642:	b7 02 00 00 02 00 00 00	r2 = 2
     643:	85 00 00 00 71 00 00 00	call 113
     644:	b7 01 00 00 b4 00 00 00	r1 = 180
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     647:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     648:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     649:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     650:	b7 02 00 00 02 00 00 00	r2 = 2
     651:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     652:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     653:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     654:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB28_68>
     655:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001480 <LBB28_68>:
;     return head + network_header;
     656:	57 09 00 00 ff ff 00 00	r9 &= 65535
     657:	0f 96 00 00 00 00 00 00	r6 += r9
     658:	b7 01 00 00 08 00 00 00	r1 = 8
     659:	bf 63 00 00 00 00 00 00	r3 = r6
     660:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
     661:	bf 71 00 00 00 00 00 00	r1 = r7
     662:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     663:	b7 02 00 00 10 00 00 00	r2 = 16
     664:	85 00 00 00 04 00 00 00	call 4
     665:	b7 01 00 00 18 00 00 00	r1 = 24
     666:	bf 63 00 00 00 00 00 00	r3 = r6
     667:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     668:	bf 71 00 00 00 00 00 00	r1 = r7
     669:	07 01 00 00 80 00 00 00	r1 += 128
     670:	b7 02 00 00 10 00 00 00	r2 = 16
     671:	85 00 00 00 04 00 00 00	call 4
     672:	b7 01 00 00 04 00 00 00	r1 = 4
     673:	bf 63 00 00 00 00 00 00	r3 = r6
     674:	0f 13 00 00 00 00 00 00	r3 += r1
     675:	bf a1 00 00 00 00 00 00	r1 = r10
     676:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     677:	b7 02 00 00 02 00 00 00	r2 = 2
     678:	85 00 00 00 71 00 00 00	call 113
     679:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     680:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     681:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000001550 <LBB28_69>:
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
     684:	bf a1 00 00 00 00 00 00	r1 = r10
     685:	07 01 00 00 f8 ff ff ff	r1 += -8
     686:	b7 02 00 00 01 00 00 00	r2 = 1
     687:	85 00 00 00 71 00 00 00	call 113
     688:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     689:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     690:	bf a1 00 00 00 00 00 00	r1 = r10
     691:	07 01 00 00 f8 ff ff ff	r1 += -8
     692:	b7 02 00 00 01 00 00 00	r2 = 1
     693:	bf 63 00 00 00 00 00 00	r3 = r6
     694:	85 00 00 00 04 00 00 00	call 4
     695:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     696:	57 01 00 00 f0 00 00 00	r1 &= 240
     697:	77 01 00 00 04 00 00 00	r1 >>= 4
     698:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     699:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     700:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB28_72>
     701:	15 01 53 00 01 00 00 00	if r1 == 1 goto +83 <LBB28_84>
     702:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB28_74>
     703:	05 00 b9 fe 00 00 00 00	goto -327 <LBB28_92>

0000000000001600 <LBB28_74>:
     704:	b7 01 00 00 c0 00 00 00	r1 = 192
     705:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     706:	bf 93 00 00 00 00 00 00	r3 = r9
     707:	0f 13 00 00 00 00 00 00	r3 += r1
     708:	bf a1 00 00 00 00 00 00	r1 = r10
     709:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     710:	b7 02 00 00 08 00 00 00	r2 = 8
     711:	85 00 00 00 71 00 00 00	call 113
     712:	b7 01 00 00 b6 00 00 00	r1 = 182
     713:	bf 93 00 00 00 00 00 00	r3 = r9
     714:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     715:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     716:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     717:	bf a1 00 00 00 00 00 00	r1 = r10
     718:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     719:	b7 02 00 00 02 00 00 00	r2 = 2
     720:	85 00 00 00 71 00 00 00	call 113
     721:	b7 01 00 00 b4 00 00 00	r1 = 180
     722:	0f 19 00 00 00 00 00 00	r9 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     723:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     726:	b7 02 00 00 02 00 00 00	r2 = 2
     727:	bf 93 00 00 00 00 00 00	r3 = r9
     728:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     729:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     730:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     731:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB28_76>
     732:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000016e8 <LBB28_76>:
;     return head + network_header;
     733:	57 06 00 00 ff ff 00 00	r6 &= 65535
     734:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
     735:	0f 61 00 00 00 00 00 00	r1 += r6
     736:	bf 16 00 00 00 00 00 00	r6 = r1
     737:	bf a1 00 00 00 00 00 00	r1 = r10
     738:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     739:	b7 02 00 00 01 00 00 00	r2 = 1
     740:	bf 63 00 00 00 00 00 00	r3 = r6
     741:	85 00 00 00 04 00 00 00	call 4
     742:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     743:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     744:	57 02 00 00 f0 00 00 00	r2 &= 240
     745:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB28_78>
     746:	bf a1 00 00 00 00 00 00	r1 = r10
     747:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     748:	b7 02 00 00 01 00 00 00	r2 = 1
     749:	bf 63 00 00 00 00 00 00	r3 = r6
     750:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     751:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     752:	67 01 00 00 02 00 00 00	r1 <<= 2
     753:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001790 <LBB28_78>:
;     return l3_header + transport_size;
     754:	0f 16 00 00 00 00 00 00	r6 += r1
     755:	b7 01 00 00 00 00 00 00	r1 = 0
     756:	bf 63 00 00 00 00 00 00	r3 = r6
     757:	0f 13 00 00 00 00 00 00	r3 += r1
     758:	bf a1 00 00 00 00 00 00	r1 = r10
     759:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     760:	b7 02 00 00 02 00 00 00	r2 = 2
     761:	85 00 00 00 71 00 00 00	call 113
     762:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     763:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     764:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     765:	b7 01 00 00 02 00 00 00	r1 = 2
     766:	bf 63 00 00 00 00 00 00	r3 = r6
     767:	0f 13 00 00 00 00 00 00	r3 += r1
     768:	bf a1 00 00 00 00 00 00	r1 = r10
     769:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     770:	b7 02 00 00 02 00 00 00	r2 = 2
     771:	85 00 00 00 71 00 00 00	call 113
     772:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     773:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     774:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     775:	07 06 00 00 0c 00 00 00	r6 += 12
     776:	bf 71 00 00 00 00 00 00	r1 = r7
     777:	07 01 00 00 9c 00 00 00	r1 += 156
     778:	b7 02 00 00 02 00 00 00	r2 = 2
     779:	bf 63 00 00 00 00 00 00	r3 = r6
     780:	85 00 00 00 04 00 00 00	call 4
     781:	05 00 8a 00 00 00 00 00	goto +138 <LBB28_89>

0000000000001870 <LBB28_72>:
;     if (l4_proto == IPPROTO_TCP) {
     782:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB28_79>
     783:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB28_84>
     784:	05 00 68 fe 00 00 00 00	goto -408 <LBB28_92>

0000000000001888 <LBB28_84>:
     785:	b7 01 00 00 c0 00 00 00	r1 = 192
     786:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     787:	bf 63 00 00 00 00 00 00	r3 = r6
     788:	0f 13 00 00 00 00 00 00	r3 += r1
     789:	bf a1 00 00 00 00 00 00	r1 = r10
     790:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     791:	b7 02 00 00 08 00 00 00	r2 = 8
     792:	85 00 00 00 71 00 00 00	call 113
     793:	b7 01 00 00 b6 00 00 00	r1 = 182
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     796:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     797:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     798:	bf a1 00 00 00 00 00 00	r1 = r10
     799:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     800:	b7 02 00 00 02 00 00 00	r2 = 2
     801:	85 00 00 00 71 00 00 00	call 113
     802:	b7 01 00 00 b4 00 00 00	r1 = 180
     803:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     804:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     805:	bf a1 00 00 00 00 00 00	r1 = r10
     806:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     807:	b7 02 00 00 02 00 00 00	r2 = 2
     808:	bf 63 00 00 00 00 00 00	r3 = r6
     809:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     810:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     811:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     812:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB28_86>
     813:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001970 <LBB28_86>:
;     return head + network_header;
     814:	57 09 00 00 ff ff 00 00	r9 &= 65535
     815:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     816:	0f 96 00 00 00 00 00 00	r6 += r9
     817:	bf a1 00 00 00 00 00 00	r1 = r10
     818:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     819:	b7 02 00 00 01 00 00 00	r2 = 1
     820:	bf 63 00 00 00 00 00 00	r3 = r6
     821:	85 00 00 00 04 00 00 00	call 4
     822:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     823:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     824:	57 02 00 00 f0 00 00 00	r2 &= 240
     825:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB28_88>
     826:	bf a1 00 00 00 00 00 00	r1 = r10
     827:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     828:	b7 02 00 00 01 00 00 00	r2 = 1
     829:	bf 63 00 00 00 00 00 00	r3 = r6
     830:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     831:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     832:	67 01 00 00 02 00 00 00	r1 <<= 2
     833:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a10 <LBB28_88>:
;     return l3_header + transport_size;
     834:	0f 16 00 00 00 00 00 00	r6 += r1
     835:	bf a9 00 00 00 00 00 00	r9 = r10
     836:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     837:	bf 91 00 00 00 00 00 00	r1 = r9
     838:	b7 02 00 00 08 00 00 00	r2 = 8
     839:	bf 63 00 00 00 00 00 00	r3 = r6
     840:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     841:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     842:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     843:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     844:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     845:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     846:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     847:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     848:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     849:	05 00 46 00 00 00 00 00	goto +70 <LBB28_89>

0000000000001a90 <LBB28_79>:
     850:	b7 01 00 00 c0 00 00 00	r1 = 192
     851:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     852:	bf 63 00 00 00 00 00 00	r3 = r6
     853:	0f 13 00 00 00 00 00 00	r3 += r1
     854:	bf a1 00 00 00 00 00 00	r1 = r10
     855:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     856:	b7 02 00 00 08 00 00 00	r2 = 8
     857:	85 00 00 00 71 00 00 00	call 113
     858:	b7 01 00 00 b6 00 00 00	r1 = 182
     859:	bf 63 00 00 00 00 00 00	r3 = r6
     860:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     861:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     862:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     863:	bf a1 00 00 00 00 00 00	r1 = r10
     864:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     865:	b7 02 00 00 02 00 00 00	r2 = 2
     866:	85 00 00 00 71 00 00 00	call 113
     867:	b7 01 00 00 b4 00 00 00	r1 = 180
     868:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     869:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     870:	bf a1 00 00 00 00 00 00	r1 = r10
     871:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     872:	b7 02 00 00 02 00 00 00	r2 = 2
     873:	bf 63 00 00 00 00 00 00	r3 = r6
     874:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     875:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     876:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     877:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB28_81>
     878:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001b78 <LBB28_81>:
;     return head + network_header;
     879:	57 09 00 00 ff ff 00 00	r9 &= 65535
     880:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     881:	0f 96 00 00 00 00 00 00	r6 += r9
     882:	bf a1 00 00 00 00 00 00	r1 = r10
     883:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     884:	b7 02 00 00 01 00 00 00	r2 = 1
     885:	bf 63 00 00 00 00 00 00	r3 = r6
     886:	85 00 00 00 04 00 00 00	call 4
     887:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     888:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     889:	57 02 00 00 f0 00 00 00	r2 &= 240
     890:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB28_83>
     891:	bf a1 00 00 00 00 00 00	r1 = r10
     892:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     893:	b7 02 00 00 01 00 00 00	r2 = 1
     894:	bf 63 00 00 00 00 00 00	r3 = r6
     895:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     896:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     897:	67 01 00 00 02 00 00 00	r1 <<= 2
     898:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c18 <LBB28_83>:
;     return l3_header + transport_size;
     899:	0f 16 00 00 00 00 00 00	r6 += r1
     900:	b7 01 00 00 00 00 00 00	r1 = 0
     901:	bf 63 00 00 00 00 00 00	r3 = r6
     902:	0f 13 00 00 00 00 00 00	r3 += r1
     903:	bf a1 00 00 00 00 00 00	r1 = r10
     904:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     905:	b7 02 00 00 02 00 00 00	r2 = 2
     906:	85 00 00 00 71 00 00 00	call 113
     907:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     908:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     909:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     910:	b7 01 00 00 02 00 00 00	r1 = 2
     911:	0f 16 00 00 00 00 00 00	r6 += r1
     912:	bf a1 00 00 00 00 00 00	r1 = r10
     913:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     914:	b7 02 00 00 02 00 00 00	r2 = 2
     915:	bf 63 00 00 00 00 00 00	r3 = r6
     916:	85 00 00 00 71 00 00 00	call 113
     917:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     918:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     919:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001cc0 <LBB28_89>:
     920:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
;     return cfg->callstack == 0;
     921:	71 81 11 00 00 00 00 00	r1 = *(u8 *)(r8 + 17)
;     if (!filter_callstack(cfg))
     922:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB28_91>
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
     923:	bf 61 00 00 00 00 00 00	r1 = r6
     924:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     926:	b7 03 00 00 00 00 00 00	r3 = 0
     927:	85 00 00 00 1b 00 00 00	call 27
     928:	63 07 30 00 00 00 00 00	*(u32 *)(r7 + 48) = r0

0000000000001d08 <LBB28_91>:
     929:	b7 01 00 00 76 00 00 00	r1 = 118
;     for (j = 10; j < 64; j += 10) CPY(j);
     930:	73 17 0a 00 00 00 00 00	*(u8 *)(r7 + 10) = r1
     931:	b7 01 00 00 72 00 00 00	r1 = 114
     932:	73 17 08 00 00 00 00 00	*(u8 *)(r7 + 8) = r1
     933:	b7 01 00 00 5f 00 00 00	r1 = 95
     934:	73 17 07 00 00 00 00 00	*(u8 *)(r7 + 7) = r1
     935:	b7 01 00 00 65 00 00 00	r1 = 101
     936:	73 17 05 00 00 00 00 00	*(u8 *)(r7 + 5) = r1
     937:	b7 01 00 00 6b 00 00 00	r1 = 107
     938:	73 17 04 00 00 00 00 00	*(u8 *)(r7 + 4) = r1
     939:	b7 01 00 00 63 00 00 00	r1 = 99
     940:	73 17 09 00 00 00 00 00	*(u8 *)(r7 + 9) = r1
     941:	73 17 03 00 00 00 00 00	*(u8 *)(r7 + 3) = r1
     942:	b7 01 00 00 61 00 00 00	r1 = 97
     943:	73 17 02 00 00 00 00 00	*(u8 *)(r7 + 2) = r1
     944:	b7 01 00 00 70 00 00 00	r1 = 112
     945:	73 17 01 00 00 00 00 00	*(u8 *)(r7 + 1) = r1
     946:	b7 01 00 00 74 00 00 00	r1 = 116
     947:	73 17 06 00 00 00 00 00	*(u8 *)(r7 + 6) = r1
     948:	73 17 00 00 00 00 00 00	*(u8 *)(r7 + 0) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     949:	bf 61 00 00 00 00 00 00	r1 = r6
     950:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     952:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     954:	bf 74 00 00 00 00 00 00	r4 = r7
     955:	b7 05 00 00 e0 00 00 00	r5 = 224
     956:	85 00 00 00 19 00 00 00	call 25
     957:	05 00 bb fd 00 00 00 00	goto -581 <LBB28_92>

Disassembly of section kprobe/packet_rcv:

0000000000000000 <k_packet_rcv>:
; int k_packet_rcv(struct pt_regs *ctx) {
       0:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM1(ctx);
       1:	79 11 70 00 00 00 00 00	r1 = *(u64 *)(r1 + 112)
       2:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       3:	b7 06 00 00 00 00 00 00	r6 = 0
;     GET_CFG();
       4:	63 6a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r6
       5:	bf a2 00 00 00 00 00 00	r2 = r10
       6:	07 02 00 00 e4 ff ff ff	r2 += -28
;     GET_CFG();
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	85 00 00 00 01 00 00 00	call 1
      10:	bf 08 00 00 00 00 00 00	r8 = r0
      11:	15 08 6d 01 00 00 00 00	if r8 == 0 goto +365 <LBB29_92>
      12:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
      13:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      14:	63 18 08 00 00 00 00 00	*(u32 *)(r8 + 8) = r1
;     u32 ev_buff_id = 0;
      15:	63 6a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r6
      16:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      17:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      18:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      20:	85 00 00 00 01 00 00 00	call 1
      21:	bf 07 00 00 00 00 00 00	r7 = r0
;     if (!ev) return NULL;
      22:	55 07 01 00 00 00 00 00	if r7 != 0 goto +1 <LBB29_3>
      23:	05 00 61 01 00 00 00 00	goto +353 <LBB29_92>

00000000000000c0 <LBB29_3>:
      24:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      25:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      26:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      27:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      28:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      29:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      30:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      31:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      32:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      33:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      34:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      35:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      36:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      37:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      38:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      39:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      40:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      41:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      42:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      43:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      44:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      45:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      46:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      47:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      48:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      49:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      50:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      51:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      52:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      53:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      54:	61 81 04 00 00 00 00 00	r1 = *(u32 *)(r8 + 4)
      55:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB29_5>
      56:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      57:	5d 01 3f 01 00 00 00 00	if r1 != r0 goto +319 <LBB29_92>

00000000000001d0 <LBB29_5>:
      58:	b7 01 00 00 10 00 00 00	r1 = 16
      59:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
      60:	bf 93 00 00 00 00 00 00	r3 = r9
      61:	0f 13 00 00 00 00 00 00	r3 += r1
      62:	bf a6 00 00 00 00 00 00	r6 = r10
      63:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      64:	bf 61 00 00 00 00 00 00	r1 = r6
      65:	b7 02 00 00 08 00 00 00	r2 = 8
      66:	85 00 00 00 71 00 00 00	call 113
      67:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      68:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      69:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      70:	bf 61 00 00 00 00 00 00	r1 = r6
      71:	b7 02 00 00 08 00 00 00	r2 = 8
      72:	85 00 00 00 71 00 00 00	call 113
      73:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      74:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      75:	0f 13 00 00 00 00 00 00	r3 += r1
      76:	bf a1 00 00 00 00 00 00	r1 = r10
      77:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      78:	b7 02 00 00 04 00 00 00	r2 = 4
      79:	85 00 00 00 71 00 00 00	call 113
      80:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      81:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB29_8>
      82:	b7 01 00 00 18 00 00 00	r1 = 24
      83:	bf 93 00 00 00 00 00 00	r3 = r9
      84:	0f 13 00 00 00 00 00 00	r3 += r1
      85:	bf a1 00 00 00 00 00 00	r1 = r10
      86:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
      87:	b7 02 00 00 08 00 00 00	r2 = 8
      88:	85 00 00 00 71 00 00 00	call 113
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
      90:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB29_11>
      91:	b7 01 00 00 30 00 00 00	r1 = 48
      92:	0f 13 00 00 00 00 00 00	r3 += r1
      93:	bf a1 00 00 00 00 00 00	r1 = r10
      94:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      95:	b7 02 00 00 08 00 00 00	r2 = 8
      96:	85 00 00 00 71 00 00 00	call 113
      97:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      98:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     102:	b7 02 00 00 04 00 00 00	r2 = 4
     103:	85 00 00 00 71 00 00 00	call 113
     104:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000348 <LBB29_8>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     105:	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0)
     106:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB29_11>
     107:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB29_11>
     108:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB29_92>

0000000000000368 <LBB29_11>:
;     u16 icmpid = cfg->icmpid;
     109:	69 81 0e 00 00 00 00 00	r1 = *(u16 *)(r8 + 14)
;     u16 port = cfg->port;
     110:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     111:	69 81 0c 00 00 00 00 00	r1 = *(u16 *)(r8 + 12)
;     u8 proto = cfg->proto;
     112:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     113:	71 81 12 00 00 00 00 00	r1 = *(u8 *)(r8 + 18)
;     u32 addr = cfg->ip;
     114:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     115:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
     116:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     117:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     118:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     119:	b7 01 00 00 c0 00 00 00	r1 = 192
     120:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     121:	bf 93 00 00 00 00 00 00	r3 = r9
     122:	0f 13 00 00 00 00 00 00	r3 += r1
     123:	bf a1 00 00 00 00 00 00	r1 = r10
     124:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     125:	b7 02 00 00 08 00 00 00	r2 = 8
     126:	85 00 00 00 71 00 00 00	call 113
     127:	b7 01 00 00 b6 00 00 00	r1 = 182
     128:	bf 93 00 00 00 00 00 00	r3 = r9
     129:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     130:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     131:	bf a1 00 00 00 00 00 00	r1 = r10
     132:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     133:	b7 02 00 00 02 00 00 00	r2 = 2
     134:	85 00 00 00 71 00 00 00	call 113
     135:	b7 01 00 00 b4 00 00 00	r1 = 180
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     138:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     139:	bf a1 00 00 00 00 00 00	r1 = r10
     140:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     141:	b7 02 00 00 02 00 00 00	r2 = 2
     142:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     143:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     144:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     145:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB29_13>
     146:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000498 <LBB29_13>:
;     return head + network_header;
     147:	57 09 00 00 ff ff 00 00	r9 &= 65535
     148:	0f 96 00 00 00 00 00 00	r6 += r9
     149:	bf a1 00 00 00 00 00 00	r1 = r10
     150:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     151:	b7 02 00 00 01 00 00 00	r2 = 1
     152:	bf 63 00 00 00 00 00 00	r3 = r6
     153:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     154:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     155:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     156:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB29_20>
     157:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB29_92>
;         if (addr != 0) {
     158:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     159:	bf 19 00 00 00 00 00 00	r9 = r1
     160:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB29_18>
     161:	b7 01 00 00 0c 00 00 00	r1 = 12
     162:	bf 63 00 00 00 00 00 00	r3 = r6
     163:	0f 13 00 00 00 00 00 00	r3 += r1
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     166:	b7 02 00 00 04 00 00 00	r2 = 4
     167:	85 00 00 00 71 00 00 00	call 113
     168:	b7 01 00 00 10 00 00 00	r1 = 16
     169:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     170:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     171:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     172:	bf a1 00 00 00 00 00 00	r1 = r10
     173:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     174:	b7 02 00 00 04 00 00 00	r2 = 4
     175:	bf 63 00 00 00 00 00 00	r3 = r6
     176:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     177:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     178:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB29_54>
     179:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     180:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     181:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB29_92>
     182:	05 00 da 00 00 00 00 00	goto +218 <LBB29_54>

00000000000005b8 <LBB29_20>:
     183:	b7 01 00 00 06 00 00 00	r1 = 6
     184:	0f 16 00 00 00 00 00 00	r6 += r1
     185:	bf a1 00 00 00 00 00 00	r1 = r10
     186:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     187:	b7 02 00 00 01 00 00 00	r2 = 1
     188:	bf 63 00 00 00 00 00 00	r3 = r6
     189:	85 00 00 00 04 00 00 00	call 4
     190:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     191:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     192:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     193:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB29_22>
     194:	b7 04 00 00 80 00 00 00	r4 = 128
     195:	b7 03 00 00 81 00 00 00	r3 = 129
     196:	b7 01 00 00 3a 00 00 00	r1 = 58
     197:	05 00 0d 00 00 00 00 00	goto +13 <LBB29_22>

0000000000000630 <LBB29_18>:
     198:	b7 01 00 00 09 00 00 00	r1 = 9
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     208:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB29_22>
     209:	b7 04 00 00 08 00 00 00	r4 = 8
     210:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000698 <LBB29_22>:
;     if (proto != 0 && proto != l4_proto)
     211:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     212:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB29_24>
     213:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB29_92>

00000000000006b0 <LBB29_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     214:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB29_27>
     215:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB29_29>
     216:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB29_35>
     217:	05 00 9f 00 00 00 00 00	goto +159 <LBB29_92>

00000000000006d0 <LBB29_35>:
     218:	b7 01 00 00 c0 00 00 00	r1 = 192
     219:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     220:	bf 63 00 00 00 00 00 00	r3 = r6
     221:	0f 13 00 00 00 00 00 00	r3 += r1
     222:	bf a1 00 00 00 00 00 00	r1 = r10
     223:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     224:	b7 02 00 00 08 00 00 00	r2 = 8
     225:	85 00 00 00 71 00 00 00	call 113
     226:	b7 01 00 00 b6 00 00 00	r1 = 182
     227:	bf 63 00 00 00 00 00 00	r3 = r6
     228:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     229:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     230:	bf a1 00 00 00 00 00 00	r1 = r10
     231:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     232:	b7 02 00 00 02 00 00 00	r2 = 2
     233:	85 00 00 00 71 00 00 00	call 113
     234:	b7 01 00 00 b4 00 00 00	r1 = 180
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     237:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     238:	bf a1 00 00 00 00 00 00	r1 = r10
     239:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     240:	b7 02 00 00 02 00 00 00	r2 = 2
     241:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     242:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     243:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     244:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB29_37>
     245:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000007b0 <LBB29_37>:
;     return head + network_header;
     246:	57 06 00 00 ff ff 00 00	r6 &= 65535
     247:	0f 69 00 00 00 00 00 00	r9 += r6
     248:	bf a1 00 00 00 00 00 00	r1 = r10
     249:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     250:	b7 02 00 00 01 00 00 00	r2 = 1
     251:	bf 93 00 00 00 00 00 00	r3 = r9
     252:	85 00 00 00 04 00 00 00	call 4
     253:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     254:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     255:	57 02 00 00 f0 00 00 00	r2 &= 240
     256:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB29_39>
     257:	bf a1 00 00 00 00 00 00	r1 = r10
     258:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     259:	b7 02 00 00 01 00 00 00	r2 = 1
     260:	bf 93 00 00 00 00 00 00	r3 = r9
     261:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     262:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     263:	67 01 00 00 02 00 00 00	r1 <<= 2
     264:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000848 <LBB29_39>:
;     return l3_header + transport_size;
     265:	0f 19 00 00 00 00 00 00	r9 += r1
     266:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9

0000000000000858 <LBB29_40>:
     267:	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 72)
;     if (port != 0) {
     268:	bf 92 00 00 00 00 00 00	r2 = r9
     269:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB29_45>
;         if (l4_proto == IPPROTO_TCP) {
     270:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     271:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB29_52>
     272:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB29_45>
     273:	b7 01 00 00 00 00 00 00	r1 = 0
     274:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     275:	bf 63 00 00 00 00 00 00	r3 = r6
     276:	0f 13 00 00 00 00 00 00	r3 += r1
     277:	bf a1 00 00 00 00 00 00	r1 = r10
     278:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     279:	b7 02 00 00 02 00 00 00	r2 = 2
     280:	85 00 00 00 71 00 00 00	call 113
     281:	b7 01 00 00 02 00 00 00	r1 = 2
     282:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     283:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     284:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     285:	bf a1 00 00 00 00 00 00	r1 = r10
     286:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     287:	b7 02 00 00 02 00 00 00	r2 = 2
     288:	bf 63 00 00 00 00 00 00	r3 = r6
     289:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     290:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     291:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     292:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB29_54>
     293:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     294:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB29_92>
     295:	05 00 69 00 00 00 00 00	goto +105 <LBB29_54>

0000000000000940 <LBB29_27>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     296:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB29_35>
     297:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB29_92>

0000000000000950 <LBB29_29>:
     298:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r4
     299:	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r3
     300:	b7 01 00 00 c0 00 00 00	r1 = 192
     301:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     302:	bf 63 00 00 00 00 00 00	r3 = r6
     303:	0f 13 00 00 00 00 00 00	r3 += r1
     304:	bf a1 00 00 00 00 00 00	r1 = r10
     305:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     306:	b7 02 00 00 08 00 00 00	r2 = 8
     307:	85 00 00 00 71 00 00 00	call 113
     308:	b7 01 00 00 b6 00 00 00	r1 = 182
     309:	bf 63 00 00 00 00 00 00	r3 = r6
     310:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     311:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     312:	bf a1 00 00 00 00 00 00	r1 = r10
     313:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     314:	b7 02 00 00 02 00 00 00	r2 = 2
     315:	85 00 00 00 71 00 00 00	call 113
     316:	b7 01 00 00 b4 00 00 00	r1 = 180
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     319:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     320:	bf a1 00 00 00 00 00 00	r1 = r10
     321:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     322:	b7 02 00 00 02 00 00 00	r2 = 2
     323:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     324:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     325:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     326:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB29_31>
     327:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000a40 <LBB29_31>:
;     return head + network_header;
     328:	57 06 00 00 ff ff 00 00	r6 &= 65535
     329:	0f 69 00 00 00 00 00 00	r9 += r6
     330:	bf a1 00 00 00 00 00 00	r1 = r10
     331:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     332:	b7 02 00 00 01 00 00 00	r2 = 1
     333:	bf 93 00 00 00 00 00 00	r3 = r9
     334:	85 00 00 00 04 00 00 00	call 4
     335:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     336:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     337:	57 02 00 00 f0 00 00 00	r2 &= 240
     338:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB29_33>
     339:	bf a1 00 00 00 00 00 00	r1 = r10
     340:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     341:	b7 02 00 00 01 00 00 00	r2 = 1
     342:	bf 93 00 00 00 00 00 00	r3 = r9
     343:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     344:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     345:	67 01 00 00 02 00 00 00	r1 <<= 2
     346:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000ad8 <LBB29_33>:
;     return l3_header + transport_size;
     347:	0f 19 00 00 00 00 00 00	r9 += r1
     348:	bf a6 00 00 00 00 00 00	r6 = r10
     349:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     350:	bf 61 00 00 00 00 00 00	r1 = r6
     351:	b7 02 00 00 08 00 00 00	r2 = 8
     352:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
     353:	bf 93 00 00 00 00 00 00	r3 = r9
     354:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     355:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     356:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     357:	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 88)
     358:	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 96)
     359:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB29_40>
     360:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     361:	07 02 00 00 e8 ff ff ff	r2 += -24
     362:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     363:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB29_40>
     364:	05 00 0c 00 00 00 00 00	goto +12 <LBB29_92>

0000000000000b68 <LBB29_45>:
;     if (proto != 0 && proto != l4_proto)
     365:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     366:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB29_54>
     367:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
;     if (proto != 0 && icmpid != 0) {
     368:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB29_54>
     369:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     370:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB29_54>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     371:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     372:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB29_50>
     373:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB29_54>

0000000000000bb0 <LBB29_50>:
;         if (icmpid != ev_icmpid)
     374:	57 01 00 00 ff ff 00 00	r1 &= 65535
     375:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
     376:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB29_54>

0000000000000bc8 <LBB29_92>:
;     return do_trace(ctx, skb, "packet_rcv");
     377:	b7 00 00 00 00 00 00 00	r0 = 0
     378:	95 00 00 00 00 00 00 00	exit

0000000000000bd8 <LBB29_52>:
     379:	b7 01 00 00 00 00 00 00	r1 = 0
     380:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     381:	bf 63 00 00 00 00 00 00	r3 = r6
     382:	0f 13 00 00 00 00 00 00	r3 += r1
     383:	bf a1 00 00 00 00 00 00	r1 = r10
     384:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     385:	b7 02 00 00 02 00 00 00	r2 = 2
     386:	85 00 00 00 71 00 00 00	call 113
     387:	b7 01 00 00 02 00 00 00	r1 = 2
     388:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     389:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     390:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     391:	bf a1 00 00 00 00 00 00	r1 = r10
     392:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     393:	b7 02 00 00 02 00 00 00	r2 = 2
     394:	bf 63 00 00 00 00 00 00	r3 = r6
     395:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     396:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     397:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     398:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB29_54>
     399:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     400:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB29_92>

0000000000000c88 <LBB29_54>:
;     event->flags |= SKBTRACER_EVENT_IF;
     401:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     402:	47 01 00 00 01 00 00 00	r1 |= 1
     403:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     404:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
;     ev->skb = (u64)skb;
     405:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     406:	85 00 00 00 05 00 00 00	call 5
     407:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     408:	b7 01 00 00 10 00 00 00	r1 = 16
     409:	bf 96 00 00 00 00 00 00	r6 = r9
     410:	0f 16 00 00 00 00 00 00	r6 += r1
     411:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     412:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     413:	b7 02 00 00 08 00 00 00	r2 = 8
     414:	bf 63 00 00 00 00 00 00	r3 = r6
     415:	85 00 00 00 71 00 00 00	call 113
     416:	b7 01 00 00 70 00 00 00	r1 = 112
     417:	bf 93 00 00 00 00 00 00	r3 = r9
     418:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     419:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     420:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     421:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     422:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     423:	b7 02 00 00 04 00 00 00	r2 = 4
     424:	85 00 00 00 71 00 00 00	call 113
     425:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     426:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     427:	85 00 00 00 08 00 00 00	call 8
     428:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     429:	85 00 00 00 0e 00 00 00	call 14
     430:	57 00 00 00 ff ff 00 00	r0 &= 65535
     431:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     432:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     433:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     434:	bf 91 00 00 00 00 00 00	r1 = r9
     435:	b7 02 00 00 08 00 00 00	r2 = 8
     436:	bf 63 00 00 00 00 00 00	r3 = r6
     437:	85 00 00 00 71 00 00 00	call 113
     438:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     439:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     440:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     441:	bf 91 00 00 00 00 00 00	r1 = r9
     442:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     443:	b7 02 00 00 08 00 00 00	r2 = 8
     444:	85 00 00 00 71 00 00 00	call 113
     445:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     446:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     447:	0f 13 00 00 00 00 00 00	r3 += r1
     448:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     449:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     450:	b7 02 00 00 04 00 00 00	r2 = 4
     451:	85 00 00 00 71 00 00 00	call 113
     452:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     453:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB29_57>
     454:	b7 01 00 00 18 00 00 00	r1 = 24
     455:	bf 93 00 00 00 00 00 00	r3 = r9
     456:	0f 13 00 00 00 00 00 00	r3 += r1
     457:	bf a1 00 00 00 00 00 00	r1 = r10
     458:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     459:	b7 02 00 00 08 00 00 00	r2 = 8
     460:	85 00 00 00 71 00 00 00	call 113
     461:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     462:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     463:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB29_57>
     464:	b7 01 00 00 30 00 00 00	r1 = 48
     465:	0f 13 00 00 00 00 00 00	r3 += r1
     466:	bf a1 00 00 00 00 00 00	r1 = r10
     467:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     468:	b7 02 00 00 08 00 00 00	r2 = 8
     469:	85 00 00 00 71 00 00 00	call 113
     470:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     471:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     472:	0f 13 00 00 00 00 00 00	r3 += r1
     473:	bf a1 00 00 00 00 00 00	r1 = r10
     474:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     475:	b7 02 00 00 04 00 00 00	r2 = 4
     476:	85 00 00 00 71 00 00 00	call 113
     477:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000ef0 <LBB29_57>:
;     pkt_info->netns = get_netns(skb);
     478:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     479:	b7 01 00 00 80 00 00 00	r1 = 128
     480:	bf 93 00 00 00 00 00 00	r3 = r9
     481:	0f 13 00 00 00 00 00 00	r3 += r1
     482:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     483:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     484:	bf a1 00 00 00 00 00 00	r1 = r10
     485:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     486:	b7 02 00 00 01 00 00 00	r2 = 1
     487:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     488:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     489:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     490:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     491:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     492:	b7 01 00 00 00 00 00 00	r1 = 0
     493:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     494:	0f 13 00 00 00 00 00 00	r3 += r1
;     pkt_info->ifname[0] = 0;
     495:	bf 71 00 00 00 00 00 00	r1 = r7
     496:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     497:	b7 02 00 00 10 00 00 00	r2 = 16
     498:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     499:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     500:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB29_59>
     501:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     502:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     503:	b7 01 00 00 69 00 00 00	r1 = 105
     504:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     505:	b7 01 00 00 6e 00 00 00	r1 = 110
     506:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000000fd8 <LBB29_59>:
     507:	b7 01 00 00 c0 00 00 00	r1 = 192
     508:	bf 93 00 00 00 00 00 00	r3 = r9
     509:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     510:	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r3
     511:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     512:	07 01 00 00 f8 ff ff ff	r1 += -8
     513:	b7 02 00 00 08 00 00 00	r2 = 8
     514:	85 00 00 00 71 00 00 00	call 113
     515:	b7 01 00 00 b6 00 00 00	r1 = 182
     516:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     517:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     518:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     519:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     520:	b7 02 00 00 02 00 00 00	r2 = 2
     521:	bf 93 00 00 00 00 00 00	r3 = r9
     522:	85 00 00 00 71 00 00 00	call 113
     523:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     524:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     525:	bf 71 00 00 00 00 00 00	r1 = r7
     526:	07 01 00 00 64 00 00 00	r1 += 100
     527:	b7 02 00 00 06 00 00 00	r2 = 6
     528:	bf 63 00 00 00 00 00 00	r3 = r6
     529:	85 00 00 00 04 00 00 00	call 4
     530:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     531:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	b7 02 00 00 08 00 00 00	r2 = 8
     533:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     534:	85 00 00 00 71 00 00 00	call 113
     535:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     536:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     537:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     538:	b7 02 00 00 02 00 00 00	r2 = 2
     539:	bf 93 00 00 00 00 00 00	r3 = r9
     540:	85 00 00 00 71 00 00 00	call 113
     541:	b7 01 00 00 b4 00 00 00	r1 = 180
     542:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
     543:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     544:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     547:	b7 02 00 00 02 00 00 00	r2 = 2
     548:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     549:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     550:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     551:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB29_61>
     552:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001148 <LBB29_61>:
;     return head + network_header;
     553:	57 09 00 00 ff ff 00 00	r9 &= 65535
     554:	0f 96 00 00 00 00 00 00	r6 += r9
     555:	bf a1 00 00 00 00 00 00	r1 = r10
     556:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     557:	b7 02 00 00 01 00 00 00	r2 = 1
     558:	bf 63 00 00 00 00 00 00	r3 = r6
     559:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     560:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     561:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     562:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB29_66>
     563:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB29_92>
     564:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     565:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     566:	b7 01 00 00 c0 00 00 00	r1 = 192
     567:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     568:	bf 93 00 00 00 00 00 00	r3 = r9
     569:	0f 13 00 00 00 00 00 00	r3 += r1
     570:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     572:	b7 02 00 00 08 00 00 00	r2 = 8
     573:	85 00 00 00 71 00 00 00	call 113
     574:	b7 01 00 00 b6 00 00 00	r1 = 182
     575:	bf 93 00 00 00 00 00 00	r3 = r9
     576:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     577:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     578:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     579:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     580:	b7 02 00 00 02 00 00 00	r2 = 2
     581:	85 00 00 00 71 00 00 00	call 113
     582:	b7 01 00 00 b4 00 00 00	r1 = 180
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     585:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     586:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     587:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     588:	b7 02 00 00 02 00 00 00	r2 = 2
     589:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     590:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     591:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     592:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB29_65>
     593:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001290 <LBB29_65>:
;     return head + network_header;
     594:	57 09 00 00 ff ff 00 00	r9 &= 65535
     595:	0f 96 00 00 00 00 00 00	r6 += r9
     596:	b7 01 00 00 0c 00 00 00	r1 = 12
     597:	bf 63 00 00 00 00 00 00	r3 = r6
     598:	0f 13 00 00 00 00 00 00	r3 += r1
     599:	bf a1 00 00 00 00 00 00	r1 = r10
     600:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     601:	b7 02 00 00 04 00 00 00	r2 = 4
     602:	85 00 00 00 71 00 00 00	call 113
     603:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     604:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     605:	b7 01 00 00 10 00 00 00	r1 = 16
     606:	bf 63 00 00 00 00 00 00	r3 = r6
     607:	0f 13 00 00 00 00 00 00	r3 += r1
     608:	bf a1 00 00 00 00 00 00	r1 = r10
     609:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     610:	b7 02 00 00 04 00 00 00	r2 = 4
     611:	85 00 00 00 71 00 00 00	call 113
     612:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     613:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     614:	b7 01 00 00 02 00 00 00	r1 = 2
     615:	bf 63 00 00 00 00 00 00	r3 = r6
     616:	0f 13 00 00 00 00 00 00	r3 += r1
     617:	bf a1 00 00 00 00 00 00	r1 = r10
     618:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     619:	b7 02 00 00 02 00 00 00	r2 = 2
     620:	85 00 00 00 71 00 00 00	call 113
     621:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     622:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     623:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     624:	b7 01 00 00 09 00 00 00	r1 = 9
     625:	05 00 38 00 00 00 00 00	goto +56 <LBB29_69>

0000000000001390 <LBB29_66>:
     626:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     627:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     628:	b7 01 00 00 c0 00 00 00	r1 = 192
     629:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     630:	bf 93 00 00 00 00 00 00	r3 = r9
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     634:	b7 02 00 00 08 00 00 00	r2 = 8
     635:	85 00 00 00 71 00 00 00	call 113
     636:	b7 01 00 00 b6 00 00 00	r1 = 182
     637:	bf 93 00 00 00 00 00 00	r3 = r9
     638:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     639:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     640:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     641:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     642:	b7 02 00 00 02 00 00 00	r2 = 2
     643:	85 00 00 00 71 00 00 00	call 113
     644:	b7 01 00 00 b4 00 00 00	r1 = 180
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     647:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     648:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     649:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     650:	b7 02 00 00 02 00 00 00	r2 = 2
     651:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     652:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     653:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     654:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB29_68>
     655:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001480 <LBB29_68>:
;     return head + network_header;
     656:	57 09 00 00 ff ff 00 00	r9 &= 65535
     657:	0f 96 00 00 00 00 00 00	r6 += r9
     658:	b7 01 00 00 08 00 00 00	r1 = 8
     659:	bf 63 00 00 00 00 00 00	r3 = r6
     660:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
     661:	bf 71 00 00 00 00 00 00	r1 = r7
     662:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     663:	b7 02 00 00 10 00 00 00	r2 = 16
     664:	85 00 00 00 04 00 00 00	call 4
     665:	b7 01 00 00 18 00 00 00	r1 = 24
     666:	bf 63 00 00 00 00 00 00	r3 = r6
     667:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     668:	bf 71 00 00 00 00 00 00	r1 = r7
     669:	07 01 00 00 80 00 00 00	r1 += 128
     670:	b7 02 00 00 10 00 00 00	r2 = 16
     671:	85 00 00 00 04 00 00 00	call 4
     672:	b7 01 00 00 04 00 00 00	r1 = 4
     673:	bf 63 00 00 00 00 00 00	r3 = r6
     674:	0f 13 00 00 00 00 00 00	r3 += r1
     675:	bf a1 00 00 00 00 00 00	r1 = r10
     676:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     677:	b7 02 00 00 02 00 00 00	r2 = 2
     678:	85 00 00 00 71 00 00 00	call 113
     679:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     680:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     681:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000001550 <LBB29_69>:
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
     684:	bf a1 00 00 00 00 00 00	r1 = r10
     685:	07 01 00 00 f8 ff ff ff	r1 += -8
     686:	b7 02 00 00 01 00 00 00	r2 = 1
     687:	85 00 00 00 71 00 00 00	call 113
     688:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     689:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     690:	bf a1 00 00 00 00 00 00	r1 = r10
     691:	07 01 00 00 f8 ff ff ff	r1 += -8
     692:	b7 02 00 00 01 00 00 00	r2 = 1
     693:	bf 63 00 00 00 00 00 00	r3 = r6
     694:	85 00 00 00 04 00 00 00	call 4
     695:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     696:	57 01 00 00 f0 00 00 00	r1 &= 240
     697:	77 01 00 00 04 00 00 00	r1 >>= 4
     698:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     699:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     700:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB29_72>
     701:	15 01 53 00 01 00 00 00	if r1 == 1 goto +83 <LBB29_84>
     702:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB29_74>
     703:	05 00 b9 fe 00 00 00 00	goto -327 <LBB29_92>

0000000000001600 <LBB29_74>:
     704:	b7 01 00 00 c0 00 00 00	r1 = 192
     705:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     706:	bf 93 00 00 00 00 00 00	r3 = r9
     707:	0f 13 00 00 00 00 00 00	r3 += r1
     708:	bf a1 00 00 00 00 00 00	r1 = r10
     709:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     710:	b7 02 00 00 08 00 00 00	r2 = 8
     711:	85 00 00 00 71 00 00 00	call 113
     712:	b7 01 00 00 b6 00 00 00	r1 = 182
     713:	bf 93 00 00 00 00 00 00	r3 = r9
     714:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     715:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     716:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     717:	bf a1 00 00 00 00 00 00	r1 = r10
     718:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     719:	b7 02 00 00 02 00 00 00	r2 = 2
     720:	85 00 00 00 71 00 00 00	call 113
     721:	b7 01 00 00 b4 00 00 00	r1 = 180
     722:	0f 19 00 00 00 00 00 00	r9 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     723:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     726:	b7 02 00 00 02 00 00 00	r2 = 2
     727:	bf 93 00 00 00 00 00 00	r3 = r9
     728:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     729:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     730:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     731:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB29_76>
     732:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000016e8 <LBB29_76>:
;     return head + network_header;
     733:	57 06 00 00 ff ff 00 00	r6 &= 65535
     734:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
     735:	0f 61 00 00 00 00 00 00	r1 += r6
     736:	bf 16 00 00 00 00 00 00	r6 = r1
     737:	bf a1 00 00 00 00 00 00	r1 = r10
     738:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     739:	b7 02 00 00 01 00 00 00	r2 = 1
     740:	bf 63 00 00 00 00 00 00	r3 = r6
     741:	85 00 00 00 04 00 00 00	call 4
     742:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     743:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     744:	57 02 00 00 f0 00 00 00	r2 &= 240
     745:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB29_78>
     746:	bf a1 00 00 00 00 00 00	r1 = r10
     747:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     748:	b7 02 00 00 01 00 00 00	r2 = 1
     749:	bf 63 00 00 00 00 00 00	r3 = r6
     750:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     751:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     752:	67 01 00 00 02 00 00 00	r1 <<= 2
     753:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001790 <LBB29_78>:
;     return l3_header + transport_size;
     754:	0f 16 00 00 00 00 00 00	r6 += r1
     755:	b7 01 00 00 00 00 00 00	r1 = 0
     756:	bf 63 00 00 00 00 00 00	r3 = r6
     757:	0f 13 00 00 00 00 00 00	r3 += r1
     758:	bf a1 00 00 00 00 00 00	r1 = r10
     759:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     760:	b7 02 00 00 02 00 00 00	r2 = 2
     761:	85 00 00 00 71 00 00 00	call 113
     762:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     763:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     764:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     765:	b7 01 00 00 02 00 00 00	r1 = 2
     766:	bf 63 00 00 00 00 00 00	r3 = r6
     767:	0f 13 00 00 00 00 00 00	r3 += r1
     768:	bf a1 00 00 00 00 00 00	r1 = r10
     769:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     770:	b7 02 00 00 02 00 00 00	r2 = 2
     771:	85 00 00 00 71 00 00 00	call 113
     772:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     773:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     774:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     775:	07 06 00 00 0c 00 00 00	r6 += 12
     776:	bf 71 00 00 00 00 00 00	r1 = r7
     777:	07 01 00 00 9c 00 00 00	r1 += 156
     778:	b7 02 00 00 02 00 00 00	r2 = 2
     779:	bf 63 00 00 00 00 00 00	r3 = r6
     780:	85 00 00 00 04 00 00 00	call 4
     781:	05 00 8a 00 00 00 00 00	goto +138 <LBB29_89>

0000000000001870 <LBB29_72>:
;     if (l4_proto == IPPROTO_TCP) {
     782:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB29_79>
     783:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB29_84>
     784:	05 00 68 fe 00 00 00 00	goto -408 <LBB29_92>

0000000000001888 <LBB29_84>:
     785:	b7 01 00 00 c0 00 00 00	r1 = 192
     786:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     787:	bf 63 00 00 00 00 00 00	r3 = r6
     788:	0f 13 00 00 00 00 00 00	r3 += r1
     789:	bf a1 00 00 00 00 00 00	r1 = r10
     790:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     791:	b7 02 00 00 08 00 00 00	r2 = 8
     792:	85 00 00 00 71 00 00 00	call 113
     793:	b7 01 00 00 b6 00 00 00	r1 = 182
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     796:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     797:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     798:	bf a1 00 00 00 00 00 00	r1 = r10
     799:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     800:	b7 02 00 00 02 00 00 00	r2 = 2
     801:	85 00 00 00 71 00 00 00	call 113
     802:	b7 01 00 00 b4 00 00 00	r1 = 180
     803:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     804:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     805:	bf a1 00 00 00 00 00 00	r1 = r10
     806:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     807:	b7 02 00 00 02 00 00 00	r2 = 2
     808:	bf 63 00 00 00 00 00 00	r3 = r6
     809:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     810:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     811:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     812:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB29_86>
     813:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001970 <LBB29_86>:
;     return head + network_header;
     814:	57 09 00 00 ff ff 00 00	r9 &= 65535
     815:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     816:	0f 96 00 00 00 00 00 00	r6 += r9
     817:	bf a1 00 00 00 00 00 00	r1 = r10
     818:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     819:	b7 02 00 00 01 00 00 00	r2 = 1
     820:	bf 63 00 00 00 00 00 00	r3 = r6
     821:	85 00 00 00 04 00 00 00	call 4
     822:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     823:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     824:	57 02 00 00 f0 00 00 00	r2 &= 240
     825:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB29_88>
     826:	bf a1 00 00 00 00 00 00	r1 = r10
     827:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     828:	b7 02 00 00 01 00 00 00	r2 = 1
     829:	bf 63 00 00 00 00 00 00	r3 = r6
     830:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     831:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     832:	67 01 00 00 02 00 00 00	r1 <<= 2
     833:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a10 <LBB29_88>:
;     return l3_header + transport_size;
     834:	0f 16 00 00 00 00 00 00	r6 += r1
     835:	bf a9 00 00 00 00 00 00	r9 = r10
     836:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     837:	bf 91 00 00 00 00 00 00	r1 = r9
     838:	b7 02 00 00 08 00 00 00	r2 = 8
     839:	bf 63 00 00 00 00 00 00	r3 = r6
     840:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     841:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     842:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     843:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     844:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     845:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     846:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     847:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     848:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     849:	05 00 46 00 00 00 00 00	goto +70 <LBB29_89>

0000000000001a90 <LBB29_79>:
     850:	b7 01 00 00 c0 00 00 00	r1 = 192
     851:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     852:	bf 63 00 00 00 00 00 00	r3 = r6
     853:	0f 13 00 00 00 00 00 00	r3 += r1
     854:	bf a1 00 00 00 00 00 00	r1 = r10
     855:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     856:	b7 02 00 00 08 00 00 00	r2 = 8
     857:	85 00 00 00 71 00 00 00	call 113
     858:	b7 01 00 00 b6 00 00 00	r1 = 182
     859:	bf 63 00 00 00 00 00 00	r3 = r6
     860:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     861:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     862:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     863:	bf a1 00 00 00 00 00 00	r1 = r10
     864:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     865:	b7 02 00 00 02 00 00 00	r2 = 2
     866:	85 00 00 00 71 00 00 00	call 113
     867:	b7 01 00 00 b4 00 00 00	r1 = 180
     868:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     869:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     870:	bf a1 00 00 00 00 00 00	r1 = r10
     871:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     872:	b7 02 00 00 02 00 00 00	r2 = 2
     873:	bf 63 00 00 00 00 00 00	r3 = r6
     874:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     875:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     876:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     877:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB29_81>
     878:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001b78 <LBB29_81>:
;     return head + network_header;
     879:	57 09 00 00 ff ff 00 00	r9 &= 65535
     880:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     881:	0f 96 00 00 00 00 00 00	r6 += r9
     882:	bf a1 00 00 00 00 00 00	r1 = r10
     883:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     884:	b7 02 00 00 01 00 00 00	r2 = 1
     885:	bf 63 00 00 00 00 00 00	r3 = r6
     886:	85 00 00 00 04 00 00 00	call 4
     887:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     888:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     889:	57 02 00 00 f0 00 00 00	r2 &= 240
     890:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB29_83>
     891:	bf a1 00 00 00 00 00 00	r1 = r10
     892:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     893:	b7 02 00 00 01 00 00 00	r2 = 1
     894:	bf 63 00 00 00 00 00 00	r3 = r6
     895:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     896:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     897:	67 01 00 00 02 00 00 00	r1 <<= 2
     898:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c18 <LBB29_83>:
;     return l3_header + transport_size;
     899:	0f 16 00 00 00 00 00 00	r6 += r1
     900:	b7 01 00 00 00 00 00 00	r1 = 0
     901:	bf 63 00 00 00 00 00 00	r3 = r6
     902:	0f 13 00 00 00 00 00 00	r3 += r1
     903:	bf a1 00 00 00 00 00 00	r1 = r10
     904:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     905:	b7 02 00 00 02 00 00 00	r2 = 2
     906:	85 00 00 00 71 00 00 00	call 113
     907:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     908:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     909:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     910:	b7 01 00 00 02 00 00 00	r1 = 2
     911:	0f 16 00 00 00 00 00 00	r6 += r1
     912:	bf a1 00 00 00 00 00 00	r1 = r10
     913:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     914:	b7 02 00 00 02 00 00 00	r2 = 2
     915:	bf 63 00 00 00 00 00 00	r3 = r6
     916:	85 00 00 00 71 00 00 00	call 113
     917:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     918:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     919:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001cc0 <LBB29_89>:
     920:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
;     return cfg->callstack == 0;
     921:	71 81 11 00 00 00 00 00	r1 = *(u8 *)(r8 + 17)
;     if (!filter_callstack(cfg))
     922:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB29_91>
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
     923:	bf 61 00 00 00 00 00 00	r1 = r6
     924:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     926:	b7 03 00 00 00 00 00 00	r3 = 0
     927:	85 00 00 00 1b 00 00 00	call 27
     928:	63 07 30 00 00 00 00 00	*(u32 *)(r7 + 48) = r0

0000000000001d08 <LBB29_91>:
     929:	b7 01 00 00 76 00 00 00	r1 = 118
;     for (j = 10; j < 64; j += 10) CPY(j);
     930:	73 17 09 00 00 00 00 00	*(u8 *)(r7 + 9) = r1
     931:	b7 01 00 00 72 00 00 00	r1 = 114
     932:	73 17 07 00 00 00 00 00	*(u8 *)(r7 + 7) = r1
     933:	b7 01 00 00 5f 00 00 00	r1 = 95
     934:	73 17 06 00 00 00 00 00	*(u8 *)(r7 + 6) = r1
     935:	b7 01 00 00 74 00 00 00	r1 = 116
     936:	73 17 05 00 00 00 00 00	*(u8 *)(r7 + 5) = r1
     937:	b7 01 00 00 65 00 00 00	r1 = 101
     938:	73 17 04 00 00 00 00 00	*(u8 *)(r7 + 4) = r1
     939:	b7 01 00 00 6b 00 00 00	r1 = 107
     940:	73 17 03 00 00 00 00 00	*(u8 *)(r7 + 3) = r1
     941:	b7 01 00 00 63 00 00 00	r1 = 99
     942:	73 17 08 00 00 00 00 00	*(u8 *)(r7 + 8) = r1
     943:	73 17 02 00 00 00 00 00	*(u8 *)(r7 + 2) = r1
     944:	b7 01 00 00 61 00 00 00	r1 = 97
     945:	73 17 01 00 00 00 00 00	*(u8 *)(r7 + 1) = r1
     946:	b7 01 00 00 70 00 00 00	r1 = 112
     947:	73 17 00 00 00 00 00 00	*(u8 *)(r7 + 0) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     948:	bf 61 00 00 00 00 00 00	r1 = r6
     949:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     951:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     953:	bf 74 00 00 00 00 00 00	r4 = r7
     954:	b7 05 00 00 e0 00 00 00	r5 = 224
     955:	85 00 00 00 19 00 00 00	call 25
     956:	05 00 bc fd 00 00 00 00	goto -580 <LBB29_92>

Disassembly of section kprobe/napi_gro_receive:

0000000000000000 <k_napi_gro_rcv>:
; int k_napi_gro_rcv(struct pt_regs *ctx) {
       0:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM2(ctx);
       1:	79 11 68 00 00 00 00 00	r1 = *(u64 *)(r1 + 104)
       2:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       3:	b7 06 00 00 00 00 00 00	r6 = 0
;     GET_CFG();
       4:	63 6a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r6
       5:	bf a2 00 00 00 00 00 00	r2 = r10
       6:	07 02 00 00 e4 ff ff ff	r2 += -28
;     GET_CFG();
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	85 00 00 00 01 00 00 00	call 1
      10:	bf 08 00 00 00 00 00 00	r8 = r0
      11:	15 08 6d 01 00 00 00 00	if r8 == 0 goto +365 <LBB30_92>
      12:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
      13:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      14:	63 18 08 00 00 00 00 00	*(u32 *)(r8 + 8) = r1
;     u32 ev_buff_id = 0;
      15:	63 6a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r6
      16:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      17:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      18:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      20:	85 00 00 00 01 00 00 00	call 1
      21:	bf 07 00 00 00 00 00 00	r7 = r0
;     if (!ev) return NULL;
      22:	55 07 01 00 00 00 00 00	if r7 != 0 goto +1 <LBB30_3>
      23:	05 00 61 01 00 00 00 00	goto +353 <LBB30_92>

00000000000000c0 <LBB30_3>:
      24:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      25:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      26:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      27:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      28:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      29:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      30:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      31:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      32:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      33:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      34:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      35:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      36:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      37:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      38:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      39:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      40:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      41:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      42:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      43:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      44:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      45:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      46:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      47:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      48:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      49:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      50:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      51:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      52:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      53:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      54:	61 81 04 00 00 00 00 00	r1 = *(u32 *)(r8 + 4)
      55:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB30_5>
      56:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      57:	5d 01 3f 01 00 00 00 00	if r1 != r0 goto +319 <LBB30_92>

00000000000001d0 <LBB30_5>:
      58:	b7 01 00 00 10 00 00 00	r1 = 16
      59:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
      60:	bf 93 00 00 00 00 00 00	r3 = r9
      61:	0f 13 00 00 00 00 00 00	r3 += r1
      62:	bf a6 00 00 00 00 00 00	r6 = r10
      63:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      64:	bf 61 00 00 00 00 00 00	r1 = r6
      65:	b7 02 00 00 08 00 00 00	r2 = 8
      66:	85 00 00 00 71 00 00 00	call 113
      67:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      68:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      69:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      70:	bf 61 00 00 00 00 00 00	r1 = r6
      71:	b7 02 00 00 08 00 00 00	r2 = 8
      72:	85 00 00 00 71 00 00 00	call 113
      73:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      74:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      75:	0f 13 00 00 00 00 00 00	r3 += r1
      76:	bf a1 00 00 00 00 00 00	r1 = r10
      77:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      78:	b7 02 00 00 04 00 00 00	r2 = 4
      79:	85 00 00 00 71 00 00 00	call 113
      80:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      81:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB30_8>
      82:	b7 01 00 00 18 00 00 00	r1 = 24
      83:	bf 93 00 00 00 00 00 00	r3 = r9
      84:	0f 13 00 00 00 00 00 00	r3 += r1
      85:	bf a1 00 00 00 00 00 00	r1 = r10
      86:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
      87:	b7 02 00 00 08 00 00 00	r2 = 8
      88:	85 00 00 00 71 00 00 00	call 113
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
      90:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB30_11>
      91:	b7 01 00 00 30 00 00 00	r1 = 48
      92:	0f 13 00 00 00 00 00 00	r3 += r1
      93:	bf a1 00 00 00 00 00 00	r1 = r10
      94:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      95:	b7 02 00 00 08 00 00 00	r2 = 8
      96:	85 00 00 00 71 00 00 00	call 113
      97:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      98:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     102:	b7 02 00 00 04 00 00 00	r2 = 4
     103:	85 00 00 00 71 00 00 00	call 113
     104:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000348 <LBB30_8>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     105:	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0)
     106:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB30_11>
     107:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB30_11>
     108:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB30_92>

0000000000000368 <LBB30_11>:
;     u16 icmpid = cfg->icmpid;
     109:	69 81 0e 00 00 00 00 00	r1 = *(u16 *)(r8 + 14)
;     u16 port = cfg->port;
     110:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     111:	69 81 0c 00 00 00 00 00	r1 = *(u16 *)(r8 + 12)
;     u8 proto = cfg->proto;
     112:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     113:	71 81 12 00 00 00 00 00	r1 = *(u8 *)(r8 + 18)
;     u32 addr = cfg->ip;
     114:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     115:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
     116:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     117:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     118:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     119:	b7 01 00 00 c0 00 00 00	r1 = 192
     120:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     121:	bf 93 00 00 00 00 00 00	r3 = r9
     122:	0f 13 00 00 00 00 00 00	r3 += r1
     123:	bf a1 00 00 00 00 00 00	r1 = r10
     124:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     125:	b7 02 00 00 08 00 00 00	r2 = 8
     126:	85 00 00 00 71 00 00 00	call 113
     127:	b7 01 00 00 b6 00 00 00	r1 = 182
     128:	bf 93 00 00 00 00 00 00	r3 = r9
     129:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     130:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     131:	bf a1 00 00 00 00 00 00	r1 = r10
     132:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     133:	b7 02 00 00 02 00 00 00	r2 = 2
     134:	85 00 00 00 71 00 00 00	call 113
     135:	b7 01 00 00 b4 00 00 00	r1 = 180
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     138:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     139:	bf a1 00 00 00 00 00 00	r1 = r10
     140:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     141:	b7 02 00 00 02 00 00 00	r2 = 2
     142:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     143:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     144:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     145:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB30_13>
     146:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000498 <LBB30_13>:
;     return head + network_header;
     147:	57 09 00 00 ff ff 00 00	r9 &= 65535
     148:	0f 96 00 00 00 00 00 00	r6 += r9
     149:	bf a1 00 00 00 00 00 00	r1 = r10
     150:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     151:	b7 02 00 00 01 00 00 00	r2 = 1
     152:	bf 63 00 00 00 00 00 00	r3 = r6
     153:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     154:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     155:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     156:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB30_20>
     157:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB30_92>
;         if (addr != 0) {
     158:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     159:	bf 19 00 00 00 00 00 00	r9 = r1
     160:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB30_18>
     161:	b7 01 00 00 0c 00 00 00	r1 = 12
     162:	bf 63 00 00 00 00 00 00	r3 = r6
     163:	0f 13 00 00 00 00 00 00	r3 += r1
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     166:	b7 02 00 00 04 00 00 00	r2 = 4
     167:	85 00 00 00 71 00 00 00	call 113
     168:	b7 01 00 00 10 00 00 00	r1 = 16
     169:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     170:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     171:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     172:	bf a1 00 00 00 00 00 00	r1 = r10
     173:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     174:	b7 02 00 00 04 00 00 00	r2 = 4
     175:	bf 63 00 00 00 00 00 00	r3 = r6
     176:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     177:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     178:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB30_54>
     179:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     180:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     181:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB30_92>
     182:	05 00 da 00 00 00 00 00	goto +218 <LBB30_54>

00000000000005b8 <LBB30_20>:
     183:	b7 01 00 00 06 00 00 00	r1 = 6
     184:	0f 16 00 00 00 00 00 00	r6 += r1
     185:	bf a1 00 00 00 00 00 00	r1 = r10
     186:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     187:	b7 02 00 00 01 00 00 00	r2 = 1
     188:	bf 63 00 00 00 00 00 00	r3 = r6
     189:	85 00 00 00 04 00 00 00	call 4
     190:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     191:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     192:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     193:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB30_22>
     194:	b7 04 00 00 80 00 00 00	r4 = 128
     195:	b7 03 00 00 81 00 00 00	r3 = 129
     196:	b7 01 00 00 3a 00 00 00	r1 = 58
     197:	05 00 0d 00 00 00 00 00	goto +13 <LBB30_22>

0000000000000630 <LBB30_18>:
     198:	b7 01 00 00 09 00 00 00	r1 = 9
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     208:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB30_22>
     209:	b7 04 00 00 08 00 00 00	r4 = 8
     210:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000698 <LBB30_22>:
;     if (proto != 0 && proto != l4_proto)
     211:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     212:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB30_24>
     213:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB30_92>

00000000000006b0 <LBB30_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     214:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB30_27>
     215:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB30_29>
     216:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB30_35>
     217:	05 00 9f 00 00 00 00 00	goto +159 <LBB30_92>

00000000000006d0 <LBB30_35>:
     218:	b7 01 00 00 c0 00 00 00	r1 = 192
     219:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     220:	bf 63 00 00 00 00 00 00	r3 = r6
     221:	0f 13 00 00 00 00 00 00	r3 += r1
     222:	bf a1 00 00 00 00 00 00	r1 = r10
     223:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     224:	b7 02 00 00 08 00 00 00	r2 = 8
     225:	85 00 00 00 71 00 00 00	call 113
     226:	b7 01 00 00 b6 00 00 00	r1 = 182
     227:	bf 63 00 00 00 00 00 00	r3 = r6
     228:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     229:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     230:	bf a1 00 00 00 00 00 00	r1 = r10
     231:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     232:	b7 02 00 00 02 00 00 00	r2 = 2
     233:	85 00 00 00 71 00 00 00	call 113
     234:	b7 01 00 00 b4 00 00 00	r1 = 180
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     237:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     238:	bf a1 00 00 00 00 00 00	r1 = r10
     239:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     240:	b7 02 00 00 02 00 00 00	r2 = 2
     241:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     242:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     243:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     244:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB30_37>
     245:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000007b0 <LBB30_37>:
;     return head + network_header;
     246:	57 06 00 00 ff ff 00 00	r6 &= 65535
     247:	0f 69 00 00 00 00 00 00	r9 += r6
     248:	bf a1 00 00 00 00 00 00	r1 = r10
     249:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     250:	b7 02 00 00 01 00 00 00	r2 = 1
     251:	bf 93 00 00 00 00 00 00	r3 = r9
     252:	85 00 00 00 04 00 00 00	call 4
     253:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     254:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     255:	57 02 00 00 f0 00 00 00	r2 &= 240
     256:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB30_39>
     257:	bf a1 00 00 00 00 00 00	r1 = r10
     258:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     259:	b7 02 00 00 01 00 00 00	r2 = 1
     260:	bf 93 00 00 00 00 00 00	r3 = r9
     261:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     262:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     263:	67 01 00 00 02 00 00 00	r1 <<= 2
     264:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000848 <LBB30_39>:
;     return l3_header + transport_size;
     265:	0f 19 00 00 00 00 00 00	r9 += r1
     266:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9

0000000000000858 <LBB30_40>:
     267:	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 72)
;     if (port != 0) {
     268:	bf 92 00 00 00 00 00 00	r2 = r9
     269:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB30_45>
;         if (l4_proto == IPPROTO_TCP) {
     270:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     271:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB30_52>
     272:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB30_45>
     273:	b7 01 00 00 00 00 00 00	r1 = 0
     274:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     275:	bf 63 00 00 00 00 00 00	r3 = r6
     276:	0f 13 00 00 00 00 00 00	r3 += r1
     277:	bf a1 00 00 00 00 00 00	r1 = r10
     278:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     279:	b7 02 00 00 02 00 00 00	r2 = 2
     280:	85 00 00 00 71 00 00 00	call 113
     281:	b7 01 00 00 02 00 00 00	r1 = 2
     282:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     283:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     284:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     285:	bf a1 00 00 00 00 00 00	r1 = r10
     286:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     287:	b7 02 00 00 02 00 00 00	r2 = 2
     288:	bf 63 00 00 00 00 00 00	r3 = r6
     289:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     290:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     291:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     292:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB30_54>
     293:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     294:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB30_92>
     295:	05 00 69 00 00 00 00 00	goto +105 <LBB30_54>

0000000000000940 <LBB30_27>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     296:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB30_35>
     297:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB30_92>

0000000000000950 <LBB30_29>:
     298:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r4
     299:	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r3
     300:	b7 01 00 00 c0 00 00 00	r1 = 192
     301:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     302:	bf 63 00 00 00 00 00 00	r3 = r6
     303:	0f 13 00 00 00 00 00 00	r3 += r1
     304:	bf a1 00 00 00 00 00 00	r1 = r10
     305:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     306:	b7 02 00 00 08 00 00 00	r2 = 8
     307:	85 00 00 00 71 00 00 00	call 113
     308:	b7 01 00 00 b6 00 00 00	r1 = 182
     309:	bf 63 00 00 00 00 00 00	r3 = r6
     310:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     311:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     312:	bf a1 00 00 00 00 00 00	r1 = r10
     313:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     314:	b7 02 00 00 02 00 00 00	r2 = 2
     315:	85 00 00 00 71 00 00 00	call 113
     316:	b7 01 00 00 b4 00 00 00	r1 = 180
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     319:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     320:	bf a1 00 00 00 00 00 00	r1 = r10
     321:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     322:	b7 02 00 00 02 00 00 00	r2 = 2
     323:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     324:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     325:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     326:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB30_31>
     327:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000a40 <LBB30_31>:
;     return head + network_header;
     328:	57 06 00 00 ff ff 00 00	r6 &= 65535
     329:	0f 69 00 00 00 00 00 00	r9 += r6
     330:	bf a1 00 00 00 00 00 00	r1 = r10
     331:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     332:	b7 02 00 00 01 00 00 00	r2 = 1
     333:	bf 93 00 00 00 00 00 00	r3 = r9
     334:	85 00 00 00 04 00 00 00	call 4
     335:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     336:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     337:	57 02 00 00 f0 00 00 00	r2 &= 240
     338:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB30_33>
     339:	bf a1 00 00 00 00 00 00	r1 = r10
     340:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     341:	b7 02 00 00 01 00 00 00	r2 = 1
     342:	bf 93 00 00 00 00 00 00	r3 = r9
     343:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     344:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     345:	67 01 00 00 02 00 00 00	r1 <<= 2
     346:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000ad8 <LBB30_33>:
;     return l3_header + transport_size;
     347:	0f 19 00 00 00 00 00 00	r9 += r1
     348:	bf a6 00 00 00 00 00 00	r6 = r10
     349:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     350:	bf 61 00 00 00 00 00 00	r1 = r6
     351:	b7 02 00 00 08 00 00 00	r2 = 8
     352:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
     353:	bf 93 00 00 00 00 00 00	r3 = r9
     354:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     355:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     356:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     357:	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 88)
     358:	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 96)
     359:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB30_40>
     360:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     361:	07 02 00 00 e8 ff ff ff	r2 += -24
     362:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     363:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB30_40>
     364:	05 00 0c 00 00 00 00 00	goto +12 <LBB30_92>

0000000000000b68 <LBB30_45>:
;     if (proto != 0 && proto != l4_proto)
     365:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     366:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB30_54>
     367:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
;     if (proto != 0 && icmpid != 0) {
     368:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB30_54>
     369:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     370:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB30_54>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     371:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     372:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB30_50>
     373:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB30_54>

0000000000000bb0 <LBB30_50>:
;         if (icmpid != ev_icmpid)
     374:	57 01 00 00 ff ff 00 00	r1 &= 65535
     375:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
     376:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB30_54>

0000000000000bc8 <LBB30_92>:
;     return do_trace(ctx, skb, "napi_gro_receive");
     377:	b7 00 00 00 00 00 00 00	r0 = 0
     378:	95 00 00 00 00 00 00 00	exit

0000000000000bd8 <LBB30_52>:
     379:	b7 01 00 00 00 00 00 00	r1 = 0
     380:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     381:	bf 63 00 00 00 00 00 00	r3 = r6
     382:	0f 13 00 00 00 00 00 00	r3 += r1
     383:	bf a1 00 00 00 00 00 00	r1 = r10
     384:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     385:	b7 02 00 00 02 00 00 00	r2 = 2
     386:	85 00 00 00 71 00 00 00	call 113
     387:	b7 01 00 00 02 00 00 00	r1 = 2
     388:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     389:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     390:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     391:	bf a1 00 00 00 00 00 00	r1 = r10
     392:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     393:	b7 02 00 00 02 00 00 00	r2 = 2
     394:	bf 63 00 00 00 00 00 00	r3 = r6
     395:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     396:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     397:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     398:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB30_54>
     399:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     400:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB30_92>

0000000000000c88 <LBB30_54>:
;     event->flags |= SKBTRACER_EVENT_IF;
     401:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     402:	47 01 00 00 01 00 00 00	r1 |= 1
     403:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     404:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
;     ev->skb = (u64)skb;
     405:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     406:	85 00 00 00 05 00 00 00	call 5
     407:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     408:	b7 01 00 00 10 00 00 00	r1 = 16
     409:	bf 96 00 00 00 00 00 00	r6 = r9
     410:	0f 16 00 00 00 00 00 00	r6 += r1
     411:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     412:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     413:	b7 02 00 00 08 00 00 00	r2 = 8
     414:	bf 63 00 00 00 00 00 00	r3 = r6
     415:	85 00 00 00 71 00 00 00	call 113
     416:	b7 01 00 00 70 00 00 00	r1 = 112
     417:	bf 93 00 00 00 00 00 00	r3 = r9
     418:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     419:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     420:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     421:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     422:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     423:	b7 02 00 00 04 00 00 00	r2 = 4
     424:	85 00 00 00 71 00 00 00	call 113
     425:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     426:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     427:	85 00 00 00 08 00 00 00	call 8
     428:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     429:	85 00 00 00 0e 00 00 00	call 14
     430:	57 00 00 00 ff ff 00 00	r0 &= 65535
     431:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     432:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     433:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     434:	bf 91 00 00 00 00 00 00	r1 = r9
     435:	b7 02 00 00 08 00 00 00	r2 = 8
     436:	bf 63 00 00 00 00 00 00	r3 = r6
     437:	85 00 00 00 71 00 00 00	call 113
     438:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     439:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     440:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     441:	bf 91 00 00 00 00 00 00	r1 = r9
     442:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     443:	b7 02 00 00 08 00 00 00	r2 = 8
     444:	85 00 00 00 71 00 00 00	call 113
     445:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     446:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     447:	0f 13 00 00 00 00 00 00	r3 += r1
     448:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     449:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     450:	b7 02 00 00 04 00 00 00	r2 = 4
     451:	85 00 00 00 71 00 00 00	call 113
     452:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     453:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB30_57>
     454:	b7 01 00 00 18 00 00 00	r1 = 24
     455:	bf 93 00 00 00 00 00 00	r3 = r9
     456:	0f 13 00 00 00 00 00 00	r3 += r1
     457:	bf a1 00 00 00 00 00 00	r1 = r10
     458:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     459:	b7 02 00 00 08 00 00 00	r2 = 8
     460:	85 00 00 00 71 00 00 00	call 113
     461:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     462:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     463:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB30_57>
     464:	b7 01 00 00 30 00 00 00	r1 = 48
     465:	0f 13 00 00 00 00 00 00	r3 += r1
     466:	bf a1 00 00 00 00 00 00	r1 = r10
     467:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     468:	b7 02 00 00 08 00 00 00	r2 = 8
     469:	85 00 00 00 71 00 00 00	call 113
     470:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     471:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     472:	0f 13 00 00 00 00 00 00	r3 += r1
     473:	bf a1 00 00 00 00 00 00	r1 = r10
     474:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     475:	b7 02 00 00 04 00 00 00	r2 = 4
     476:	85 00 00 00 71 00 00 00	call 113
     477:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000ef0 <LBB30_57>:
;     pkt_info->netns = get_netns(skb);
     478:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     479:	b7 01 00 00 80 00 00 00	r1 = 128
     480:	bf 93 00 00 00 00 00 00	r3 = r9
     481:	0f 13 00 00 00 00 00 00	r3 += r1
     482:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     483:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     484:	bf a1 00 00 00 00 00 00	r1 = r10
     485:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     486:	b7 02 00 00 01 00 00 00	r2 = 1
     487:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     488:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     489:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     490:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     491:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     492:	b7 01 00 00 00 00 00 00	r1 = 0
     493:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     494:	0f 13 00 00 00 00 00 00	r3 += r1
;     pkt_info->ifname[0] = 0;
     495:	bf 71 00 00 00 00 00 00	r1 = r7
     496:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     497:	b7 02 00 00 10 00 00 00	r2 = 16
     498:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     499:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     500:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB30_59>
     501:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     502:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     503:	b7 01 00 00 69 00 00 00	r1 = 105
     504:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     505:	b7 01 00 00 6e 00 00 00	r1 = 110
     506:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000000fd8 <LBB30_59>:
     507:	b7 01 00 00 c0 00 00 00	r1 = 192
     508:	bf 93 00 00 00 00 00 00	r3 = r9
     509:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     510:	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r3
     511:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     512:	07 01 00 00 f8 ff ff ff	r1 += -8
     513:	b7 02 00 00 08 00 00 00	r2 = 8
     514:	85 00 00 00 71 00 00 00	call 113
     515:	b7 01 00 00 b6 00 00 00	r1 = 182
     516:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     517:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     518:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     519:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     520:	b7 02 00 00 02 00 00 00	r2 = 2
     521:	bf 93 00 00 00 00 00 00	r3 = r9
     522:	85 00 00 00 71 00 00 00	call 113
     523:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     524:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     525:	bf 71 00 00 00 00 00 00	r1 = r7
     526:	07 01 00 00 64 00 00 00	r1 += 100
     527:	b7 02 00 00 06 00 00 00	r2 = 6
     528:	bf 63 00 00 00 00 00 00	r3 = r6
     529:	85 00 00 00 04 00 00 00	call 4
     530:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     531:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	b7 02 00 00 08 00 00 00	r2 = 8
     533:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     534:	85 00 00 00 71 00 00 00	call 113
     535:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     536:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     537:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     538:	b7 02 00 00 02 00 00 00	r2 = 2
     539:	bf 93 00 00 00 00 00 00	r3 = r9
     540:	85 00 00 00 71 00 00 00	call 113
     541:	b7 01 00 00 b4 00 00 00	r1 = 180
     542:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
     543:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     544:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     547:	b7 02 00 00 02 00 00 00	r2 = 2
     548:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     549:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     550:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     551:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB30_61>
     552:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001148 <LBB30_61>:
;     return head + network_header;
     553:	57 09 00 00 ff ff 00 00	r9 &= 65535
     554:	0f 96 00 00 00 00 00 00	r6 += r9
     555:	bf a1 00 00 00 00 00 00	r1 = r10
     556:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     557:	b7 02 00 00 01 00 00 00	r2 = 1
     558:	bf 63 00 00 00 00 00 00	r3 = r6
     559:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     560:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     561:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     562:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB30_66>
     563:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB30_92>
     564:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     565:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     566:	b7 01 00 00 c0 00 00 00	r1 = 192
     567:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     568:	bf 93 00 00 00 00 00 00	r3 = r9
     569:	0f 13 00 00 00 00 00 00	r3 += r1
     570:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     572:	b7 02 00 00 08 00 00 00	r2 = 8
     573:	85 00 00 00 71 00 00 00	call 113
     574:	b7 01 00 00 b6 00 00 00	r1 = 182
     575:	bf 93 00 00 00 00 00 00	r3 = r9
     576:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     577:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     578:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     579:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     580:	b7 02 00 00 02 00 00 00	r2 = 2
     581:	85 00 00 00 71 00 00 00	call 113
     582:	b7 01 00 00 b4 00 00 00	r1 = 180
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     585:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     586:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     587:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     588:	b7 02 00 00 02 00 00 00	r2 = 2
     589:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     590:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     591:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     592:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB30_65>
     593:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001290 <LBB30_65>:
;     return head + network_header;
     594:	57 09 00 00 ff ff 00 00	r9 &= 65535
     595:	0f 96 00 00 00 00 00 00	r6 += r9
     596:	b7 01 00 00 0c 00 00 00	r1 = 12
     597:	bf 63 00 00 00 00 00 00	r3 = r6
     598:	0f 13 00 00 00 00 00 00	r3 += r1
     599:	bf a1 00 00 00 00 00 00	r1 = r10
     600:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     601:	b7 02 00 00 04 00 00 00	r2 = 4
     602:	85 00 00 00 71 00 00 00	call 113
     603:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     604:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     605:	b7 01 00 00 10 00 00 00	r1 = 16
     606:	bf 63 00 00 00 00 00 00	r3 = r6
     607:	0f 13 00 00 00 00 00 00	r3 += r1
     608:	bf a1 00 00 00 00 00 00	r1 = r10
     609:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     610:	b7 02 00 00 04 00 00 00	r2 = 4
     611:	85 00 00 00 71 00 00 00	call 113
     612:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     613:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     614:	b7 01 00 00 02 00 00 00	r1 = 2
     615:	bf 63 00 00 00 00 00 00	r3 = r6
     616:	0f 13 00 00 00 00 00 00	r3 += r1
     617:	bf a1 00 00 00 00 00 00	r1 = r10
     618:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     619:	b7 02 00 00 02 00 00 00	r2 = 2
     620:	85 00 00 00 71 00 00 00	call 113
     621:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     622:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     623:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     624:	b7 01 00 00 09 00 00 00	r1 = 9
     625:	05 00 38 00 00 00 00 00	goto +56 <LBB30_69>

0000000000001390 <LBB30_66>:
     626:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     627:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     628:	b7 01 00 00 c0 00 00 00	r1 = 192
     629:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     630:	bf 93 00 00 00 00 00 00	r3 = r9
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     634:	b7 02 00 00 08 00 00 00	r2 = 8
     635:	85 00 00 00 71 00 00 00	call 113
     636:	b7 01 00 00 b6 00 00 00	r1 = 182
     637:	bf 93 00 00 00 00 00 00	r3 = r9
     638:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     639:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     640:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     641:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     642:	b7 02 00 00 02 00 00 00	r2 = 2
     643:	85 00 00 00 71 00 00 00	call 113
     644:	b7 01 00 00 b4 00 00 00	r1 = 180
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     647:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     648:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     649:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     650:	b7 02 00 00 02 00 00 00	r2 = 2
     651:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     652:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     653:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     654:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB30_68>
     655:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001480 <LBB30_68>:
;     return head + network_header;
     656:	57 09 00 00 ff ff 00 00	r9 &= 65535
     657:	0f 96 00 00 00 00 00 00	r6 += r9
     658:	b7 01 00 00 08 00 00 00	r1 = 8
     659:	bf 63 00 00 00 00 00 00	r3 = r6
     660:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
     661:	bf 71 00 00 00 00 00 00	r1 = r7
     662:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     663:	b7 02 00 00 10 00 00 00	r2 = 16
     664:	85 00 00 00 04 00 00 00	call 4
     665:	b7 01 00 00 18 00 00 00	r1 = 24
     666:	bf 63 00 00 00 00 00 00	r3 = r6
     667:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     668:	bf 71 00 00 00 00 00 00	r1 = r7
     669:	07 01 00 00 80 00 00 00	r1 += 128
     670:	b7 02 00 00 10 00 00 00	r2 = 16
     671:	85 00 00 00 04 00 00 00	call 4
     672:	b7 01 00 00 04 00 00 00	r1 = 4
     673:	bf 63 00 00 00 00 00 00	r3 = r6
     674:	0f 13 00 00 00 00 00 00	r3 += r1
     675:	bf a1 00 00 00 00 00 00	r1 = r10
     676:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     677:	b7 02 00 00 02 00 00 00	r2 = 2
     678:	85 00 00 00 71 00 00 00	call 113
     679:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     680:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     681:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000001550 <LBB30_69>:
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
     684:	bf a1 00 00 00 00 00 00	r1 = r10
     685:	07 01 00 00 f8 ff ff ff	r1 += -8
     686:	b7 02 00 00 01 00 00 00	r2 = 1
     687:	85 00 00 00 71 00 00 00	call 113
     688:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     689:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     690:	bf a1 00 00 00 00 00 00	r1 = r10
     691:	07 01 00 00 f8 ff ff ff	r1 += -8
     692:	b7 02 00 00 01 00 00 00	r2 = 1
     693:	bf 63 00 00 00 00 00 00	r3 = r6
     694:	85 00 00 00 04 00 00 00	call 4
     695:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     696:	57 01 00 00 f0 00 00 00	r1 &= 240
     697:	77 01 00 00 04 00 00 00	r1 >>= 4
     698:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     699:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     700:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB30_72>
     701:	15 01 53 00 01 00 00 00	if r1 == 1 goto +83 <LBB30_84>
     702:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB30_74>
     703:	05 00 b9 fe 00 00 00 00	goto -327 <LBB30_92>

0000000000001600 <LBB30_74>:
     704:	b7 01 00 00 c0 00 00 00	r1 = 192
     705:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     706:	bf 93 00 00 00 00 00 00	r3 = r9
     707:	0f 13 00 00 00 00 00 00	r3 += r1
     708:	bf a1 00 00 00 00 00 00	r1 = r10
     709:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     710:	b7 02 00 00 08 00 00 00	r2 = 8
     711:	85 00 00 00 71 00 00 00	call 113
     712:	b7 01 00 00 b6 00 00 00	r1 = 182
     713:	bf 93 00 00 00 00 00 00	r3 = r9
     714:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     715:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     716:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     717:	bf a1 00 00 00 00 00 00	r1 = r10
     718:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     719:	b7 02 00 00 02 00 00 00	r2 = 2
     720:	85 00 00 00 71 00 00 00	call 113
     721:	b7 01 00 00 b4 00 00 00	r1 = 180
     722:	0f 19 00 00 00 00 00 00	r9 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     723:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     726:	b7 02 00 00 02 00 00 00	r2 = 2
     727:	bf 93 00 00 00 00 00 00	r3 = r9
     728:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     729:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     730:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     731:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB30_76>
     732:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000016e8 <LBB30_76>:
;     return head + network_header;
     733:	57 06 00 00 ff ff 00 00	r6 &= 65535
     734:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
     735:	0f 61 00 00 00 00 00 00	r1 += r6
     736:	bf 16 00 00 00 00 00 00	r6 = r1
     737:	bf a1 00 00 00 00 00 00	r1 = r10
     738:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     739:	b7 02 00 00 01 00 00 00	r2 = 1
     740:	bf 63 00 00 00 00 00 00	r3 = r6
     741:	85 00 00 00 04 00 00 00	call 4
     742:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     743:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     744:	57 02 00 00 f0 00 00 00	r2 &= 240
     745:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB30_78>
     746:	bf a1 00 00 00 00 00 00	r1 = r10
     747:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     748:	b7 02 00 00 01 00 00 00	r2 = 1
     749:	bf 63 00 00 00 00 00 00	r3 = r6
     750:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     751:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     752:	67 01 00 00 02 00 00 00	r1 <<= 2
     753:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001790 <LBB30_78>:
;     return l3_header + transport_size;
     754:	0f 16 00 00 00 00 00 00	r6 += r1
     755:	b7 01 00 00 00 00 00 00	r1 = 0
     756:	bf 63 00 00 00 00 00 00	r3 = r6
     757:	0f 13 00 00 00 00 00 00	r3 += r1
     758:	bf a1 00 00 00 00 00 00	r1 = r10
     759:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     760:	b7 02 00 00 02 00 00 00	r2 = 2
     761:	85 00 00 00 71 00 00 00	call 113
     762:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     763:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     764:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     765:	b7 01 00 00 02 00 00 00	r1 = 2
     766:	bf 63 00 00 00 00 00 00	r3 = r6
     767:	0f 13 00 00 00 00 00 00	r3 += r1
     768:	bf a1 00 00 00 00 00 00	r1 = r10
     769:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     770:	b7 02 00 00 02 00 00 00	r2 = 2
     771:	85 00 00 00 71 00 00 00	call 113
     772:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     773:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     774:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     775:	07 06 00 00 0c 00 00 00	r6 += 12
     776:	bf 71 00 00 00 00 00 00	r1 = r7
     777:	07 01 00 00 9c 00 00 00	r1 += 156
     778:	b7 02 00 00 02 00 00 00	r2 = 2
     779:	bf 63 00 00 00 00 00 00	r3 = r6
     780:	85 00 00 00 04 00 00 00	call 4
     781:	05 00 8a 00 00 00 00 00	goto +138 <LBB30_89>

0000000000001870 <LBB30_72>:
;     if (l4_proto == IPPROTO_TCP) {
     782:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB30_79>
     783:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB30_84>
     784:	05 00 68 fe 00 00 00 00	goto -408 <LBB30_92>

0000000000001888 <LBB30_84>:
     785:	b7 01 00 00 c0 00 00 00	r1 = 192
     786:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     787:	bf 63 00 00 00 00 00 00	r3 = r6
     788:	0f 13 00 00 00 00 00 00	r3 += r1
     789:	bf a1 00 00 00 00 00 00	r1 = r10
     790:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     791:	b7 02 00 00 08 00 00 00	r2 = 8
     792:	85 00 00 00 71 00 00 00	call 113
     793:	b7 01 00 00 b6 00 00 00	r1 = 182
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     796:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     797:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     798:	bf a1 00 00 00 00 00 00	r1 = r10
     799:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     800:	b7 02 00 00 02 00 00 00	r2 = 2
     801:	85 00 00 00 71 00 00 00	call 113
     802:	b7 01 00 00 b4 00 00 00	r1 = 180
     803:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     804:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     805:	bf a1 00 00 00 00 00 00	r1 = r10
     806:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     807:	b7 02 00 00 02 00 00 00	r2 = 2
     808:	bf 63 00 00 00 00 00 00	r3 = r6
     809:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     810:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     811:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     812:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB30_86>
     813:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001970 <LBB30_86>:
;     return head + network_header;
     814:	57 09 00 00 ff ff 00 00	r9 &= 65535
     815:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     816:	0f 96 00 00 00 00 00 00	r6 += r9
     817:	bf a1 00 00 00 00 00 00	r1 = r10
     818:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     819:	b7 02 00 00 01 00 00 00	r2 = 1
     820:	bf 63 00 00 00 00 00 00	r3 = r6
     821:	85 00 00 00 04 00 00 00	call 4
     822:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     823:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     824:	57 02 00 00 f0 00 00 00	r2 &= 240
     825:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB30_88>
     826:	bf a1 00 00 00 00 00 00	r1 = r10
     827:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     828:	b7 02 00 00 01 00 00 00	r2 = 1
     829:	bf 63 00 00 00 00 00 00	r3 = r6
     830:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     831:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     832:	67 01 00 00 02 00 00 00	r1 <<= 2
     833:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a10 <LBB30_88>:
;     return l3_header + transport_size;
     834:	0f 16 00 00 00 00 00 00	r6 += r1
     835:	bf a9 00 00 00 00 00 00	r9 = r10
     836:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     837:	bf 91 00 00 00 00 00 00	r1 = r9
     838:	b7 02 00 00 08 00 00 00	r2 = 8
     839:	bf 63 00 00 00 00 00 00	r3 = r6
     840:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     841:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     842:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     843:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     844:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     845:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     846:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     847:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     848:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     849:	05 00 46 00 00 00 00 00	goto +70 <LBB30_89>

0000000000001a90 <LBB30_79>:
     850:	b7 01 00 00 c0 00 00 00	r1 = 192
     851:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     852:	bf 63 00 00 00 00 00 00	r3 = r6
     853:	0f 13 00 00 00 00 00 00	r3 += r1
     854:	bf a1 00 00 00 00 00 00	r1 = r10
     855:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     856:	b7 02 00 00 08 00 00 00	r2 = 8
     857:	85 00 00 00 71 00 00 00	call 113
     858:	b7 01 00 00 b6 00 00 00	r1 = 182
     859:	bf 63 00 00 00 00 00 00	r3 = r6
     860:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     861:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     862:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     863:	bf a1 00 00 00 00 00 00	r1 = r10
     864:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     865:	b7 02 00 00 02 00 00 00	r2 = 2
     866:	85 00 00 00 71 00 00 00	call 113
     867:	b7 01 00 00 b4 00 00 00	r1 = 180
     868:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     869:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     870:	bf a1 00 00 00 00 00 00	r1 = r10
     871:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     872:	b7 02 00 00 02 00 00 00	r2 = 2
     873:	bf 63 00 00 00 00 00 00	r3 = r6
     874:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     875:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     876:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     877:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB30_81>
     878:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001b78 <LBB30_81>:
;     return head + network_header;
     879:	57 09 00 00 ff ff 00 00	r9 &= 65535
     880:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     881:	0f 96 00 00 00 00 00 00	r6 += r9
     882:	bf a1 00 00 00 00 00 00	r1 = r10
     883:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     884:	b7 02 00 00 01 00 00 00	r2 = 1
     885:	bf 63 00 00 00 00 00 00	r3 = r6
     886:	85 00 00 00 04 00 00 00	call 4
     887:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     888:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     889:	57 02 00 00 f0 00 00 00	r2 &= 240
     890:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB30_83>
     891:	bf a1 00 00 00 00 00 00	r1 = r10
     892:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     893:	b7 02 00 00 01 00 00 00	r2 = 1
     894:	bf 63 00 00 00 00 00 00	r3 = r6
     895:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     896:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     897:	67 01 00 00 02 00 00 00	r1 <<= 2
     898:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c18 <LBB30_83>:
;     return l3_header + transport_size;
     899:	0f 16 00 00 00 00 00 00	r6 += r1
     900:	b7 01 00 00 00 00 00 00	r1 = 0
     901:	bf 63 00 00 00 00 00 00	r3 = r6
     902:	0f 13 00 00 00 00 00 00	r3 += r1
     903:	bf a1 00 00 00 00 00 00	r1 = r10
     904:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     905:	b7 02 00 00 02 00 00 00	r2 = 2
     906:	85 00 00 00 71 00 00 00	call 113
     907:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     908:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     909:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     910:	b7 01 00 00 02 00 00 00	r1 = 2
     911:	0f 16 00 00 00 00 00 00	r6 += r1
     912:	bf a1 00 00 00 00 00 00	r1 = r10
     913:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     914:	b7 02 00 00 02 00 00 00	r2 = 2
     915:	bf 63 00 00 00 00 00 00	r3 = r6
     916:	85 00 00 00 71 00 00 00	call 113
     917:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     918:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     919:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001cc0 <LBB30_89>:
     920:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
;     return cfg->callstack == 0;
     921:	71 81 11 00 00 00 00 00	r1 = *(u8 *)(r8 + 17)
;     if (!filter_callstack(cfg))
     922:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB30_91>
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
     923:	bf 61 00 00 00 00 00 00	r1 = r6
     924:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     926:	b7 03 00 00 00 00 00 00	r3 = 0
     927:	85 00 00 00 1b 00 00 00	call 27
     928:	63 07 30 00 00 00 00 00	*(u32 *)(r7 + 48) = r0

0000000000001d08 <LBB30_91>:
     929:	b7 01 00 00 76 00 00 00	r1 = 118
;     for (j = 10; j < 64; j += 10) CPY(j);
     930:	73 17 0e 00 00 00 00 00	*(u8 *)(r7 + 14) = r1
     931:	b7 01 00 00 63 00 00 00	r1 = 99
     932:	73 17 0b 00 00 00 00 00	*(u8 *)(r7 + 11) = r1
     933:	b7 01 00 00 65 00 00 00	r1 = 101
     934:	73 17 0f 00 00 00 00 00	*(u8 *)(r7 + 15) = r1
     935:	73 17 0c 00 00 00 00 00	*(u8 *)(r7 + 12) = r1
     936:	73 17 0a 00 00 00 00 00	*(u8 *)(r7 + 10) = r1
     937:	b7 01 00 00 6f 00 00 00	r1 = 111
     938:	73 17 07 00 00 00 00 00	*(u8 *)(r7 + 7) = r1
     939:	b7 01 00 00 72 00 00 00	r1 = 114
     940:	73 17 09 00 00 00 00 00	*(u8 *)(r7 + 9) = r1
     941:	73 17 06 00 00 00 00 00	*(u8 *)(r7 + 6) = r1
     942:	b7 01 00 00 67 00 00 00	r1 = 103
     943:	73 17 05 00 00 00 00 00	*(u8 *)(r7 + 5) = r1
     944:	b7 01 00 00 5f 00 00 00	r1 = 95
     945:	73 17 08 00 00 00 00 00	*(u8 *)(r7 + 8) = r1
     946:	73 17 04 00 00 00 00 00	*(u8 *)(r7 + 4) = r1
     947:	b7 01 00 00 69 00 00 00	r1 = 105
     948:	73 17 0d 00 00 00 00 00	*(u8 *)(r7 + 13) = r1
     949:	73 17 03 00 00 00 00 00	*(u8 *)(r7 + 3) = r1
     950:	b7 01 00 00 70 00 00 00	r1 = 112
     951:	73 17 02 00 00 00 00 00	*(u8 *)(r7 + 2) = r1
     952:	b7 01 00 00 61 00 00 00	r1 = 97
     953:	73 17 01 00 00 00 00 00	*(u8 *)(r7 + 1) = r1
     954:	b7 01 00 00 6e 00 00 00	r1 = 110
     955:	73 17 00 00 00 00 00 00	*(u8 *)(r7 + 0) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     956:	bf 61 00 00 00 00 00 00	r1 = r6
     957:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     959:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     961:	bf 74 00 00 00 00 00 00	r4 = r7
     962:	b7 05 00 00 e0 00 00 00	r5 = 224
     963:	85 00 00 00 19 00 00 00	call 25
     964:	05 00 b4 fd 00 00 00 00	goto -588 <LBB30_92>

Disassembly of section kprobe/__dev_queue_xmit:

0000000000000000 <k_dev_q_xmit>:
; int k_dev_q_xmit(struct pt_regs *ctx) {
       0:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM1(ctx);
       1:	79 11 70 00 00 00 00 00	r1 = *(u64 *)(r1 + 112)
       2:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       3:	b7 06 00 00 00 00 00 00	r6 = 0
;     GET_CFG();
       4:	63 6a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r6
       5:	bf a2 00 00 00 00 00 00	r2 = r10
       6:	07 02 00 00 e4 ff ff ff	r2 += -28
;     GET_CFG();
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	85 00 00 00 01 00 00 00	call 1
      10:	bf 08 00 00 00 00 00 00	r8 = r0
      11:	15 08 6d 01 00 00 00 00	if r8 == 0 goto +365 <LBB31_92>
      12:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
      13:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      14:	63 18 08 00 00 00 00 00	*(u32 *)(r8 + 8) = r1
;     u32 ev_buff_id = 0;
      15:	63 6a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r6
      16:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      17:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      18:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      20:	85 00 00 00 01 00 00 00	call 1
      21:	bf 07 00 00 00 00 00 00	r7 = r0
;     if (!ev) return NULL;
      22:	55 07 01 00 00 00 00 00	if r7 != 0 goto +1 <LBB31_3>
      23:	05 00 61 01 00 00 00 00	goto +353 <LBB31_92>

00000000000000c0 <LBB31_3>:
      24:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      25:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      26:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      27:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      28:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      29:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      30:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      31:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      32:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      33:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      34:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      35:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      36:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      37:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      38:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      39:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      40:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      41:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      42:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      43:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      44:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      45:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      46:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      47:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      48:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      49:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      50:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      51:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      52:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      53:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      54:	61 81 04 00 00 00 00 00	r1 = *(u32 *)(r8 + 4)
      55:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB31_5>
      56:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      57:	5d 01 3f 01 00 00 00 00	if r1 != r0 goto +319 <LBB31_92>

00000000000001d0 <LBB31_5>:
      58:	b7 01 00 00 10 00 00 00	r1 = 16
      59:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
      60:	bf 93 00 00 00 00 00 00	r3 = r9
      61:	0f 13 00 00 00 00 00 00	r3 += r1
      62:	bf a6 00 00 00 00 00 00	r6 = r10
      63:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      64:	bf 61 00 00 00 00 00 00	r1 = r6
      65:	b7 02 00 00 08 00 00 00	r2 = 8
      66:	85 00 00 00 71 00 00 00	call 113
      67:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      68:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      69:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      70:	bf 61 00 00 00 00 00 00	r1 = r6
      71:	b7 02 00 00 08 00 00 00	r2 = 8
      72:	85 00 00 00 71 00 00 00	call 113
      73:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      74:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      75:	0f 13 00 00 00 00 00 00	r3 += r1
      76:	bf a1 00 00 00 00 00 00	r1 = r10
      77:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      78:	b7 02 00 00 04 00 00 00	r2 = 4
      79:	85 00 00 00 71 00 00 00	call 113
      80:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      81:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB31_8>
      82:	b7 01 00 00 18 00 00 00	r1 = 24
      83:	bf 93 00 00 00 00 00 00	r3 = r9
      84:	0f 13 00 00 00 00 00 00	r3 += r1
      85:	bf a1 00 00 00 00 00 00	r1 = r10
      86:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
      87:	b7 02 00 00 08 00 00 00	r2 = 8
      88:	85 00 00 00 71 00 00 00	call 113
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
      90:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB31_11>
      91:	b7 01 00 00 30 00 00 00	r1 = 48
      92:	0f 13 00 00 00 00 00 00	r3 += r1
      93:	bf a1 00 00 00 00 00 00	r1 = r10
      94:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      95:	b7 02 00 00 08 00 00 00	r2 = 8
      96:	85 00 00 00 71 00 00 00	call 113
      97:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      98:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     102:	b7 02 00 00 04 00 00 00	r2 = 4
     103:	85 00 00 00 71 00 00 00	call 113
     104:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000348 <LBB31_8>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     105:	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0)
     106:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB31_11>
     107:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB31_11>
     108:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB31_92>

0000000000000368 <LBB31_11>:
;     u16 icmpid = cfg->icmpid;
     109:	69 81 0e 00 00 00 00 00	r1 = *(u16 *)(r8 + 14)
;     u16 port = cfg->port;
     110:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     111:	69 81 0c 00 00 00 00 00	r1 = *(u16 *)(r8 + 12)
;     u8 proto = cfg->proto;
     112:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     113:	71 81 12 00 00 00 00 00	r1 = *(u8 *)(r8 + 18)
;     u32 addr = cfg->ip;
     114:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     115:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
     116:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     117:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     118:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     119:	b7 01 00 00 c0 00 00 00	r1 = 192
     120:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     121:	bf 93 00 00 00 00 00 00	r3 = r9
     122:	0f 13 00 00 00 00 00 00	r3 += r1
     123:	bf a1 00 00 00 00 00 00	r1 = r10
     124:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     125:	b7 02 00 00 08 00 00 00	r2 = 8
     126:	85 00 00 00 71 00 00 00	call 113
     127:	b7 01 00 00 b6 00 00 00	r1 = 182
     128:	bf 93 00 00 00 00 00 00	r3 = r9
     129:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     130:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     131:	bf a1 00 00 00 00 00 00	r1 = r10
     132:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     133:	b7 02 00 00 02 00 00 00	r2 = 2
     134:	85 00 00 00 71 00 00 00	call 113
     135:	b7 01 00 00 b4 00 00 00	r1 = 180
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     138:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     139:	bf a1 00 00 00 00 00 00	r1 = r10
     140:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     141:	b7 02 00 00 02 00 00 00	r2 = 2
     142:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     143:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     144:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     145:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB31_13>
     146:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000498 <LBB31_13>:
;     return head + network_header;
     147:	57 09 00 00 ff ff 00 00	r9 &= 65535
     148:	0f 96 00 00 00 00 00 00	r6 += r9
     149:	bf a1 00 00 00 00 00 00	r1 = r10
     150:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     151:	b7 02 00 00 01 00 00 00	r2 = 1
     152:	bf 63 00 00 00 00 00 00	r3 = r6
     153:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     154:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     155:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     156:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB31_20>
     157:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB31_92>
;         if (addr != 0) {
     158:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     159:	bf 19 00 00 00 00 00 00	r9 = r1
     160:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB31_18>
     161:	b7 01 00 00 0c 00 00 00	r1 = 12
     162:	bf 63 00 00 00 00 00 00	r3 = r6
     163:	0f 13 00 00 00 00 00 00	r3 += r1
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     166:	b7 02 00 00 04 00 00 00	r2 = 4
     167:	85 00 00 00 71 00 00 00	call 113
     168:	b7 01 00 00 10 00 00 00	r1 = 16
     169:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     170:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     171:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     172:	bf a1 00 00 00 00 00 00	r1 = r10
     173:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     174:	b7 02 00 00 04 00 00 00	r2 = 4
     175:	bf 63 00 00 00 00 00 00	r3 = r6
     176:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     177:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     178:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB31_54>
     179:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     180:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     181:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB31_92>
     182:	05 00 da 00 00 00 00 00	goto +218 <LBB31_54>

00000000000005b8 <LBB31_20>:
     183:	b7 01 00 00 06 00 00 00	r1 = 6
     184:	0f 16 00 00 00 00 00 00	r6 += r1
     185:	bf a1 00 00 00 00 00 00	r1 = r10
     186:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     187:	b7 02 00 00 01 00 00 00	r2 = 1
     188:	bf 63 00 00 00 00 00 00	r3 = r6
     189:	85 00 00 00 04 00 00 00	call 4
     190:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     191:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     192:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     193:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB31_22>
     194:	b7 04 00 00 80 00 00 00	r4 = 128
     195:	b7 03 00 00 81 00 00 00	r3 = 129
     196:	b7 01 00 00 3a 00 00 00	r1 = 58
     197:	05 00 0d 00 00 00 00 00	goto +13 <LBB31_22>

0000000000000630 <LBB31_18>:
     198:	b7 01 00 00 09 00 00 00	r1 = 9
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     208:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB31_22>
     209:	b7 04 00 00 08 00 00 00	r4 = 8
     210:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000698 <LBB31_22>:
;     if (proto != 0 && proto != l4_proto)
     211:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     212:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB31_24>
     213:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB31_92>

00000000000006b0 <LBB31_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     214:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB31_27>
     215:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB31_29>
     216:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB31_35>
     217:	05 00 9f 00 00 00 00 00	goto +159 <LBB31_92>

00000000000006d0 <LBB31_35>:
     218:	b7 01 00 00 c0 00 00 00	r1 = 192
     219:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     220:	bf 63 00 00 00 00 00 00	r3 = r6
     221:	0f 13 00 00 00 00 00 00	r3 += r1
     222:	bf a1 00 00 00 00 00 00	r1 = r10
     223:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     224:	b7 02 00 00 08 00 00 00	r2 = 8
     225:	85 00 00 00 71 00 00 00	call 113
     226:	b7 01 00 00 b6 00 00 00	r1 = 182
     227:	bf 63 00 00 00 00 00 00	r3 = r6
     228:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     229:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     230:	bf a1 00 00 00 00 00 00	r1 = r10
     231:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     232:	b7 02 00 00 02 00 00 00	r2 = 2
     233:	85 00 00 00 71 00 00 00	call 113
     234:	b7 01 00 00 b4 00 00 00	r1 = 180
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     237:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     238:	bf a1 00 00 00 00 00 00	r1 = r10
     239:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     240:	b7 02 00 00 02 00 00 00	r2 = 2
     241:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     242:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     243:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     244:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB31_37>
     245:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000007b0 <LBB31_37>:
;     return head + network_header;
     246:	57 06 00 00 ff ff 00 00	r6 &= 65535
     247:	0f 69 00 00 00 00 00 00	r9 += r6
     248:	bf a1 00 00 00 00 00 00	r1 = r10
     249:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     250:	b7 02 00 00 01 00 00 00	r2 = 1
     251:	bf 93 00 00 00 00 00 00	r3 = r9
     252:	85 00 00 00 04 00 00 00	call 4
     253:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     254:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     255:	57 02 00 00 f0 00 00 00	r2 &= 240
     256:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB31_39>
     257:	bf a1 00 00 00 00 00 00	r1 = r10
     258:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     259:	b7 02 00 00 01 00 00 00	r2 = 1
     260:	bf 93 00 00 00 00 00 00	r3 = r9
     261:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     262:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     263:	67 01 00 00 02 00 00 00	r1 <<= 2
     264:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000848 <LBB31_39>:
;     return l3_header + transport_size;
     265:	0f 19 00 00 00 00 00 00	r9 += r1
     266:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9

0000000000000858 <LBB31_40>:
     267:	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 72)
;     if (port != 0) {
     268:	bf 92 00 00 00 00 00 00	r2 = r9
     269:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB31_45>
;         if (l4_proto == IPPROTO_TCP) {
     270:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     271:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB31_52>
     272:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB31_45>
     273:	b7 01 00 00 00 00 00 00	r1 = 0
     274:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     275:	bf 63 00 00 00 00 00 00	r3 = r6
     276:	0f 13 00 00 00 00 00 00	r3 += r1
     277:	bf a1 00 00 00 00 00 00	r1 = r10
     278:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     279:	b7 02 00 00 02 00 00 00	r2 = 2
     280:	85 00 00 00 71 00 00 00	call 113
     281:	b7 01 00 00 02 00 00 00	r1 = 2
     282:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     283:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     284:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     285:	bf a1 00 00 00 00 00 00	r1 = r10
     286:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     287:	b7 02 00 00 02 00 00 00	r2 = 2
     288:	bf 63 00 00 00 00 00 00	r3 = r6
     289:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     290:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     291:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     292:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB31_54>
     293:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     294:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB31_92>
     295:	05 00 69 00 00 00 00 00	goto +105 <LBB31_54>

0000000000000940 <LBB31_27>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     296:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB31_35>
     297:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB31_92>

0000000000000950 <LBB31_29>:
     298:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r4
     299:	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r3
     300:	b7 01 00 00 c0 00 00 00	r1 = 192
     301:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     302:	bf 63 00 00 00 00 00 00	r3 = r6
     303:	0f 13 00 00 00 00 00 00	r3 += r1
     304:	bf a1 00 00 00 00 00 00	r1 = r10
     305:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     306:	b7 02 00 00 08 00 00 00	r2 = 8
     307:	85 00 00 00 71 00 00 00	call 113
     308:	b7 01 00 00 b6 00 00 00	r1 = 182
     309:	bf 63 00 00 00 00 00 00	r3 = r6
     310:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     311:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     312:	bf a1 00 00 00 00 00 00	r1 = r10
     313:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     314:	b7 02 00 00 02 00 00 00	r2 = 2
     315:	85 00 00 00 71 00 00 00	call 113
     316:	b7 01 00 00 b4 00 00 00	r1 = 180
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     319:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     320:	bf a1 00 00 00 00 00 00	r1 = r10
     321:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     322:	b7 02 00 00 02 00 00 00	r2 = 2
     323:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     324:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     325:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     326:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB31_31>
     327:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000a40 <LBB31_31>:
;     return head + network_header;
     328:	57 06 00 00 ff ff 00 00	r6 &= 65535
     329:	0f 69 00 00 00 00 00 00	r9 += r6
     330:	bf a1 00 00 00 00 00 00	r1 = r10
     331:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     332:	b7 02 00 00 01 00 00 00	r2 = 1
     333:	bf 93 00 00 00 00 00 00	r3 = r9
     334:	85 00 00 00 04 00 00 00	call 4
     335:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     336:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     337:	57 02 00 00 f0 00 00 00	r2 &= 240
     338:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB31_33>
     339:	bf a1 00 00 00 00 00 00	r1 = r10
     340:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     341:	b7 02 00 00 01 00 00 00	r2 = 1
     342:	bf 93 00 00 00 00 00 00	r3 = r9
     343:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     344:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     345:	67 01 00 00 02 00 00 00	r1 <<= 2
     346:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000ad8 <LBB31_33>:
;     return l3_header + transport_size;
     347:	0f 19 00 00 00 00 00 00	r9 += r1
     348:	bf a6 00 00 00 00 00 00	r6 = r10
     349:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     350:	bf 61 00 00 00 00 00 00	r1 = r6
     351:	b7 02 00 00 08 00 00 00	r2 = 8
     352:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
     353:	bf 93 00 00 00 00 00 00	r3 = r9
     354:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     355:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     356:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     357:	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 88)
     358:	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 96)
     359:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB31_40>
     360:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     361:	07 02 00 00 e8 ff ff ff	r2 += -24
     362:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     363:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB31_40>
     364:	05 00 0c 00 00 00 00 00	goto +12 <LBB31_92>

0000000000000b68 <LBB31_45>:
;     if (proto != 0 && proto != l4_proto)
     365:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     366:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB31_54>
     367:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
;     if (proto != 0 && icmpid != 0) {
     368:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB31_54>
     369:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     370:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB31_54>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     371:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     372:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB31_50>
     373:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB31_54>

0000000000000bb0 <LBB31_50>:
;         if (icmpid != ev_icmpid)
     374:	57 01 00 00 ff ff 00 00	r1 &= 65535
     375:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
     376:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB31_54>

0000000000000bc8 <LBB31_92>:
;     return do_trace(ctx, skb, "__dev_queue_xmit");
     377:	b7 00 00 00 00 00 00 00	r0 = 0
     378:	95 00 00 00 00 00 00 00	exit

0000000000000bd8 <LBB31_52>:
     379:	b7 01 00 00 00 00 00 00	r1 = 0
     380:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     381:	bf 63 00 00 00 00 00 00	r3 = r6
     382:	0f 13 00 00 00 00 00 00	r3 += r1
     383:	bf a1 00 00 00 00 00 00	r1 = r10
     384:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     385:	b7 02 00 00 02 00 00 00	r2 = 2
     386:	85 00 00 00 71 00 00 00	call 113
     387:	b7 01 00 00 02 00 00 00	r1 = 2
     388:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     389:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     390:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     391:	bf a1 00 00 00 00 00 00	r1 = r10
     392:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     393:	b7 02 00 00 02 00 00 00	r2 = 2
     394:	bf 63 00 00 00 00 00 00	r3 = r6
     395:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     396:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     397:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     398:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB31_54>
     399:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     400:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB31_92>

0000000000000c88 <LBB31_54>:
;     event->flags |= SKBTRACER_EVENT_IF;
     401:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     402:	47 01 00 00 01 00 00 00	r1 |= 1
     403:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     404:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
;     ev->skb = (u64)skb;
     405:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     406:	85 00 00 00 05 00 00 00	call 5
     407:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     408:	b7 01 00 00 10 00 00 00	r1 = 16
     409:	bf 96 00 00 00 00 00 00	r6 = r9
     410:	0f 16 00 00 00 00 00 00	r6 += r1
     411:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     412:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     413:	b7 02 00 00 08 00 00 00	r2 = 8
     414:	bf 63 00 00 00 00 00 00	r3 = r6
     415:	85 00 00 00 71 00 00 00	call 113
     416:	b7 01 00 00 70 00 00 00	r1 = 112
     417:	bf 93 00 00 00 00 00 00	r3 = r9
     418:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     419:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     420:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     421:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     422:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     423:	b7 02 00 00 04 00 00 00	r2 = 4
     424:	85 00 00 00 71 00 00 00	call 113
     425:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     426:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     427:	85 00 00 00 08 00 00 00	call 8
     428:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     429:	85 00 00 00 0e 00 00 00	call 14
     430:	57 00 00 00 ff ff 00 00	r0 &= 65535
     431:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     432:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     433:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     434:	bf 91 00 00 00 00 00 00	r1 = r9
     435:	b7 02 00 00 08 00 00 00	r2 = 8
     436:	bf 63 00 00 00 00 00 00	r3 = r6
     437:	85 00 00 00 71 00 00 00	call 113
     438:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     439:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     440:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     441:	bf 91 00 00 00 00 00 00	r1 = r9
     442:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     443:	b7 02 00 00 08 00 00 00	r2 = 8
     444:	85 00 00 00 71 00 00 00	call 113
     445:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     446:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     447:	0f 13 00 00 00 00 00 00	r3 += r1
     448:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     449:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     450:	b7 02 00 00 04 00 00 00	r2 = 4
     451:	85 00 00 00 71 00 00 00	call 113
     452:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     453:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB31_57>
     454:	b7 01 00 00 18 00 00 00	r1 = 24
     455:	bf 93 00 00 00 00 00 00	r3 = r9
     456:	0f 13 00 00 00 00 00 00	r3 += r1
     457:	bf a1 00 00 00 00 00 00	r1 = r10
     458:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     459:	b7 02 00 00 08 00 00 00	r2 = 8
     460:	85 00 00 00 71 00 00 00	call 113
     461:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     462:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     463:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB31_57>
     464:	b7 01 00 00 30 00 00 00	r1 = 48
     465:	0f 13 00 00 00 00 00 00	r3 += r1
     466:	bf a1 00 00 00 00 00 00	r1 = r10
     467:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     468:	b7 02 00 00 08 00 00 00	r2 = 8
     469:	85 00 00 00 71 00 00 00	call 113
     470:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     471:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     472:	0f 13 00 00 00 00 00 00	r3 += r1
     473:	bf a1 00 00 00 00 00 00	r1 = r10
     474:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     475:	b7 02 00 00 04 00 00 00	r2 = 4
     476:	85 00 00 00 71 00 00 00	call 113
     477:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000ef0 <LBB31_57>:
;     pkt_info->netns = get_netns(skb);
     478:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     479:	b7 01 00 00 80 00 00 00	r1 = 128
     480:	bf 93 00 00 00 00 00 00	r3 = r9
     481:	0f 13 00 00 00 00 00 00	r3 += r1
     482:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     483:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     484:	bf a1 00 00 00 00 00 00	r1 = r10
     485:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     486:	b7 02 00 00 01 00 00 00	r2 = 1
     487:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     488:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     489:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     490:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     491:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     492:	b7 01 00 00 00 00 00 00	r1 = 0
     493:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     494:	0f 13 00 00 00 00 00 00	r3 += r1
;     pkt_info->ifname[0] = 0;
     495:	bf 71 00 00 00 00 00 00	r1 = r7
     496:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     497:	b7 02 00 00 10 00 00 00	r2 = 16
     498:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     499:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     500:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB31_59>
     501:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     502:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     503:	b7 01 00 00 69 00 00 00	r1 = 105
     504:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     505:	b7 01 00 00 6e 00 00 00	r1 = 110
     506:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000000fd8 <LBB31_59>:
     507:	b7 01 00 00 c0 00 00 00	r1 = 192
     508:	bf 93 00 00 00 00 00 00	r3 = r9
     509:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     510:	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r3
     511:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     512:	07 01 00 00 f8 ff ff ff	r1 += -8
     513:	b7 02 00 00 08 00 00 00	r2 = 8
     514:	85 00 00 00 71 00 00 00	call 113
     515:	b7 01 00 00 b6 00 00 00	r1 = 182
     516:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     517:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     518:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     519:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     520:	b7 02 00 00 02 00 00 00	r2 = 2
     521:	bf 93 00 00 00 00 00 00	r3 = r9
     522:	85 00 00 00 71 00 00 00	call 113
     523:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     524:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     525:	bf 71 00 00 00 00 00 00	r1 = r7
     526:	07 01 00 00 64 00 00 00	r1 += 100
     527:	b7 02 00 00 06 00 00 00	r2 = 6
     528:	bf 63 00 00 00 00 00 00	r3 = r6
     529:	85 00 00 00 04 00 00 00	call 4
     530:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     531:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	b7 02 00 00 08 00 00 00	r2 = 8
     533:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     534:	85 00 00 00 71 00 00 00	call 113
     535:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     536:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     537:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     538:	b7 02 00 00 02 00 00 00	r2 = 2
     539:	bf 93 00 00 00 00 00 00	r3 = r9
     540:	85 00 00 00 71 00 00 00	call 113
     541:	b7 01 00 00 b4 00 00 00	r1 = 180
     542:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
     543:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     544:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     547:	b7 02 00 00 02 00 00 00	r2 = 2
     548:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     549:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     550:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     551:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB31_61>
     552:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001148 <LBB31_61>:
;     return head + network_header;
     553:	57 09 00 00 ff ff 00 00	r9 &= 65535
     554:	0f 96 00 00 00 00 00 00	r6 += r9
     555:	bf a1 00 00 00 00 00 00	r1 = r10
     556:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     557:	b7 02 00 00 01 00 00 00	r2 = 1
     558:	bf 63 00 00 00 00 00 00	r3 = r6
     559:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     560:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     561:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     562:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB31_66>
     563:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB31_92>
     564:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     565:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     566:	b7 01 00 00 c0 00 00 00	r1 = 192
     567:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     568:	bf 93 00 00 00 00 00 00	r3 = r9
     569:	0f 13 00 00 00 00 00 00	r3 += r1
     570:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     572:	b7 02 00 00 08 00 00 00	r2 = 8
     573:	85 00 00 00 71 00 00 00	call 113
     574:	b7 01 00 00 b6 00 00 00	r1 = 182
     575:	bf 93 00 00 00 00 00 00	r3 = r9
     576:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     577:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     578:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     579:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     580:	b7 02 00 00 02 00 00 00	r2 = 2
     581:	85 00 00 00 71 00 00 00	call 113
     582:	b7 01 00 00 b4 00 00 00	r1 = 180
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     585:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     586:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     587:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     588:	b7 02 00 00 02 00 00 00	r2 = 2
     589:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     590:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     591:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     592:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB31_65>
     593:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001290 <LBB31_65>:
;     return head + network_header;
     594:	57 09 00 00 ff ff 00 00	r9 &= 65535
     595:	0f 96 00 00 00 00 00 00	r6 += r9
     596:	b7 01 00 00 0c 00 00 00	r1 = 12
     597:	bf 63 00 00 00 00 00 00	r3 = r6
     598:	0f 13 00 00 00 00 00 00	r3 += r1
     599:	bf a1 00 00 00 00 00 00	r1 = r10
     600:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     601:	b7 02 00 00 04 00 00 00	r2 = 4
     602:	85 00 00 00 71 00 00 00	call 113
     603:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     604:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     605:	b7 01 00 00 10 00 00 00	r1 = 16
     606:	bf 63 00 00 00 00 00 00	r3 = r6
     607:	0f 13 00 00 00 00 00 00	r3 += r1
     608:	bf a1 00 00 00 00 00 00	r1 = r10
     609:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     610:	b7 02 00 00 04 00 00 00	r2 = 4
     611:	85 00 00 00 71 00 00 00	call 113
     612:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     613:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     614:	b7 01 00 00 02 00 00 00	r1 = 2
     615:	bf 63 00 00 00 00 00 00	r3 = r6
     616:	0f 13 00 00 00 00 00 00	r3 += r1
     617:	bf a1 00 00 00 00 00 00	r1 = r10
     618:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     619:	b7 02 00 00 02 00 00 00	r2 = 2
     620:	85 00 00 00 71 00 00 00	call 113
     621:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     622:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     623:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     624:	b7 01 00 00 09 00 00 00	r1 = 9
     625:	05 00 38 00 00 00 00 00	goto +56 <LBB31_69>

0000000000001390 <LBB31_66>:
     626:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     627:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     628:	b7 01 00 00 c0 00 00 00	r1 = 192
     629:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     630:	bf 93 00 00 00 00 00 00	r3 = r9
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     634:	b7 02 00 00 08 00 00 00	r2 = 8
     635:	85 00 00 00 71 00 00 00	call 113
     636:	b7 01 00 00 b6 00 00 00	r1 = 182
     637:	bf 93 00 00 00 00 00 00	r3 = r9
     638:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     639:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     640:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     641:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     642:	b7 02 00 00 02 00 00 00	r2 = 2
     643:	85 00 00 00 71 00 00 00	call 113
     644:	b7 01 00 00 b4 00 00 00	r1 = 180
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     647:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     648:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     649:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     650:	b7 02 00 00 02 00 00 00	r2 = 2
     651:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     652:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     653:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     654:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB31_68>
     655:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001480 <LBB31_68>:
;     return head + network_header;
     656:	57 09 00 00 ff ff 00 00	r9 &= 65535
     657:	0f 96 00 00 00 00 00 00	r6 += r9
     658:	b7 01 00 00 08 00 00 00	r1 = 8
     659:	bf 63 00 00 00 00 00 00	r3 = r6
     660:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
     661:	bf 71 00 00 00 00 00 00	r1 = r7
     662:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     663:	b7 02 00 00 10 00 00 00	r2 = 16
     664:	85 00 00 00 04 00 00 00	call 4
     665:	b7 01 00 00 18 00 00 00	r1 = 24
     666:	bf 63 00 00 00 00 00 00	r3 = r6
     667:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     668:	bf 71 00 00 00 00 00 00	r1 = r7
     669:	07 01 00 00 80 00 00 00	r1 += 128
     670:	b7 02 00 00 10 00 00 00	r2 = 16
     671:	85 00 00 00 04 00 00 00	call 4
     672:	b7 01 00 00 04 00 00 00	r1 = 4
     673:	bf 63 00 00 00 00 00 00	r3 = r6
     674:	0f 13 00 00 00 00 00 00	r3 += r1
     675:	bf a1 00 00 00 00 00 00	r1 = r10
     676:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     677:	b7 02 00 00 02 00 00 00	r2 = 2
     678:	85 00 00 00 71 00 00 00	call 113
     679:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     680:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     681:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000001550 <LBB31_69>:
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
     684:	bf a1 00 00 00 00 00 00	r1 = r10
     685:	07 01 00 00 f8 ff ff ff	r1 += -8
     686:	b7 02 00 00 01 00 00 00	r2 = 1
     687:	85 00 00 00 71 00 00 00	call 113
     688:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     689:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     690:	bf a1 00 00 00 00 00 00	r1 = r10
     691:	07 01 00 00 f8 ff ff ff	r1 += -8
     692:	b7 02 00 00 01 00 00 00	r2 = 1
     693:	bf 63 00 00 00 00 00 00	r3 = r6
     694:	85 00 00 00 04 00 00 00	call 4
     695:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     696:	57 01 00 00 f0 00 00 00	r1 &= 240
     697:	77 01 00 00 04 00 00 00	r1 >>= 4
     698:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     699:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     700:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB31_72>
     701:	15 01 53 00 01 00 00 00	if r1 == 1 goto +83 <LBB31_84>
     702:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB31_74>
     703:	05 00 b9 fe 00 00 00 00	goto -327 <LBB31_92>

0000000000001600 <LBB31_74>:
     704:	b7 01 00 00 c0 00 00 00	r1 = 192
     705:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     706:	bf 93 00 00 00 00 00 00	r3 = r9
     707:	0f 13 00 00 00 00 00 00	r3 += r1
     708:	bf a1 00 00 00 00 00 00	r1 = r10
     709:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     710:	b7 02 00 00 08 00 00 00	r2 = 8
     711:	85 00 00 00 71 00 00 00	call 113
     712:	b7 01 00 00 b6 00 00 00	r1 = 182
     713:	bf 93 00 00 00 00 00 00	r3 = r9
     714:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     715:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     716:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     717:	bf a1 00 00 00 00 00 00	r1 = r10
     718:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     719:	b7 02 00 00 02 00 00 00	r2 = 2
     720:	85 00 00 00 71 00 00 00	call 113
     721:	b7 01 00 00 b4 00 00 00	r1 = 180
     722:	0f 19 00 00 00 00 00 00	r9 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     723:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     726:	b7 02 00 00 02 00 00 00	r2 = 2
     727:	bf 93 00 00 00 00 00 00	r3 = r9
     728:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     729:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     730:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     731:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB31_76>
     732:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000016e8 <LBB31_76>:
;     return head + network_header;
     733:	57 06 00 00 ff ff 00 00	r6 &= 65535
     734:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
     735:	0f 61 00 00 00 00 00 00	r1 += r6
     736:	bf 16 00 00 00 00 00 00	r6 = r1
     737:	bf a1 00 00 00 00 00 00	r1 = r10
     738:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     739:	b7 02 00 00 01 00 00 00	r2 = 1
     740:	bf 63 00 00 00 00 00 00	r3 = r6
     741:	85 00 00 00 04 00 00 00	call 4
     742:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     743:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     744:	57 02 00 00 f0 00 00 00	r2 &= 240
     745:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB31_78>
     746:	bf a1 00 00 00 00 00 00	r1 = r10
     747:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     748:	b7 02 00 00 01 00 00 00	r2 = 1
     749:	bf 63 00 00 00 00 00 00	r3 = r6
     750:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     751:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     752:	67 01 00 00 02 00 00 00	r1 <<= 2
     753:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001790 <LBB31_78>:
;     return l3_header + transport_size;
     754:	0f 16 00 00 00 00 00 00	r6 += r1
     755:	b7 01 00 00 00 00 00 00	r1 = 0
     756:	bf 63 00 00 00 00 00 00	r3 = r6
     757:	0f 13 00 00 00 00 00 00	r3 += r1
     758:	bf a1 00 00 00 00 00 00	r1 = r10
     759:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     760:	b7 02 00 00 02 00 00 00	r2 = 2
     761:	85 00 00 00 71 00 00 00	call 113
     762:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     763:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     764:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     765:	b7 01 00 00 02 00 00 00	r1 = 2
     766:	bf 63 00 00 00 00 00 00	r3 = r6
     767:	0f 13 00 00 00 00 00 00	r3 += r1
     768:	bf a1 00 00 00 00 00 00	r1 = r10
     769:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     770:	b7 02 00 00 02 00 00 00	r2 = 2
     771:	85 00 00 00 71 00 00 00	call 113
     772:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     773:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     774:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     775:	07 06 00 00 0c 00 00 00	r6 += 12
     776:	bf 71 00 00 00 00 00 00	r1 = r7
     777:	07 01 00 00 9c 00 00 00	r1 += 156
     778:	b7 02 00 00 02 00 00 00	r2 = 2
     779:	bf 63 00 00 00 00 00 00	r3 = r6
     780:	85 00 00 00 04 00 00 00	call 4
     781:	05 00 8a 00 00 00 00 00	goto +138 <LBB31_89>

0000000000001870 <LBB31_72>:
;     if (l4_proto == IPPROTO_TCP) {
     782:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB31_79>
     783:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB31_84>
     784:	05 00 68 fe 00 00 00 00	goto -408 <LBB31_92>

0000000000001888 <LBB31_84>:
     785:	b7 01 00 00 c0 00 00 00	r1 = 192
     786:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     787:	bf 63 00 00 00 00 00 00	r3 = r6
     788:	0f 13 00 00 00 00 00 00	r3 += r1
     789:	bf a1 00 00 00 00 00 00	r1 = r10
     790:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     791:	b7 02 00 00 08 00 00 00	r2 = 8
     792:	85 00 00 00 71 00 00 00	call 113
     793:	b7 01 00 00 b6 00 00 00	r1 = 182
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     796:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     797:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     798:	bf a1 00 00 00 00 00 00	r1 = r10
     799:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     800:	b7 02 00 00 02 00 00 00	r2 = 2
     801:	85 00 00 00 71 00 00 00	call 113
     802:	b7 01 00 00 b4 00 00 00	r1 = 180
     803:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     804:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     805:	bf a1 00 00 00 00 00 00	r1 = r10
     806:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     807:	b7 02 00 00 02 00 00 00	r2 = 2
     808:	bf 63 00 00 00 00 00 00	r3 = r6
     809:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     810:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     811:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     812:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB31_86>
     813:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001970 <LBB31_86>:
;     return head + network_header;
     814:	57 09 00 00 ff ff 00 00	r9 &= 65535
     815:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     816:	0f 96 00 00 00 00 00 00	r6 += r9
     817:	bf a1 00 00 00 00 00 00	r1 = r10
     818:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     819:	b7 02 00 00 01 00 00 00	r2 = 1
     820:	bf 63 00 00 00 00 00 00	r3 = r6
     821:	85 00 00 00 04 00 00 00	call 4
     822:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     823:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     824:	57 02 00 00 f0 00 00 00	r2 &= 240
     825:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB31_88>
     826:	bf a1 00 00 00 00 00 00	r1 = r10
     827:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     828:	b7 02 00 00 01 00 00 00	r2 = 1
     829:	bf 63 00 00 00 00 00 00	r3 = r6
     830:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     831:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     832:	67 01 00 00 02 00 00 00	r1 <<= 2
     833:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a10 <LBB31_88>:
;     return l3_header + transport_size;
     834:	0f 16 00 00 00 00 00 00	r6 += r1
     835:	bf a9 00 00 00 00 00 00	r9 = r10
     836:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     837:	bf 91 00 00 00 00 00 00	r1 = r9
     838:	b7 02 00 00 08 00 00 00	r2 = 8
     839:	bf 63 00 00 00 00 00 00	r3 = r6
     840:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     841:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     842:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     843:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     844:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     845:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     846:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     847:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     848:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     849:	05 00 46 00 00 00 00 00	goto +70 <LBB31_89>

0000000000001a90 <LBB31_79>:
     850:	b7 01 00 00 c0 00 00 00	r1 = 192
     851:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     852:	bf 63 00 00 00 00 00 00	r3 = r6
     853:	0f 13 00 00 00 00 00 00	r3 += r1
     854:	bf a1 00 00 00 00 00 00	r1 = r10
     855:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     856:	b7 02 00 00 08 00 00 00	r2 = 8
     857:	85 00 00 00 71 00 00 00	call 113
     858:	b7 01 00 00 b6 00 00 00	r1 = 182
     859:	bf 63 00 00 00 00 00 00	r3 = r6
     860:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     861:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     862:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     863:	bf a1 00 00 00 00 00 00	r1 = r10
     864:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     865:	b7 02 00 00 02 00 00 00	r2 = 2
     866:	85 00 00 00 71 00 00 00	call 113
     867:	b7 01 00 00 b4 00 00 00	r1 = 180
     868:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     869:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     870:	bf a1 00 00 00 00 00 00	r1 = r10
     871:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     872:	b7 02 00 00 02 00 00 00	r2 = 2
     873:	bf 63 00 00 00 00 00 00	r3 = r6
     874:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     875:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     876:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     877:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB31_81>
     878:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001b78 <LBB31_81>:
;     return head + network_header;
     879:	57 09 00 00 ff ff 00 00	r9 &= 65535
     880:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     881:	0f 96 00 00 00 00 00 00	r6 += r9
     882:	bf a1 00 00 00 00 00 00	r1 = r10
     883:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     884:	b7 02 00 00 01 00 00 00	r2 = 1
     885:	bf 63 00 00 00 00 00 00	r3 = r6
     886:	85 00 00 00 04 00 00 00	call 4
     887:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     888:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     889:	57 02 00 00 f0 00 00 00	r2 &= 240
     890:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB31_83>
     891:	bf a1 00 00 00 00 00 00	r1 = r10
     892:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     893:	b7 02 00 00 01 00 00 00	r2 = 1
     894:	bf 63 00 00 00 00 00 00	r3 = r6
     895:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     896:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     897:	67 01 00 00 02 00 00 00	r1 <<= 2
     898:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c18 <LBB31_83>:
;     return l3_header + transport_size;
     899:	0f 16 00 00 00 00 00 00	r6 += r1
     900:	b7 01 00 00 00 00 00 00	r1 = 0
     901:	bf 63 00 00 00 00 00 00	r3 = r6
     902:	0f 13 00 00 00 00 00 00	r3 += r1
     903:	bf a1 00 00 00 00 00 00	r1 = r10
     904:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     905:	b7 02 00 00 02 00 00 00	r2 = 2
     906:	85 00 00 00 71 00 00 00	call 113
     907:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     908:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     909:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     910:	b7 01 00 00 02 00 00 00	r1 = 2
     911:	0f 16 00 00 00 00 00 00	r6 += r1
     912:	bf a1 00 00 00 00 00 00	r1 = r10
     913:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     914:	b7 02 00 00 02 00 00 00	r2 = 2
     915:	bf 63 00 00 00 00 00 00	r3 = r6
     916:	85 00 00 00 71 00 00 00	call 113
     917:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     918:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     919:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001cc0 <LBB31_89>:
     920:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
;     return cfg->callstack == 0;
     921:	71 81 11 00 00 00 00 00	r1 = *(u8 *)(r8 + 17)
;     if (!filter_callstack(cfg))
     922:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB31_91>
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
     923:	bf 61 00 00 00 00 00 00	r1 = r6
     924:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     926:	b7 03 00 00 00 00 00 00	r3 = 0
     927:	85 00 00 00 1b 00 00 00	call 27
     928:	63 07 30 00 00 00 00 00	*(u32 *)(r7 + 48) = r0

0000000000001d08 <LBB31_91>:
     929:	b7 01 00 00 74 00 00 00	r1 = 116
;     for (j = 10; j < 64; j += 10) CPY(j);
     930:	73 17 0f 00 00 00 00 00	*(u8 *)(r7 + 15) = r1
     931:	b7 01 00 00 69 00 00 00	r1 = 105
     932:	73 17 0e 00 00 00 00 00	*(u8 *)(r7 + 14) = r1
     933:	b7 01 00 00 6d 00 00 00	r1 = 109
     934:	73 17 0d 00 00 00 00 00	*(u8 *)(r7 + 13) = r1
     935:	b7 01 00 00 78 00 00 00	r1 = 120
     936:	73 17 0c 00 00 00 00 00	*(u8 *)(r7 + 12) = r1
     937:	b7 01 00 00 75 00 00 00	r1 = 117
     938:	73 17 09 00 00 00 00 00	*(u8 *)(r7 + 9) = r1
     939:	73 17 07 00 00 00 00 00	*(u8 *)(r7 + 7) = r1
     940:	b7 01 00 00 71 00 00 00	r1 = 113
     941:	73 17 06 00 00 00 00 00	*(u8 *)(r7 + 6) = r1
     942:	b7 01 00 00 76 00 00 00	r1 = 118
     943:	73 17 04 00 00 00 00 00	*(u8 *)(r7 + 4) = r1
     944:	b7 01 00 00 65 00 00 00	r1 = 101
     945:	73 17 0a 00 00 00 00 00	*(u8 *)(r7 + 10) = r1
     946:	73 17 08 00 00 00 00 00	*(u8 *)(r7 + 8) = r1
     947:	73 17 03 00 00 00 00 00	*(u8 *)(r7 + 3) = r1
     948:	b7 01 00 00 64 00 00 00	r1 = 100
     949:	73 17 02 00 00 00 00 00	*(u8 *)(r7 + 2) = r1
     950:	b7 01 00 00 5f 00 00 00	r1 = 95
     951:	73 17 0b 00 00 00 00 00	*(u8 *)(r7 + 11) = r1
     952:	73 17 05 00 00 00 00 00	*(u8 *)(r7 + 5) = r1
     953:	73 17 01 00 00 00 00 00	*(u8 *)(r7 + 1) = r1
     954:	73 17 00 00 00 00 00 00	*(u8 *)(r7 + 0) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     955:	bf 61 00 00 00 00 00 00	r1 = r6
     956:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     958:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     960:	bf 74 00 00 00 00 00 00	r4 = r7
     961:	b7 05 00 00 e0 00 00 00	r5 = 224
     962:	85 00 00 00 19 00 00 00	call 25
     963:	05 00 b5 fd 00 00 00 00	goto -587 <LBB31_92>

Disassembly of section kprobe/br_handle_frame_finish:

0000000000000000 <k_br_handle_ff>:
; int k_br_handle_ff(struct pt_regs *ctx) {
       0:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM3(ctx);
       1:	79 11 60 00 00 00 00 00	r1 = *(u64 *)(r1 + 96)
       2:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       3:	b7 06 00 00 00 00 00 00	r6 = 0
;     GET_CFG();
       4:	63 6a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r6
       5:	bf a2 00 00 00 00 00 00	r2 = r10
       6:	07 02 00 00 e4 ff ff ff	r2 += -28
;     GET_CFG();
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	85 00 00 00 01 00 00 00	call 1
      10:	bf 08 00 00 00 00 00 00	r8 = r0
      11:	15 08 6d 01 00 00 00 00	if r8 == 0 goto +365 <LBB32_92>
      12:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
      13:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      14:	63 18 08 00 00 00 00 00	*(u32 *)(r8 + 8) = r1
;     u32 ev_buff_id = 0;
      15:	63 6a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r6
      16:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      17:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      18:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      20:	85 00 00 00 01 00 00 00	call 1
      21:	bf 07 00 00 00 00 00 00	r7 = r0
;     if (!ev) return NULL;
      22:	55 07 01 00 00 00 00 00	if r7 != 0 goto +1 <LBB32_3>
      23:	05 00 61 01 00 00 00 00	goto +353 <LBB32_92>

00000000000000c0 <LBB32_3>:
      24:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      25:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      26:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      27:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      28:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      29:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      30:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      31:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      32:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      33:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      34:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      35:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      36:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      37:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      38:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      39:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      40:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      41:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      42:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      43:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      44:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      45:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      46:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      47:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      48:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      49:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      50:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      51:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      52:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      53:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      54:	61 81 04 00 00 00 00 00	r1 = *(u32 *)(r8 + 4)
      55:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB32_5>
      56:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      57:	5d 01 3f 01 00 00 00 00	if r1 != r0 goto +319 <LBB32_92>

00000000000001d0 <LBB32_5>:
      58:	b7 01 00 00 10 00 00 00	r1 = 16
      59:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
      60:	bf 93 00 00 00 00 00 00	r3 = r9
      61:	0f 13 00 00 00 00 00 00	r3 += r1
      62:	bf a6 00 00 00 00 00 00	r6 = r10
      63:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      64:	bf 61 00 00 00 00 00 00	r1 = r6
      65:	b7 02 00 00 08 00 00 00	r2 = 8
      66:	85 00 00 00 71 00 00 00	call 113
      67:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      68:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      69:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      70:	bf 61 00 00 00 00 00 00	r1 = r6
      71:	b7 02 00 00 08 00 00 00	r2 = 8
      72:	85 00 00 00 71 00 00 00	call 113
      73:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      74:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      75:	0f 13 00 00 00 00 00 00	r3 += r1
      76:	bf a1 00 00 00 00 00 00	r1 = r10
      77:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      78:	b7 02 00 00 04 00 00 00	r2 = 4
      79:	85 00 00 00 71 00 00 00	call 113
      80:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      81:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB32_8>
      82:	b7 01 00 00 18 00 00 00	r1 = 24
      83:	bf 93 00 00 00 00 00 00	r3 = r9
      84:	0f 13 00 00 00 00 00 00	r3 += r1
      85:	bf a1 00 00 00 00 00 00	r1 = r10
      86:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
      87:	b7 02 00 00 08 00 00 00	r2 = 8
      88:	85 00 00 00 71 00 00 00	call 113
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
      90:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB32_11>
      91:	b7 01 00 00 30 00 00 00	r1 = 48
      92:	0f 13 00 00 00 00 00 00	r3 += r1
      93:	bf a1 00 00 00 00 00 00	r1 = r10
      94:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      95:	b7 02 00 00 08 00 00 00	r2 = 8
      96:	85 00 00 00 71 00 00 00	call 113
      97:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      98:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     102:	b7 02 00 00 04 00 00 00	r2 = 4
     103:	85 00 00 00 71 00 00 00	call 113
     104:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000348 <LBB32_8>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     105:	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0)
     106:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB32_11>
     107:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB32_11>
     108:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB32_92>

0000000000000368 <LBB32_11>:
;     u16 icmpid = cfg->icmpid;
     109:	69 81 0e 00 00 00 00 00	r1 = *(u16 *)(r8 + 14)
;     u16 port = cfg->port;
     110:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     111:	69 81 0c 00 00 00 00 00	r1 = *(u16 *)(r8 + 12)
;     u8 proto = cfg->proto;
     112:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     113:	71 81 12 00 00 00 00 00	r1 = *(u8 *)(r8 + 18)
;     u32 addr = cfg->ip;
     114:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     115:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
     116:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     117:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     118:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     119:	b7 01 00 00 c0 00 00 00	r1 = 192
     120:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     121:	bf 93 00 00 00 00 00 00	r3 = r9
     122:	0f 13 00 00 00 00 00 00	r3 += r1
     123:	bf a1 00 00 00 00 00 00	r1 = r10
     124:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     125:	b7 02 00 00 08 00 00 00	r2 = 8
     126:	85 00 00 00 71 00 00 00	call 113
     127:	b7 01 00 00 b6 00 00 00	r1 = 182
     128:	bf 93 00 00 00 00 00 00	r3 = r9
     129:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     130:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     131:	bf a1 00 00 00 00 00 00	r1 = r10
     132:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     133:	b7 02 00 00 02 00 00 00	r2 = 2
     134:	85 00 00 00 71 00 00 00	call 113
     135:	b7 01 00 00 b4 00 00 00	r1 = 180
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     138:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     139:	bf a1 00 00 00 00 00 00	r1 = r10
     140:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     141:	b7 02 00 00 02 00 00 00	r2 = 2
     142:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     143:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     144:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     145:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB32_13>
     146:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000498 <LBB32_13>:
;     return head + network_header;
     147:	57 09 00 00 ff ff 00 00	r9 &= 65535
     148:	0f 96 00 00 00 00 00 00	r6 += r9
     149:	bf a1 00 00 00 00 00 00	r1 = r10
     150:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     151:	b7 02 00 00 01 00 00 00	r2 = 1
     152:	bf 63 00 00 00 00 00 00	r3 = r6
     153:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     154:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     155:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     156:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB32_20>
     157:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB32_92>
;         if (addr != 0) {
     158:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     159:	bf 19 00 00 00 00 00 00	r9 = r1
     160:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB32_18>
     161:	b7 01 00 00 0c 00 00 00	r1 = 12
     162:	bf 63 00 00 00 00 00 00	r3 = r6
     163:	0f 13 00 00 00 00 00 00	r3 += r1
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     166:	b7 02 00 00 04 00 00 00	r2 = 4
     167:	85 00 00 00 71 00 00 00	call 113
     168:	b7 01 00 00 10 00 00 00	r1 = 16
     169:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     170:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     171:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     172:	bf a1 00 00 00 00 00 00	r1 = r10
     173:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     174:	b7 02 00 00 04 00 00 00	r2 = 4
     175:	bf 63 00 00 00 00 00 00	r3 = r6
     176:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     177:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     178:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB32_54>
     179:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     180:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     181:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB32_92>
     182:	05 00 da 00 00 00 00 00	goto +218 <LBB32_54>

00000000000005b8 <LBB32_20>:
     183:	b7 01 00 00 06 00 00 00	r1 = 6
     184:	0f 16 00 00 00 00 00 00	r6 += r1
     185:	bf a1 00 00 00 00 00 00	r1 = r10
     186:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     187:	b7 02 00 00 01 00 00 00	r2 = 1
     188:	bf 63 00 00 00 00 00 00	r3 = r6
     189:	85 00 00 00 04 00 00 00	call 4
     190:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     191:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     192:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     193:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB32_22>
     194:	b7 04 00 00 80 00 00 00	r4 = 128
     195:	b7 03 00 00 81 00 00 00	r3 = 129
     196:	b7 01 00 00 3a 00 00 00	r1 = 58
     197:	05 00 0d 00 00 00 00 00	goto +13 <LBB32_22>

0000000000000630 <LBB32_18>:
     198:	b7 01 00 00 09 00 00 00	r1 = 9
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     208:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB32_22>
     209:	b7 04 00 00 08 00 00 00	r4 = 8
     210:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000698 <LBB32_22>:
;     if (proto != 0 && proto != l4_proto)
     211:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     212:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB32_24>
     213:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB32_92>

00000000000006b0 <LBB32_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     214:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB32_27>
     215:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB32_29>
     216:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB32_35>
     217:	05 00 9f 00 00 00 00 00	goto +159 <LBB32_92>

00000000000006d0 <LBB32_35>:
     218:	b7 01 00 00 c0 00 00 00	r1 = 192
     219:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     220:	bf 63 00 00 00 00 00 00	r3 = r6
     221:	0f 13 00 00 00 00 00 00	r3 += r1
     222:	bf a1 00 00 00 00 00 00	r1 = r10
     223:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     224:	b7 02 00 00 08 00 00 00	r2 = 8
     225:	85 00 00 00 71 00 00 00	call 113
     226:	b7 01 00 00 b6 00 00 00	r1 = 182
     227:	bf 63 00 00 00 00 00 00	r3 = r6
     228:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     229:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     230:	bf a1 00 00 00 00 00 00	r1 = r10
     231:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     232:	b7 02 00 00 02 00 00 00	r2 = 2
     233:	85 00 00 00 71 00 00 00	call 113
     234:	b7 01 00 00 b4 00 00 00	r1 = 180
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     237:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     238:	bf a1 00 00 00 00 00 00	r1 = r10
     239:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     240:	b7 02 00 00 02 00 00 00	r2 = 2
     241:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     242:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     243:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     244:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB32_37>
     245:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000007b0 <LBB32_37>:
;     return head + network_header;
     246:	57 06 00 00 ff ff 00 00	r6 &= 65535
     247:	0f 69 00 00 00 00 00 00	r9 += r6
     248:	bf a1 00 00 00 00 00 00	r1 = r10
     249:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     250:	b7 02 00 00 01 00 00 00	r2 = 1
     251:	bf 93 00 00 00 00 00 00	r3 = r9
     252:	85 00 00 00 04 00 00 00	call 4
     253:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     254:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     255:	57 02 00 00 f0 00 00 00	r2 &= 240
     256:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB32_39>
     257:	bf a1 00 00 00 00 00 00	r1 = r10
     258:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     259:	b7 02 00 00 01 00 00 00	r2 = 1
     260:	bf 93 00 00 00 00 00 00	r3 = r9
     261:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     262:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     263:	67 01 00 00 02 00 00 00	r1 <<= 2
     264:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000848 <LBB32_39>:
;     return l3_header + transport_size;
     265:	0f 19 00 00 00 00 00 00	r9 += r1
     266:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9

0000000000000858 <LBB32_40>:
     267:	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 72)
;     if (port != 0) {
     268:	bf 92 00 00 00 00 00 00	r2 = r9
     269:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB32_45>
;         if (l4_proto == IPPROTO_TCP) {
     270:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     271:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB32_52>
     272:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB32_45>
     273:	b7 01 00 00 00 00 00 00	r1 = 0
     274:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     275:	bf 63 00 00 00 00 00 00	r3 = r6
     276:	0f 13 00 00 00 00 00 00	r3 += r1
     277:	bf a1 00 00 00 00 00 00	r1 = r10
     278:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     279:	b7 02 00 00 02 00 00 00	r2 = 2
     280:	85 00 00 00 71 00 00 00	call 113
     281:	b7 01 00 00 02 00 00 00	r1 = 2
     282:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     283:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     284:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     285:	bf a1 00 00 00 00 00 00	r1 = r10
     286:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     287:	b7 02 00 00 02 00 00 00	r2 = 2
     288:	bf 63 00 00 00 00 00 00	r3 = r6
     289:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     290:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     291:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     292:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB32_54>
     293:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     294:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB32_92>
     295:	05 00 69 00 00 00 00 00	goto +105 <LBB32_54>

0000000000000940 <LBB32_27>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     296:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB32_35>
     297:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB32_92>

0000000000000950 <LBB32_29>:
     298:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r4
     299:	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r3
     300:	b7 01 00 00 c0 00 00 00	r1 = 192
     301:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     302:	bf 63 00 00 00 00 00 00	r3 = r6
     303:	0f 13 00 00 00 00 00 00	r3 += r1
     304:	bf a1 00 00 00 00 00 00	r1 = r10
     305:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     306:	b7 02 00 00 08 00 00 00	r2 = 8
     307:	85 00 00 00 71 00 00 00	call 113
     308:	b7 01 00 00 b6 00 00 00	r1 = 182
     309:	bf 63 00 00 00 00 00 00	r3 = r6
     310:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     311:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     312:	bf a1 00 00 00 00 00 00	r1 = r10
     313:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     314:	b7 02 00 00 02 00 00 00	r2 = 2
     315:	85 00 00 00 71 00 00 00	call 113
     316:	b7 01 00 00 b4 00 00 00	r1 = 180
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     319:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     320:	bf a1 00 00 00 00 00 00	r1 = r10
     321:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     322:	b7 02 00 00 02 00 00 00	r2 = 2
     323:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     324:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     325:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     326:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB32_31>
     327:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000a40 <LBB32_31>:
;     return head + network_header;
     328:	57 06 00 00 ff ff 00 00	r6 &= 65535
     329:	0f 69 00 00 00 00 00 00	r9 += r6
     330:	bf a1 00 00 00 00 00 00	r1 = r10
     331:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     332:	b7 02 00 00 01 00 00 00	r2 = 1
     333:	bf 93 00 00 00 00 00 00	r3 = r9
     334:	85 00 00 00 04 00 00 00	call 4
     335:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     336:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     337:	57 02 00 00 f0 00 00 00	r2 &= 240
     338:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB32_33>
     339:	bf a1 00 00 00 00 00 00	r1 = r10
     340:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     341:	b7 02 00 00 01 00 00 00	r2 = 1
     342:	bf 93 00 00 00 00 00 00	r3 = r9
     343:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     344:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     345:	67 01 00 00 02 00 00 00	r1 <<= 2
     346:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000ad8 <LBB32_33>:
;     return l3_header + transport_size;
     347:	0f 19 00 00 00 00 00 00	r9 += r1
     348:	bf a6 00 00 00 00 00 00	r6 = r10
     349:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     350:	bf 61 00 00 00 00 00 00	r1 = r6
     351:	b7 02 00 00 08 00 00 00	r2 = 8
     352:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
     353:	bf 93 00 00 00 00 00 00	r3 = r9
     354:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     355:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     356:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     357:	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 88)
     358:	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 96)
     359:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB32_40>
     360:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     361:	07 02 00 00 e8 ff ff ff	r2 += -24
     362:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     363:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB32_40>
     364:	05 00 0c 00 00 00 00 00	goto +12 <LBB32_92>

0000000000000b68 <LBB32_45>:
;     if (proto != 0 && proto != l4_proto)
     365:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     366:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB32_54>
     367:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
;     if (proto != 0 && icmpid != 0) {
     368:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB32_54>
     369:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     370:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB32_54>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     371:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     372:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB32_50>
     373:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB32_54>

0000000000000bb0 <LBB32_50>:
;         if (icmpid != ev_icmpid)
     374:	57 01 00 00 ff ff 00 00	r1 &= 65535
     375:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
     376:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB32_54>

0000000000000bc8 <LBB32_92>:
;     return do_trace(ctx, skb, "br_handle_frame_finish");
     377:	b7 00 00 00 00 00 00 00	r0 = 0
     378:	95 00 00 00 00 00 00 00	exit

0000000000000bd8 <LBB32_52>:
     379:	b7 01 00 00 00 00 00 00	r1 = 0
     380:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     381:	bf 63 00 00 00 00 00 00	r3 = r6
     382:	0f 13 00 00 00 00 00 00	r3 += r1
     383:	bf a1 00 00 00 00 00 00	r1 = r10
     384:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     385:	b7 02 00 00 02 00 00 00	r2 = 2
     386:	85 00 00 00 71 00 00 00	call 113
     387:	b7 01 00 00 02 00 00 00	r1 = 2
     388:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     389:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     390:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     391:	bf a1 00 00 00 00 00 00	r1 = r10
     392:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     393:	b7 02 00 00 02 00 00 00	r2 = 2
     394:	bf 63 00 00 00 00 00 00	r3 = r6
     395:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     396:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     397:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     398:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB32_54>
     399:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     400:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB32_92>

0000000000000c88 <LBB32_54>:
;     event->flags |= SKBTRACER_EVENT_IF;
     401:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     402:	47 01 00 00 01 00 00 00	r1 |= 1
     403:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     404:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
;     ev->skb = (u64)skb;
     405:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     406:	85 00 00 00 05 00 00 00	call 5
     407:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     408:	b7 01 00 00 10 00 00 00	r1 = 16
     409:	bf 96 00 00 00 00 00 00	r6 = r9
     410:	0f 16 00 00 00 00 00 00	r6 += r1
     411:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     412:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     413:	b7 02 00 00 08 00 00 00	r2 = 8
     414:	bf 63 00 00 00 00 00 00	r3 = r6
     415:	85 00 00 00 71 00 00 00	call 113
     416:	b7 01 00 00 70 00 00 00	r1 = 112
     417:	bf 93 00 00 00 00 00 00	r3 = r9
     418:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     419:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     420:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     421:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     422:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     423:	b7 02 00 00 04 00 00 00	r2 = 4
     424:	85 00 00 00 71 00 00 00	call 113
     425:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     426:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     427:	85 00 00 00 08 00 00 00	call 8
     428:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     429:	85 00 00 00 0e 00 00 00	call 14
     430:	57 00 00 00 ff ff 00 00	r0 &= 65535
     431:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     432:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     433:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     434:	bf 91 00 00 00 00 00 00	r1 = r9
     435:	b7 02 00 00 08 00 00 00	r2 = 8
     436:	bf 63 00 00 00 00 00 00	r3 = r6
     437:	85 00 00 00 71 00 00 00	call 113
     438:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     439:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     440:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     441:	bf 91 00 00 00 00 00 00	r1 = r9
     442:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     443:	b7 02 00 00 08 00 00 00	r2 = 8
     444:	85 00 00 00 71 00 00 00	call 113
     445:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     446:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     447:	0f 13 00 00 00 00 00 00	r3 += r1
     448:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     449:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     450:	b7 02 00 00 04 00 00 00	r2 = 4
     451:	85 00 00 00 71 00 00 00	call 113
     452:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     453:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB32_57>
     454:	b7 01 00 00 18 00 00 00	r1 = 24
     455:	bf 93 00 00 00 00 00 00	r3 = r9
     456:	0f 13 00 00 00 00 00 00	r3 += r1
     457:	bf a1 00 00 00 00 00 00	r1 = r10
     458:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     459:	b7 02 00 00 08 00 00 00	r2 = 8
     460:	85 00 00 00 71 00 00 00	call 113
     461:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     462:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     463:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB32_57>
     464:	b7 01 00 00 30 00 00 00	r1 = 48
     465:	0f 13 00 00 00 00 00 00	r3 += r1
     466:	bf a1 00 00 00 00 00 00	r1 = r10
     467:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     468:	b7 02 00 00 08 00 00 00	r2 = 8
     469:	85 00 00 00 71 00 00 00	call 113
     470:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     471:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     472:	0f 13 00 00 00 00 00 00	r3 += r1
     473:	bf a1 00 00 00 00 00 00	r1 = r10
     474:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     475:	b7 02 00 00 04 00 00 00	r2 = 4
     476:	85 00 00 00 71 00 00 00	call 113
     477:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000ef0 <LBB32_57>:
;     pkt_info->netns = get_netns(skb);
     478:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     479:	b7 01 00 00 80 00 00 00	r1 = 128
     480:	bf 93 00 00 00 00 00 00	r3 = r9
     481:	0f 13 00 00 00 00 00 00	r3 += r1
     482:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     483:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     484:	bf a1 00 00 00 00 00 00	r1 = r10
     485:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     486:	b7 02 00 00 01 00 00 00	r2 = 1
     487:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     488:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     489:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     490:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     491:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     492:	b7 01 00 00 00 00 00 00	r1 = 0
     493:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     494:	0f 13 00 00 00 00 00 00	r3 += r1
;     pkt_info->ifname[0] = 0;
     495:	bf 71 00 00 00 00 00 00	r1 = r7
     496:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     497:	b7 02 00 00 10 00 00 00	r2 = 16
     498:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     499:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     500:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB32_59>
     501:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     502:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     503:	b7 01 00 00 69 00 00 00	r1 = 105
     504:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     505:	b7 01 00 00 6e 00 00 00	r1 = 110
     506:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000000fd8 <LBB32_59>:
     507:	b7 01 00 00 c0 00 00 00	r1 = 192
     508:	bf 93 00 00 00 00 00 00	r3 = r9
     509:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     510:	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r3
     511:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     512:	07 01 00 00 f8 ff ff ff	r1 += -8
     513:	b7 02 00 00 08 00 00 00	r2 = 8
     514:	85 00 00 00 71 00 00 00	call 113
     515:	b7 01 00 00 b6 00 00 00	r1 = 182
     516:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     517:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     518:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     519:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     520:	b7 02 00 00 02 00 00 00	r2 = 2
     521:	bf 93 00 00 00 00 00 00	r3 = r9
     522:	85 00 00 00 71 00 00 00	call 113
     523:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     524:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     525:	bf 71 00 00 00 00 00 00	r1 = r7
     526:	07 01 00 00 64 00 00 00	r1 += 100
     527:	b7 02 00 00 06 00 00 00	r2 = 6
     528:	bf 63 00 00 00 00 00 00	r3 = r6
     529:	85 00 00 00 04 00 00 00	call 4
     530:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     531:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	b7 02 00 00 08 00 00 00	r2 = 8
     533:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     534:	85 00 00 00 71 00 00 00	call 113
     535:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     536:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     537:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     538:	b7 02 00 00 02 00 00 00	r2 = 2
     539:	bf 93 00 00 00 00 00 00	r3 = r9
     540:	85 00 00 00 71 00 00 00	call 113
     541:	b7 01 00 00 b4 00 00 00	r1 = 180
     542:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
     543:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     544:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     547:	b7 02 00 00 02 00 00 00	r2 = 2
     548:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     549:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     550:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     551:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB32_61>
     552:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001148 <LBB32_61>:
;     return head + network_header;
     553:	57 09 00 00 ff ff 00 00	r9 &= 65535
     554:	0f 96 00 00 00 00 00 00	r6 += r9
     555:	bf a1 00 00 00 00 00 00	r1 = r10
     556:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     557:	b7 02 00 00 01 00 00 00	r2 = 1
     558:	bf 63 00 00 00 00 00 00	r3 = r6
     559:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     560:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     561:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     562:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB32_66>
     563:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB32_92>
     564:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     565:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     566:	b7 01 00 00 c0 00 00 00	r1 = 192
     567:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     568:	bf 93 00 00 00 00 00 00	r3 = r9
     569:	0f 13 00 00 00 00 00 00	r3 += r1
     570:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     572:	b7 02 00 00 08 00 00 00	r2 = 8
     573:	85 00 00 00 71 00 00 00	call 113
     574:	b7 01 00 00 b6 00 00 00	r1 = 182
     575:	bf 93 00 00 00 00 00 00	r3 = r9
     576:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     577:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     578:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     579:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     580:	b7 02 00 00 02 00 00 00	r2 = 2
     581:	85 00 00 00 71 00 00 00	call 113
     582:	b7 01 00 00 b4 00 00 00	r1 = 180
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     585:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     586:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     587:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     588:	b7 02 00 00 02 00 00 00	r2 = 2
     589:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     590:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     591:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     592:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB32_65>
     593:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001290 <LBB32_65>:
;     return head + network_header;
     594:	57 09 00 00 ff ff 00 00	r9 &= 65535
     595:	0f 96 00 00 00 00 00 00	r6 += r9
     596:	b7 01 00 00 0c 00 00 00	r1 = 12
     597:	bf 63 00 00 00 00 00 00	r3 = r6
     598:	0f 13 00 00 00 00 00 00	r3 += r1
     599:	bf a1 00 00 00 00 00 00	r1 = r10
     600:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     601:	b7 02 00 00 04 00 00 00	r2 = 4
     602:	85 00 00 00 71 00 00 00	call 113
     603:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     604:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     605:	b7 01 00 00 10 00 00 00	r1 = 16
     606:	bf 63 00 00 00 00 00 00	r3 = r6
     607:	0f 13 00 00 00 00 00 00	r3 += r1
     608:	bf a1 00 00 00 00 00 00	r1 = r10
     609:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     610:	b7 02 00 00 04 00 00 00	r2 = 4
     611:	85 00 00 00 71 00 00 00	call 113
     612:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     613:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     614:	b7 01 00 00 02 00 00 00	r1 = 2
     615:	bf 63 00 00 00 00 00 00	r3 = r6
     616:	0f 13 00 00 00 00 00 00	r3 += r1
     617:	bf a1 00 00 00 00 00 00	r1 = r10
     618:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     619:	b7 02 00 00 02 00 00 00	r2 = 2
     620:	85 00 00 00 71 00 00 00	call 113
     621:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     622:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     623:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     624:	b7 01 00 00 09 00 00 00	r1 = 9
     625:	05 00 38 00 00 00 00 00	goto +56 <LBB32_69>

0000000000001390 <LBB32_66>:
     626:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     627:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     628:	b7 01 00 00 c0 00 00 00	r1 = 192
     629:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     630:	bf 93 00 00 00 00 00 00	r3 = r9
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     634:	b7 02 00 00 08 00 00 00	r2 = 8
     635:	85 00 00 00 71 00 00 00	call 113
     636:	b7 01 00 00 b6 00 00 00	r1 = 182
     637:	bf 93 00 00 00 00 00 00	r3 = r9
     638:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     639:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     640:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     641:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     642:	b7 02 00 00 02 00 00 00	r2 = 2
     643:	85 00 00 00 71 00 00 00	call 113
     644:	b7 01 00 00 b4 00 00 00	r1 = 180
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     647:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     648:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     649:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     650:	b7 02 00 00 02 00 00 00	r2 = 2
     651:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     652:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     653:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     654:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB32_68>
     655:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001480 <LBB32_68>:
;     return head + network_header;
     656:	57 09 00 00 ff ff 00 00	r9 &= 65535
     657:	0f 96 00 00 00 00 00 00	r6 += r9
     658:	b7 01 00 00 08 00 00 00	r1 = 8
     659:	bf 63 00 00 00 00 00 00	r3 = r6
     660:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
     661:	bf 71 00 00 00 00 00 00	r1 = r7
     662:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     663:	b7 02 00 00 10 00 00 00	r2 = 16
     664:	85 00 00 00 04 00 00 00	call 4
     665:	b7 01 00 00 18 00 00 00	r1 = 24
     666:	bf 63 00 00 00 00 00 00	r3 = r6
     667:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     668:	bf 71 00 00 00 00 00 00	r1 = r7
     669:	07 01 00 00 80 00 00 00	r1 += 128
     670:	b7 02 00 00 10 00 00 00	r2 = 16
     671:	85 00 00 00 04 00 00 00	call 4
     672:	b7 01 00 00 04 00 00 00	r1 = 4
     673:	bf 63 00 00 00 00 00 00	r3 = r6
     674:	0f 13 00 00 00 00 00 00	r3 += r1
     675:	bf a1 00 00 00 00 00 00	r1 = r10
     676:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     677:	b7 02 00 00 02 00 00 00	r2 = 2
     678:	85 00 00 00 71 00 00 00	call 113
     679:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     680:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     681:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000001550 <LBB32_69>:
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
     684:	bf a1 00 00 00 00 00 00	r1 = r10
     685:	07 01 00 00 f8 ff ff ff	r1 += -8
     686:	b7 02 00 00 01 00 00 00	r2 = 1
     687:	85 00 00 00 71 00 00 00	call 113
     688:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     689:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     690:	bf a1 00 00 00 00 00 00	r1 = r10
     691:	07 01 00 00 f8 ff ff ff	r1 += -8
     692:	b7 02 00 00 01 00 00 00	r2 = 1
     693:	bf 63 00 00 00 00 00 00	r3 = r6
     694:	85 00 00 00 04 00 00 00	call 4
     695:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     696:	57 01 00 00 f0 00 00 00	r1 &= 240
     697:	77 01 00 00 04 00 00 00	r1 >>= 4
     698:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     699:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     700:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB32_72>
     701:	15 01 53 00 01 00 00 00	if r1 == 1 goto +83 <LBB32_84>
     702:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB32_74>
     703:	05 00 b9 fe 00 00 00 00	goto -327 <LBB32_92>

0000000000001600 <LBB32_74>:
     704:	b7 01 00 00 c0 00 00 00	r1 = 192
     705:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     706:	bf 93 00 00 00 00 00 00	r3 = r9
     707:	0f 13 00 00 00 00 00 00	r3 += r1
     708:	bf a1 00 00 00 00 00 00	r1 = r10
     709:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     710:	b7 02 00 00 08 00 00 00	r2 = 8
     711:	85 00 00 00 71 00 00 00	call 113
     712:	b7 01 00 00 b6 00 00 00	r1 = 182
     713:	bf 93 00 00 00 00 00 00	r3 = r9
     714:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     715:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     716:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     717:	bf a1 00 00 00 00 00 00	r1 = r10
     718:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     719:	b7 02 00 00 02 00 00 00	r2 = 2
     720:	85 00 00 00 71 00 00 00	call 113
     721:	b7 01 00 00 b4 00 00 00	r1 = 180
     722:	0f 19 00 00 00 00 00 00	r9 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     723:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     726:	b7 02 00 00 02 00 00 00	r2 = 2
     727:	bf 93 00 00 00 00 00 00	r3 = r9
     728:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     729:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     730:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     731:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB32_76>
     732:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000016e8 <LBB32_76>:
;     return head + network_header;
     733:	57 06 00 00 ff ff 00 00	r6 &= 65535
     734:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
     735:	0f 61 00 00 00 00 00 00	r1 += r6
     736:	bf 16 00 00 00 00 00 00	r6 = r1
     737:	bf a1 00 00 00 00 00 00	r1 = r10
     738:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     739:	b7 02 00 00 01 00 00 00	r2 = 1
     740:	bf 63 00 00 00 00 00 00	r3 = r6
     741:	85 00 00 00 04 00 00 00	call 4
     742:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     743:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     744:	57 02 00 00 f0 00 00 00	r2 &= 240
     745:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB32_78>
     746:	bf a1 00 00 00 00 00 00	r1 = r10
     747:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     748:	b7 02 00 00 01 00 00 00	r2 = 1
     749:	bf 63 00 00 00 00 00 00	r3 = r6
     750:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     751:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     752:	67 01 00 00 02 00 00 00	r1 <<= 2
     753:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001790 <LBB32_78>:
;     return l3_header + transport_size;
     754:	0f 16 00 00 00 00 00 00	r6 += r1
     755:	b7 01 00 00 00 00 00 00	r1 = 0
     756:	bf 63 00 00 00 00 00 00	r3 = r6
     757:	0f 13 00 00 00 00 00 00	r3 += r1
     758:	bf a1 00 00 00 00 00 00	r1 = r10
     759:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     760:	b7 02 00 00 02 00 00 00	r2 = 2
     761:	85 00 00 00 71 00 00 00	call 113
     762:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     763:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     764:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     765:	b7 01 00 00 02 00 00 00	r1 = 2
     766:	bf 63 00 00 00 00 00 00	r3 = r6
     767:	0f 13 00 00 00 00 00 00	r3 += r1
     768:	bf a1 00 00 00 00 00 00	r1 = r10
     769:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     770:	b7 02 00 00 02 00 00 00	r2 = 2
     771:	85 00 00 00 71 00 00 00	call 113
     772:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     773:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     774:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     775:	07 06 00 00 0c 00 00 00	r6 += 12
     776:	bf 71 00 00 00 00 00 00	r1 = r7
     777:	07 01 00 00 9c 00 00 00	r1 += 156
     778:	b7 02 00 00 02 00 00 00	r2 = 2
     779:	bf 63 00 00 00 00 00 00	r3 = r6
     780:	85 00 00 00 04 00 00 00	call 4
     781:	05 00 8a 00 00 00 00 00	goto +138 <LBB32_89>

0000000000001870 <LBB32_72>:
;     if (l4_proto == IPPROTO_TCP) {
     782:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB32_79>
     783:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB32_84>
     784:	05 00 68 fe 00 00 00 00	goto -408 <LBB32_92>

0000000000001888 <LBB32_84>:
     785:	b7 01 00 00 c0 00 00 00	r1 = 192
     786:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     787:	bf 63 00 00 00 00 00 00	r3 = r6
     788:	0f 13 00 00 00 00 00 00	r3 += r1
     789:	bf a1 00 00 00 00 00 00	r1 = r10
     790:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     791:	b7 02 00 00 08 00 00 00	r2 = 8
     792:	85 00 00 00 71 00 00 00	call 113
     793:	b7 01 00 00 b6 00 00 00	r1 = 182
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     796:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     797:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     798:	bf a1 00 00 00 00 00 00	r1 = r10
     799:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     800:	b7 02 00 00 02 00 00 00	r2 = 2
     801:	85 00 00 00 71 00 00 00	call 113
     802:	b7 01 00 00 b4 00 00 00	r1 = 180
     803:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     804:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     805:	bf a1 00 00 00 00 00 00	r1 = r10
     806:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     807:	b7 02 00 00 02 00 00 00	r2 = 2
     808:	bf 63 00 00 00 00 00 00	r3 = r6
     809:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     810:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     811:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     812:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB32_86>
     813:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001970 <LBB32_86>:
;     return head + network_header;
     814:	57 09 00 00 ff ff 00 00	r9 &= 65535
     815:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     816:	0f 96 00 00 00 00 00 00	r6 += r9
     817:	bf a1 00 00 00 00 00 00	r1 = r10
     818:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     819:	b7 02 00 00 01 00 00 00	r2 = 1
     820:	bf 63 00 00 00 00 00 00	r3 = r6
     821:	85 00 00 00 04 00 00 00	call 4
     822:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     823:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     824:	57 02 00 00 f0 00 00 00	r2 &= 240
     825:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB32_88>
     826:	bf a1 00 00 00 00 00 00	r1 = r10
     827:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     828:	b7 02 00 00 01 00 00 00	r2 = 1
     829:	bf 63 00 00 00 00 00 00	r3 = r6
     830:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     831:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     832:	67 01 00 00 02 00 00 00	r1 <<= 2
     833:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a10 <LBB32_88>:
;     return l3_header + transport_size;
     834:	0f 16 00 00 00 00 00 00	r6 += r1
     835:	bf a9 00 00 00 00 00 00	r9 = r10
     836:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     837:	bf 91 00 00 00 00 00 00	r1 = r9
     838:	b7 02 00 00 08 00 00 00	r2 = 8
     839:	bf 63 00 00 00 00 00 00	r3 = r6
     840:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     841:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     842:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     843:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     844:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     845:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     846:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     847:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     848:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     849:	05 00 46 00 00 00 00 00	goto +70 <LBB32_89>

0000000000001a90 <LBB32_79>:
     850:	b7 01 00 00 c0 00 00 00	r1 = 192
     851:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     852:	bf 63 00 00 00 00 00 00	r3 = r6
     853:	0f 13 00 00 00 00 00 00	r3 += r1
     854:	bf a1 00 00 00 00 00 00	r1 = r10
     855:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     856:	b7 02 00 00 08 00 00 00	r2 = 8
     857:	85 00 00 00 71 00 00 00	call 113
     858:	b7 01 00 00 b6 00 00 00	r1 = 182
     859:	bf 63 00 00 00 00 00 00	r3 = r6
     860:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     861:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     862:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     863:	bf a1 00 00 00 00 00 00	r1 = r10
     864:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     865:	b7 02 00 00 02 00 00 00	r2 = 2
     866:	85 00 00 00 71 00 00 00	call 113
     867:	b7 01 00 00 b4 00 00 00	r1 = 180
     868:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     869:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     870:	bf a1 00 00 00 00 00 00	r1 = r10
     871:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     872:	b7 02 00 00 02 00 00 00	r2 = 2
     873:	bf 63 00 00 00 00 00 00	r3 = r6
     874:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     875:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     876:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     877:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB32_81>
     878:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001b78 <LBB32_81>:
;     return head + network_header;
     879:	57 09 00 00 ff ff 00 00	r9 &= 65535
     880:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     881:	0f 96 00 00 00 00 00 00	r6 += r9
     882:	bf a1 00 00 00 00 00 00	r1 = r10
     883:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     884:	b7 02 00 00 01 00 00 00	r2 = 1
     885:	bf 63 00 00 00 00 00 00	r3 = r6
     886:	85 00 00 00 04 00 00 00	call 4
     887:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     888:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     889:	57 02 00 00 f0 00 00 00	r2 &= 240
     890:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB32_83>
     891:	bf a1 00 00 00 00 00 00	r1 = r10
     892:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     893:	b7 02 00 00 01 00 00 00	r2 = 1
     894:	bf 63 00 00 00 00 00 00	r3 = r6
     895:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     896:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     897:	67 01 00 00 02 00 00 00	r1 <<= 2
     898:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c18 <LBB32_83>:
;     return l3_header + transport_size;
     899:	0f 16 00 00 00 00 00 00	r6 += r1
     900:	b7 01 00 00 00 00 00 00	r1 = 0
     901:	bf 63 00 00 00 00 00 00	r3 = r6
     902:	0f 13 00 00 00 00 00 00	r3 += r1
     903:	bf a1 00 00 00 00 00 00	r1 = r10
     904:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     905:	b7 02 00 00 02 00 00 00	r2 = 2
     906:	85 00 00 00 71 00 00 00	call 113
     907:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     908:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     909:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     910:	b7 01 00 00 02 00 00 00	r1 = 2
     911:	0f 16 00 00 00 00 00 00	r6 += r1
     912:	bf a1 00 00 00 00 00 00	r1 = r10
     913:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     914:	b7 02 00 00 02 00 00 00	r2 = 2
     915:	bf 63 00 00 00 00 00 00	r3 = r6
     916:	85 00 00 00 71 00 00 00	call 113
     917:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     918:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     919:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001cc0 <LBB32_89>:
     920:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
;     return cfg->callstack == 0;
     921:	71 81 11 00 00 00 00 00	r1 = *(u8 *)(r8 + 17)
;     if (!filter_callstack(cfg))
     922:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB32_91>
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
     923:	bf 61 00 00 00 00 00 00	r1 = r6
     924:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     926:	b7 03 00 00 00 00 00 00	r3 = 0
     927:	85 00 00 00 1b 00 00 00	call 27
     928:	63 07 30 00 00 00 00 00	*(u32 *)(r7 + 48) = r0

0000000000001d08 <LBB32_91>:
     929:	b7 01 00 00 73 00 00 00	r1 = 115
;     for (j = 10; j < 64; j += 10) CPY(j);
     930:	73 17 14 00 00 00 00 00	*(u8 *)(r7 + 20) = r1
     931:	b7 01 00 00 69 00 00 00	r1 = 105
     932:	73 17 13 00 00 00 00 00	*(u8 *)(r7 + 19) = r1
     933:	73 17 11 00 00 00 00 00	*(u8 *)(r7 + 17) = r1
     934:	b7 01 00 00 6d 00 00 00	r1 = 109
     935:	73 17 0d 00 00 00 00 00	*(u8 *)(r7 + 13) = r1
     936:	b7 01 00 00 66 00 00 00	r1 = 102
     937:	73 17 10 00 00 00 00 00	*(u8 *)(r7 + 16) = r1
     938:	73 17 0a 00 00 00 00 00	*(u8 *)(r7 + 10) = r1
     939:	b7 01 00 00 65 00 00 00	r1 = 101
     940:	73 17 0e 00 00 00 00 00	*(u8 *)(r7 + 14) = r1
     941:	73 17 08 00 00 00 00 00	*(u8 *)(r7 + 8) = r1
     942:	b7 01 00 00 6c 00 00 00	r1 = 108
     943:	73 17 07 00 00 00 00 00	*(u8 *)(r7 + 7) = r1
     944:	b7 01 00 00 64 00 00 00	r1 = 100
     945:	73 17 06 00 00 00 00 00	*(u8 *)(r7 + 6) = r1
     946:	b7 01 00 00 6e 00 00 00	r1 = 110
     947:	73 17 12 00 00 00 00 00	*(u8 *)(r7 + 18) = r1
     948:	73 17 05 00 00 00 00 00	*(u8 *)(r7 + 5) = r1
     949:	b7 01 00 00 61 00 00 00	r1 = 97
     950:	73 17 0c 00 00 00 00 00	*(u8 *)(r7 + 12) = r1
     951:	73 17 04 00 00 00 00 00	*(u8 *)(r7 + 4) = r1
     952:	b7 01 00 00 68 00 00 00	r1 = 104
     953:	73 17 15 00 00 00 00 00	*(u8 *)(r7 + 21) = r1
     954:	73 17 03 00 00 00 00 00	*(u8 *)(r7 + 3) = r1
     955:	b7 01 00 00 5f 00 00 00	r1 = 95
     956:	73 17 0f 00 00 00 00 00	*(u8 *)(r7 + 15) = r1
     957:	73 17 09 00 00 00 00 00	*(u8 *)(r7 + 9) = r1
     958:	73 17 02 00 00 00 00 00	*(u8 *)(r7 + 2) = r1
     959:	b7 01 00 00 72 00 00 00	r1 = 114
     960:	73 17 0b 00 00 00 00 00	*(u8 *)(r7 + 11) = r1
     961:	73 17 01 00 00 00 00 00	*(u8 *)(r7 + 1) = r1
     962:	b7 01 00 00 62 00 00 00	r1 = 98
     963:	73 17 00 00 00 00 00 00	*(u8 *)(r7 + 0) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     964:	bf 61 00 00 00 00 00 00	r1 = r6
     965:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     967:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     969:	bf 74 00 00 00 00 00 00	r4 = r7
     970:	b7 05 00 00 e0 00 00 00	r5 = 224
     971:	85 00 00 00 19 00 00 00	call 25
     972:	05 00 ac fd 00 00 00 00	goto -596 <LBB32_92>

Disassembly of section kprobe/br_nf_pre_routing:

0000000000000000 <k_br_nf_prero>:
; int k_br_nf_prero(struct pt_regs *ctx) {
       0:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM2(ctx);
       1:	79 11 68 00 00 00 00 00	r1 = *(u64 *)(r1 + 104)
       2:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       3:	b7 06 00 00 00 00 00 00	r6 = 0
;     GET_CFG();
       4:	63 6a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r6
       5:	bf a2 00 00 00 00 00 00	r2 = r10
       6:	07 02 00 00 e4 ff ff ff	r2 += -28
;     GET_CFG();
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	85 00 00 00 01 00 00 00	call 1
      10:	bf 08 00 00 00 00 00 00	r8 = r0
      11:	15 08 6d 01 00 00 00 00	if r8 == 0 goto +365 <LBB33_92>
      12:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
      13:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      14:	63 18 08 00 00 00 00 00	*(u32 *)(r8 + 8) = r1
;     u32 ev_buff_id = 0;
      15:	63 6a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r6
      16:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      17:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      18:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      20:	85 00 00 00 01 00 00 00	call 1
      21:	bf 07 00 00 00 00 00 00	r7 = r0
;     if (!ev) return NULL;
      22:	55 07 01 00 00 00 00 00	if r7 != 0 goto +1 <LBB33_3>
      23:	05 00 61 01 00 00 00 00	goto +353 <LBB33_92>

00000000000000c0 <LBB33_3>:
      24:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      25:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      26:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      27:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      28:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      29:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      30:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      31:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      32:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      33:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      34:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      35:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      36:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      37:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      38:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      39:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      40:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      41:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      42:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      43:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      44:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      45:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      46:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      47:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      48:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      49:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      50:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      51:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      52:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      53:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      54:	61 81 04 00 00 00 00 00	r1 = *(u32 *)(r8 + 4)
      55:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB33_5>
      56:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      57:	5d 01 3f 01 00 00 00 00	if r1 != r0 goto +319 <LBB33_92>

00000000000001d0 <LBB33_5>:
      58:	b7 01 00 00 10 00 00 00	r1 = 16
      59:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
      60:	bf 93 00 00 00 00 00 00	r3 = r9
      61:	0f 13 00 00 00 00 00 00	r3 += r1
      62:	bf a6 00 00 00 00 00 00	r6 = r10
      63:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      64:	bf 61 00 00 00 00 00 00	r1 = r6
      65:	b7 02 00 00 08 00 00 00	r2 = 8
      66:	85 00 00 00 71 00 00 00	call 113
      67:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      68:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      69:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      70:	bf 61 00 00 00 00 00 00	r1 = r6
      71:	b7 02 00 00 08 00 00 00	r2 = 8
      72:	85 00 00 00 71 00 00 00	call 113
      73:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      74:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      75:	0f 13 00 00 00 00 00 00	r3 += r1
      76:	bf a1 00 00 00 00 00 00	r1 = r10
      77:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      78:	b7 02 00 00 04 00 00 00	r2 = 4
      79:	85 00 00 00 71 00 00 00	call 113
      80:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      81:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB33_8>
      82:	b7 01 00 00 18 00 00 00	r1 = 24
      83:	bf 93 00 00 00 00 00 00	r3 = r9
      84:	0f 13 00 00 00 00 00 00	r3 += r1
      85:	bf a1 00 00 00 00 00 00	r1 = r10
      86:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
      87:	b7 02 00 00 08 00 00 00	r2 = 8
      88:	85 00 00 00 71 00 00 00	call 113
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
      90:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB33_11>
      91:	b7 01 00 00 30 00 00 00	r1 = 48
      92:	0f 13 00 00 00 00 00 00	r3 += r1
      93:	bf a1 00 00 00 00 00 00	r1 = r10
      94:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      95:	b7 02 00 00 08 00 00 00	r2 = 8
      96:	85 00 00 00 71 00 00 00	call 113
      97:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      98:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     102:	b7 02 00 00 04 00 00 00	r2 = 4
     103:	85 00 00 00 71 00 00 00	call 113
     104:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000348 <LBB33_8>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     105:	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0)
     106:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB33_11>
     107:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB33_11>
     108:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB33_92>

0000000000000368 <LBB33_11>:
;     u16 icmpid = cfg->icmpid;
     109:	69 81 0e 00 00 00 00 00	r1 = *(u16 *)(r8 + 14)
;     u16 port = cfg->port;
     110:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     111:	69 81 0c 00 00 00 00 00	r1 = *(u16 *)(r8 + 12)
;     u8 proto = cfg->proto;
     112:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     113:	71 81 12 00 00 00 00 00	r1 = *(u8 *)(r8 + 18)
;     u32 addr = cfg->ip;
     114:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     115:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
     116:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     117:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     118:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     119:	b7 01 00 00 c0 00 00 00	r1 = 192
     120:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     121:	bf 93 00 00 00 00 00 00	r3 = r9
     122:	0f 13 00 00 00 00 00 00	r3 += r1
     123:	bf a1 00 00 00 00 00 00	r1 = r10
     124:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     125:	b7 02 00 00 08 00 00 00	r2 = 8
     126:	85 00 00 00 71 00 00 00	call 113
     127:	b7 01 00 00 b6 00 00 00	r1 = 182
     128:	bf 93 00 00 00 00 00 00	r3 = r9
     129:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     130:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     131:	bf a1 00 00 00 00 00 00	r1 = r10
     132:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     133:	b7 02 00 00 02 00 00 00	r2 = 2
     134:	85 00 00 00 71 00 00 00	call 113
     135:	b7 01 00 00 b4 00 00 00	r1 = 180
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     138:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     139:	bf a1 00 00 00 00 00 00	r1 = r10
     140:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     141:	b7 02 00 00 02 00 00 00	r2 = 2
     142:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     143:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     144:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     145:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB33_13>
     146:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000498 <LBB33_13>:
;     return head + network_header;
     147:	57 09 00 00 ff ff 00 00	r9 &= 65535
     148:	0f 96 00 00 00 00 00 00	r6 += r9
     149:	bf a1 00 00 00 00 00 00	r1 = r10
     150:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     151:	b7 02 00 00 01 00 00 00	r2 = 1
     152:	bf 63 00 00 00 00 00 00	r3 = r6
     153:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     154:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     155:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     156:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB33_20>
     157:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB33_92>
;         if (addr != 0) {
     158:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     159:	bf 19 00 00 00 00 00 00	r9 = r1
     160:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB33_18>
     161:	b7 01 00 00 0c 00 00 00	r1 = 12
     162:	bf 63 00 00 00 00 00 00	r3 = r6
     163:	0f 13 00 00 00 00 00 00	r3 += r1
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     166:	b7 02 00 00 04 00 00 00	r2 = 4
     167:	85 00 00 00 71 00 00 00	call 113
     168:	b7 01 00 00 10 00 00 00	r1 = 16
     169:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     170:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     171:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     172:	bf a1 00 00 00 00 00 00	r1 = r10
     173:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     174:	b7 02 00 00 04 00 00 00	r2 = 4
     175:	bf 63 00 00 00 00 00 00	r3 = r6
     176:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     177:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     178:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB33_54>
     179:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     180:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     181:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB33_92>
     182:	05 00 da 00 00 00 00 00	goto +218 <LBB33_54>

00000000000005b8 <LBB33_20>:
     183:	b7 01 00 00 06 00 00 00	r1 = 6
     184:	0f 16 00 00 00 00 00 00	r6 += r1
     185:	bf a1 00 00 00 00 00 00	r1 = r10
     186:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     187:	b7 02 00 00 01 00 00 00	r2 = 1
     188:	bf 63 00 00 00 00 00 00	r3 = r6
     189:	85 00 00 00 04 00 00 00	call 4
     190:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     191:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     192:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     193:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB33_22>
     194:	b7 04 00 00 80 00 00 00	r4 = 128
     195:	b7 03 00 00 81 00 00 00	r3 = 129
     196:	b7 01 00 00 3a 00 00 00	r1 = 58
     197:	05 00 0d 00 00 00 00 00	goto +13 <LBB33_22>

0000000000000630 <LBB33_18>:
     198:	b7 01 00 00 09 00 00 00	r1 = 9
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     208:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB33_22>
     209:	b7 04 00 00 08 00 00 00	r4 = 8
     210:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000698 <LBB33_22>:
;     if (proto != 0 && proto != l4_proto)
     211:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     212:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB33_24>
     213:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB33_92>

00000000000006b0 <LBB33_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     214:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB33_27>
     215:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB33_29>
     216:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB33_35>
     217:	05 00 9f 00 00 00 00 00	goto +159 <LBB33_92>

00000000000006d0 <LBB33_35>:
     218:	b7 01 00 00 c0 00 00 00	r1 = 192
     219:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     220:	bf 63 00 00 00 00 00 00	r3 = r6
     221:	0f 13 00 00 00 00 00 00	r3 += r1
     222:	bf a1 00 00 00 00 00 00	r1 = r10
     223:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     224:	b7 02 00 00 08 00 00 00	r2 = 8
     225:	85 00 00 00 71 00 00 00	call 113
     226:	b7 01 00 00 b6 00 00 00	r1 = 182
     227:	bf 63 00 00 00 00 00 00	r3 = r6
     228:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     229:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     230:	bf a1 00 00 00 00 00 00	r1 = r10
     231:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     232:	b7 02 00 00 02 00 00 00	r2 = 2
     233:	85 00 00 00 71 00 00 00	call 113
     234:	b7 01 00 00 b4 00 00 00	r1 = 180
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     237:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     238:	bf a1 00 00 00 00 00 00	r1 = r10
     239:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     240:	b7 02 00 00 02 00 00 00	r2 = 2
     241:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     242:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     243:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     244:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB33_37>
     245:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000007b0 <LBB33_37>:
;     return head + network_header;
     246:	57 06 00 00 ff ff 00 00	r6 &= 65535
     247:	0f 69 00 00 00 00 00 00	r9 += r6
     248:	bf a1 00 00 00 00 00 00	r1 = r10
     249:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     250:	b7 02 00 00 01 00 00 00	r2 = 1
     251:	bf 93 00 00 00 00 00 00	r3 = r9
     252:	85 00 00 00 04 00 00 00	call 4
     253:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     254:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     255:	57 02 00 00 f0 00 00 00	r2 &= 240
     256:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB33_39>
     257:	bf a1 00 00 00 00 00 00	r1 = r10
     258:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     259:	b7 02 00 00 01 00 00 00	r2 = 1
     260:	bf 93 00 00 00 00 00 00	r3 = r9
     261:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     262:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     263:	67 01 00 00 02 00 00 00	r1 <<= 2
     264:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000848 <LBB33_39>:
;     return l3_header + transport_size;
     265:	0f 19 00 00 00 00 00 00	r9 += r1
     266:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9

0000000000000858 <LBB33_40>:
     267:	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 72)
;     if (port != 0) {
     268:	bf 92 00 00 00 00 00 00	r2 = r9
     269:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB33_45>
;         if (l4_proto == IPPROTO_TCP) {
     270:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     271:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB33_52>
     272:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB33_45>
     273:	b7 01 00 00 00 00 00 00	r1 = 0
     274:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     275:	bf 63 00 00 00 00 00 00	r3 = r6
     276:	0f 13 00 00 00 00 00 00	r3 += r1
     277:	bf a1 00 00 00 00 00 00	r1 = r10
     278:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     279:	b7 02 00 00 02 00 00 00	r2 = 2
     280:	85 00 00 00 71 00 00 00	call 113
     281:	b7 01 00 00 02 00 00 00	r1 = 2
     282:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     283:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     284:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     285:	bf a1 00 00 00 00 00 00	r1 = r10
     286:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     287:	b7 02 00 00 02 00 00 00	r2 = 2
     288:	bf 63 00 00 00 00 00 00	r3 = r6
     289:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     290:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     291:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     292:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB33_54>
     293:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     294:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB33_92>
     295:	05 00 69 00 00 00 00 00	goto +105 <LBB33_54>

0000000000000940 <LBB33_27>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     296:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB33_35>
     297:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB33_92>

0000000000000950 <LBB33_29>:
     298:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r4
     299:	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r3
     300:	b7 01 00 00 c0 00 00 00	r1 = 192
     301:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     302:	bf 63 00 00 00 00 00 00	r3 = r6
     303:	0f 13 00 00 00 00 00 00	r3 += r1
     304:	bf a1 00 00 00 00 00 00	r1 = r10
     305:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     306:	b7 02 00 00 08 00 00 00	r2 = 8
     307:	85 00 00 00 71 00 00 00	call 113
     308:	b7 01 00 00 b6 00 00 00	r1 = 182
     309:	bf 63 00 00 00 00 00 00	r3 = r6
     310:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     311:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     312:	bf a1 00 00 00 00 00 00	r1 = r10
     313:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     314:	b7 02 00 00 02 00 00 00	r2 = 2
     315:	85 00 00 00 71 00 00 00	call 113
     316:	b7 01 00 00 b4 00 00 00	r1 = 180
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     319:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     320:	bf a1 00 00 00 00 00 00	r1 = r10
     321:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     322:	b7 02 00 00 02 00 00 00	r2 = 2
     323:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     324:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     325:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     326:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB33_31>
     327:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000a40 <LBB33_31>:
;     return head + network_header;
     328:	57 06 00 00 ff ff 00 00	r6 &= 65535
     329:	0f 69 00 00 00 00 00 00	r9 += r6
     330:	bf a1 00 00 00 00 00 00	r1 = r10
     331:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     332:	b7 02 00 00 01 00 00 00	r2 = 1
     333:	bf 93 00 00 00 00 00 00	r3 = r9
     334:	85 00 00 00 04 00 00 00	call 4
     335:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     336:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     337:	57 02 00 00 f0 00 00 00	r2 &= 240
     338:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB33_33>
     339:	bf a1 00 00 00 00 00 00	r1 = r10
     340:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     341:	b7 02 00 00 01 00 00 00	r2 = 1
     342:	bf 93 00 00 00 00 00 00	r3 = r9
     343:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     344:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     345:	67 01 00 00 02 00 00 00	r1 <<= 2
     346:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000ad8 <LBB33_33>:
;     return l3_header + transport_size;
     347:	0f 19 00 00 00 00 00 00	r9 += r1
     348:	bf a6 00 00 00 00 00 00	r6 = r10
     349:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     350:	bf 61 00 00 00 00 00 00	r1 = r6
     351:	b7 02 00 00 08 00 00 00	r2 = 8
     352:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
     353:	bf 93 00 00 00 00 00 00	r3 = r9
     354:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     355:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     356:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     357:	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 88)
     358:	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 96)
     359:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB33_40>
     360:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     361:	07 02 00 00 e8 ff ff ff	r2 += -24
     362:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     363:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB33_40>
     364:	05 00 0c 00 00 00 00 00	goto +12 <LBB33_92>

0000000000000b68 <LBB33_45>:
;     if (proto != 0 && proto != l4_proto)
     365:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     366:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB33_54>
     367:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
;     if (proto != 0 && icmpid != 0) {
     368:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB33_54>
     369:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     370:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB33_54>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     371:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     372:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB33_50>
     373:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB33_54>

0000000000000bb0 <LBB33_50>:
;         if (icmpid != ev_icmpid)
     374:	57 01 00 00 ff ff 00 00	r1 &= 65535
     375:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
     376:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB33_54>

0000000000000bc8 <LBB33_92>:
;     return do_trace(ctx, skb, "br_nf_pre_routing");
     377:	b7 00 00 00 00 00 00 00	r0 = 0
     378:	95 00 00 00 00 00 00 00	exit

0000000000000bd8 <LBB33_52>:
     379:	b7 01 00 00 00 00 00 00	r1 = 0
     380:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     381:	bf 63 00 00 00 00 00 00	r3 = r6
     382:	0f 13 00 00 00 00 00 00	r3 += r1
     383:	bf a1 00 00 00 00 00 00	r1 = r10
     384:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     385:	b7 02 00 00 02 00 00 00	r2 = 2
     386:	85 00 00 00 71 00 00 00	call 113
     387:	b7 01 00 00 02 00 00 00	r1 = 2
     388:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     389:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     390:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     391:	bf a1 00 00 00 00 00 00	r1 = r10
     392:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     393:	b7 02 00 00 02 00 00 00	r2 = 2
     394:	bf 63 00 00 00 00 00 00	r3 = r6
     395:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     396:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     397:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     398:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB33_54>
     399:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     400:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB33_92>

0000000000000c88 <LBB33_54>:
;     event->flags |= SKBTRACER_EVENT_IF;
     401:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     402:	47 01 00 00 01 00 00 00	r1 |= 1
     403:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     404:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
;     ev->skb = (u64)skb;
     405:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     406:	85 00 00 00 05 00 00 00	call 5
     407:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     408:	b7 01 00 00 10 00 00 00	r1 = 16
     409:	bf 96 00 00 00 00 00 00	r6 = r9
     410:	0f 16 00 00 00 00 00 00	r6 += r1
     411:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     412:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     413:	b7 02 00 00 08 00 00 00	r2 = 8
     414:	bf 63 00 00 00 00 00 00	r3 = r6
     415:	85 00 00 00 71 00 00 00	call 113
     416:	b7 01 00 00 70 00 00 00	r1 = 112
     417:	bf 93 00 00 00 00 00 00	r3 = r9
     418:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     419:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     420:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     421:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     422:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     423:	b7 02 00 00 04 00 00 00	r2 = 4
     424:	85 00 00 00 71 00 00 00	call 113
     425:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     426:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     427:	85 00 00 00 08 00 00 00	call 8
     428:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     429:	85 00 00 00 0e 00 00 00	call 14
     430:	57 00 00 00 ff ff 00 00	r0 &= 65535
     431:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     432:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     433:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     434:	bf 91 00 00 00 00 00 00	r1 = r9
     435:	b7 02 00 00 08 00 00 00	r2 = 8
     436:	bf 63 00 00 00 00 00 00	r3 = r6
     437:	85 00 00 00 71 00 00 00	call 113
     438:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     439:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     440:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     441:	bf 91 00 00 00 00 00 00	r1 = r9
     442:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     443:	b7 02 00 00 08 00 00 00	r2 = 8
     444:	85 00 00 00 71 00 00 00	call 113
     445:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     446:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     447:	0f 13 00 00 00 00 00 00	r3 += r1
     448:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     449:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     450:	b7 02 00 00 04 00 00 00	r2 = 4
     451:	85 00 00 00 71 00 00 00	call 113
     452:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     453:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB33_57>
     454:	b7 01 00 00 18 00 00 00	r1 = 24
     455:	bf 93 00 00 00 00 00 00	r3 = r9
     456:	0f 13 00 00 00 00 00 00	r3 += r1
     457:	bf a1 00 00 00 00 00 00	r1 = r10
     458:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     459:	b7 02 00 00 08 00 00 00	r2 = 8
     460:	85 00 00 00 71 00 00 00	call 113
     461:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     462:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     463:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB33_57>
     464:	b7 01 00 00 30 00 00 00	r1 = 48
     465:	0f 13 00 00 00 00 00 00	r3 += r1
     466:	bf a1 00 00 00 00 00 00	r1 = r10
     467:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     468:	b7 02 00 00 08 00 00 00	r2 = 8
     469:	85 00 00 00 71 00 00 00	call 113
     470:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     471:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     472:	0f 13 00 00 00 00 00 00	r3 += r1
     473:	bf a1 00 00 00 00 00 00	r1 = r10
     474:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     475:	b7 02 00 00 04 00 00 00	r2 = 4
     476:	85 00 00 00 71 00 00 00	call 113
     477:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000ef0 <LBB33_57>:
;     pkt_info->netns = get_netns(skb);
     478:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     479:	b7 01 00 00 80 00 00 00	r1 = 128
     480:	bf 93 00 00 00 00 00 00	r3 = r9
     481:	0f 13 00 00 00 00 00 00	r3 += r1
     482:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     483:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     484:	bf a1 00 00 00 00 00 00	r1 = r10
     485:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     486:	b7 02 00 00 01 00 00 00	r2 = 1
     487:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     488:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     489:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     490:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     491:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     492:	b7 01 00 00 00 00 00 00	r1 = 0
     493:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     494:	0f 13 00 00 00 00 00 00	r3 += r1
;     pkt_info->ifname[0] = 0;
     495:	bf 71 00 00 00 00 00 00	r1 = r7
     496:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     497:	b7 02 00 00 10 00 00 00	r2 = 16
     498:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     499:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     500:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB33_59>
     501:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     502:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     503:	b7 01 00 00 69 00 00 00	r1 = 105
     504:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     505:	b7 01 00 00 6e 00 00 00	r1 = 110
     506:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000000fd8 <LBB33_59>:
     507:	b7 01 00 00 c0 00 00 00	r1 = 192
     508:	bf 93 00 00 00 00 00 00	r3 = r9
     509:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     510:	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r3
     511:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     512:	07 01 00 00 f8 ff ff ff	r1 += -8
     513:	b7 02 00 00 08 00 00 00	r2 = 8
     514:	85 00 00 00 71 00 00 00	call 113
     515:	b7 01 00 00 b6 00 00 00	r1 = 182
     516:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     517:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     518:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     519:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     520:	b7 02 00 00 02 00 00 00	r2 = 2
     521:	bf 93 00 00 00 00 00 00	r3 = r9
     522:	85 00 00 00 71 00 00 00	call 113
     523:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     524:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     525:	bf 71 00 00 00 00 00 00	r1 = r7
     526:	07 01 00 00 64 00 00 00	r1 += 100
     527:	b7 02 00 00 06 00 00 00	r2 = 6
     528:	bf 63 00 00 00 00 00 00	r3 = r6
     529:	85 00 00 00 04 00 00 00	call 4
     530:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     531:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	b7 02 00 00 08 00 00 00	r2 = 8
     533:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     534:	85 00 00 00 71 00 00 00	call 113
     535:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     536:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     537:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     538:	b7 02 00 00 02 00 00 00	r2 = 2
     539:	bf 93 00 00 00 00 00 00	r3 = r9
     540:	85 00 00 00 71 00 00 00	call 113
     541:	b7 01 00 00 b4 00 00 00	r1 = 180
     542:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
     543:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     544:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     547:	b7 02 00 00 02 00 00 00	r2 = 2
     548:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     549:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     550:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     551:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB33_61>
     552:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001148 <LBB33_61>:
;     return head + network_header;
     553:	57 09 00 00 ff ff 00 00	r9 &= 65535
     554:	0f 96 00 00 00 00 00 00	r6 += r9
     555:	bf a1 00 00 00 00 00 00	r1 = r10
     556:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     557:	b7 02 00 00 01 00 00 00	r2 = 1
     558:	bf 63 00 00 00 00 00 00	r3 = r6
     559:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     560:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     561:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     562:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB33_66>
     563:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB33_92>
     564:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     565:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     566:	b7 01 00 00 c0 00 00 00	r1 = 192
     567:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     568:	bf 93 00 00 00 00 00 00	r3 = r9
     569:	0f 13 00 00 00 00 00 00	r3 += r1
     570:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     572:	b7 02 00 00 08 00 00 00	r2 = 8
     573:	85 00 00 00 71 00 00 00	call 113
     574:	b7 01 00 00 b6 00 00 00	r1 = 182
     575:	bf 93 00 00 00 00 00 00	r3 = r9
     576:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     577:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     578:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     579:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     580:	b7 02 00 00 02 00 00 00	r2 = 2
     581:	85 00 00 00 71 00 00 00	call 113
     582:	b7 01 00 00 b4 00 00 00	r1 = 180
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     585:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     586:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     587:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     588:	b7 02 00 00 02 00 00 00	r2 = 2
     589:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     590:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     591:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     592:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB33_65>
     593:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001290 <LBB33_65>:
;     return head + network_header;
     594:	57 09 00 00 ff ff 00 00	r9 &= 65535
     595:	0f 96 00 00 00 00 00 00	r6 += r9
     596:	b7 01 00 00 0c 00 00 00	r1 = 12
     597:	bf 63 00 00 00 00 00 00	r3 = r6
     598:	0f 13 00 00 00 00 00 00	r3 += r1
     599:	bf a1 00 00 00 00 00 00	r1 = r10
     600:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     601:	b7 02 00 00 04 00 00 00	r2 = 4
     602:	85 00 00 00 71 00 00 00	call 113
     603:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     604:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     605:	b7 01 00 00 10 00 00 00	r1 = 16
     606:	bf 63 00 00 00 00 00 00	r3 = r6
     607:	0f 13 00 00 00 00 00 00	r3 += r1
     608:	bf a1 00 00 00 00 00 00	r1 = r10
     609:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     610:	b7 02 00 00 04 00 00 00	r2 = 4
     611:	85 00 00 00 71 00 00 00	call 113
     612:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     613:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     614:	b7 01 00 00 02 00 00 00	r1 = 2
     615:	bf 63 00 00 00 00 00 00	r3 = r6
     616:	0f 13 00 00 00 00 00 00	r3 += r1
     617:	bf a1 00 00 00 00 00 00	r1 = r10
     618:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     619:	b7 02 00 00 02 00 00 00	r2 = 2
     620:	85 00 00 00 71 00 00 00	call 113
     621:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     622:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     623:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     624:	b7 01 00 00 09 00 00 00	r1 = 9
     625:	05 00 38 00 00 00 00 00	goto +56 <LBB33_69>

0000000000001390 <LBB33_66>:
     626:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     627:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     628:	b7 01 00 00 c0 00 00 00	r1 = 192
     629:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     630:	bf 93 00 00 00 00 00 00	r3 = r9
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     634:	b7 02 00 00 08 00 00 00	r2 = 8
     635:	85 00 00 00 71 00 00 00	call 113
     636:	b7 01 00 00 b6 00 00 00	r1 = 182
     637:	bf 93 00 00 00 00 00 00	r3 = r9
     638:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     639:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     640:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     641:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     642:	b7 02 00 00 02 00 00 00	r2 = 2
     643:	85 00 00 00 71 00 00 00	call 113
     644:	b7 01 00 00 b4 00 00 00	r1 = 180
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     647:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     648:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     649:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     650:	b7 02 00 00 02 00 00 00	r2 = 2
     651:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     652:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     653:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     654:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB33_68>
     655:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001480 <LBB33_68>:
;     return head + network_header;
     656:	57 09 00 00 ff ff 00 00	r9 &= 65535
     657:	0f 96 00 00 00 00 00 00	r6 += r9
     658:	b7 01 00 00 08 00 00 00	r1 = 8
     659:	bf 63 00 00 00 00 00 00	r3 = r6
     660:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
     661:	bf 71 00 00 00 00 00 00	r1 = r7
     662:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     663:	b7 02 00 00 10 00 00 00	r2 = 16
     664:	85 00 00 00 04 00 00 00	call 4
     665:	b7 01 00 00 18 00 00 00	r1 = 24
     666:	bf 63 00 00 00 00 00 00	r3 = r6
     667:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     668:	bf 71 00 00 00 00 00 00	r1 = r7
     669:	07 01 00 00 80 00 00 00	r1 += 128
     670:	b7 02 00 00 10 00 00 00	r2 = 16
     671:	85 00 00 00 04 00 00 00	call 4
     672:	b7 01 00 00 04 00 00 00	r1 = 4
     673:	bf 63 00 00 00 00 00 00	r3 = r6
     674:	0f 13 00 00 00 00 00 00	r3 += r1
     675:	bf a1 00 00 00 00 00 00	r1 = r10
     676:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     677:	b7 02 00 00 02 00 00 00	r2 = 2
     678:	85 00 00 00 71 00 00 00	call 113
     679:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     680:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     681:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000001550 <LBB33_69>:
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
     684:	bf a1 00 00 00 00 00 00	r1 = r10
     685:	07 01 00 00 f8 ff ff ff	r1 += -8
     686:	b7 02 00 00 01 00 00 00	r2 = 1
     687:	85 00 00 00 71 00 00 00	call 113
     688:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     689:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     690:	bf a1 00 00 00 00 00 00	r1 = r10
     691:	07 01 00 00 f8 ff ff ff	r1 += -8
     692:	b7 02 00 00 01 00 00 00	r2 = 1
     693:	bf 63 00 00 00 00 00 00	r3 = r6
     694:	85 00 00 00 04 00 00 00	call 4
     695:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     696:	57 01 00 00 f0 00 00 00	r1 &= 240
     697:	77 01 00 00 04 00 00 00	r1 >>= 4
     698:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     699:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     700:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB33_72>
     701:	15 01 53 00 01 00 00 00	if r1 == 1 goto +83 <LBB33_84>
     702:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB33_74>
     703:	05 00 b9 fe 00 00 00 00	goto -327 <LBB33_92>

0000000000001600 <LBB33_74>:
     704:	b7 01 00 00 c0 00 00 00	r1 = 192
     705:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     706:	bf 93 00 00 00 00 00 00	r3 = r9
     707:	0f 13 00 00 00 00 00 00	r3 += r1
     708:	bf a1 00 00 00 00 00 00	r1 = r10
     709:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     710:	b7 02 00 00 08 00 00 00	r2 = 8
     711:	85 00 00 00 71 00 00 00	call 113
     712:	b7 01 00 00 b6 00 00 00	r1 = 182
     713:	bf 93 00 00 00 00 00 00	r3 = r9
     714:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     715:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     716:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     717:	bf a1 00 00 00 00 00 00	r1 = r10
     718:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     719:	b7 02 00 00 02 00 00 00	r2 = 2
     720:	85 00 00 00 71 00 00 00	call 113
     721:	b7 01 00 00 b4 00 00 00	r1 = 180
     722:	0f 19 00 00 00 00 00 00	r9 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     723:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     726:	b7 02 00 00 02 00 00 00	r2 = 2
     727:	bf 93 00 00 00 00 00 00	r3 = r9
     728:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     729:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     730:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     731:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB33_76>
     732:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000016e8 <LBB33_76>:
;     return head + network_header;
     733:	57 06 00 00 ff ff 00 00	r6 &= 65535
     734:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
     735:	0f 61 00 00 00 00 00 00	r1 += r6
     736:	bf 16 00 00 00 00 00 00	r6 = r1
     737:	bf a1 00 00 00 00 00 00	r1 = r10
     738:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     739:	b7 02 00 00 01 00 00 00	r2 = 1
     740:	bf 63 00 00 00 00 00 00	r3 = r6
     741:	85 00 00 00 04 00 00 00	call 4
     742:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     743:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     744:	57 02 00 00 f0 00 00 00	r2 &= 240
     745:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB33_78>
     746:	bf a1 00 00 00 00 00 00	r1 = r10
     747:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     748:	b7 02 00 00 01 00 00 00	r2 = 1
     749:	bf 63 00 00 00 00 00 00	r3 = r6
     750:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     751:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     752:	67 01 00 00 02 00 00 00	r1 <<= 2
     753:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001790 <LBB33_78>:
;     return l3_header + transport_size;
     754:	0f 16 00 00 00 00 00 00	r6 += r1
     755:	b7 01 00 00 00 00 00 00	r1 = 0
     756:	bf 63 00 00 00 00 00 00	r3 = r6
     757:	0f 13 00 00 00 00 00 00	r3 += r1
     758:	bf a1 00 00 00 00 00 00	r1 = r10
     759:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     760:	b7 02 00 00 02 00 00 00	r2 = 2
     761:	85 00 00 00 71 00 00 00	call 113
     762:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     763:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     764:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     765:	b7 01 00 00 02 00 00 00	r1 = 2
     766:	bf 63 00 00 00 00 00 00	r3 = r6
     767:	0f 13 00 00 00 00 00 00	r3 += r1
     768:	bf a1 00 00 00 00 00 00	r1 = r10
     769:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     770:	b7 02 00 00 02 00 00 00	r2 = 2
     771:	85 00 00 00 71 00 00 00	call 113
     772:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     773:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     774:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     775:	07 06 00 00 0c 00 00 00	r6 += 12
     776:	bf 71 00 00 00 00 00 00	r1 = r7
     777:	07 01 00 00 9c 00 00 00	r1 += 156
     778:	b7 02 00 00 02 00 00 00	r2 = 2
     779:	bf 63 00 00 00 00 00 00	r3 = r6
     780:	85 00 00 00 04 00 00 00	call 4
     781:	05 00 8a 00 00 00 00 00	goto +138 <LBB33_89>

0000000000001870 <LBB33_72>:
;     if (l4_proto == IPPROTO_TCP) {
     782:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB33_79>
     783:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB33_84>
     784:	05 00 68 fe 00 00 00 00	goto -408 <LBB33_92>

0000000000001888 <LBB33_84>:
     785:	b7 01 00 00 c0 00 00 00	r1 = 192
     786:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     787:	bf 63 00 00 00 00 00 00	r3 = r6
     788:	0f 13 00 00 00 00 00 00	r3 += r1
     789:	bf a1 00 00 00 00 00 00	r1 = r10
     790:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     791:	b7 02 00 00 08 00 00 00	r2 = 8
     792:	85 00 00 00 71 00 00 00	call 113
     793:	b7 01 00 00 b6 00 00 00	r1 = 182
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     796:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     797:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     798:	bf a1 00 00 00 00 00 00	r1 = r10
     799:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     800:	b7 02 00 00 02 00 00 00	r2 = 2
     801:	85 00 00 00 71 00 00 00	call 113
     802:	b7 01 00 00 b4 00 00 00	r1 = 180
     803:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     804:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     805:	bf a1 00 00 00 00 00 00	r1 = r10
     806:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     807:	b7 02 00 00 02 00 00 00	r2 = 2
     808:	bf 63 00 00 00 00 00 00	r3 = r6
     809:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     810:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     811:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     812:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB33_86>
     813:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001970 <LBB33_86>:
;     return head + network_header;
     814:	57 09 00 00 ff ff 00 00	r9 &= 65535
     815:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     816:	0f 96 00 00 00 00 00 00	r6 += r9
     817:	bf a1 00 00 00 00 00 00	r1 = r10
     818:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     819:	b7 02 00 00 01 00 00 00	r2 = 1
     820:	bf 63 00 00 00 00 00 00	r3 = r6
     821:	85 00 00 00 04 00 00 00	call 4
     822:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     823:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     824:	57 02 00 00 f0 00 00 00	r2 &= 240
     825:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB33_88>
     826:	bf a1 00 00 00 00 00 00	r1 = r10
     827:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     828:	b7 02 00 00 01 00 00 00	r2 = 1
     829:	bf 63 00 00 00 00 00 00	r3 = r6
     830:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     831:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     832:	67 01 00 00 02 00 00 00	r1 <<= 2
     833:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a10 <LBB33_88>:
;     return l3_header + transport_size;
     834:	0f 16 00 00 00 00 00 00	r6 += r1
     835:	bf a9 00 00 00 00 00 00	r9 = r10
     836:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     837:	bf 91 00 00 00 00 00 00	r1 = r9
     838:	b7 02 00 00 08 00 00 00	r2 = 8
     839:	bf 63 00 00 00 00 00 00	r3 = r6
     840:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     841:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     842:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     843:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     844:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     845:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     846:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     847:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     848:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     849:	05 00 46 00 00 00 00 00	goto +70 <LBB33_89>

0000000000001a90 <LBB33_79>:
     850:	b7 01 00 00 c0 00 00 00	r1 = 192
     851:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     852:	bf 63 00 00 00 00 00 00	r3 = r6
     853:	0f 13 00 00 00 00 00 00	r3 += r1
     854:	bf a1 00 00 00 00 00 00	r1 = r10
     855:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     856:	b7 02 00 00 08 00 00 00	r2 = 8
     857:	85 00 00 00 71 00 00 00	call 113
     858:	b7 01 00 00 b6 00 00 00	r1 = 182
     859:	bf 63 00 00 00 00 00 00	r3 = r6
     860:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     861:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     862:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     863:	bf a1 00 00 00 00 00 00	r1 = r10
     864:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     865:	b7 02 00 00 02 00 00 00	r2 = 2
     866:	85 00 00 00 71 00 00 00	call 113
     867:	b7 01 00 00 b4 00 00 00	r1 = 180
     868:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     869:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     870:	bf a1 00 00 00 00 00 00	r1 = r10
     871:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     872:	b7 02 00 00 02 00 00 00	r2 = 2
     873:	bf 63 00 00 00 00 00 00	r3 = r6
     874:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     875:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     876:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     877:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB33_81>
     878:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001b78 <LBB33_81>:
;     return head + network_header;
     879:	57 09 00 00 ff ff 00 00	r9 &= 65535
     880:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     881:	0f 96 00 00 00 00 00 00	r6 += r9
     882:	bf a1 00 00 00 00 00 00	r1 = r10
     883:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     884:	b7 02 00 00 01 00 00 00	r2 = 1
     885:	bf 63 00 00 00 00 00 00	r3 = r6
     886:	85 00 00 00 04 00 00 00	call 4
     887:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     888:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     889:	57 02 00 00 f0 00 00 00	r2 &= 240
     890:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB33_83>
     891:	bf a1 00 00 00 00 00 00	r1 = r10
     892:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     893:	b7 02 00 00 01 00 00 00	r2 = 1
     894:	bf 63 00 00 00 00 00 00	r3 = r6
     895:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     896:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     897:	67 01 00 00 02 00 00 00	r1 <<= 2
     898:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c18 <LBB33_83>:
;     return l3_header + transport_size;
     899:	0f 16 00 00 00 00 00 00	r6 += r1
     900:	b7 01 00 00 00 00 00 00	r1 = 0
     901:	bf 63 00 00 00 00 00 00	r3 = r6
     902:	0f 13 00 00 00 00 00 00	r3 += r1
     903:	bf a1 00 00 00 00 00 00	r1 = r10
     904:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     905:	b7 02 00 00 02 00 00 00	r2 = 2
     906:	85 00 00 00 71 00 00 00	call 113
     907:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     908:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     909:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     910:	b7 01 00 00 02 00 00 00	r1 = 2
     911:	0f 16 00 00 00 00 00 00	r6 += r1
     912:	bf a1 00 00 00 00 00 00	r1 = r10
     913:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     914:	b7 02 00 00 02 00 00 00	r2 = 2
     915:	bf 63 00 00 00 00 00 00	r3 = r6
     916:	85 00 00 00 71 00 00 00	call 113
     917:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     918:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     919:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001cc0 <LBB33_89>:
     920:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
;     return cfg->callstack == 0;
     921:	71 81 11 00 00 00 00 00	r1 = *(u8 *)(r8 + 17)
;     if (!filter_callstack(cfg))
     922:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB33_91>
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
     923:	bf 61 00 00 00 00 00 00	r1 = r6
     924:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     926:	b7 03 00 00 00 00 00 00	r3 = 0
     927:	85 00 00 00 1b 00 00 00	call 27
     928:	63 07 30 00 00 00 00 00	*(u32 *)(r7 + 48) = r0

0000000000001d08 <LBB33_91>:
     929:	b7 01 00 00 67 00 00 00	r1 = 103
;     for (j = 10; j < 64; j += 10) CPY(j);
     930:	73 17 10 00 00 00 00 00	*(u8 *)(r7 + 16) = r1
     931:	b7 01 00 00 69 00 00 00	r1 = 105
     932:	73 17 0e 00 00 00 00 00	*(u8 *)(r7 + 14) = r1
     933:	b7 01 00 00 74 00 00 00	r1 = 116
     934:	73 17 0d 00 00 00 00 00	*(u8 *)(r7 + 13) = r1
     935:	b7 01 00 00 75 00 00 00	r1 = 117
     936:	73 17 0c 00 00 00 00 00	*(u8 *)(r7 + 12) = r1
     937:	b7 01 00 00 6f 00 00 00	r1 = 111
     938:	73 17 0b 00 00 00 00 00	*(u8 *)(r7 + 11) = r1
     939:	b7 01 00 00 65 00 00 00	r1 = 101
     940:	73 17 08 00 00 00 00 00	*(u8 *)(r7 + 8) = r1
     941:	b7 01 00 00 70 00 00 00	r1 = 112
     942:	73 17 06 00 00 00 00 00	*(u8 *)(r7 + 6) = r1
     943:	b7 01 00 00 66 00 00 00	r1 = 102
     944:	73 17 04 00 00 00 00 00	*(u8 *)(r7 + 4) = r1
     945:	b7 01 00 00 6e 00 00 00	r1 = 110
     946:	73 17 0f 00 00 00 00 00	*(u8 *)(r7 + 15) = r1
     947:	73 17 03 00 00 00 00 00	*(u8 *)(r7 + 3) = r1
     948:	b7 01 00 00 5f 00 00 00	r1 = 95
     949:	73 17 09 00 00 00 00 00	*(u8 *)(r7 + 9) = r1
     950:	73 17 05 00 00 00 00 00	*(u8 *)(r7 + 5) = r1
     951:	73 17 02 00 00 00 00 00	*(u8 *)(r7 + 2) = r1
     952:	b7 01 00 00 72 00 00 00	r1 = 114
     953:	73 17 0a 00 00 00 00 00	*(u8 *)(r7 + 10) = r1
     954:	73 17 07 00 00 00 00 00	*(u8 *)(r7 + 7) = r1
     955:	73 17 01 00 00 00 00 00	*(u8 *)(r7 + 1) = r1
     956:	b7 01 00 00 62 00 00 00	r1 = 98
     957:	73 17 00 00 00 00 00 00	*(u8 *)(r7 + 0) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     958:	bf 61 00 00 00 00 00 00	r1 = r6
     959:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     961:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     963:	bf 74 00 00 00 00 00 00	r4 = r7
     964:	b7 05 00 00 e0 00 00 00	r5 = 224
     965:	85 00 00 00 19 00 00 00	call 25
     966:	05 00 b2 fd 00 00 00 00	goto -590 <LBB33_92>

Disassembly of section kprobe/br_nf_pre_routing_finish:

0000000000000000 <k_brnf_prero_f>:
; int k_brnf_prero_f(struct pt_regs *ctx) {
       0:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM3(ctx);
       1:	79 11 60 00 00 00 00 00	r1 = *(u64 *)(r1 + 96)
       2:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       3:	b7 06 00 00 00 00 00 00	r6 = 0
;     GET_CFG();
       4:	63 6a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r6
       5:	bf a2 00 00 00 00 00 00	r2 = r10
       6:	07 02 00 00 e4 ff ff ff	r2 += -28
;     GET_CFG();
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	85 00 00 00 01 00 00 00	call 1
      10:	bf 08 00 00 00 00 00 00	r8 = r0
      11:	15 08 6d 01 00 00 00 00	if r8 == 0 goto +365 <LBB34_92>
      12:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
      13:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      14:	63 18 08 00 00 00 00 00	*(u32 *)(r8 + 8) = r1
;     u32 ev_buff_id = 0;
      15:	63 6a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r6
      16:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      17:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      18:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      20:	85 00 00 00 01 00 00 00	call 1
      21:	bf 07 00 00 00 00 00 00	r7 = r0
;     if (!ev) return NULL;
      22:	55 07 01 00 00 00 00 00	if r7 != 0 goto +1 <LBB34_3>
      23:	05 00 61 01 00 00 00 00	goto +353 <LBB34_92>

00000000000000c0 <LBB34_3>:
      24:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      25:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      26:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      27:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      28:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      29:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      30:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      31:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      32:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      33:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      34:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      35:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      36:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      37:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      38:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      39:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      40:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      41:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      42:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      43:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      44:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      45:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      46:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      47:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      48:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      49:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      50:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      51:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      52:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      53:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      54:	61 81 04 00 00 00 00 00	r1 = *(u32 *)(r8 + 4)
      55:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB34_5>
      56:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      57:	5d 01 3f 01 00 00 00 00	if r1 != r0 goto +319 <LBB34_92>

00000000000001d0 <LBB34_5>:
      58:	b7 01 00 00 10 00 00 00	r1 = 16
      59:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
      60:	bf 93 00 00 00 00 00 00	r3 = r9
      61:	0f 13 00 00 00 00 00 00	r3 += r1
      62:	bf a6 00 00 00 00 00 00	r6 = r10
      63:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      64:	bf 61 00 00 00 00 00 00	r1 = r6
      65:	b7 02 00 00 08 00 00 00	r2 = 8
      66:	85 00 00 00 71 00 00 00	call 113
      67:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      68:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      69:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      70:	bf 61 00 00 00 00 00 00	r1 = r6
      71:	b7 02 00 00 08 00 00 00	r2 = 8
      72:	85 00 00 00 71 00 00 00	call 113
      73:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      74:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      75:	0f 13 00 00 00 00 00 00	r3 += r1
      76:	bf a1 00 00 00 00 00 00	r1 = r10
      77:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      78:	b7 02 00 00 04 00 00 00	r2 = 4
      79:	85 00 00 00 71 00 00 00	call 113
      80:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      81:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB34_8>
      82:	b7 01 00 00 18 00 00 00	r1 = 24
      83:	bf 93 00 00 00 00 00 00	r3 = r9
      84:	0f 13 00 00 00 00 00 00	r3 += r1
      85:	bf a1 00 00 00 00 00 00	r1 = r10
      86:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
      87:	b7 02 00 00 08 00 00 00	r2 = 8
      88:	85 00 00 00 71 00 00 00	call 113
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
      90:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB34_11>
      91:	b7 01 00 00 30 00 00 00	r1 = 48
      92:	0f 13 00 00 00 00 00 00	r3 += r1
      93:	bf a1 00 00 00 00 00 00	r1 = r10
      94:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      95:	b7 02 00 00 08 00 00 00	r2 = 8
      96:	85 00 00 00 71 00 00 00	call 113
      97:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      98:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     102:	b7 02 00 00 04 00 00 00	r2 = 4
     103:	85 00 00 00 71 00 00 00	call 113
     104:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000348 <LBB34_8>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     105:	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0)
     106:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB34_11>
     107:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB34_11>
     108:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB34_92>

0000000000000368 <LBB34_11>:
;     u16 icmpid = cfg->icmpid;
     109:	69 81 0e 00 00 00 00 00	r1 = *(u16 *)(r8 + 14)
;     u16 port = cfg->port;
     110:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     111:	69 81 0c 00 00 00 00 00	r1 = *(u16 *)(r8 + 12)
;     u8 proto = cfg->proto;
     112:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     113:	71 81 12 00 00 00 00 00	r1 = *(u8 *)(r8 + 18)
;     u32 addr = cfg->ip;
     114:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     115:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
     116:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     117:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     118:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     119:	b7 01 00 00 c0 00 00 00	r1 = 192
     120:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     121:	bf 93 00 00 00 00 00 00	r3 = r9
     122:	0f 13 00 00 00 00 00 00	r3 += r1
     123:	bf a1 00 00 00 00 00 00	r1 = r10
     124:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     125:	b7 02 00 00 08 00 00 00	r2 = 8
     126:	85 00 00 00 71 00 00 00	call 113
     127:	b7 01 00 00 b6 00 00 00	r1 = 182
     128:	bf 93 00 00 00 00 00 00	r3 = r9
     129:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     130:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     131:	bf a1 00 00 00 00 00 00	r1 = r10
     132:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     133:	b7 02 00 00 02 00 00 00	r2 = 2
     134:	85 00 00 00 71 00 00 00	call 113
     135:	b7 01 00 00 b4 00 00 00	r1 = 180
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     138:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     139:	bf a1 00 00 00 00 00 00	r1 = r10
     140:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     141:	b7 02 00 00 02 00 00 00	r2 = 2
     142:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     143:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     144:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     145:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB34_13>
     146:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000498 <LBB34_13>:
;     return head + network_header;
     147:	57 09 00 00 ff ff 00 00	r9 &= 65535
     148:	0f 96 00 00 00 00 00 00	r6 += r9
     149:	bf a1 00 00 00 00 00 00	r1 = r10
     150:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     151:	b7 02 00 00 01 00 00 00	r2 = 1
     152:	bf 63 00 00 00 00 00 00	r3 = r6
     153:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     154:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     155:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     156:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB34_20>
     157:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB34_92>
;         if (addr != 0) {
     158:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     159:	bf 19 00 00 00 00 00 00	r9 = r1
     160:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB34_18>
     161:	b7 01 00 00 0c 00 00 00	r1 = 12
     162:	bf 63 00 00 00 00 00 00	r3 = r6
     163:	0f 13 00 00 00 00 00 00	r3 += r1
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     166:	b7 02 00 00 04 00 00 00	r2 = 4
     167:	85 00 00 00 71 00 00 00	call 113
     168:	b7 01 00 00 10 00 00 00	r1 = 16
     169:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     170:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     171:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     172:	bf a1 00 00 00 00 00 00	r1 = r10
     173:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     174:	b7 02 00 00 04 00 00 00	r2 = 4
     175:	bf 63 00 00 00 00 00 00	r3 = r6
     176:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     177:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     178:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB34_54>
     179:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     180:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     181:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB34_92>
     182:	05 00 da 00 00 00 00 00	goto +218 <LBB34_54>

00000000000005b8 <LBB34_20>:
     183:	b7 01 00 00 06 00 00 00	r1 = 6
     184:	0f 16 00 00 00 00 00 00	r6 += r1
     185:	bf a1 00 00 00 00 00 00	r1 = r10
     186:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     187:	b7 02 00 00 01 00 00 00	r2 = 1
     188:	bf 63 00 00 00 00 00 00	r3 = r6
     189:	85 00 00 00 04 00 00 00	call 4
     190:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     191:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     192:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     193:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB34_22>
     194:	b7 04 00 00 80 00 00 00	r4 = 128
     195:	b7 03 00 00 81 00 00 00	r3 = 129
     196:	b7 01 00 00 3a 00 00 00	r1 = 58
     197:	05 00 0d 00 00 00 00 00	goto +13 <LBB34_22>

0000000000000630 <LBB34_18>:
     198:	b7 01 00 00 09 00 00 00	r1 = 9
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     208:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB34_22>
     209:	b7 04 00 00 08 00 00 00	r4 = 8
     210:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000698 <LBB34_22>:
;     if (proto != 0 && proto != l4_proto)
     211:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     212:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB34_24>
     213:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB34_92>

00000000000006b0 <LBB34_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     214:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB34_27>
     215:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB34_29>
     216:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB34_35>
     217:	05 00 9f 00 00 00 00 00	goto +159 <LBB34_92>

00000000000006d0 <LBB34_35>:
     218:	b7 01 00 00 c0 00 00 00	r1 = 192
     219:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     220:	bf 63 00 00 00 00 00 00	r3 = r6
     221:	0f 13 00 00 00 00 00 00	r3 += r1
     222:	bf a1 00 00 00 00 00 00	r1 = r10
     223:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     224:	b7 02 00 00 08 00 00 00	r2 = 8
     225:	85 00 00 00 71 00 00 00	call 113
     226:	b7 01 00 00 b6 00 00 00	r1 = 182
     227:	bf 63 00 00 00 00 00 00	r3 = r6
     228:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     229:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     230:	bf a1 00 00 00 00 00 00	r1 = r10
     231:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     232:	b7 02 00 00 02 00 00 00	r2 = 2
     233:	85 00 00 00 71 00 00 00	call 113
     234:	b7 01 00 00 b4 00 00 00	r1 = 180
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     237:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     238:	bf a1 00 00 00 00 00 00	r1 = r10
     239:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     240:	b7 02 00 00 02 00 00 00	r2 = 2
     241:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     242:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     243:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     244:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB34_37>
     245:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000007b0 <LBB34_37>:
;     return head + network_header;
     246:	57 06 00 00 ff ff 00 00	r6 &= 65535
     247:	0f 69 00 00 00 00 00 00	r9 += r6
     248:	bf a1 00 00 00 00 00 00	r1 = r10
     249:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     250:	b7 02 00 00 01 00 00 00	r2 = 1
     251:	bf 93 00 00 00 00 00 00	r3 = r9
     252:	85 00 00 00 04 00 00 00	call 4
     253:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     254:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     255:	57 02 00 00 f0 00 00 00	r2 &= 240
     256:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB34_39>
     257:	bf a1 00 00 00 00 00 00	r1 = r10
     258:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     259:	b7 02 00 00 01 00 00 00	r2 = 1
     260:	bf 93 00 00 00 00 00 00	r3 = r9
     261:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     262:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     263:	67 01 00 00 02 00 00 00	r1 <<= 2
     264:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000848 <LBB34_39>:
;     return l3_header + transport_size;
     265:	0f 19 00 00 00 00 00 00	r9 += r1
     266:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9

0000000000000858 <LBB34_40>:
     267:	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 72)
;     if (port != 0) {
     268:	bf 92 00 00 00 00 00 00	r2 = r9
     269:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB34_45>
;         if (l4_proto == IPPROTO_TCP) {
     270:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     271:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB34_52>
     272:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB34_45>
     273:	b7 01 00 00 00 00 00 00	r1 = 0
     274:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     275:	bf 63 00 00 00 00 00 00	r3 = r6
     276:	0f 13 00 00 00 00 00 00	r3 += r1
     277:	bf a1 00 00 00 00 00 00	r1 = r10
     278:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     279:	b7 02 00 00 02 00 00 00	r2 = 2
     280:	85 00 00 00 71 00 00 00	call 113
     281:	b7 01 00 00 02 00 00 00	r1 = 2
     282:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     283:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     284:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     285:	bf a1 00 00 00 00 00 00	r1 = r10
     286:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     287:	b7 02 00 00 02 00 00 00	r2 = 2
     288:	bf 63 00 00 00 00 00 00	r3 = r6
     289:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     290:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     291:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     292:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB34_54>
     293:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     294:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB34_92>
     295:	05 00 69 00 00 00 00 00	goto +105 <LBB34_54>

0000000000000940 <LBB34_27>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     296:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB34_35>
     297:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB34_92>

0000000000000950 <LBB34_29>:
     298:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r4
     299:	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r3
     300:	b7 01 00 00 c0 00 00 00	r1 = 192
     301:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     302:	bf 63 00 00 00 00 00 00	r3 = r6
     303:	0f 13 00 00 00 00 00 00	r3 += r1
     304:	bf a1 00 00 00 00 00 00	r1 = r10
     305:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     306:	b7 02 00 00 08 00 00 00	r2 = 8
     307:	85 00 00 00 71 00 00 00	call 113
     308:	b7 01 00 00 b6 00 00 00	r1 = 182
     309:	bf 63 00 00 00 00 00 00	r3 = r6
     310:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     311:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     312:	bf a1 00 00 00 00 00 00	r1 = r10
     313:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     314:	b7 02 00 00 02 00 00 00	r2 = 2
     315:	85 00 00 00 71 00 00 00	call 113
     316:	b7 01 00 00 b4 00 00 00	r1 = 180
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     319:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     320:	bf a1 00 00 00 00 00 00	r1 = r10
     321:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     322:	b7 02 00 00 02 00 00 00	r2 = 2
     323:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     324:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     325:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     326:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB34_31>
     327:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000a40 <LBB34_31>:
;     return head + network_header;
     328:	57 06 00 00 ff ff 00 00	r6 &= 65535
     329:	0f 69 00 00 00 00 00 00	r9 += r6
     330:	bf a1 00 00 00 00 00 00	r1 = r10
     331:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     332:	b7 02 00 00 01 00 00 00	r2 = 1
     333:	bf 93 00 00 00 00 00 00	r3 = r9
     334:	85 00 00 00 04 00 00 00	call 4
     335:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     336:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     337:	57 02 00 00 f0 00 00 00	r2 &= 240
     338:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB34_33>
     339:	bf a1 00 00 00 00 00 00	r1 = r10
     340:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     341:	b7 02 00 00 01 00 00 00	r2 = 1
     342:	bf 93 00 00 00 00 00 00	r3 = r9
     343:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     344:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     345:	67 01 00 00 02 00 00 00	r1 <<= 2
     346:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000ad8 <LBB34_33>:
;     return l3_header + transport_size;
     347:	0f 19 00 00 00 00 00 00	r9 += r1
     348:	bf a6 00 00 00 00 00 00	r6 = r10
     349:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     350:	bf 61 00 00 00 00 00 00	r1 = r6
     351:	b7 02 00 00 08 00 00 00	r2 = 8
     352:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
     353:	bf 93 00 00 00 00 00 00	r3 = r9
     354:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     355:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     356:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     357:	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 88)
     358:	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 96)
     359:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB34_40>
     360:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     361:	07 02 00 00 e8 ff ff ff	r2 += -24
     362:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     363:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB34_40>
     364:	05 00 0c 00 00 00 00 00	goto +12 <LBB34_92>

0000000000000b68 <LBB34_45>:
;     if (proto != 0 && proto != l4_proto)
     365:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     366:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB34_54>
     367:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
;     if (proto != 0 && icmpid != 0) {
     368:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB34_54>
     369:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     370:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB34_54>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     371:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     372:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB34_50>
     373:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB34_54>

0000000000000bb0 <LBB34_50>:
;         if (icmpid != ev_icmpid)
     374:	57 01 00 00 ff ff 00 00	r1 &= 65535
     375:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
     376:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB34_54>

0000000000000bc8 <LBB34_92>:
;     return do_trace(ctx, skb, "br_nf_pre_routing_finish");
     377:	b7 00 00 00 00 00 00 00	r0 = 0
     378:	95 00 00 00 00 00 00 00	exit

0000000000000bd8 <LBB34_52>:
     379:	b7 01 00 00 00 00 00 00	r1 = 0
     380:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     381:	bf 63 00 00 00 00 00 00	r3 = r6
     382:	0f 13 00 00 00 00 00 00	r3 += r1
     383:	bf a1 00 00 00 00 00 00	r1 = r10
     384:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     385:	b7 02 00 00 02 00 00 00	r2 = 2
     386:	85 00 00 00 71 00 00 00	call 113
     387:	b7 01 00 00 02 00 00 00	r1 = 2
     388:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     389:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     390:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     391:	bf a1 00 00 00 00 00 00	r1 = r10
     392:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     393:	b7 02 00 00 02 00 00 00	r2 = 2
     394:	bf 63 00 00 00 00 00 00	r3 = r6
     395:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     396:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     397:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     398:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB34_54>
     399:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     400:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB34_92>

0000000000000c88 <LBB34_54>:
;     event->flags |= SKBTRACER_EVENT_IF;
     401:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     402:	47 01 00 00 01 00 00 00	r1 |= 1
     403:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     404:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
;     ev->skb = (u64)skb;
     405:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     406:	85 00 00 00 05 00 00 00	call 5
     407:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     408:	b7 01 00 00 10 00 00 00	r1 = 16
     409:	bf 96 00 00 00 00 00 00	r6 = r9
     410:	0f 16 00 00 00 00 00 00	r6 += r1
     411:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     412:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     413:	b7 02 00 00 08 00 00 00	r2 = 8
     414:	bf 63 00 00 00 00 00 00	r3 = r6
     415:	85 00 00 00 71 00 00 00	call 113
     416:	b7 01 00 00 70 00 00 00	r1 = 112
     417:	bf 93 00 00 00 00 00 00	r3 = r9
     418:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     419:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     420:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     421:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     422:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     423:	b7 02 00 00 04 00 00 00	r2 = 4
     424:	85 00 00 00 71 00 00 00	call 113
     425:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     426:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     427:	85 00 00 00 08 00 00 00	call 8
     428:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     429:	85 00 00 00 0e 00 00 00	call 14
     430:	57 00 00 00 ff ff 00 00	r0 &= 65535
     431:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     432:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     433:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     434:	bf 91 00 00 00 00 00 00	r1 = r9
     435:	b7 02 00 00 08 00 00 00	r2 = 8
     436:	bf 63 00 00 00 00 00 00	r3 = r6
     437:	85 00 00 00 71 00 00 00	call 113
     438:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     439:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     440:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     441:	bf 91 00 00 00 00 00 00	r1 = r9
     442:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     443:	b7 02 00 00 08 00 00 00	r2 = 8
     444:	85 00 00 00 71 00 00 00	call 113
     445:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     446:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     447:	0f 13 00 00 00 00 00 00	r3 += r1
     448:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     449:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     450:	b7 02 00 00 04 00 00 00	r2 = 4
     451:	85 00 00 00 71 00 00 00	call 113
     452:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     453:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB34_57>
     454:	b7 01 00 00 18 00 00 00	r1 = 24
     455:	bf 93 00 00 00 00 00 00	r3 = r9
     456:	0f 13 00 00 00 00 00 00	r3 += r1
     457:	bf a1 00 00 00 00 00 00	r1 = r10
     458:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     459:	b7 02 00 00 08 00 00 00	r2 = 8
     460:	85 00 00 00 71 00 00 00	call 113
     461:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     462:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     463:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB34_57>
     464:	b7 01 00 00 30 00 00 00	r1 = 48
     465:	0f 13 00 00 00 00 00 00	r3 += r1
     466:	bf a1 00 00 00 00 00 00	r1 = r10
     467:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     468:	b7 02 00 00 08 00 00 00	r2 = 8
     469:	85 00 00 00 71 00 00 00	call 113
     470:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     471:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     472:	0f 13 00 00 00 00 00 00	r3 += r1
     473:	bf a1 00 00 00 00 00 00	r1 = r10
     474:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     475:	b7 02 00 00 04 00 00 00	r2 = 4
     476:	85 00 00 00 71 00 00 00	call 113
     477:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000ef0 <LBB34_57>:
;     pkt_info->netns = get_netns(skb);
     478:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     479:	b7 01 00 00 80 00 00 00	r1 = 128
     480:	bf 93 00 00 00 00 00 00	r3 = r9
     481:	0f 13 00 00 00 00 00 00	r3 += r1
     482:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     483:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     484:	bf a1 00 00 00 00 00 00	r1 = r10
     485:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     486:	b7 02 00 00 01 00 00 00	r2 = 1
     487:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     488:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     489:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     490:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     491:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     492:	b7 01 00 00 00 00 00 00	r1 = 0
     493:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     494:	0f 13 00 00 00 00 00 00	r3 += r1
;     pkt_info->ifname[0] = 0;
     495:	bf 71 00 00 00 00 00 00	r1 = r7
     496:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     497:	b7 02 00 00 10 00 00 00	r2 = 16
     498:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     499:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     500:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB34_59>
     501:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     502:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     503:	b7 01 00 00 69 00 00 00	r1 = 105
     504:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     505:	b7 01 00 00 6e 00 00 00	r1 = 110
     506:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000000fd8 <LBB34_59>:
     507:	b7 01 00 00 c0 00 00 00	r1 = 192
     508:	bf 93 00 00 00 00 00 00	r3 = r9
     509:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     510:	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r3
     511:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     512:	07 01 00 00 f8 ff ff ff	r1 += -8
     513:	b7 02 00 00 08 00 00 00	r2 = 8
     514:	85 00 00 00 71 00 00 00	call 113
     515:	b7 01 00 00 b6 00 00 00	r1 = 182
     516:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     517:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     518:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     519:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     520:	b7 02 00 00 02 00 00 00	r2 = 2
     521:	bf 93 00 00 00 00 00 00	r3 = r9
     522:	85 00 00 00 71 00 00 00	call 113
     523:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     524:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     525:	bf 71 00 00 00 00 00 00	r1 = r7
     526:	07 01 00 00 64 00 00 00	r1 += 100
     527:	b7 02 00 00 06 00 00 00	r2 = 6
     528:	bf 63 00 00 00 00 00 00	r3 = r6
     529:	85 00 00 00 04 00 00 00	call 4
     530:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     531:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	b7 02 00 00 08 00 00 00	r2 = 8
     533:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     534:	85 00 00 00 71 00 00 00	call 113
     535:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     536:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     537:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     538:	b7 02 00 00 02 00 00 00	r2 = 2
     539:	bf 93 00 00 00 00 00 00	r3 = r9
     540:	85 00 00 00 71 00 00 00	call 113
     541:	b7 01 00 00 b4 00 00 00	r1 = 180
     542:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
     543:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     544:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     547:	b7 02 00 00 02 00 00 00	r2 = 2
     548:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     549:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     550:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     551:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB34_61>
     552:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001148 <LBB34_61>:
;     return head + network_header;
     553:	57 09 00 00 ff ff 00 00	r9 &= 65535
     554:	0f 96 00 00 00 00 00 00	r6 += r9
     555:	bf a1 00 00 00 00 00 00	r1 = r10
     556:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     557:	b7 02 00 00 01 00 00 00	r2 = 1
     558:	bf 63 00 00 00 00 00 00	r3 = r6
     559:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     560:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     561:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     562:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB34_66>
     563:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB34_92>
     564:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     565:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     566:	b7 01 00 00 c0 00 00 00	r1 = 192
     567:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     568:	bf 93 00 00 00 00 00 00	r3 = r9
     569:	0f 13 00 00 00 00 00 00	r3 += r1
     570:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     572:	b7 02 00 00 08 00 00 00	r2 = 8
     573:	85 00 00 00 71 00 00 00	call 113
     574:	b7 01 00 00 b6 00 00 00	r1 = 182
     575:	bf 93 00 00 00 00 00 00	r3 = r9
     576:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     577:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     578:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     579:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     580:	b7 02 00 00 02 00 00 00	r2 = 2
     581:	85 00 00 00 71 00 00 00	call 113
     582:	b7 01 00 00 b4 00 00 00	r1 = 180
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     585:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     586:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     587:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     588:	b7 02 00 00 02 00 00 00	r2 = 2
     589:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     590:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     591:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     592:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB34_65>
     593:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001290 <LBB34_65>:
;     return head + network_header;
     594:	57 09 00 00 ff ff 00 00	r9 &= 65535
     595:	0f 96 00 00 00 00 00 00	r6 += r9
     596:	b7 01 00 00 0c 00 00 00	r1 = 12
     597:	bf 63 00 00 00 00 00 00	r3 = r6
     598:	0f 13 00 00 00 00 00 00	r3 += r1
     599:	bf a1 00 00 00 00 00 00	r1 = r10
     600:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     601:	b7 02 00 00 04 00 00 00	r2 = 4
     602:	85 00 00 00 71 00 00 00	call 113
     603:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     604:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     605:	b7 01 00 00 10 00 00 00	r1 = 16
     606:	bf 63 00 00 00 00 00 00	r3 = r6
     607:	0f 13 00 00 00 00 00 00	r3 += r1
     608:	bf a1 00 00 00 00 00 00	r1 = r10
     609:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     610:	b7 02 00 00 04 00 00 00	r2 = 4
     611:	85 00 00 00 71 00 00 00	call 113
     612:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     613:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     614:	b7 01 00 00 02 00 00 00	r1 = 2
     615:	bf 63 00 00 00 00 00 00	r3 = r6
     616:	0f 13 00 00 00 00 00 00	r3 += r1
     617:	bf a1 00 00 00 00 00 00	r1 = r10
     618:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     619:	b7 02 00 00 02 00 00 00	r2 = 2
     620:	85 00 00 00 71 00 00 00	call 113
     621:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     622:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     623:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     624:	b7 01 00 00 09 00 00 00	r1 = 9
     625:	05 00 38 00 00 00 00 00	goto +56 <LBB34_69>

0000000000001390 <LBB34_66>:
     626:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     627:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     628:	b7 01 00 00 c0 00 00 00	r1 = 192
     629:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     630:	bf 93 00 00 00 00 00 00	r3 = r9
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     634:	b7 02 00 00 08 00 00 00	r2 = 8
     635:	85 00 00 00 71 00 00 00	call 113
     636:	b7 01 00 00 b6 00 00 00	r1 = 182
     637:	bf 93 00 00 00 00 00 00	r3 = r9
     638:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     639:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     640:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     641:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     642:	b7 02 00 00 02 00 00 00	r2 = 2
     643:	85 00 00 00 71 00 00 00	call 113
     644:	b7 01 00 00 b4 00 00 00	r1 = 180
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     647:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     648:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     649:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     650:	b7 02 00 00 02 00 00 00	r2 = 2
     651:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     652:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     653:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     654:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB34_68>
     655:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001480 <LBB34_68>:
;     return head + network_header;
     656:	57 09 00 00 ff ff 00 00	r9 &= 65535
     657:	0f 96 00 00 00 00 00 00	r6 += r9
     658:	b7 01 00 00 08 00 00 00	r1 = 8
     659:	bf 63 00 00 00 00 00 00	r3 = r6
     660:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
     661:	bf 71 00 00 00 00 00 00	r1 = r7
     662:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     663:	b7 02 00 00 10 00 00 00	r2 = 16
     664:	85 00 00 00 04 00 00 00	call 4
     665:	b7 01 00 00 18 00 00 00	r1 = 24
     666:	bf 63 00 00 00 00 00 00	r3 = r6
     667:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     668:	bf 71 00 00 00 00 00 00	r1 = r7
     669:	07 01 00 00 80 00 00 00	r1 += 128
     670:	b7 02 00 00 10 00 00 00	r2 = 16
     671:	85 00 00 00 04 00 00 00	call 4
     672:	b7 01 00 00 04 00 00 00	r1 = 4
     673:	bf 63 00 00 00 00 00 00	r3 = r6
     674:	0f 13 00 00 00 00 00 00	r3 += r1
     675:	bf a1 00 00 00 00 00 00	r1 = r10
     676:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     677:	b7 02 00 00 02 00 00 00	r2 = 2
     678:	85 00 00 00 71 00 00 00	call 113
     679:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     680:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     681:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000001550 <LBB34_69>:
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
     684:	bf a1 00 00 00 00 00 00	r1 = r10
     685:	07 01 00 00 f8 ff ff ff	r1 += -8
     686:	b7 02 00 00 01 00 00 00	r2 = 1
     687:	85 00 00 00 71 00 00 00	call 113
     688:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     689:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     690:	bf a1 00 00 00 00 00 00	r1 = r10
     691:	07 01 00 00 f8 ff ff ff	r1 += -8
     692:	b7 02 00 00 01 00 00 00	r2 = 1
     693:	bf 63 00 00 00 00 00 00	r3 = r6
     694:	85 00 00 00 04 00 00 00	call 4
     695:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     696:	57 01 00 00 f0 00 00 00	r1 &= 240
     697:	77 01 00 00 04 00 00 00	r1 >>= 4
     698:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     699:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     700:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB34_72>
     701:	15 01 53 00 01 00 00 00	if r1 == 1 goto +83 <LBB34_84>
     702:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB34_74>
     703:	05 00 b9 fe 00 00 00 00	goto -327 <LBB34_92>

0000000000001600 <LBB34_74>:
     704:	b7 01 00 00 c0 00 00 00	r1 = 192
     705:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     706:	bf 93 00 00 00 00 00 00	r3 = r9
     707:	0f 13 00 00 00 00 00 00	r3 += r1
     708:	bf a1 00 00 00 00 00 00	r1 = r10
     709:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     710:	b7 02 00 00 08 00 00 00	r2 = 8
     711:	85 00 00 00 71 00 00 00	call 113
     712:	b7 01 00 00 b6 00 00 00	r1 = 182
     713:	bf 93 00 00 00 00 00 00	r3 = r9
     714:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     715:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     716:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     717:	bf a1 00 00 00 00 00 00	r1 = r10
     718:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     719:	b7 02 00 00 02 00 00 00	r2 = 2
     720:	85 00 00 00 71 00 00 00	call 113
     721:	b7 01 00 00 b4 00 00 00	r1 = 180
     722:	0f 19 00 00 00 00 00 00	r9 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     723:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     726:	b7 02 00 00 02 00 00 00	r2 = 2
     727:	bf 93 00 00 00 00 00 00	r3 = r9
     728:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     729:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     730:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     731:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB34_76>
     732:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000016e8 <LBB34_76>:
;     return head + network_header;
     733:	57 06 00 00 ff ff 00 00	r6 &= 65535
     734:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
     735:	0f 61 00 00 00 00 00 00	r1 += r6
     736:	bf 16 00 00 00 00 00 00	r6 = r1
     737:	bf a1 00 00 00 00 00 00	r1 = r10
     738:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     739:	b7 02 00 00 01 00 00 00	r2 = 1
     740:	bf 63 00 00 00 00 00 00	r3 = r6
     741:	85 00 00 00 04 00 00 00	call 4
     742:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     743:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     744:	57 02 00 00 f0 00 00 00	r2 &= 240
     745:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB34_78>
     746:	bf a1 00 00 00 00 00 00	r1 = r10
     747:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     748:	b7 02 00 00 01 00 00 00	r2 = 1
     749:	bf 63 00 00 00 00 00 00	r3 = r6
     750:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     751:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     752:	67 01 00 00 02 00 00 00	r1 <<= 2
     753:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001790 <LBB34_78>:
;     return l3_header + transport_size;
     754:	0f 16 00 00 00 00 00 00	r6 += r1
     755:	b7 01 00 00 00 00 00 00	r1 = 0
     756:	bf 63 00 00 00 00 00 00	r3 = r6
     757:	0f 13 00 00 00 00 00 00	r3 += r1
     758:	bf a1 00 00 00 00 00 00	r1 = r10
     759:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     760:	b7 02 00 00 02 00 00 00	r2 = 2
     761:	85 00 00 00 71 00 00 00	call 113
     762:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     763:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     764:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     765:	b7 01 00 00 02 00 00 00	r1 = 2
     766:	bf 63 00 00 00 00 00 00	r3 = r6
     767:	0f 13 00 00 00 00 00 00	r3 += r1
     768:	bf a1 00 00 00 00 00 00	r1 = r10
     769:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     770:	b7 02 00 00 02 00 00 00	r2 = 2
     771:	85 00 00 00 71 00 00 00	call 113
     772:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     773:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     774:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     775:	07 06 00 00 0c 00 00 00	r6 += 12
     776:	bf 71 00 00 00 00 00 00	r1 = r7
     777:	07 01 00 00 9c 00 00 00	r1 += 156
     778:	b7 02 00 00 02 00 00 00	r2 = 2
     779:	bf 63 00 00 00 00 00 00	r3 = r6
     780:	85 00 00 00 04 00 00 00	call 4
     781:	05 00 8a 00 00 00 00 00	goto +138 <LBB34_89>

0000000000001870 <LBB34_72>:
;     if (l4_proto == IPPROTO_TCP) {
     782:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB34_79>
     783:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB34_84>
     784:	05 00 68 fe 00 00 00 00	goto -408 <LBB34_92>

0000000000001888 <LBB34_84>:
     785:	b7 01 00 00 c0 00 00 00	r1 = 192
     786:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     787:	bf 63 00 00 00 00 00 00	r3 = r6
     788:	0f 13 00 00 00 00 00 00	r3 += r1
     789:	bf a1 00 00 00 00 00 00	r1 = r10
     790:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     791:	b7 02 00 00 08 00 00 00	r2 = 8
     792:	85 00 00 00 71 00 00 00	call 113
     793:	b7 01 00 00 b6 00 00 00	r1 = 182
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     796:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     797:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     798:	bf a1 00 00 00 00 00 00	r1 = r10
     799:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     800:	b7 02 00 00 02 00 00 00	r2 = 2
     801:	85 00 00 00 71 00 00 00	call 113
     802:	b7 01 00 00 b4 00 00 00	r1 = 180
     803:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     804:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     805:	bf a1 00 00 00 00 00 00	r1 = r10
     806:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     807:	b7 02 00 00 02 00 00 00	r2 = 2
     808:	bf 63 00 00 00 00 00 00	r3 = r6
     809:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     810:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     811:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     812:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB34_86>
     813:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001970 <LBB34_86>:
;     return head + network_header;
     814:	57 09 00 00 ff ff 00 00	r9 &= 65535
     815:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     816:	0f 96 00 00 00 00 00 00	r6 += r9
     817:	bf a1 00 00 00 00 00 00	r1 = r10
     818:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     819:	b7 02 00 00 01 00 00 00	r2 = 1
     820:	bf 63 00 00 00 00 00 00	r3 = r6
     821:	85 00 00 00 04 00 00 00	call 4
     822:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     823:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     824:	57 02 00 00 f0 00 00 00	r2 &= 240
     825:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB34_88>
     826:	bf a1 00 00 00 00 00 00	r1 = r10
     827:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     828:	b7 02 00 00 01 00 00 00	r2 = 1
     829:	bf 63 00 00 00 00 00 00	r3 = r6
     830:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     831:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     832:	67 01 00 00 02 00 00 00	r1 <<= 2
     833:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a10 <LBB34_88>:
;     return l3_header + transport_size;
     834:	0f 16 00 00 00 00 00 00	r6 += r1
     835:	bf a9 00 00 00 00 00 00	r9 = r10
     836:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     837:	bf 91 00 00 00 00 00 00	r1 = r9
     838:	b7 02 00 00 08 00 00 00	r2 = 8
     839:	bf 63 00 00 00 00 00 00	r3 = r6
     840:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     841:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     842:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     843:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     844:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     845:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     846:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     847:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     848:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     849:	05 00 46 00 00 00 00 00	goto +70 <LBB34_89>

0000000000001a90 <LBB34_79>:
     850:	b7 01 00 00 c0 00 00 00	r1 = 192
     851:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     852:	bf 63 00 00 00 00 00 00	r3 = r6
     853:	0f 13 00 00 00 00 00 00	r3 += r1
     854:	bf a1 00 00 00 00 00 00	r1 = r10
     855:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     856:	b7 02 00 00 08 00 00 00	r2 = 8
     857:	85 00 00 00 71 00 00 00	call 113
     858:	b7 01 00 00 b6 00 00 00	r1 = 182
     859:	bf 63 00 00 00 00 00 00	r3 = r6
     860:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     861:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     862:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     863:	bf a1 00 00 00 00 00 00	r1 = r10
     864:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     865:	b7 02 00 00 02 00 00 00	r2 = 2
     866:	85 00 00 00 71 00 00 00	call 113
     867:	b7 01 00 00 b4 00 00 00	r1 = 180
     868:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     869:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     870:	bf a1 00 00 00 00 00 00	r1 = r10
     871:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     872:	b7 02 00 00 02 00 00 00	r2 = 2
     873:	bf 63 00 00 00 00 00 00	r3 = r6
     874:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     875:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     876:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     877:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB34_81>
     878:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001b78 <LBB34_81>:
;     return head + network_header;
     879:	57 09 00 00 ff ff 00 00	r9 &= 65535
     880:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     881:	0f 96 00 00 00 00 00 00	r6 += r9
     882:	bf a1 00 00 00 00 00 00	r1 = r10
     883:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     884:	b7 02 00 00 01 00 00 00	r2 = 1
     885:	bf 63 00 00 00 00 00 00	r3 = r6
     886:	85 00 00 00 04 00 00 00	call 4
     887:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     888:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     889:	57 02 00 00 f0 00 00 00	r2 &= 240
     890:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB34_83>
     891:	bf a1 00 00 00 00 00 00	r1 = r10
     892:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     893:	b7 02 00 00 01 00 00 00	r2 = 1
     894:	bf 63 00 00 00 00 00 00	r3 = r6
     895:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     896:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     897:	67 01 00 00 02 00 00 00	r1 <<= 2
     898:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c18 <LBB34_83>:
;     return l3_header + transport_size;
     899:	0f 16 00 00 00 00 00 00	r6 += r1
     900:	b7 01 00 00 00 00 00 00	r1 = 0
     901:	bf 63 00 00 00 00 00 00	r3 = r6
     902:	0f 13 00 00 00 00 00 00	r3 += r1
     903:	bf a1 00 00 00 00 00 00	r1 = r10
     904:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     905:	b7 02 00 00 02 00 00 00	r2 = 2
     906:	85 00 00 00 71 00 00 00	call 113
     907:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     908:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     909:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     910:	b7 01 00 00 02 00 00 00	r1 = 2
     911:	0f 16 00 00 00 00 00 00	r6 += r1
     912:	bf a1 00 00 00 00 00 00	r1 = r10
     913:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     914:	b7 02 00 00 02 00 00 00	r2 = 2
     915:	bf 63 00 00 00 00 00 00	r3 = r6
     916:	85 00 00 00 71 00 00 00	call 113
     917:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     918:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     919:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001cc0 <LBB34_89>:
     920:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
;     return cfg->callstack == 0;
     921:	71 81 11 00 00 00 00 00	r1 = *(u8 *)(r8 + 17)
;     if (!filter_callstack(cfg))
     922:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB34_91>
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
     923:	bf 61 00 00 00 00 00 00	r1 = r6
     924:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     926:	b7 03 00 00 00 00 00 00	r3 = 0
     927:	85 00 00 00 1b 00 00 00	call 27
     928:	63 07 30 00 00 00 00 00	*(u32 *)(r7 + 48) = r0

0000000000001d08 <LBB34_91>:
     929:	b7 01 00 00 68 00 00 00	r1 = 104
;     for (j = 10; j < 64; j += 10) CPY(j);
     930:	73 17 17 00 00 00 00 00	*(u8 *)(r7 + 23) = r1
     931:	b7 01 00 00 73 00 00 00	r1 = 115
     932:	73 17 16 00 00 00 00 00	*(u8 *)(r7 + 22) = r1
     933:	b7 01 00 00 67 00 00 00	r1 = 103
     934:	73 17 10 00 00 00 00 00	*(u8 *)(r7 + 16) = r1
     935:	b7 01 00 00 69 00 00 00	r1 = 105
     936:	73 17 15 00 00 00 00 00	*(u8 *)(r7 + 21) = r1
     937:	73 17 13 00 00 00 00 00	*(u8 *)(r7 + 19) = r1
     938:	73 17 0e 00 00 00 00 00	*(u8 *)(r7 + 14) = r1
     939:	b7 01 00 00 74 00 00 00	r1 = 116
     940:	73 17 0d 00 00 00 00 00	*(u8 *)(r7 + 13) = r1
     941:	b7 01 00 00 75 00 00 00	r1 = 117
     942:	73 17 0c 00 00 00 00 00	*(u8 *)(r7 + 12) = r1
     943:	b7 01 00 00 6f 00 00 00	r1 = 111
     944:	73 17 0b 00 00 00 00 00	*(u8 *)(r7 + 11) = r1
     945:	b7 01 00 00 65 00 00 00	r1 = 101
     946:	73 17 08 00 00 00 00 00	*(u8 *)(r7 + 8) = r1
     947:	b7 01 00 00 70 00 00 00	r1 = 112
     948:	73 17 06 00 00 00 00 00	*(u8 *)(r7 + 6) = r1
     949:	b7 01 00 00 66 00 00 00	r1 = 102
     950:	73 17 12 00 00 00 00 00	*(u8 *)(r7 + 18) = r1
     951:	73 17 04 00 00 00 00 00	*(u8 *)(r7 + 4) = r1
     952:	b7 01 00 00 6e 00 00 00	r1 = 110
     953:	73 17 14 00 00 00 00 00	*(u8 *)(r7 + 20) = r1
     954:	73 17 0f 00 00 00 00 00	*(u8 *)(r7 + 15) = r1
     955:	73 17 03 00 00 00 00 00	*(u8 *)(r7 + 3) = r1
     956:	b7 01 00 00 5f 00 00 00	r1 = 95
     957:	73 17 11 00 00 00 00 00	*(u8 *)(r7 + 17) = r1
     958:	73 17 09 00 00 00 00 00	*(u8 *)(r7 + 9) = r1
     959:	73 17 05 00 00 00 00 00	*(u8 *)(r7 + 5) = r1
     960:	73 17 02 00 00 00 00 00	*(u8 *)(r7 + 2) = r1
     961:	b7 01 00 00 72 00 00 00	r1 = 114
     962:	73 17 0a 00 00 00 00 00	*(u8 *)(r7 + 10) = r1
     963:	73 17 07 00 00 00 00 00	*(u8 *)(r7 + 7) = r1
     964:	73 17 01 00 00 00 00 00	*(u8 *)(r7 + 1) = r1
     965:	b7 01 00 00 62 00 00 00	r1 = 98
     966:	73 17 00 00 00 00 00 00	*(u8 *)(r7 + 0) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     967:	bf 61 00 00 00 00 00 00	r1 = r6
     968:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     970:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     972:	bf 74 00 00 00 00 00 00	r4 = r7
     973:	b7 05 00 00 e0 00 00 00	r5 = 224
     974:	85 00 00 00 19 00 00 00	call 25
     975:	05 00 a9 fd 00 00 00 00	goto -599 <LBB34_92>

Disassembly of section kprobe/br_pass_frame_up:

0000000000000000 <k_br_pass_f_up>:
; int k_br_pass_f_up(struct pt_regs *ctx) {
       0:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM1(ctx);
       1:	79 11 70 00 00 00 00 00	r1 = *(u64 *)(r1 + 112)
       2:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       3:	b7 06 00 00 00 00 00 00	r6 = 0
;     GET_CFG();
       4:	63 6a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r6
       5:	bf a2 00 00 00 00 00 00	r2 = r10
       6:	07 02 00 00 e4 ff ff ff	r2 += -28
;     GET_CFG();
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	85 00 00 00 01 00 00 00	call 1
      10:	bf 08 00 00 00 00 00 00	r8 = r0
      11:	15 08 6d 01 00 00 00 00	if r8 == 0 goto +365 <LBB35_92>
      12:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
      13:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      14:	63 18 08 00 00 00 00 00	*(u32 *)(r8 + 8) = r1
;     u32 ev_buff_id = 0;
      15:	63 6a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r6
      16:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      17:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      18:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      20:	85 00 00 00 01 00 00 00	call 1
      21:	bf 07 00 00 00 00 00 00	r7 = r0
;     if (!ev) return NULL;
      22:	55 07 01 00 00 00 00 00	if r7 != 0 goto +1 <LBB35_3>
      23:	05 00 61 01 00 00 00 00	goto +353 <LBB35_92>

00000000000000c0 <LBB35_3>:
      24:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      25:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      26:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      27:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      28:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      29:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      30:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      31:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      32:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      33:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      34:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      35:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      36:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      37:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      38:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      39:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      40:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      41:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      42:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      43:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      44:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      45:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      46:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      47:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      48:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      49:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      50:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      51:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      52:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      53:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      54:	61 81 04 00 00 00 00 00	r1 = *(u32 *)(r8 + 4)
      55:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB35_5>
      56:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      57:	5d 01 3f 01 00 00 00 00	if r1 != r0 goto +319 <LBB35_92>

00000000000001d0 <LBB35_5>:
      58:	b7 01 00 00 10 00 00 00	r1 = 16
      59:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
      60:	bf 93 00 00 00 00 00 00	r3 = r9
      61:	0f 13 00 00 00 00 00 00	r3 += r1
      62:	bf a6 00 00 00 00 00 00	r6 = r10
      63:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      64:	bf 61 00 00 00 00 00 00	r1 = r6
      65:	b7 02 00 00 08 00 00 00	r2 = 8
      66:	85 00 00 00 71 00 00 00	call 113
      67:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      68:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      69:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      70:	bf 61 00 00 00 00 00 00	r1 = r6
      71:	b7 02 00 00 08 00 00 00	r2 = 8
      72:	85 00 00 00 71 00 00 00	call 113
      73:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      74:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      75:	0f 13 00 00 00 00 00 00	r3 += r1
      76:	bf a1 00 00 00 00 00 00	r1 = r10
      77:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      78:	b7 02 00 00 04 00 00 00	r2 = 4
      79:	85 00 00 00 71 00 00 00	call 113
      80:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      81:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB35_8>
      82:	b7 01 00 00 18 00 00 00	r1 = 24
      83:	bf 93 00 00 00 00 00 00	r3 = r9
      84:	0f 13 00 00 00 00 00 00	r3 += r1
      85:	bf a1 00 00 00 00 00 00	r1 = r10
      86:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
      87:	b7 02 00 00 08 00 00 00	r2 = 8
      88:	85 00 00 00 71 00 00 00	call 113
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
      90:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB35_11>
      91:	b7 01 00 00 30 00 00 00	r1 = 48
      92:	0f 13 00 00 00 00 00 00	r3 += r1
      93:	bf a1 00 00 00 00 00 00	r1 = r10
      94:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      95:	b7 02 00 00 08 00 00 00	r2 = 8
      96:	85 00 00 00 71 00 00 00	call 113
      97:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      98:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     102:	b7 02 00 00 04 00 00 00	r2 = 4
     103:	85 00 00 00 71 00 00 00	call 113
     104:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000348 <LBB35_8>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     105:	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0)
     106:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB35_11>
     107:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB35_11>
     108:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB35_92>

0000000000000368 <LBB35_11>:
;     u16 icmpid = cfg->icmpid;
     109:	69 81 0e 00 00 00 00 00	r1 = *(u16 *)(r8 + 14)
;     u16 port = cfg->port;
     110:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     111:	69 81 0c 00 00 00 00 00	r1 = *(u16 *)(r8 + 12)
;     u8 proto = cfg->proto;
     112:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     113:	71 81 12 00 00 00 00 00	r1 = *(u8 *)(r8 + 18)
;     u32 addr = cfg->ip;
     114:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     115:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
     116:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     117:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     118:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     119:	b7 01 00 00 c0 00 00 00	r1 = 192
     120:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     121:	bf 93 00 00 00 00 00 00	r3 = r9
     122:	0f 13 00 00 00 00 00 00	r3 += r1
     123:	bf a1 00 00 00 00 00 00	r1 = r10
     124:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     125:	b7 02 00 00 08 00 00 00	r2 = 8
     126:	85 00 00 00 71 00 00 00	call 113
     127:	b7 01 00 00 b6 00 00 00	r1 = 182
     128:	bf 93 00 00 00 00 00 00	r3 = r9
     129:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     130:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     131:	bf a1 00 00 00 00 00 00	r1 = r10
     132:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     133:	b7 02 00 00 02 00 00 00	r2 = 2
     134:	85 00 00 00 71 00 00 00	call 113
     135:	b7 01 00 00 b4 00 00 00	r1 = 180
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     138:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     139:	bf a1 00 00 00 00 00 00	r1 = r10
     140:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     141:	b7 02 00 00 02 00 00 00	r2 = 2
     142:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     143:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     144:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     145:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB35_13>
     146:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000498 <LBB35_13>:
;     return head + network_header;
     147:	57 09 00 00 ff ff 00 00	r9 &= 65535
     148:	0f 96 00 00 00 00 00 00	r6 += r9
     149:	bf a1 00 00 00 00 00 00	r1 = r10
     150:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     151:	b7 02 00 00 01 00 00 00	r2 = 1
     152:	bf 63 00 00 00 00 00 00	r3 = r6
     153:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     154:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     155:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     156:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB35_20>
     157:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB35_92>
;         if (addr != 0) {
     158:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     159:	bf 19 00 00 00 00 00 00	r9 = r1
     160:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB35_18>
     161:	b7 01 00 00 0c 00 00 00	r1 = 12
     162:	bf 63 00 00 00 00 00 00	r3 = r6
     163:	0f 13 00 00 00 00 00 00	r3 += r1
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     166:	b7 02 00 00 04 00 00 00	r2 = 4
     167:	85 00 00 00 71 00 00 00	call 113
     168:	b7 01 00 00 10 00 00 00	r1 = 16
     169:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     170:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     171:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     172:	bf a1 00 00 00 00 00 00	r1 = r10
     173:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     174:	b7 02 00 00 04 00 00 00	r2 = 4
     175:	bf 63 00 00 00 00 00 00	r3 = r6
     176:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     177:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     178:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB35_54>
     179:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     180:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     181:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB35_92>
     182:	05 00 da 00 00 00 00 00	goto +218 <LBB35_54>

00000000000005b8 <LBB35_20>:
     183:	b7 01 00 00 06 00 00 00	r1 = 6
     184:	0f 16 00 00 00 00 00 00	r6 += r1
     185:	bf a1 00 00 00 00 00 00	r1 = r10
     186:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     187:	b7 02 00 00 01 00 00 00	r2 = 1
     188:	bf 63 00 00 00 00 00 00	r3 = r6
     189:	85 00 00 00 04 00 00 00	call 4
     190:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     191:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     192:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     193:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB35_22>
     194:	b7 04 00 00 80 00 00 00	r4 = 128
     195:	b7 03 00 00 81 00 00 00	r3 = 129
     196:	b7 01 00 00 3a 00 00 00	r1 = 58
     197:	05 00 0d 00 00 00 00 00	goto +13 <LBB35_22>

0000000000000630 <LBB35_18>:
     198:	b7 01 00 00 09 00 00 00	r1 = 9
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     208:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB35_22>
     209:	b7 04 00 00 08 00 00 00	r4 = 8
     210:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000698 <LBB35_22>:
;     if (proto != 0 && proto != l4_proto)
     211:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     212:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB35_24>
     213:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB35_92>

00000000000006b0 <LBB35_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     214:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB35_27>
     215:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB35_29>
     216:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB35_35>
     217:	05 00 9f 00 00 00 00 00	goto +159 <LBB35_92>

00000000000006d0 <LBB35_35>:
     218:	b7 01 00 00 c0 00 00 00	r1 = 192
     219:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     220:	bf 63 00 00 00 00 00 00	r3 = r6
     221:	0f 13 00 00 00 00 00 00	r3 += r1
     222:	bf a1 00 00 00 00 00 00	r1 = r10
     223:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     224:	b7 02 00 00 08 00 00 00	r2 = 8
     225:	85 00 00 00 71 00 00 00	call 113
     226:	b7 01 00 00 b6 00 00 00	r1 = 182
     227:	bf 63 00 00 00 00 00 00	r3 = r6
     228:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     229:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     230:	bf a1 00 00 00 00 00 00	r1 = r10
     231:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     232:	b7 02 00 00 02 00 00 00	r2 = 2
     233:	85 00 00 00 71 00 00 00	call 113
     234:	b7 01 00 00 b4 00 00 00	r1 = 180
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     237:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     238:	bf a1 00 00 00 00 00 00	r1 = r10
     239:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     240:	b7 02 00 00 02 00 00 00	r2 = 2
     241:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     242:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     243:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     244:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB35_37>
     245:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000007b0 <LBB35_37>:
;     return head + network_header;
     246:	57 06 00 00 ff ff 00 00	r6 &= 65535
     247:	0f 69 00 00 00 00 00 00	r9 += r6
     248:	bf a1 00 00 00 00 00 00	r1 = r10
     249:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     250:	b7 02 00 00 01 00 00 00	r2 = 1
     251:	bf 93 00 00 00 00 00 00	r3 = r9
     252:	85 00 00 00 04 00 00 00	call 4
     253:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     254:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     255:	57 02 00 00 f0 00 00 00	r2 &= 240
     256:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB35_39>
     257:	bf a1 00 00 00 00 00 00	r1 = r10
     258:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     259:	b7 02 00 00 01 00 00 00	r2 = 1
     260:	bf 93 00 00 00 00 00 00	r3 = r9
     261:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     262:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     263:	67 01 00 00 02 00 00 00	r1 <<= 2
     264:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000848 <LBB35_39>:
;     return l3_header + transport_size;
     265:	0f 19 00 00 00 00 00 00	r9 += r1
     266:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9

0000000000000858 <LBB35_40>:
     267:	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 72)
;     if (port != 0) {
     268:	bf 92 00 00 00 00 00 00	r2 = r9
     269:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB35_45>
;         if (l4_proto == IPPROTO_TCP) {
     270:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     271:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB35_52>
     272:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB35_45>
     273:	b7 01 00 00 00 00 00 00	r1 = 0
     274:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     275:	bf 63 00 00 00 00 00 00	r3 = r6
     276:	0f 13 00 00 00 00 00 00	r3 += r1
     277:	bf a1 00 00 00 00 00 00	r1 = r10
     278:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     279:	b7 02 00 00 02 00 00 00	r2 = 2
     280:	85 00 00 00 71 00 00 00	call 113
     281:	b7 01 00 00 02 00 00 00	r1 = 2
     282:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     283:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     284:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     285:	bf a1 00 00 00 00 00 00	r1 = r10
     286:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     287:	b7 02 00 00 02 00 00 00	r2 = 2
     288:	bf 63 00 00 00 00 00 00	r3 = r6
     289:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     290:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     291:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     292:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB35_54>
     293:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     294:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB35_92>
     295:	05 00 69 00 00 00 00 00	goto +105 <LBB35_54>

0000000000000940 <LBB35_27>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     296:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB35_35>
     297:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB35_92>

0000000000000950 <LBB35_29>:
     298:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r4
     299:	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r3
     300:	b7 01 00 00 c0 00 00 00	r1 = 192
     301:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     302:	bf 63 00 00 00 00 00 00	r3 = r6
     303:	0f 13 00 00 00 00 00 00	r3 += r1
     304:	bf a1 00 00 00 00 00 00	r1 = r10
     305:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     306:	b7 02 00 00 08 00 00 00	r2 = 8
     307:	85 00 00 00 71 00 00 00	call 113
     308:	b7 01 00 00 b6 00 00 00	r1 = 182
     309:	bf 63 00 00 00 00 00 00	r3 = r6
     310:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     311:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     312:	bf a1 00 00 00 00 00 00	r1 = r10
     313:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     314:	b7 02 00 00 02 00 00 00	r2 = 2
     315:	85 00 00 00 71 00 00 00	call 113
     316:	b7 01 00 00 b4 00 00 00	r1 = 180
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     319:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     320:	bf a1 00 00 00 00 00 00	r1 = r10
     321:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     322:	b7 02 00 00 02 00 00 00	r2 = 2
     323:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     324:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     325:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     326:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB35_31>
     327:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000a40 <LBB35_31>:
;     return head + network_header;
     328:	57 06 00 00 ff ff 00 00	r6 &= 65535
     329:	0f 69 00 00 00 00 00 00	r9 += r6
     330:	bf a1 00 00 00 00 00 00	r1 = r10
     331:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     332:	b7 02 00 00 01 00 00 00	r2 = 1
     333:	bf 93 00 00 00 00 00 00	r3 = r9
     334:	85 00 00 00 04 00 00 00	call 4
     335:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     336:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     337:	57 02 00 00 f0 00 00 00	r2 &= 240
     338:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB35_33>
     339:	bf a1 00 00 00 00 00 00	r1 = r10
     340:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     341:	b7 02 00 00 01 00 00 00	r2 = 1
     342:	bf 93 00 00 00 00 00 00	r3 = r9
     343:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     344:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     345:	67 01 00 00 02 00 00 00	r1 <<= 2
     346:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000ad8 <LBB35_33>:
;     return l3_header + transport_size;
     347:	0f 19 00 00 00 00 00 00	r9 += r1
     348:	bf a6 00 00 00 00 00 00	r6 = r10
     349:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     350:	bf 61 00 00 00 00 00 00	r1 = r6
     351:	b7 02 00 00 08 00 00 00	r2 = 8
     352:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
     353:	bf 93 00 00 00 00 00 00	r3 = r9
     354:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     355:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     356:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     357:	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 88)
     358:	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 96)
     359:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB35_40>
     360:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     361:	07 02 00 00 e8 ff ff ff	r2 += -24
     362:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     363:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB35_40>
     364:	05 00 0c 00 00 00 00 00	goto +12 <LBB35_92>

0000000000000b68 <LBB35_45>:
;     if (proto != 0 && proto != l4_proto)
     365:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     366:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB35_54>
     367:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
;     if (proto != 0 && icmpid != 0) {
     368:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB35_54>
     369:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     370:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB35_54>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     371:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     372:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB35_50>
     373:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB35_54>

0000000000000bb0 <LBB35_50>:
;         if (icmpid != ev_icmpid)
     374:	57 01 00 00 ff ff 00 00	r1 &= 65535
     375:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
     376:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB35_54>

0000000000000bc8 <LBB35_92>:
;     return do_trace(ctx, skb, "br_pass_frame_up");
     377:	b7 00 00 00 00 00 00 00	r0 = 0
     378:	95 00 00 00 00 00 00 00	exit

0000000000000bd8 <LBB35_52>:
     379:	b7 01 00 00 00 00 00 00	r1 = 0
     380:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     381:	bf 63 00 00 00 00 00 00	r3 = r6
     382:	0f 13 00 00 00 00 00 00	r3 += r1
     383:	bf a1 00 00 00 00 00 00	r1 = r10
     384:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     385:	b7 02 00 00 02 00 00 00	r2 = 2
     386:	85 00 00 00 71 00 00 00	call 113
     387:	b7 01 00 00 02 00 00 00	r1 = 2
     388:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     389:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     390:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     391:	bf a1 00 00 00 00 00 00	r1 = r10
     392:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     393:	b7 02 00 00 02 00 00 00	r2 = 2
     394:	bf 63 00 00 00 00 00 00	r3 = r6
     395:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     396:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     397:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     398:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB35_54>
     399:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     400:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB35_92>

0000000000000c88 <LBB35_54>:
;     event->flags |= SKBTRACER_EVENT_IF;
     401:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     402:	47 01 00 00 01 00 00 00	r1 |= 1
     403:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     404:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
;     ev->skb = (u64)skb;
     405:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     406:	85 00 00 00 05 00 00 00	call 5
     407:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     408:	b7 01 00 00 10 00 00 00	r1 = 16
     409:	bf 96 00 00 00 00 00 00	r6 = r9
     410:	0f 16 00 00 00 00 00 00	r6 += r1
     411:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     412:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     413:	b7 02 00 00 08 00 00 00	r2 = 8
     414:	bf 63 00 00 00 00 00 00	r3 = r6
     415:	85 00 00 00 71 00 00 00	call 113
     416:	b7 01 00 00 70 00 00 00	r1 = 112
     417:	bf 93 00 00 00 00 00 00	r3 = r9
     418:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     419:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     420:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     421:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     422:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     423:	b7 02 00 00 04 00 00 00	r2 = 4
     424:	85 00 00 00 71 00 00 00	call 113
     425:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     426:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     427:	85 00 00 00 08 00 00 00	call 8
     428:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     429:	85 00 00 00 0e 00 00 00	call 14
     430:	57 00 00 00 ff ff 00 00	r0 &= 65535
     431:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     432:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     433:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     434:	bf 91 00 00 00 00 00 00	r1 = r9
     435:	b7 02 00 00 08 00 00 00	r2 = 8
     436:	bf 63 00 00 00 00 00 00	r3 = r6
     437:	85 00 00 00 71 00 00 00	call 113
     438:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     439:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     440:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     441:	bf 91 00 00 00 00 00 00	r1 = r9
     442:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     443:	b7 02 00 00 08 00 00 00	r2 = 8
     444:	85 00 00 00 71 00 00 00	call 113
     445:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     446:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     447:	0f 13 00 00 00 00 00 00	r3 += r1
     448:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     449:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     450:	b7 02 00 00 04 00 00 00	r2 = 4
     451:	85 00 00 00 71 00 00 00	call 113
     452:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     453:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB35_57>
     454:	b7 01 00 00 18 00 00 00	r1 = 24
     455:	bf 93 00 00 00 00 00 00	r3 = r9
     456:	0f 13 00 00 00 00 00 00	r3 += r1
     457:	bf a1 00 00 00 00 00 00	r1 = r10
     458:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     459:	b7 02 00 00 08 00 00 00	r2 = 8
     460:	85 00 00 00 71 00 00 00	call 113
     461:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     462:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     463:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB35_57>
     464:	b7 01 00 00 30 00 00 00	r1 = 48
     465:	0f 13 00 00 00 00 00 00	r3 += r1
     466:	bf a1 00 00 00 00 00 00	r1 = r10
     467:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     468:	b7 02 00 00 08 00 00 00	r2 = 8
     469:	85 00 00 00 71 00 00 00	call 113
     470:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     471:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     472:	0f 13 00 00 00 00 00 00	r3 += r1
     473:	bf a1 00 00 00 00 00 00	r1 = r10
     474:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     475:	b7 02 00 00 04 00 00 00	r2 = 4
     476:	85 00 00 00 71 00 00 00	call 113
     477:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000ef0 <LBB35_57>:
;     pkt_info->netns = get_netns(skb);
     478:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     479:	b7 01 00 00 80 00 00 00	r1 = 128
     480:	bf 93 00 00 00 00 00 00	r3 = r9
     481:	0f 13 00 00 00 00 00 00	r3 += r1
     482:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     483:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     484:	bf a1 00 00 00 00 00 00	r1 = r10
     485:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     486:	b7 02 00 00 01 00 00 00	r2 = 1
     487:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     488:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     489:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     490:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     491:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     492:	b7 01 00 00 00 00 00 00	r1 = 0
     493:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     494:	0f 13 00 00 00 00 00 00	r3 += r1
;     pkt_info->ifname[0] = 0;
     495:	bf 71 00 00 00 00 00 00	r1 = r7
     496:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     497:	b7 02 00 00 10 00 00 00	r2 = 16
     498:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     499:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     500:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB35_59>
     501:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     502:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     503:	b7 01 00 00 69 00 00 00	r1 = 105
     504:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     505:	b7 01 00 00 6e 00 00 00	r1 = 110
     506:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000000fd8 <LBB35_59>:
     507:	b7 01 00 00 c0 00 00 00	r1 = 192
     508:	bf 93 00 00 00 00 00 00	r3 = r9
     509:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     510:	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r3
     511:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     512:	07 01 00 00 f8 ff ff ff	r1 += -8
     513:	b7 02 00 00 08 00 00 00	r2 = 8
     514:	85 00 00 00 71 00 00 00	call 113
     515:	b7 01 00 00 b6 00 00 00	r1 = 182
     516:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     517:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     518:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     519:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     520:	b7 02 00 00 02 00 00 00	r2 = 2
     521:	bf 93 00 00 00 00 00 00	r3 = r9
     522:	85 00 00 00 71 00 00 00	call 113
     523:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     524:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     525:	bf 71 00 00 00 00 00 00	r1 = r7
     526:	07 01 00 00 64 00 00 00	r1 += 100
     527:	b7 02 00 00 06 00 00 00	r2 = 6
     528:	bf 63 00 00 00 00 00 00	r3 = r6
     529:	85 00 00 00 04 00 00 00	call 4
     530:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     531:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	b7 02 00 00 08 00 00 00	r2 = 8
     533:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     534:	85 00 00 00 71 00 00 00	call 113
     535:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     536:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     537:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     538:	b7 02 00 00 02 00 00 00	r2 = 2
     539:	bf 93 00 00 00 00 00 00	r3 = r9
     540:	85 00 00 00 71 00 00 00	call 113
     541:	b7 01 00 00 b4 00 00 00	r1 = 180
     542:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
     543:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     544:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     547:	b7 02 00 00 02 00 00 00	r2 = 2
     548:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     549:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     550:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     551:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB35_61>
     552:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001148 <LBB35_61>:
;     return head + network_header;
     553:	57 09 00 00 ff ff 00 00	r9 &= 65535
     554:	0f 96 00 00 00 00 00 00	r6 += r9
     555:	bf a1 00 00 00 00 00 00	r1 = r10
     556:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     557:	b7 02 00 00 01 00 00 00	r2 = 1
     558:	bf 63 00 00 00 00 00 00	r3 = r6
     559:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     560:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     561:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     562:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB35_66>
     563:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB35_92>
     564:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     565:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     566:	b7 01 00 00 c0 00 00 00	r1 = 192
     567:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     568:	bf 93 00 00 00 00 00 00	r3 = r9
     569:	0f 13 00 00 00 00 00 00	r3 += r1
     570:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     572:	b7 02 00 00 08 00 00 00	r2 = 8
     573:	85 00 00 00 71 00 00 00	call 113
     574:	b7 01 00 00 b6 00 00 00	r1 = 182
     575:	bf 93 00 00 00 00 00 00	r3 = r9
     576:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     577:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     578:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     579:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     580:	b7 02 00 00 02 00 00 00	r2 = 2
     581:	85 00 00 00 71 00 00 00	call 113
     582:	b7 01 00 00 b4 00 00 00	r1 = 180
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     585:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     586:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     587:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     588:	b7 02 00 00 02 00 00 00	r2 = 2
     589:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     590:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     591:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     592:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB35_65>
     593:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001290 <LBB35_65>:
;     return head + network_header;
     594:	57 09 00 00 ff ff 00 00	r9 &= 65535
     595:	0f 96 00 00 00 00 00 00	r6 += r9
     596:	b7 01 00 00 0c 00 00 00	r1 = 12
     597:	bf 63 00 00 00 00 00 00	r3 = r6
     598:	0f 13 00 00 00 00 00 00	r3 += r1
     599:	bf a1 00 00 00 00 00 00	r1 = r10
     600:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     601:	b7 02 00 00 04 00 00 00	r2 = 4
     602:	85 00 00 00 71 00 00 00	call 113
     603:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     604:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     605:	b7 01 00 00 10 00 00 00	r1 = 16
     606:	bf 63 00 00 00 00 00 00	r3 = r6
     607:	0f 13 00 00 00 00 00 00	r3 += r1
     608:	bf a1 00 00 00 00 00 00	r1 = r10
     609:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     610:	b7 02 00 00 04 00 00 00	r2 = 4
     611:	85 00 00 00 71 00 00 00	call 113
     612:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     613:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     614:	b7 01 00 00 02 00 00 00	r1 = 2
     615:	bf 63 00 00 00 00 00 00	r3 = r6
     616:	0f 13 00 00 00 00 00 00	r3 += r1
     617:	bf a1 00 00 00 00 00 00	r1 = r10
     618:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     619:	b7 02 00 00 02 00 00 00	r2 = 2
     620:	85 00 00 00 71 00 00 00	call 113
     621:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     622:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     623:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     624:	b7 01 00 00 09 00 00 00	r1 = 9
     625:	05 00 38 00 00 00 00 00	goto +56 <LBB35_69>

0000000000001390 <LBB35_66>:
     626:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     627:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     628:	b7 01 00 00 c0 00 00 00	r1 = 192
     629:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     630:	bf 93 00 00 00 00 00 00	r3 = r9
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     634:	b7 02 00 00 08 00 00 00	r2 = 8
     635:	85 00 00 00 71 00 00 00	call 113
     636:	b7 01 00 00 b6 00 00 00	r1 = 182
     637:	bf 93 00 00 00 00 00 00	r3 = r9
     638:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     639:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     640:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     641:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     642:	b7 02 00 00 02 00 00 00	r2 = 2
     643:	85 00 00 00 71 00 00 00	call 113
     644:	b7 01 00 00 b4 00 00 00	r1 = 180
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     647:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     648:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     649:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     650:	b7 02 00 00 02 00 00 00	r2 = 2
     651:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     652:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     653:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     654:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB35_68>
     655:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001480 <LBB35_68>:
;     return head + network_header;
     656:	57 09 00 00 ff ff 00 00	r9 &= 65535
     657:	0f 96 00 00 00 00 00 00	r6 += r9
     658:	b7 01 00 00 08 00 00 00	r1 = 8
     659:	bf 63 00 00 00 00 00 00	r3 = r6
     660:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
     661:	bf 71 00 00 00 00 00 00	r1 = r7
     662:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     663:	b7 02 00 00 10 00 00 00	r2 = 16
     664:	85 00 00 00 04 00 00 00	call 4
     665:	b7 01 00 00 18 00 00 00	r1 = 24
     666:	bf 63 00 00 00 00 00 00	r3 = r6
     667:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     668:	bf 71 00 00 00 00 00 00	r1 = r7
     669:	07 01 00 00 80 00 00 00	r1 += 128
     670:	b7 02 00 00 10 00 00 00	r2 = 16
     671:	85 00 00 00 04 00 00 00	call 4
     672:	b7 01 00 00 04 00 00 00	r1 = 4
     673:	bf 63 00 00 00 00 00 00	r3 = r6
     674:	0f 13 00 00 00 00 00 00	r3 += r1
     675:	bf a1 00 00 00 00 00 00	r1 = r10
     676:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     677:	b7 02 00 00 02 00 00 00	r2 = 2
     678:	85 00 00 00 71 00 00 00	call 113
     679:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     680:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     681:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000001550 <LBB35_69>:
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
     684:	bf a1 00 00 00 00 00 00	r1 = r10
     685:	07 01 00 00 f8 ff ff ff	r1 += -8
     686:	b7 02 00 00 01 00 00 00	r2 = 1
     687:	85 00 00 00 71 00 00 00	call 113
     688:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     689:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     690:	bf a1 00 00 00 00 00 00	r1 = r10
     691:	07 01 00 00 f8 ff ff ff	r1 += -8
     692:	b7 02 00 00 01 00 00 00	r2 = 1
     693:	bf 63 00 00 00 00 00 00	r3 = r6
     694:	85 00 00 00 04 00 00 00	call 4
     695:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     696:	57 01 00 00 f0 00 00 00	r1 &= 240
     697:	77 01 00 00 04 00 00 00	r1 >>= 4
     698:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     699:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     700:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB35_72>
     701:	15 01 53 00 01 00 00 00	if r1 == 1 goto +83 <LBB35_84>
     702:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB35_74>
     703:	05 00 b9 fe 00 00 00 00	goto -327 <LBB35_92>

0000000000001600 <LBB35_74>:
     704:	b7 01 00 00 c0 00 00 00	r1 = 192
     705:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     706:	bf 93 00 00 00 00 00 00	r3 = r9
     707:	0f 13 00 00 00 00 00 00	r3 += r1
     708:	bf a1 00 00 00 00 00 00	r1 = r10
     709:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     710:	b7 02 00 00 08 00 00 00	r2 = 8
     711:	85 00 00 00 71 00 00 00	call 113
     712:	b7 01 00 00 b6 00 00 00	r1 = 182
     713:	bf 93 00 00 00 00 00 00	r3 = r9
     714:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     715:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     716:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     717:	bf a1 00 00 00 00 00 00	r1 = r10
     718:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     719:	b7 02 00 00 02 00 00 00	r2 = 2
     720:	85 00 00 00 71 00 00 00	call 113
     721:	b7 01 00 00 b4 00 00 00	r1 = 180
     722:	0f 19 00 00 00 00 00 00	r9 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     723:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     726:	b7 02 00 00 02 00 00 00	r2 = 2
     727:	bf 93 00 00 00 00 00 00	r3 = r9
     728:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     729:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     730:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     731:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB35_76>
     732:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000016e8 <LBB35_76>:
;     return head + network_header;
     733:	57 06 00 00 ff ff 00 00	r6 &= 65535
     734:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
     735:	0f 61 00 00 00 00 00 00	r1 += r6
     736:	bf 16 00 00 00 00 00 00	r6 = r1
     737:	bf a1 00 00 00 00 00 00	r1 = r10
     738:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     739:	b7 02 00 00 01 00 00 00	r2 = 1
     740:	bf 63 00 00 00 00 00 00	r3 = r6
     741:	85 00 00 00 04 00 00 00	call 4
     742:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     743:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     744:	57 02 00 00 f0 00 00 00	r2 &= 240
     745:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB35_78>
     746:	bf a1 00 00 00 00 00 00	r1 = r10
     747:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     748:	b7 02 00 00 01 00 00 00	r2 = 1
     749:	bf 63 00 00 00 00 00 00	r3 = r6
     750:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     751:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     752:	67 01 00 00 02 00 00 00	r1 <<= 2
     753:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001790 <LBB35_78>:
;     return l3_header + transport_size;
     754:	0f 16 00 00 00 00 00 00	r6 += r1
     755:	b7 01 00 00 00 00 00 00	r1 = 0
     756:	bf 63 00 00 00 00 00 00	r3 = r6
     757:	0f 13 00 00 00 00 00 00	r3 += r1
     758:	bf a1 00 00 00 00 00 00	r1 = r10
     759:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     760:	b7 02 00 00 02 00 00 00	r2 = 2
     761:	85 00 00 00 71 00 00 00	call 113
     762:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     763:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     764:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     765:	b7 01 00 00 02 00 00 00	r1 = 2
     766:	bf 63 00 00 00 00 00 00	r3 = r6
     767:	0f 13 00 00 00 00 00 00	r3 += r1
     768:	bf a1 00 00 00 00 00 00	r1 = r10
     769:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     770:	b7 02 00 00 02 00 00 00	r2 = 2
     771:	85 00 00 00 71 00 00 00	call 113
     772:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     773:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     774:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     775:	07 06 00 00 0c 00 00 00	r6 += 12
     776:	bf 71 00 00 00 00 00 00	r1 = r7
     777:	07 01 00 00 9c 00 00 00	r1 += 156
     778:	b7 02 00 00 02 00 00 00	r2 = 2
     779:	bf 63 00 00 00 00 00 00	r3 = r6
     780:	85 00 00 00 04 00 00 00	call 4
     781:	05 00 8a 00 00 00 00 00	goto +138 <LBB35_89>

0000000000001870 <LBB35_72>:
;     if (l4_proto == IPPROTO_TCP) {
     782:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB35_79>
     783:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB35_84>
     784:	05 00 68 fe 00 00 00 00	goto -408 <LBB35_92>

0000000000001888 <LBB35_84>:
     785:	b7 01 00 00 c0 00 00 00	r1 = 192
     786:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     787:	bf 63 00 00 00 00 00 00	r3 = r6
     788:	0f 13 00 00 00 00 00 00	r3 += r1
     789:	bf a1 00 00 00 00 00 00	r1 = r10
     790:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     791:	b7 02 00 00 08 00 00 00	r2 = 8
     792:	85 00 00 00 71 00 00 00	call 113
     793:	b7 01 00 00 b6 00 00 00	r1 = 182
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     796:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     797:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     798:	bf a1 00 00 00 00 00 00	r1 = r10
     799:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     800:	b7 02 00 00 02 00 00 00	r2 = 2
     801:	85 00 00 00 71 00 00 00	call 113
     802:	b7 01 00 00 b4 00 00 00	r1 = 180
     803:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     804:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     805:	bf a1 00 00 00 00 00 00	r1 = r10
     806:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     807:	b7 02 00 00 02 00 00 00	r2 = 2
     808:	bf 63 00 00 00 00 00 00	r3 = r6
     809:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     810:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     811:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     812:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB35_86>
     813:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001970 <LBB35_86>:
;     return head + network_header;
     814:	57 09 00 00 ff ff 00 00	r9 &= 65535
     815:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     816:	0f 96 00 00 00 00 00 00	r6 += r9
     817:	bf a1 00 00 00 00 00 00	r1 = r10
     818:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     819:	b7 02 00 00 01 00 00 00	r2 = 1
     820:	bf 63 00 00 00 00 00 00	r3 = r6
     821:	85 00 00 00 04 00 00 00	call 4
     822:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     823:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     824:	57 02 00 00 f0 00 00 00	r2 &= 240
     825:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB35_88>
     826:	bf a1 00 00 00 00 00 00	r1 = r10
     827:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     828:	b7 02 00 00 01 00 00 00	r2 = 1
     829:	bf 63 00 00 00 00 00 00	r3 = r6
     830:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     831:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     832:	67 01 00 00 02 00 00 00	r1 <<= 2
     833:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a10 <LBB35_88>:
;     return l3_header + transport_size;
     834:	0f 16 00 00 00 00 00 00	r6 += r1
     835:	bf a9 00 00 00 00 00 00	r9 = r10
     836:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     837:	bf 91 00 00 00 00 00 00	r1 = r9
     838:	b7 02 00 00 08 00 00 00	r2 = 8
     839:	bf 63 00 00 00 00 00 00	r3 = r6
     840:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     841:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     842:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     843:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     844:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     845:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     846:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     847:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     848:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     849:	05 00 46 00 00 00 00 00	goto +70 <LBB35_89>

0000000000001a90 <LBB35_79>:
     850:	b7 01 00 00 c0 00 00 00	r1 = 192
     851:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     852:	bf 63 00 00 00 00 00 00	r3 = r6
     853:	0f 13 00 00 00 00 00 00	r3 += r1
     854:	bf a1 00 00 00 00 00 00	r1 = r10
     855:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     856:	b7 02 00 00 08 00 00 00	r2 = 8
     857:	85 00 00 00 71 00 00 00	call 113
     858:	b7 01 00 00 b6 00 00 00	r1 = 182
     859:	bf 63 00 00 00 00 00 00	r3 = r6
     860:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     861:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     862:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     863:	bf a1 00 00 00 00 00 00	r1 = r10
     864:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     865:	b7 02 00 00 02 00 00 00	r2 = 2
     866:	85 00 00 00 71 00 00 00	call 113
     867:	b7 01 00 00 b4 00 00 00	r1 = 180
     868:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     869:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     870:	bf a1 00 00 00 00 00 00	r1 = r10
     871:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     872:	b7 02 00 00 02 00 00 00	r2 = 2
     873:	bf 63 00 00 00 00 00 00	r3 = r6
     874:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     875:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     876:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     877:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB35_81>
     878:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001b78 <LBB35_81>:
;     return head + network_header;
     879:	57 09 00 00 ff ff 00 00	r9 &= 65535
     880:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     881:	0f 96 00 00 00 00 00 00	r6 += r9
     882:	bf a1 00 00 00 00 00 00	r1 = r10
     883:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     884:	b7 02 00 00 01 00 00 00	r2 = 1
     885:	bf 63 00 00 00 00 00 00	r3 = r6
     886:	85 00 00 00 04 00 00 00	call 4
     887:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     888:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     889:	57 02 00 00 f0 00 00 00	r2 &= 240
     890:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB35_83>
     891:	bf a1 00 00 00 00 00 00	r1 = r10
     892:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     893:	b7 02 00 00 01 00 00 00	r2 = 1
     894:	bf 63 00 00 00 00 00 00	r3 = r6
     895:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     896:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     897:	67 01 00 00 02 00 00 00	r1 <<= 2
     898:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c18 <LBB35_83>:
;     return l3_header + transport_size;
     899:	0f 16 00 00 00 00 00 00	r6 += r1
     900:	b7 01 00 00 00 00 00 00	r1 = 0
     901:	bf 63 00 00 00 00 00 00	r3 = r6
     902:	0f 13 00 00 00 00 00 00	r3 += r1
     903:	bf a1 00 00 00 00 00 00	r1 = r10
     904:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     905:	b7 02 00 00 02 00 00 00	r2 = 2
     906:	85 00 00 00 71 00 00 00	call 113
     907:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     908:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     909:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     910:	b7 01 00 00 02 00 00 00	r1 = 2
     911:	0f 16 00 00 00 00 00 00	r6 += r1
     912:	bf a1 00 00 00 00 00 00	r1 = r10
     913:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     914:	b7 02 00 00 02 00 00 00	r2 = 2
     915:	bf 63 00 00 00 00 00 00	r3 = r6
     916:	85 00 00 00 71 00 00 00	call 113
     917:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     918:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     919:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001cc0 <LBB35_89>:
     920:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
;     return cfg->callstack == 0;
     921:	71 81 11 00 00 00 00 00	r1 = *(u8 *)(r8 + 17)
;     if (!filter_callstack(cfg))
     922:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB35_91>
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
     923:	bf 61 00 00 00 00 00 00	r1 = r6
     924:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     926:	b7 03 00 00 00 00 00 00	r3 = 0
     927:	85 00 00 00 1b 00 00 00	call 27
     928:	63 07 30 00 00 00 00 00	*(u32 *)(r7 + 48) = r0

0000000000001d08 <LBB35_91>:
     929:	b7 01 00 00 75 00 00 00	r1 = 117
;     for (j = 10; j < 64; j += 10) CPY(j);
     930:	73 17 0e 00 00 00 00 00	*(u8 *)(r7 + 14) = r1
     931:	b7 01 00 00 65 00 00 00	r1 = 101
     932:	73 17 0c 00 00 00 00 00	*(u8 *)(r7 + 12) = r1
     933:	b7 01 00 00 6d 00 00 00	r1 = 109
     934:	73 17 0b 00 00 00 00 00	*(u8 *)(r7 + 11) = r1
     935:	b7 01 00 00 66 00 00 00	r1 = 102
     936:	73 17 08 00 00 00 00 00	*(u8 *)(r7 + 8) = r1
     937:	b7 01 00 00 73 00 00 00	r1 = 115
     938:	73 17 06 00 00 00 00 00	*(u8 *)(r7 + 6) = r1
     939:	73 17 05 00 00 00 00 00	*(u8 *)(r7 + 5) = r1
     940:	b7 01 00 00 61 00 00 00	r1 = 97
     941:	73 17 0a 00 00 00 00 00	*(u8 *)(r7 + 10) = r1
     942:	73 17 04 00 00 00 00 00	*(u8 *)(r7 + 4) = r1
     943:	b7 01 00 00 70 00 00 00	r1 = 112
     944:	73 17 0f 00 00 00 00 00	*(u8 *)(r7 + 15) = r1
     945:	73 17 03 00 00 00 00 00	*(u8 *)(r7 + 3) = r1
     946:	b7 01 00 00 5f 00 00 00	r1 = 95
     947:	73 17 0d 00 00 00 00 00	*(u8 *)(r7 + 13) = r1
     948:	73 17 07 00 00 00 00 00	*(u8 *)(r7 + 7) = r1
     949:	73 17 02 00 00 00 00 00	*(u8 *)(r7 + 2) = r1
     950:	b7 01 00 00 72 00 00 00	r1 = 114
     951:	73 17 09 00 00 00 00 00	*(u8 *)(r7 + 9) = r1
     952:	73 17 01 00 00 00 00 00	*(u8 *)(r7 + 1) = r1
     953:	b7 01 00 00 62 00 00 00	r1 = 98
     954:	73 17 00 00 00 00 00 00	*(u8 *)(r7 + 0) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     955:	bf 61 00 00 00 00 00 00	r1 = r6
     956:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     958:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     960:	bf 74 00 00 00 00 00 00	r4 = r7
     961:	b7 05 00 00 e0 00 00 00	r5 = 224
     962:	85 00 00 00 19 00 00 00	call 25
     963:	05 00 b5 fd 00 00 00 00	goto -587 <LBB35_92>

Disassembly of section kprobe/br_netif_receive_skb:

0000000000000000 <k_br_nif_rcv>:
; int k_br_nif_rcv(struct pt_regs *ctx) {
       0:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM3(ctx);
       1:	79 11 60 00 00 00 00 00	r1 = *(u64 *)(r1 + 96)
       2:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       3:	b7 06 00 00 00 00 00 00	r6 = 0
;     GET_CFG();
       4:	63 6a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r6
       5:	bf a2 00 00 00 00 00 00	r2 = r10
       6:	07 02 00 00 e4 ff ff ff	r2 += -28
;     GET_CFG();
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	85 00 00 00 01 00 00 00	call 1
      10:	bf 08 00 00 00 00 00 00	r8 = r0
      11:	15 08 6d 01 00 00 00 00	if r8 == 0 goto +365 <LBB36_92>
      12:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
      13:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      14:	63 18 08 00 00 00 00 00	*(u32 *)(r8 + 8) = r1
;     u32 ev_buff_id = 0;
      15:	63 6a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r6
      16:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      17:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      18:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      20:	85 00 00 00 01 00 00 00	call 1
      21:	bf 07 00 00 00 00 00 00	r7 = r0
;     if (!ev) return NULL;
      22:	55 07 01 00 00 00 00 00	if r7 != 0 goto +1 <LBB36_3>
      23:	05 00 61 01 00 00 00 00	goto +353 <LBB36_92>

00000000000000c0 <LBB36_3>:
      24:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      25:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      26:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      27:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      28:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      29:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      30:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      31:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      32:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      33:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      34:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      35:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      36:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      37:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      38:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      39:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      40:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      41:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      42:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      43:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      44:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      45:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      46:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      47:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      48:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      49:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      50:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      51:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      52:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      53:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      54:	61 81 04 00 00 00 00 00	r1 = *(u32 *)(r8 + 4)
      55:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB36_5>
      56:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      57:	5d 01 3f 01 00 00 00 00	if r1 != r0 goto +319 <LBB36_92>

00000000000001d0 <LBB36_5>:
      58:	b7 01 00 00 10 00 00 00	r1 = 16
      59:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
      60:	bf 93 00 00 00 00 00 00	r3 = r9
      61:	0f 13 00 00 00 00 00 00	r3 += r1
      62:	bf a6 00 00 00 00 00 00	r6 = r10
      63:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      64:	bf 61 00 00 00 00 00 00	r1 = r6
      65:	b7 02 00 00 08 00 00 00	r2 = 8
      66:	85 00 00 00 71 00 00 00	call 113
      67:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      68:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      69:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      70:	bf 61 00 00 00 00 00 00	r1 = r6
      71:	b7 02 00 00 08 00 00 00	r2 = 8
      72:	85 00 00 00 71 00 00 00	call 113
      73:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      74:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      75:	0f 13 00 00 00 00 00 00	r3 += r1
      76:	bf a1 00 00 00 00 00 00	r1 = r10
      77:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      78:	b7 02 00 00 04 00 00 00	r2 = 4
      79:	85 00 00 00 71 00 00 00	call 113
      80:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      81:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB36_8>
      82:	b7 01 00 00 18 00 00 00	r1 = 24
      83:	bf 93 00 00 00 00 00 00	r3 = r9
      84:	0f 13 00 00 00 00 00 00	r3 += r1
      85:	bf a1 00 00 00 00 00 00	r1 = r10
      86:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
      87:	b7 02 00 00 08 00 00 00	r2 = 8
      88:	85 00 00 00 71 00 00 00	call 113
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
      90:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB36_11>
      91:	b7 01 00 00 30 00 00 00	r1 = 48
      92:	0f 13 00 00 00 00 00 00	r3 += r1
      93:	bf a1 00 00 00 00 00 00	r1 = r10
      94:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      95:	b7 02 00 00 08 00 00 00	r2 = 8
      96:	85 00 00 00 71 00 00 00	call 113
      97:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      98:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     102:	b7 02 00 00 04 00 00 00	r2 = 4
     103:	85 00 00 00 71 00 00 00	call 113
     104:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000348 <LBB36_8>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     105:	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0)
     106:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB36_11>
     107:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB36_11>
     108:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB36_92>

0000000000000368 <LBB36_11>:
;     u16 icmpid = cfg->icmpid;
     109:	69 81 0e 00 00 00 00 00	r1 = *(u16 *)(r8 + 14)
;     u16 port = cfg->port;
     110:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     111:	69 81 0c 00 00 00 00 00	r1 = *(u16 *)(r8 + 12)
;     u8 proto = cfg->proto;
     112:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     113:	71 81 12 00 00 00 00 00	r1 = *(u8 *)(r8 + 18)
;     u32 addr = cfg->ip;
     114:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     115:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
     116:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     117:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     118:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     119:	b7 01 00 00 c0 00 00 00	r1 = 192
     120:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     121:	bf 93 00 00 00 00 00 00	r3 = r9
     122:	0f 13 00 00 00 00 00 00	r3 += r1
     123:	bf a1 00 00 00 00 00 00	r1 = r10
     124:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     125:	b7 02 00 00 08 00 00 00	r2 = 8
     126:	85 00 00 00 71 00 00 00	call 113
     127:	b7 01 00 00 b6 00 00 00	r1 = 182
     128:	bf 93 00 00 00 00 00 00	r3 = r9
     129:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     130:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     131:	bf a1 00 00 00 00 00 00	r1 = r10
     132:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     133:	b7 02 00 00 02 00 00 00	r2 = 2
     134:	85 00 00 00 71 00 00 00	call 113
     135:	b7 01 00 00 b4 00 00 00	r1 = 180
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     138:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     139:	bf a1 00 00 00 00 00 00	r1 = r10
     140:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     141:	b7 02 00 00 02 00 00 00	r2 = 2
     142:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     143:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     144:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     145:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB36_13>
     146:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000498 <LBB36_13>:
;     return head + network_header;
     147:	57 09 00 00 ff ff 00 00	r9 &= 65535
     148:	0f 96 00 00 00 00 00 00	r6 += r9
     149:	bf a1 00 00 00 00 00 00	r1 = r10
     150:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     151:	b7 02 00 00 01 00 00 00	r2 = 1
     152:	bf 63 00 00 00 00 00 00	r3 = r6
     153:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     154:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     155:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     156:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB36_20>
     157:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB36_92>
;         if (addr != 0) {
     158:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     159:	bf 19 00 00 00 00 00 00	r9 = r1
     160:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB36_18>
     161:	b7 01 00 00 0c 00 00 00	r1 = 12
     162:	bf 63 00 00 00 00 00 00	r3 = r6
     163:	0f 13 00 00 00 00 00 00	r3 += r1
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     166:	b7 02 00 00 04 00 00 00	r2 = 4
     167:	85 00 00 00 71 00 00 00	call 113
     168:	b7 01 00 00 10 00 00 00	r1 = 16
     169:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     170:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     171:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     172:	bf a1 00 00 00 00 00 00	r1 = r10
     173:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     174:	b7 02 00 00 04 00 00 00	r2 = 4
     175:	bf 63 00 00 00 00 00 00	r3 = r6
     176:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     177:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     178:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB36_54>
     179:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     180:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     181:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB36_92>
     182:	05 00 da 00 00 00 00 00	goto +218 <LBB36_54>

00000000000005b8 <LBB36_20>:
     183:	b7 01 00 00 06 00 00 00	r1 = 6
     184:	0f 16 00 00 00 00 00 00	r6 += r1
     185:	bf a1 00 00 00 00 00 00	r1 = r10
     186:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     187:	b7 02 00 00 01 00 00 00	r2 = 1
     188:	bf 63 00 00 00 00 00 00	r3 = r6
     189:	85 00 00 00 04 00 00 00	call 4
     190:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     191:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     192:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     193:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB36_22>
     194:	b7 04 00 00 80 00 00 00	r4 = 128
     195:	b7 03 00 00 81 00 00 00	r3 = 129
     196:	b7 01 00 00 3a 00 00 00	r1 = 58
     197:	05 00 0d 00 00 00 00 00	goto +13 <LBB36_22>

0000000000000630 <LBB36_18>:
     198:	b7 01 00 00 09 00 00 00	r1 = 9
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     208:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB36_22>
     209:	b7 04 00 00 08 00 00 00	r4 = 8
     210:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000698 <LBB36_22>:
;     if (proto != 0 && proto != l4_proto)
     211:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     212:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB36_24>
     213:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB36_92>

00000000000006b0 <LBB36_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     214:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB36_27>
     215:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB36_29>
     216:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB36_35>
     217:	05 00 9f 00 00 00 00 00	goto +159 <LBB36_92>

00000000000006d0 <LBB36_35>:
     218:	b7 01 00 00 c0 00 00 00	r1 = 192
     219:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     220:	bf 63 00 00 00 00 00 00	r3 = r6
     221:	0f 13 00 00 00 00 00 00	r3 += r1
     222:	bf a1 00 00 00 00 00 00	r1 = r10
     223:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     224:	b7 02 00 00 08 00 00 00	r2 = 8
     225:	85 00 00 00 71 00 00 00	call 113
     226:	b7 01 00 00 b6 00 00 00	r1 = 182
     227:	bf 63 00 00 00 00 00 00	r3 = r6
     228:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     229:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     230:	bf a1 00 00 00 00 00 00	r1 = r10
     231:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     232:	b7 02 00 00 02 00 00 00	r2 = 2
     233:	85 00 00 00 71 00 00 00	call 113
     234:	b7 01 00 00 b4 00 00 00	r1 = 180
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     237:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     238:	bf a1 00 00 00 00 00 00	r1 = r10
     239:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     240:	b7 02 00 00 02 00 00 00	r2 = 2
     241:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     242:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     243:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     244:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB36_37>
     245:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000007b0 <LBB36_37>:
;     return head + network_header;
     246:	57 06 00 00 ff ff 00 00	r6 &= 65535
     247:	0f 69 00 00 00 00 00 00	r9 += r6
     248:	bf a1 00 00 00 00 00 00	r1 = r10
     249:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     250:	b7 02 00 00 01 00 00 00	r2 = 1
     251:	bf 93 00 00 00 00 00 00	r3 = r9
     252:	85 00 00 00 04 00 00 00	call 4
     253:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     254:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     255:	57 02 00 00 f0 00 00 00	r2 &= 240
     256:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB36_39>
     257:	bf a1 00 00 00 00 00 00	r1 = r10
     258:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     259:	b7 02 00 00 01 00 00 00	r2 = 1
     260:	bf 93 00 00 00 00 00 00	r3 = r9
     261:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     262:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     263:	67 01 00 00 02 00 00 00	r1 <<= 2
     264:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000848 <LBB36_39>:
;     return l3_header + transport_size;
     265:	0f 19 00 00 00 00 00 00	r9 += r1
     266:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9

0000000000000858 <LBB36_40>:
     267:	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 72)
;     if (port != 0) {
     268:	bf 92 00 00 00 00 00 00	r2 = r9
     269:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB36_45>
;         if (l4_proto == IPPROTO_TCP) {
     270:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     271:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB36_52>
     272:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB36_45>
     273:	b7 01 00 00 00 00 00 00	r1 = 0
     274:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     275:	bf 63 00 00 00 00 00 00	r3 = r6
     276:	0f 13 00 00 00 00 00 00	r3 += r1
     277:	bf a1 00 00 00 00 00 00	r1 = r10
     278:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     279:	b7 02 00 00 02 00 00 00	r2 = 2
     280:	85 00 00 00 71 00 00 00	call 113
     281:	b7 01 00 00 02 00 00 00	r1 = 2
     282:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     283:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     284:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     285:	bf a1 00 00 00 00 00 00	r1 = r10
     286:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     287:	b7 02 00 00 02 00 00 00	r2 = 2
     288:	bf 63 00 00 00 00 00 00	r3 = r6
     289:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     290:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     291:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     292:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB36_54>
     293:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     294:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB36_92>
     295:	05 00 69 00 00 00 00 00	goto +105 <LBB36_54>

0000000000000940 <LBB36_27>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     296:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB36_35>
     297:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB36_92>

0000000000000950 <LBB36_29>:
     298:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r4
     299:	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r3
     300:	b7 01 00 00 c0 00 00 00	r1 = 192
     301:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     302:	bf 63 00 00 00 00 00 00	r3 = r6
     303:	0f 13 00 00 00 00 00 00	r3 += r1
     304:	bf a1 00 00 00 00 00 00	r1 = r10
     305:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     306:	b7 02 00 00 08 00 00 00	r2 = 8
     307:	85 00 00 00 71 00 00 00	call 113
     308:	b7 01 00 00 b6 00 00 00	r1 = 182
     309:	bf 63 00 00 00 00 00 00	r3 = r6
     310:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     311:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     312:	bf a1 00 00 00 00 00 00	r1 = r10
     313:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     314:	b7 02 00 00 02 00 00 00	r2 = 2
     315:	85 00 00 00 71 00 00 00	call 113
     316:	b7 01 00 00 b4 00 00 00	r1 = 180
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     319:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     320:	bf a1 00 00 00 00 00 00	r1 = r10
     321:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     322:	b7 02 00 00 02 00 00 00	r2 = 2
     323:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     324:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     325:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     326:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB36_31>
     327:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000a40 <LBB36_31>:
;     return head + network_header;
     328:	57 06 00 00 ff ff 00 00	r6 &= 65535
     329:	0f 69 00 00 00 00 00 00	r9 += r6
     330:	bf a1 00 00 00 00 00 00	r1 = r10
     331:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     332:	b7 02 00 00 01 00 00 00	r2 = 1
     333:	bf 93 00 00 00 00 00 00	r3 = r9
     334:	85 00 00 00 04 00 00 00	call 4
     335:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     336:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     337:	57 02 00 00 f0 00 00 00	r2 &= 240
     338:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB36_33>
     339:	bf a1 00 00 00 00 00 00	r1 = r10
     340:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     341:	b7 02 00 00 01 00 00 00	r2 = 1
     342:	bf 93 00 00 00 00 00 00	r3 = r9
     343:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     344:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     345:	67 01 00 00 02 00 00 00	r1 <<= 2
     346:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000ad8 <LBB36_33>:
;     return l3_header + transport_size;
     347:	0f 19 00 00 00 00 00 00	r9 += r1
     348:	bf a6 00 00 00 00 00 00	r6 = r10
     349:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     350:	bf 61 00 00 00 00 00 00	r1 = r6
     351:	b7 02 00 00 08 00 00 00	r2 = 8
     352:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
     353:	bf 93 00 00 00 00 00 00	r3 = r9
     354:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     355:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     356:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     357:	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 88)
     358:	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 96)
     359:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB36_40>
     360:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     361:	07 02 00 00 e8 ff ff ff	r2 += -24
     362:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     363:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB36_40>
     364:	05 00 0c 00 00 00 00 00	goto +12 <LBB36_92>

0000000000000b68 <LBB36_45>:
;     if (proto != 0 && proto != l4_proto)
     365:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     366:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB36_54>
     367:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
;     if (proto != 0 && icmpid != 0) {
     368:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB36_54>
     369:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     370:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB36_54>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     371:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     372:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB36_50>
     373:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB36_54>

0000000000000bb0 <LBB36_50>:
;         if (icmpid != ev_icmpid)
     374:	57 01 00 00 ff ff 00 00	r1 &= 65535
     375:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
     376:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB36_54>

0000000000000bc8 <LBB36_92>:
;     return do_trace(ctx, skb, "br_netif_receive_skb");
     377:	b7 00 00 00 00 00 00 00	r0 = 0
     378:	95 00 00 00 00 00 00 00	exit

0000000000000bd8 <LBB36_52>:
     379:	b7 01 00 00 00 00 00 00	r1 = 0
     380:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     381:	bf 63 00 00 00 00 00 00	r3 = r6
     382:	0f 13 00 00 00 00 00 00	r3 += r1
     383:	bf a1 00 00 00 00 00 00	r1 = r10
     384:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     385:	b7 02 00 00 02 00 00 00	r2 = 2
     386:	85 00 00 00 71 00 00 00	call 113
     387:	b7 01 00 00 02 00 00 00	r1 = 2
     388:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     389:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     390:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     391:	bf a1 00 00 00 00 00 00	r1 = r10
     392:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     393:	b7 02 00 00 02 00 00 00	r2 = 2
     394:	bf 63 00 00 00 00 00 00	r3 = r6
     395:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     396:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     397:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     398:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB36_54>
     399:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     400:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB36_92>

0000000000000c88 <LBB36_54>:
;     event->flags |= SKBTRACER_EVENT_IF;
     401:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     402:	47 01 00 00 01 00 00 00	r1 |= 1
     403:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     404:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
;     ev->skb = (u64)skb;
     405:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     406:	85 00 00 00 05 00 00 00	call 5
     407:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     408:	b7 01 00 00 10 00 00 00	r1 = 16
     409:	bf 96 00 00 00 00 00 00	r6 = r9
     410:	0f 16 00 00 00 00 00 00	r6 += r1
     411:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     412:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     413:	b7 02 00 00 08 00 00 00	r2 = 8
     414:	bf 63 00 00 00 00 00 00	r3 = r6
     415:	85 00 00 00 71 00 00 00	call 113
     416:	b7 01 00 00 70 00 00 00	r1 = 112
     417:	bf 93 00 00 00 00 00 00	r3 = r9
     418:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     419:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     420:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     421:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     422:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     423:	b7 02 00 00 04 00 00 00	r2 = 4
     424:	85 00 00 00 71 00 00 00	call 113
     425:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     426:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     427:	85 00 00 00 08 00 00 00	call 8
     428:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     429:	85 00 00 00 0e 00 00 00	call 14
     430:	57 00 00 00 ff ff 00 00	r0 &= 65535
     431:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     432:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     433:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     434:	bf 91 00 00 00 00 00 00	r1 = r9
     435:	b7 02 00 00 08 00 00 00	r2 = 8
     436:	bf 63 00 00 00 00 00 00	r3 = r6
     437:	85 00 00 00 71 00 00 00	call 113
     438:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     439:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     440:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     441:	bf 91 00 00 00 00 00 00	r1 = r9
     442:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     443:	b7 02 00 00 08 00 00 00	r2 = 8
     444:	85 00 00 00 71 00 00 00	call 113
     445:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     446:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     447:	0f 13 00 00 00 00 00 00	r3 += r1
     448:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     449:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     450:	b7 02 00 00 04 00 00 00	r2 = 4
     451:	85 00 00 00 71 00 00 00	call 113
     452:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     453:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB36_57>
     454:	b7 01 00 00 18 00 00 00	r1 = 24
     455:	bf 93 00 00 00 00 00 00	r3 = r9
     456:	0f 13 00 00 00 00 00 00	r3 += r1
     457:	bf a1 00 00 00 00 00 00	r1 = r10
     458:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     459:	b7 02 00 00 08 00 00 00	r2 = 8
     460:	85 00 00 00 71 00 00 00	call 113
     461:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     462:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     463:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB36_57>
     464:	b7 01 00 00 30 00 00 00	r1 = 48
     465:	0f 13 00 00 00 00 00 00	r3 += r1
     466:	bf a1 00 00 00 00 00 00	r1 = r10
     467:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     468:	b7 02 00 00 08 00 00 00	r2 = 8
     469:	85 00 00 00 71 00 00 00	call 113
     470:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     471:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     472:	0f 13 00 00 00 00 00 00	r3 += r1
     473:	bf a1 00 00 00 00 00 00	r1 = r10
     474:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     475:	b7 02 00 00 04 00 00 00	r2 = 4
     476:	85 00 00 00 71 00 00 00	call 113
     477:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000ef0 <LBB36_57>:
;     pkt_info->netns = get_netns(skb);
     478:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     479:	b7 01 00 00 80 00 00 00	r1 = 128
     480:	bf 93 00 00 00 00 00 00	r3 = r9
     481:	0f 13 00 00 00 00 00 00	r3 += r1
     482:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     483:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     484:	bf a1 00 00 00 00 00 00	r1 = r10
     485:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     486:	b7 02 00 00 01 00 00 00	r2 = 1
     487:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     488:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     489:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     490:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     491:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     492:	b7 01 00 00 00 00 00 00	r1 = 0
     493:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     494:	0f 13 00 00 00 00 00 00	r3 += r1
;     pkt_info->ifname[0] = 0;
     495:	bf 71 00 00 00 00 00 00	r1 = r7
     496:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     497:	b7 02 00 00 10 00 00 00	r2 = 16
     498:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     499:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     500:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB36_59>
     501:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     502:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     503:	b7 01 00 00 69 00 00 00	r1 = 105
     504:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     505:	b7 01 00 00 6e 00 00 00	r1 = 110
     506:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000000fd8 <LBB36_59>:
     507:	b7 01 00 00 c0 00 00 00	r1 = 192
     508:	bf 93 00 00 00 00 00 00	r3 = r9
     509:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     510:	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r3
     511:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     512:	07 01 00 00 f8 ff ff ff	r1 += -8
     513:	b7 02 00 00 08 00 00 00	r2 = 8
     514:	85 00 00 00 71 00 00 00	call 113
     515:	b7 01 00 00 b6 00 00 00	r1 = 182
     516:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     517:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     518:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     519:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     520:	b7 02 00 00 02 00 00 00	r2 = 2
     521:	bf 93 00 00 00 00 00 00	r3 = r9
     522:	85 00 00 00 71 00 00 00	call 113
     523:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     524:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     525:	bf 71 00 00 00 00 00 00	r1 = r7
     526:	07 01 00 00 64 00 00 00	r1 += 100
     527:	b7 02 00 00 06 00 00 00	r2 = 6
     528:	bf 63 00 00 00 00 00 00	r3 = r6
     529:	85 00 00 00 04 00 00 00	call 4
     530:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     531:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	b7 02 00 00 08 00 00 00	r2 = 8
     533:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     534:	85 00 00 00 71 00 00 00	call 113
     535:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     536:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     537:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     538:	b7 02 00 00 02 00 00 00	r2 = 2
     539:	bf 93 00 00 00 00 00 00	r3 = r9
     540:	85 00 00 00 71 00 00 00	call 113
     541:	b7 01 00 00 b4 00 00 00	r1 = 180
     542:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
     543:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     544:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     547:	b7 02 00 00 02 00 00 00	r2 = 2
     548:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     549:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     550:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     551:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB36_61>
     552:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001148 <LBB36_61>:
;     return head + network_header;
     553:	57 09 00 00 ff ff 00 00	r9 &= 65535
     554:	0f 96 00 00 00 00 00 00	r6 += r9
     555:	bf a1 00 00 00 00 00 00	r1 = r10
     556:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     557:	b7 02 00 00 01 00 00 00	r2 = 1
     558:	bf 63 00 00 00 00 00 00	r3 = r6
     559:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     560:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     561:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     562:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB36_66>
     563:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB36_92>
     564:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     565:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     566:	b7 01 00 00 c0 00 00 00	r1 = 192
     567:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     568:	bf 93 00 00 00 00 00 00	r3 = r9
     569:	0f 13 00 00 00 00 00 00	r3 += r1
     570:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     572:	b7 02 00 00 08 00 00 00	r2 = 8
     573:	85 00 00 00 71 00 00 00	call 113
     574:	b7 01 00 00 b6 00 00 00	r1 = 182
     575:	bf 93 00 00 00 00 00 00	r3 = r9
     576:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     577:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     578:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     579:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     580:	b7 02 00 00 02 00 00 00	r2 = 2
     581:	85 00 00 00 71 00 00 00	call 113
     582:	b7 01 00 00 b4 00 00 00	r1 = 180
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     585:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     586:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     587:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     588:	b7 02 00 00 02 00 00 00	r2 = 2
     589:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     590:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     591:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     592:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB36_65>
     593:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001290 <LBB36_65>:
;     return head + network_header;
     594:	57 09 00 00 ff ff 00 00	r9 &= 65535
     595:	0f 96 00 00 00 00 00 00	r6 += r9
     596:	b7 01 00 00 0c 00 00 00	r1 = 12
     597:	bf 63 00 00 00 00 00 00	r3 = r6
     598:	0f 13 00 00 00 00 00 00	r3 += r1
     599:	bf a1 00 00 00 00 00 00	r1 = r10
     600:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     601:	b7 02 00 00 04 00 00 00	r2 = 4
     602:	85 00 00 00 71 00 00 00	call 113
     603:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     604:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     605:	b7 01 00 00 10 00 00 00	r1 = 16
     606:	bf 63 00 00 00 00 00 00	r3 = r6
     607:	0f 13 00 00 00 00 00 00	r3 += r1
     608:	bf a1 00 00 00 00 00 00	r1 = r10
     609:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     610:	b7 02 00 00 04 00 00 00	r2 = 4
     611:	85 00 00 00 71 00 00 00	call 113
     612:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     613:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     614:	b7 01 00 00 02 00 00 00	r1 = 2
     615:	bf 63 00 00 00 00 00 00	r3 = r6
     616:	0f 13 00 00 00 00 00 00	r3 += r1
     617:	bf a1 00 00 00 00 00 00	r1 = r10
     618:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     619:	b7 02 00 00 02 00 00 00	r2 = 2
     620:	85 00 00 00 71 00 00 00	call 113
     621:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     622:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     623:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     624:	b7 01 00 00 09 00 00 00	r1 = 9
     625:	05 00 38 00 00 00 00 00	goto +56 <LBB36_69>

0000000000001390 <LBB36_66>:
     626:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     627:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     628:	b7 01 00 00 c0 00 00 00	r1 = 192
     629:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     630:	bf 93 00 00 00 00 00 00	r3 = r9
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     634:	b7 02 00 00 08 00 00 00	r2 = 8
     635:	85 00 00 00 71 00 00 00	call 113
     636:	b7 01 00 00 b6 00 00 00	r1 = 182
     637:	bf 93 00 00 00 00 00 00	r3 = r9
     638:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     639:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     640:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     641:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     642:	b7 02 00 00 02 00 00 00	r2 = 2
     643:	85 00 00 00 71 00 00 00	call 113
     644:	b7 01 00 00 b4 00 00 00	r1 = 180
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     647:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     648:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     649:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     650:	b7 02 00 00 02 00 00 00	r2 = 2
     651:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     652:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     653:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     654:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB36_68>
     655:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001480 <LBB36_68>:
;     return head + network_header;
     656:	57 09 00 00 ff ff 00 00	r9 &= 65535
     657:	0f 96 00 00 00 00 00 00	r6 += r9
     658:	b7 01 00 00 08 00 00 00	r1 = 8
     659:	bf 63 00 00 00 00 00 00	r3 = r6
     660:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
     661:	bf 71 00 00 00 00 00 00	r1 = r7
     662:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     663:	b7 02 00 00 10 00 00 00	r2 = 16
     664:	85 00 00 00 04 00 00 00	call 4
     665:	b7 01 00 00 18 00 00 00	r1 = 24
     666:	bf 63 00 00 00 00 00 00	r3 = r6
     667:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     668:	bf 71 00 00 00 00 00 00	r1 = r7
     669:	07 01 00 00 80 00 00 00	r1 += 128
     670:	b7 02 00 00 10 00 00 00	r2 = 16
     671:	85 00 00 00 04 00 00 00	call 4
     672:	b7 01 00 00 04 00 00 00	r1 = 4
     673:	bf 63 00 00 00 00 00 00	r3 = r6
     674:	0f 13 00 00 00 00 00 00	r3 += r1
     675:	bf a1 00 00 00 00 00 00	r1 = r10
     676:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     677:	b7 02 00 00 02 00 00 00	r2 = 2
     678:	85 00 00 00 71 00 00 00	call 113
     679:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     680:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     681:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000001550 <LBB36_69>:
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
     684:	bf a1 00 00 00 00 00 00	r1 = r10
     685:	07 01 00 00 f8 ff ff ff	r1 += -8
     686:	b7 02 00 00 01 00 00 00	r2 = 1
     687:	85 00 00 00 71 00 00 00	call 113
     688:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     689:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     690:	bf a1 00 00 00 00 00 00	r1 = r10
     691:	07 01 00 00 f8 ff ff ff	r1 += -8
     692:	b7 02 00 00 01 00 00 00	r2 = 1
     693:	bf 63 00 00 00 00 00 00	r3 = r6
     694:	85 00 00 00 04 00 00 00	call 4
     695:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     696:	57 01 00 00 f0 00 00 00	r1 &= 240
     697:	77 01 00 00 04 00 00 00	r1 >>= 4
     698:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     699:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     700:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB36_72>
     701:	15 01 53 00 01 00 00 00	if r1 == 1 goto +83 <LBB36_84>
     702:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB36_74>
     703:	05 00 b9 fe 00 00 00 00	goto -327 <LBB36_92>

0000000000001600 <LBB36_74>:
     704:	b7 01 00 00 c0 00 00 00	r1 = 192
     705:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     706:	bf 93 00 00 00 00 00 00	r3 = r9
     707:	0f 13 00 00 00 00 00 00	r3 += r1
     708:	bf a1 00 00 00 00 00 00	r1 = r10
     709:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     710:	b7 02 00 00 08 00 00 00	r2 = 8
     711:	85 00 00 00 71 00 00 00	call 113
     712:	b7 01 00 00 b6 00 00 00	r1 = 182
     713:	bf 93 00 00 00 00 00 00	r3 = r9
     714:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     715:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     716:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     717:	bf a1 00 00 00 00 00 00	r1 = r10
     718:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     719:	b7 02 00 00 02 00 00 00	r2 = 2
     720:	85 00 00 00 71 00 00 00	call 113
     721:	b7 01 00 00 b4 00 00 00	r1 = 180
     722:	0f 19 00 00 00 00 00 00	r9 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     723:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     726:	b7 02 00 00 02 00 00 00	r2 = 2
     727:	bf 93 00 00 00 00 00 00	r3 = r9
     728:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     729:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     730:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     731:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB36_76>
     732:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000016e8 <LBB36_76>:
;     return head + network_header;
     733:	57 06 00 00 ff ff 00 00	r6 &= 65535
     734:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
     735:	0f 61 00 00 00 00 00 00	r1 += r6
     736:	bf 16 00 00 00 00 00 00	r6 = r1
     737:	bf a1 00 00 00 00 00 00	r1 = r10
     738:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     739:	b7 02 00 00 01 00 00 00	r2 = 1
     740:	bf 63 00 00 00 00 00 00	r3 = r6
     741:	85 00 00 00 04 00 00 00	call 4
     742:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     743:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     744:	57 02 00 00 f0 00 00 00	r2 &= 240
     745:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB36_78>
     746:	bf a1 00 00 00 00 00 00	r1 = r10
     747:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     748:	b7 02 00 00 01 00 00 00	r2 = 1
     749:	bf 63 00 00 00 00 00 00	r3 = r6
     750:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     751:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     752:	67 01 00 00 02 00 00 00	r1 <<= 2
     753:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001790 <LBB36_78>:
;     return l3_header + transport_size;
     754:	0f 16 00 00 00 00 00 00	r6 += r1
     755:	b7 01 00 00 00 00 00 00	r1 = 0
     756:	bf 63 00 00 00 00 00 00	r3 = r6
     757:	0f 13 00 00 00 00 00 00	r3 += r1
     758:	bf a1 00 00 00 00 00 00	r1 = r10
     759:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     760:	b7 02 00 00 02 00 00 00	r2 = 2
     761:	85 00 00 00 71 00 00 00	call 113
     762:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     763:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     764:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     765:	b7 01 00 00 02 00 00 00	r1 = 2
     766:	bf 63 00 00 00 00 00 00	r3 = r6
     767:	0f 13 00 00 00 00 00 00	r3 += r1
     768:	bf a1 00 00 00 00 00 00	r1 = r10
     769:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     770:	b7 02 00 00 02 00 00 00	r2 = 2
     771:	85 00 00 00 71 00 00 00	call 113
     772:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     773:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     774:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     775:	07 06 00 00 0c 00 00 00	r6 += 12
     776:	bf 71 00 00 00 00 00 00	r1 = r7
     777:	07 01 00 00 9c 00 00 00	r1 += 156
     778:	b7 02 00 00 02 00 00 00	r2 = 2
     779:	bf 63 00 00 00 00 00 00	r3 = r6
     780:	85 00 00 00 04 00 00 00	call 4
     781:	05 00 8a 00 00 00 00 00	goto +138 <LBB36_89>

0000000000001870 <LBB36_72>:
;     if (l4_proto == IPPROTO_TCP) {
     782:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB36_79>
     783:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB36_84>
     784:	05 00 68 fe 00 00 00 00	goto -408 <LBB36_92>

0000000000001888 <LBB36_84>:
     785:	b7 01 00 00 c0 00 00 00	r1 = 192
     786:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     787:	bf 63 00 00 00 00 00 00	r3 = r6
     788:	0f 13 00 00 00 00 00 00	r3 += r1
     789:	bf a1 00 00 00 00 00 00	r1 = r10
     790:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     791:	b7 02 00 00 08 00 00 00	r2 = 8
     792:	85 00 00 00 71 00 00 00	call 113
     793:	b7 01 00 00 b6 00 00 00	r1 = 182
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     796:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     797:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     798:	bf a1 00 00 00 00 00 00	r1 = r10
     799:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     800:	b7 02 00 00 02 00 00 00	r2 = 2
     801:	85 00 00 00 71 00 00 00	call 113
     802:	b7 01 00 00 b4 00 00 00	r1 = 180
     803:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     804:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     805:	bf a1 00 00 00 00 00 00	r1 = r10
     806:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     807:	b7 02 00 00 02 00 00 00	r2 = 2
     808:	bf 63 00 00 00 00 00 00	r3 = r6
     809:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     810:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     811:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     812:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB36_86>
     813:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001970 <LBB36_86>:
;     return head + network_header;
     814:	57 09 00 00 ff ff 00 00	r9 &= 65535
     815:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     816:	0f 96 00 00 00 00 00 00	r6 += r9
     817:	bf a1 00 00 00 00 00 00	r1 = r10
     818:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     819:	b7 02 00 00 01 00 00 00	r2 = 1
     820:	bf 63 00 00 00 00 00 00	r3 = r6
     821:	85 00 00 00 04 00 00 00	call 4
     822:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     823:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     824:	57 02 00 00 f0 00 00 00	r2 &= 240
     825:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB36_88>
     826:	bf a1 00 00 00 00 00 00	r1 = r10
     827:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     828:	b7 02 00 00 01 00 00 00	r2 = 1
     829:	bf 63 00 00 00 00 00 00	r3 = r6
     830:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     831:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     832:	67 01 00 00 02 00 00 00	r1 <<= 2
     833:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a10 <LBB36_88>:
;     return l3_header + transport_size;
     834:	0f 16 00 00 00 00 00 00	r6 += r1
     835:	bf a9 00 00 00 00 00 00	r9 = r10
     836:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     837:	bf 91 00 00 00 00 00 00	r1 = r9
     838:	b7 02 00 00 08 00 00 00	r2 = 8
     839:	bf 63 00 00 00 00 00 00	r3 = r6
     840:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     841:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     842:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     843:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     844:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     845:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     846:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     847:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     848:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     849:	05 00 46 00 00 00 00 00	goto +70 <LBB36_89>

0000000000001a90 <LBB36_79>:
     850:	b7 01 00 00 c0 00 00 00	r1 = 192
     851:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     852:	bf 63 00 00 00 00 00 00	r3 = r6
     853:	0f 13 00 00 00 00 00 00	r3 += r1
     854:	bf a1 00 00 00 00 00 00	r1 = r10
     855:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     856:	b7 02 00 00 08 00 00 00	r2 = 8
     857:	85 00 00 00 71 00 00 00	call 113
     858:	b7 01 00 00 b6 00 00 00	r1 = 182
     859:	bf 63 00 00 00 00 00 00	r3 = r6
     860:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     861:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     862:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     863:	bf a1 00 00 00 00 00 00	r1 = r10
     864:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     865:	b7 02 00 00 02 00 00 00	r2 = 2
     866:	85 00 00 00 71 00 00 00	call 113
     867:	b7 01 00 00 b4 00 00 00	r1 = 180
     868:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     869:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     870:	bf a1 00 00 00 00 00 00	r1 = r10
     871:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     872:	b7 02 00 00 02 00 00 00	r2 = 2
     873:	bf 63 00 00 00 00 00 00	r3 = r6
     874:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     875:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     876:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     877:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB36_81>
     878:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001b78 <LBB36_81>:
;     return head + network_header;
     879:	57 09 00 00 ff ff 00 00	r9 &= 65535
     880:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     881:	0f 96 00 00 00 00 00 00	r6 += r9
     882:	bf a1 00 00 00 00 00 00	r1 = r10
     883:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     884:	b7 02 00 00 01 00 00 00	r2 = 1
     885:	bf 63 00 00 00 00 00 00	r3 = r6
     886:	85 00 00 00 04 00 00 00	call 4
     887:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     888:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     889:	57 02 00 00 f0 00 00 00	r2 &= 240
     890:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB36_83>
     891:	bf a1 00 00 00 00 00 00	r1 = r10
     892:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     893:	b7 02 00 00 01 00 00 00	r2 = 1
     894:	bf 63 00 00 00 00 00 00	r3 = r6
     895:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     896:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     897:	67 01 00 00 02 00 00 00	r1 <<= 2
     898:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c18 <LBB36_83>:
;     return l3_header + transport_size;
     899:	0f 16 00 00 00 00 00 00	r6 += r1
     900:	b7 01 00 00 00 00 00 00	r1 = 0
     901:	bf 63 00 00 00 00 00 00	r3 = r6
     902:	0f 13 00 00 00 00 00 00	r3 += r1
     903:	bf a1 00 00 00 00 00 00	r1 = r10
     904:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     905:	b7 02 00 00 02 00 00 00	r2 = 2
     906:	85 00 00 00 71 00 00 00	call 113
     907:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     908:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     909:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     910:	b7 01 00 00 02 00 00 00	r1 = 2
     911:	0f 16 00 00 00 00 00 00	r6 += r1
     912:	bf a1 00 00 00 00 00 00	r1 = r10
     913:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     914:	b7 02 00 00 02 00 00 00	r2 = 2
     915:	bf 63 00 00 00 00 00 00	r3 = r6
     916:	85 00 00 00 71 00 00 00	call 113
     917:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     918:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     919:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001cc0 <LBB36_89>:
     920:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
;     return cfg->callstack == 0;
     921:	71 81 11 00 00 00 00 00	r1 = *(u8 *)(r8 + 17)
;     if (!filter_callstack(cfg))
     922:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB36_91>
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
     923:	bf 61 00 00 00 00 00 00	r1 = r6
     924:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     926:	b7 03 00 00 00 00 00 00	r3 = 0
     927:	85 00 00 00 1b 00 00 00	call 27
     928:	63 07 30 00 00 00 00 00	*(u32 *)(r7 + 48) = r0

0000000000001d08 <LBB36_91>:
     929:	b7 01 00 00 6b 00 00 00	r1 = 107
;     for (j = 10; j < 64; j += 10) CPY(j);
     930:	73 17 12 00 00 00 00 00	*(u8 *)(r7 + 18) = r1
     931:	b7 01 00 00 73 00 00 00	r1 = 115
     932:	73 17 11 00 00 00 00 00	*(u8 *)(r7 + 17) = r1
     933:	b7 01 00 00 76 00 00 00	r1 = 118
     934:	73 17 0e 00 00 00 00 00	*(u8 *)(r7 + 14) = r1
     935:	b7 01 00 00 63 00 00 00	r1 = 99
     936:	73 17 0b 00 00 00 00 00	*(u8 *)(r7 + 11) = r1
     937:	b7 01 00 00 66 00 00 00	r1 = 102
     938:	73 17 07 00 00 00 00 00	*(u8 *)(r7 + 7) = r1
     939:	b7 01 00 00 69 00 00 00	r1 = 105
     940:	73 17 0d 00 00 00 00 00	*(u8 *)(r7 + 13) = r1
     941:	73 17 06 00 00 00 00 00	*(u8 *)(r7 + 6) = r1
     942:	b7 01 00 00 74 00 00 00	r1 = 116
     943:	73 17 05 00 00 00 00 00	*(u8 *)(r7 + 5) = r1
     944:	b7 01 00 00 65 00 00 00	r1 = 101
     945:	73 17 0f 00 00 00 00 00	*(u8 *)(r7 + 15) = r1
     946:	73 17 0c 00 00 00 00 00	*(u8 *)(r7 + 12) = r1
     947:	73 17 0a 00 00 00 00 00	*(u8 *)(r7 + 10) = r1
     948:	73 17 04 00 00 00 00 00	*(u8 *)(r7 + 4) = r1
     949:	b7 01 00 00 6e 00 00 00	r1 = 110
     950:	73 17 03 00 00 00 00 00	*(u8 *)(r7 + 3) = r1
     951:	b7 01 00 00 5f 00 00 00	r1 = 95
     952:	73 17 10 00 00 00 00 00	*(u8 *)(r7 + 16) = r1
     953:	73 17 08 00 00 00 00 00	*(u8 *)(r7 + 8) = r1
     954:	73 17 02 00 00 00 00 00	*(u8 *)(r7 + 2) = r1
     955:	b7 01 00 00 72 00 00 00	r1 = 114
     956:	73 17 09 00 00 00 00 00	*(u8 *)(r7 + 9) = r1
     957:	73 17 01 00 00 00 00 00	*(u8 *)(r7 + 1) = r1
     958:	b7 01 00 00 62 00 00 00	r1 = 98
     959:	73 17 13 00 00 00 00 00	*(u8 *)(r7 + 19) = r1
     960:	73 17 00 00 00 00 00 00	*(u8 *)(r7 + 0) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     961:	bf 61 00 00 00 00 00 00	r1 = r6
     962:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     964:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     966:	bf 74 00 00 00 00 00 00	r4 = r7
     967:	b7 05 00 00 e0 00 00 00	r5 = 224
     968:	85 00 00 00 19 00 00 00	call 25
     969:	05 00 af fd 00 00 00 00	goto -593 <LBB36_92>

Disassembly of section kprobe/br_forward:

0000000000000000 <k_br_forward>:
; int k_br_forward(struct pt_regs *ctx) {
       0:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM2(ctx);
       1:	79 11 68 00 00 00 00 00	r1 = *(u64 *)(r1 + 104)
       2:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       3:	b7 06 00 00 00 00 00 00	r6 = 0
;     GET_CFG();
       4:	63 6a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r6
       5:	bf a2 00 00 00 00 00 00	r2 = r10
       6:	07 02 00 00 e4 ff ff ff	r2 += -28
;     GET_CFG();
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	85 00 00 00 01 00 00 00	call 1
      10:	bf 08 00 00 00 00 00 00	r8 = r0
      11:	15 08 6d 01 00 00 00 00	if r8 == 0 goto +365 <LBB37_92>
      12:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
      13:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      14:	63 18 08 00 00 00 00 00	*(u32 *)(r8 + 8) = r1
;     u32 ev_buff_id = 0;
      15:	63 6a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r6
      16:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      17:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      18:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      20:	85 00 00 00 01 00 00 00	call 1
      21:	bf 07 00 00 00 00 00 00	r7 = r0
;     if (!ev) return NULL;
      22:	55 07 01 00 00 00 00 00	if r7 != 0 goto +1 <LBB37_3>
      23:	05 00 61 01 00 00 00 00	goto +353 <LBB37_92>

00000000000000c0 <LBB37_3>:
      24:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      25:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      26:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      27:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      28:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      29:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      30:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      31:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      32:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      33:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      34:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      35:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      36:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      37:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      38:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      39:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      40:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      41:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      42:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      43:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      44:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      45:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      46:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      47:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      48:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      49:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      50:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      51:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      52:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      53:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      54:	61 81 04 00 00 00 00 00	r1 = *(u32 *)(r8 + 4)
      55:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB37_5>
      56:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      57:	5d 01 3f 01 00 00 00 00	if r1 != r0 goto +319 <LBB37_92>

00000000000001d0 <LBB37_5>:
      58:	b7 01 00 00 10 00 00 00	r1 = 16
      59:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
      60:	bf 93 00 00 00 00 00 00	r3 = r9
      61:	0f 13 00 00 00 00 00 00	r3 += r1
      62:	bf a6 00 00 00 00 00 00	r6 = r10
      63:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      64:	bf 61 00 00 00 00 00 00	r1 = r6
      65:	b7 02 00 00 08 00 00 00	r2 = 8
      66:	85 00 00 00 71 00 00 00	call 113
      67:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      68:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      69:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      70:	bf 61 00 00 00 00 00 00	r1 = r6
      71:	b7 02 00 00 08 00 00 00	r2 = 8
      72:	85 00 00 00 71 00 00 00	call 113
      73:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      74:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      75:	0f 13 00 00 00 00 00 00	r3 += r1
      76:	bf a1 00 00 00 00 00 00	r1 = r10
      77:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      78:	b7 02 00 00 04 00 00 00	r2 = 4
      79:	85 00 00 00 71 00 00 00	call 113
      80:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      81:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB37_8>
      82:	b7 01 00 00 18 00 00 00	r1 = 24
      83:	bf 93 00 00 00 00 00 00	r3 = r9
      84:	0f 13 00 00 00 00 00 00	r3 += r1
      85:	bf a1 00 00 00 00 00 00	r1 = r10
      86:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
      87:	b7 02 00 00 08 00 00 00	r2 = 8
      88:	85 00 00 00 71 00 00 00	call 113
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
      90:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB37_11>
      91:	b7 01 00 00 30 00 00 00	r1 = 48
      92:	0f 13 00 00 00 00 00 00	r3 += r1
      93:	bf a1 00 00 00 00 00 00	r1 = r10
      94:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      95:	b7 02 00 00 08 00 00 00	r2 = 8
      96:	85 00 00 00 71 00 00 00	call 113
      97:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      98:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     102:	b7 02 00 00 04 00 00 00	r2 = 4
     103:	85 00 00 00 71 00 00 00	call 113
     104:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000348 <LBB37_8>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     105:	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0)
     106:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB37_11>
     107:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB37_11>
     108:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB37_92>

0000000000000368 <LBB37_11>:
;     u16 icmpid = cfg->icmpid;
     109:	69 81 0e 00 00 00 00 00	r1 = *(u16 *)(r8 + 14)
;     u16 port = cfg->port;
     110:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     111:	69 81 0c 00 00 00 00 00	r1 = *(u16 *)(r8 + 12)
;     u8 proto = cfg->proto;
     112:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     113:	71 81 12 00 00 00 00 00	r1 = *(u8 *)(r8 + 18)
;     u32 addr = cfg->ip;
     114:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     115:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
     116:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     117:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     118:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     119:	b7 01 00 00 c0 00 00 00	r1 = 192
     120:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     121:	bf 93 00 00 00 00 00 00	r3 = r9
     122:	0f 13 00 00 00 00 00 00	r3 += r1
     123:	bf a1 00 00 00 00 00 00	r1 = r10
     124:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     125:	b7 02 00 00 08 00 00 00	r2 = 8
     126:	85 00 00 00 71 00 00 00	call 113
     127:	b7 01 00 00 b6 00 00 00	r1 = 182
     128:	bf 93 00 00 00 00 00 00	r3 = r9
     129:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     130:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     131:	bf a1 00 00 00 00 00 00	r1 = r10
     132:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     133:	b7 02 00 00 02 00 00 00	r2 = 2
     134:	85 00 00 00 71 00 00 00	call 113
     135:	b7 01 00 00 b4 00 00 00	r1 = 180
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     138:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     139:	bf a1 00 00 00 00 00 00	r1 = r10
     140:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     141:	b7 02 00 00 02 00 00 00	r2 = 2
     142:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     143:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     144:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     145:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB37_13>
     146:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000498 <LBB37_13>:
;     return head + network_header;
     147:	57 09 00 00 ff ff 00 00	r9 &= 65535
     148:	0f 96 00 00 00 00 00 00	r6 += r9
     149:	bf a1 00 00 00 00 00 00	r1 = r10
     150:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     151:	b7 02 00 00 01 00 00 00	r2 = 1
     152:	bf 63 00 00 00 00 00 00	r3 = r6
     153:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     154:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     155:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     156:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB37_20>
     157:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB37_92>
;         if (addr != 0) {
     158:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     159:	bf 19 00 00 00 00 00 00	r9 = r1
     160:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB37_18>
     161:	b7 01 00 00 0c 00 00 00	r1 = 12
     162:	bf 63 00 00 00 00 00 00	r3 = r6
     163:	0f 13 00 00 00 00 00 00	r3 += r1
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     166:	b7 02 00 00 04 00 00 00	r2 = 4
     167:	85 00 00 00 71 00 00 00	call 113
     168:	b7 01 00 00 10 00 00 00	r1 = 16
     169:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     170:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     171:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     172:	bf a1 00 00 00 00 00 00	r1 = r10
     173:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     174:	b7 02 00 00 04 00 00 00	r2 = 4
     175:	bf 63 00 00 00 00 00 00	r3 = r6
     176:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     177:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     178:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB37_54>
     179:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     180:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     181:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB37_92>
     182:	05 00 da 00 00 00 00 00	goto +218 <LBB37_54>

00000000000005b8 <LBB37_20>:
     183:	b7 01 00 00 06 00 00 00	r1 = 6
     184:	0f 16 00 00 00 00 00 00	r6 += r1
     185:	bf a1 00 00 00 00 00 00	r1 = r10
     186:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     187:	b7 02 00 00 01 00 00 00	r2 = 1
     188:	bf 63 00 00 00 00 00 00	r3 = r6
     189:	85 00 00 00 04 00 00 00	call 4
     190:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     191:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     192:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     193:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB37_22>
     194:	b7 04 00 00 80 00 00 00	r4 = 128
     195:	b7 03 00 00 81 00 00 00	r3 = 129
     196:	b7 01 00 00 3a 00 00 00	r1 = 58
     197:	05 00 0d 00 00 00 00 00	goto +13 <LBB37_22>

0000000000000630 <LBB37_18>:
     198:	b7 01 00 00 09 00 00 00	r1 = 9
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     208:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB37_22>
     209:	b7 04 00 00 08 00 00 00	r4 = 8
     210:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000698 <LBB37_22>:
;     if (proto != 0 && proto != l4_proto)
     211:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     212:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB37_24>
     213:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB37_92>

00000000000006b0 <LBB37_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     214:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB37_27>
     215:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB37_29>
     216:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB37_35>
     217:	05 00 9f 00 00 00 00 00	goto +159 <LBB37_92>

00000000000006d0 <LBB37_35>:
     218:	b7 01 00 00 c0 00 00 00	r1 = 192
     219:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     220:	bf 63 00 00 00 00 00 00	r3 = r6
     221:	0f 13 00 00 00 00 00 00	r3 += r1
     222:	bf a1 00 00 00 00 00 00	r1 = r10
     223:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     224:	b7 02 00 00 08 00 00 00	r2 = 8
     225:	85 00 00 00 71 00 00 00	call 113
     226:	b7 01 00 00 b6 00 00 00	r1 = 182
     227:	bf 63 00 00 00 00 00 00	r3 = r6
     228:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     229:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     230:	bf a1 00 00 00 00 00 00	r1 = r10
     231:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     232:	b7 02 00 00 02 00 00 00	r2 = 2
     233:	85 00 00 00 71 00 00 00	call 113
     234:	b7 01 00 00 b4 00 00 00	r1 = 180
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     237:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     238:	bf a1 00 00 00 00 00 00	r1 = r10
     239:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     240:	b7 02 00 00 02 00 00 00	r2 = 2
     241:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     242:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     243:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     244:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB37_37>
     245:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000007b0 <LBB37_37>:
;     return head + network_header;
     246:	57 06 00 00 ff ff 00 00	r6 &= 65535
     247:	0f 69 00 00 00 00 00 00	r9 += r6
     248:	bf a1 00 00 00 00 00 00	r1 = r10
     249:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     250:	b7 02 00 00 01 00 00 00	r2 = 1
     251:	bf 93 00 00 00 00 00 00	r3 = r9
     252:	85 00 00 00 04 00 00 00	call 4
     253:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     254:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     255:	57 02 00 00 f0 00 00 00	r2 &= 240
     256:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB37_39>
     257:	bf a1 00 00 00 00 00 00	r1 = r10
     258:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     259:	b7 02 00 00 01 00 00 00	r2 = 1
     260:	bf 93 00 00 00 00 00 00	r3 = r9
     261:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     262:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     263:	67 01 00 00 02 00 00 00	r1 <<= 2
     264:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000848 <LBB37_39>:
;     return l3_header + transport_size;
     265:	0f 19 00 00 00 00 00 00	r9 += r1
     266:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9

0000000000000858 <LBB37_40>:
     267:	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 72)
;     if (port != 0) {
     268:	bf 92 00 00 00 00 00 00	r2 = r9
     269:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB37_45>
;         if (l4_proto == IPPROTO_TCP) {
     270:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     271:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB37_52>
     272:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB37_45>
     273:	b7 01 00 00 00 00 00 00	r1 = 0
     274:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     275:	bf 63 00 00 00 00 00 00	r3 = r6
     276:	0f 13 00 00 00 00 00 00	r3 += r1
     277:	bf a1 00 00 00 00 00 00	r1 = r10
     278:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     279:	b7 02 00 00 02 00 00 00	r2 = 2
     280:	85 00 00 00 71 00 00 00	call 113
     281:	b7 01 00 00 02 00 00 00	r1 = 2
     282:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     283:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     284:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     285:	bf a1 00 00 00 00 00 00	r1 = r10
     286:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     287:	b7 02 00 00 02 00 00 00	r2 = 2
     288:	bf 63 00 00 00 00 00 00	r3 = r6
     289:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     290:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     291:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     292:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB37_54>
     293:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     294:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB37_92>
     295:	05 00 69 00 00 00 00 00	goto +105 <LBB37_54>

0000000000000940 <LBB37_27>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     296:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB37_35>
     297:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB37_92>

0000000000000950 <LBB37_29>:
     298:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r4
     299:	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r3
     300:	b7 01 00 00 c0 00 00 00	r1 = 192
     301:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     302:	bf 63 00 00 00 00 00 00	r3 = r6
     303:	0f 13 00 00 00 00 00 00	r3 += r1
     304:	bf a1 00 00 00 00 00 00	r1 = r10
     305:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     306:	b7 02 00 00 08 00 00 00	r2 = 8
     307:	85 00 00 00 71 00 00 00	call 113
     308:	b7 01 00 00 b6 00 00 00	r1 = 182
     309:	bf 63 00 00 00 00 00 00	r3 = r6
     310:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     311:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     312:	bf a1 00 00 00 00 00 00	r1 = r10
     313:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     314:	b7 02 00 00 02 00 00 00	r2 = 2
     315:	85 00 00 00 71 00 00 00	call 113
     316:	b7 01 00 00 b4 00 00 00	r1 = 180
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     319:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     320:	bf a1 00 00 00 00 00 00	r1 = r10
     321:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     322:	b7 02 00 00 02 00 00 00	r2 = 2
     323:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     324:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     325:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     326:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB37_31>
     327:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000a40 <LBB37_31>:
;     return head + network_header;
     328:	57 06 00 00 ff ff 00 00	r6 &= 65535
     329:	0f 69 00 00 00 00 00 00	r9 += r6
     330:	bf a1 00 00 00 00 00 00	r1 = r10
     331:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     332:	b7 02 00 00 01 00 00 00	r2 = 1
     333:	bf 93 00 00 00 00 00 00	r3 = r9
     334:	85 00 00 00 04 00 00 00	call 4
     335:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     336:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     337:	57 02 00 00 f0 00 00 00	r2 &= 240
     338:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB37_33>
     339:	bf a1 00 00 00 00 00 00	r1 = r10
     340:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     341:	b7 02 00 00 01 00 00 00	r2 = 1
     342:	bf 93 00 00 00 00 00 00	r3 = r9
     343:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     344:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     345:	67 01 00 00 02 00 00 00	r1 <<= 2
     346:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000ad8 <LBB37_33>:
;     return l3_header + transport_size;
     347:	0f 19 00 00 00 00 00 00	r9 += r1
     348:	bf a6 00 00 00 00 00 00	r6 = r10
     349:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     350:	bf 61 00 00 00 00 00 00	r1 = r6
     351:	b7 02 00 00 08 00 00 00	r2 = 8
     352:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
     353:	bf 93 00 00 00 00 00 00	r3 = r9
     354:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     355:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     356:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     357:	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 88)
     358:	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 96)
     359:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB37_40>
     360:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     361:	07 02 00 00 e8 ff ff ff	r2 += -24
     362:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     363:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB37_40>
     364:	05 00 0c 00 00 00 00 00	goto +12 <LBB37_92>

0000000000000b68 <LBB37_45>:
;     if (proto != 0 && proto != l4_proto)
     365:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     366:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB37_54>
     367:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
;     if (proto != 0 && icmpid != 0) {
     368:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB37_54>
     369:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     370:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB37_54>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     371:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     372:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB37_50>
     373:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB37_54>

0000000000000bb0 <LBB37_50>:
;         if (icmpid != ev_icmpid)
     374:	57 01 00 00 ff ff 00 00	r1 &= 65535
     375:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
     376:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB37_54>

0000000000000bc8 <LBB37_92>:
;     return do_trace(ctx, skb, "br_forward");
     377:	b7 00 00 00 00 00 00 00	r0 = 0
     378:	95 00 00 00 00 00 00 00	exit

0000000000000bd8 <LBB37_52>:
     379:	b7 01 00 00 00 00 00 00	r1 = 0
     380:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     381:	bf 63 00 00 00 00 00 00	r3 = r6
     382:	0f 13 00 00 00 00 00 00	r3 += r1
     383:	bf a1 00 00 00 00 00 00	r1 = r10
     384:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     385:	b7 02 00 00 02 00 00 00	r2 = 2
     386:	85 00 00 00 71 00 00 00	call 113
     387:	b7 01 00 00 02 00 00 00	r1 = 2
     388:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     389:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     390:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     391:	bf a1 00 00 00 00 00 00	r1 = r10
     392:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     393:	b7 02 00 00 02 00 00 00	r2 = 2
     394:	bf 63 00 00 00 00 00 00	r3 = r6
     395:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     396:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     397:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     398:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB37_54>
     399:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     400:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB37_92>

0000000000000c88 <LBB37_54>:
;     event->flags |= SKBTRACER_EVENT_IF;
     401:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     402:	47 01 00 00 01 00 00 00	r1 |= 1
     403:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     404:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
;     ev->skb = (u64)skb;
     405:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     406:	85 00 00 00 05 00 00 00	call 5
     407:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     408:	b7 01 00 00 10 00 00 00	r1 = 16
     409:	bf 96 00 00 00 00 00 00	r6 = r9
     410:	0f 16 00 00 00 00 00 00	r6 += r1
     411:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     412:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     413:	b7 02 00 00 08 00 00 00	r2 = 8
     414:	bf 63 00 00 00 00 00 00	r3 = r6
     415:	85 00 00 00 71 00 00 00	call 113
     416:	b7 01 00 00 70 00 00 00	r1 = 112
     417:	bf 93 00 00 00 00 00 00	r3 = r9
     418:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     419:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     420:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     421:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     422:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     423:	b7 02 00 00 04 00 00 00	r2 = 4
     424:	85 00 00 00 71 00 00 00	call 113
     425:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     426:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     427:	85 00 00 00 08 00 00 00	call 8
     428:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     429:	85 00 00 00 0e 00 00 00	call 14
     430:	57 00 00 00 ff ff 00 00	r0 &= 65535
     431:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     432:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     433:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     434:	bf 91 00 00 00 00 00 00	r1 = r9
     435:	b7 02 00 00 08 00 00 00	r2 = 8
     436:	bf 63 00 00 00 00 00 00	r3 = r6
     437:	85 00 00 00 71 00 00 00	call 113
     438:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     439:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     440:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     441:	bf 91 00 00 00 00 00 00	r1 = r9
     442:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     443:	b7 02 00 00 08 00 00 00	r2 = 8
     444:	85 00 00 00 71 00 00 00	call 113
     445:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     446:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     447:	0f 13 00 00 00 00 00 00	r3 += r1
     448:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     449:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     450:	b7 02 00 00 04 00 00 00	r2 = 4
     451:	85 00 00 00 71 00 00 00	call 113
     452:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     453:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB37_57>
     454:	b7 01 00 00 18 00 00 00	r1 = 24
     455:	bf 93 00 00 00 00 00 00	r3 = r9
     456:	0f 13 00 00 00 00 00 00	r3 += r1
     457:	bf a1 00 00 00 00 00 00	r1 = r10
     458:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     459:	b7 02 00 00 08 00 00 00	r2 = 8
     460:	85 00 00 00 71 00 00 00	call 113
     461:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     462:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     463:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB37_57>
     464:	b7 01 00 00 30 00 00 00	r1 = 48
     465:	0f 13 00 00 00 00 00 00	r3 += r1
     466:	bf a1 00 00 00 00 00 00	r1 = r10
     467:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     468:	b7 02 00 00 08 00 00 00	r2 = 8
     469:	85 00 00 00 71 00 00 00	call 113
     470:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     471:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     472:	0f 13 00 00 00 00 00 00	r3 += r1
     473:	bf a1 00 00 00 00 00 00	r1 = r10
     474:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     475:	b7 02 00 00 04 00 00 00	r2 = 4
     476:	85 00 00 00 71 00 00 00	call 113
     477:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000ef0 <LBB37_57>:
;     pkt_info->netns = get_netns(skb);
     478:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     479:	b7 01 00 00 80 00 00 00	r1 = 128
     480:	bf 93 00 00 00 00 00 00	r3 = r9
     481:	0f 13 00 00 00 00 00 00	r3 += r1
     482:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     483:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     484:	bf a1 00 00 00 00 00 00	r1 = r10
     485:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     486:	b7 02 00 00 01 00 00 00	r2 = 1
     487:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     488:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     489:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     490:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     491:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     492:	b7 01 00 00 00 00 00 00	r1 = 0
     493:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     494:	0f 13 00 00 00 00 00 00	r3 += r1
;     pkt_info->ifname[0] = 0;
     495:	bf 71 00 00 00 00 00 00	r1 = r7
     496:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     497:	b7 02 00 00 10 00 00 00	r2 = 16
     498:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     499:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     500:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB37_59>
     501:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     502:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     503:	b7 01 00 00 69 00 00 00	r1 = 105
     504:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     505:	b7 01 00 00 6e 00 00 00	r1 = 110
     506:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000000fd8 <LBB37_59>:
     507:	b7 01 00 00 c0 00 00 00	r1 = 192
     508:	bf 93 00 00 00 00 00 00	r3 = r9
     509:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     510:	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r3
     511:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     512:	07 01 00 00 f8 ff ff ff	r1 += -8
     513:	b7 02 00 00 08 00 00 00	r2 = 8
     514:	85 00 00 00 71 00 00 00	call 113
     515:	b7 01 00 00 b6 00 00 00	r1 = 182
     516:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     517:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     518:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     519:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     520:	b7 02 00 00 02 00 00 00	r2 = 2
     521:	bf 93 00 00 00 00 00 00	r3 = r9
     522:	85 00 00 00 71 00 00 00	call 113
     523:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     524:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     525:	bf 71 00 00 00 00 00 00	r1 = r7
     526:	07 01 00 00 64 00 00 00	r1 += 100
     527:	b7 02 00 00 06 00 00 00	r2 = 6
     528:	bf 63 00 00 00 00 00 00	r3 = r6
     529:	85 00 00 00 04 00 00 00	call 4
     530:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     531:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	b7 02 00 00 08 00 00 00	r2 = 8
     533:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     534:	85 00 00 00 71 00 00 00	call 113
     535:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     536:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     537:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     538:	b7 02 00 00 02 00 00 00	r2 = 2
     539:	bf 93 00 00 00 00 00 00	r3 = r9
     540:	85 00 00 00 71 00 00 00	call 113
     541:	b7 01 00 00 b4 00 00 00	r1 = 180
     542:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
     543:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     544:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     547:	b7 02 00 00 02 00 00 00	r2 = 2
     548:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     549:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     550:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     551:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB37_61>
     552:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001148 <LBB37_61>:
;     return head + network_header;
     553:	57 09 00 00 ff ff 00 00	r9 &= 65535
     554:	0f 96 00 00 00 00 00 00	r6 += r9
     555:	bf a1 00 00 00 00 00 00	r1 = r10
     556:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     557:	b7 02 00 00 01 00 00 00	r2 = 1
     558:	bf 63 00 00 00 00 00 00	r3 = r6
     559:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     560:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     561:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     562:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB37_66>
     563:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB37_92>
     564:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     565:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     566:	b7 01 00 00 c0 00 00 00	r1 = 192
     567:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     568:	bf 93 00 00 00 00 00 00	r3 = r9
     569:	0f 13 00 00 00 00 00 00	r3 += r1
     570:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     572:	b7 02 00 00 08 00 00 00	r2 = 8
     573:	85 00 00 00 71 00 00 00	call 113
     574:	b7 01 00 00 b6 00 00 00	r1 = 182
     575:	bf 93 00 00 00 00 00 00	r3 = r9
     576:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     577:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     578:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     579:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     580:	b7 02 00 00 02 00 00 00	r2 = 2
     581:	85 00 00 00 71 00 00 00	call 113
     582:	b7 01 00 00 b4 00 00 00	r1 = 180
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     585:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     586:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     587:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     588:	b7 02 00 00 02 00 00 00	r2 = 2
     589:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     590:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     591:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     592:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB37_65>
     593:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001290 <LBB37_65>:
;     return head + network_header;
     594:	57 09 00 00 ff ff 00 00	r9 &= 65535
     595:	0f 96 00 00 00 00 00 00	r6 += r9
     596:	b7 01 00 00 0c 00 00 00	r1 = 12
     597:	bf 63 00 00 00 00 00 00	r3 = r6
     598:	0f 13 00 00 00 00 00 00	r3 += r1
     599:	bf a1 00 00 00 00 00 00	r1 = r10
     600:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     601:	b7 02 00 00 04 00 00 00	r2 = 4
     602:	85 00 00 00 71 00 00 00	call 113
     603:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     604:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     605:	b7 01 00 00 10 00 00 00	r1 = 16
     606:	bf 63 00 00 00 00 00 00	r3 = r6
     607:	0f 13 00 00 00 00 00 00	r3 += r1
     608:	bf a1 00 00 00 00 00 00	r1 = r10
     609:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     610:	b7 02 00 00 04 00 00 00	r2 = 4
     611:	85 00 00 00 71 00 00 00	call 113
     612:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     613:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     614:	b7 01 00 00 02 00 00 00	r1 = 2
     615:	bf 63 00 00 00 00 00 00	r3 = r6
     616:	0f 13 00 00 00 00 00 00	r3 += r1
     617:	bf a1 00 00 00 00 00 00	r1 = r10
     618:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     619:	b7 02 00 00 02 00 00 00	r2 = 2
     620:	85 00 00 00 71 00 00 00	call 113
     621:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     622:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     623:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     624:	b7 01 00 00 09 00 00 00	r1 = 9
     625:	05 00 38 00 00 00 00 00	goto +56 <LBB37_69>

0000000000001390 <LBB37_66>:
     626:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     627:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     628:	b7 01 00 00 c0 00 00 00	r1 = 192
     629:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     630:	bf 93 00 00 00 00 00 00	r3 = r9
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     634:	b7 02 00 00 08 00 00 00	r2 = 8
     635:	85 00 00 00 71 00 00 00	call 113
     636:	b7 01 00 00 b6 00 00 00	r1 = 182
     637:	bf 93 00 00 00 00 00 00	r3 = r9
     638:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     639:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     640:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     641:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     642:	b7 02 00 00 02 00 00 00	r2 = 2
     643:	85 00 00 00 71 00 00 00	call 113
     644:	b7 01 00 00 b4 00 00 00	r1 = 180
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     647:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     648:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     649:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     650:	b7 02 00 00 02 00 00 00	r2 = 2
     651:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     652:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     653:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     654:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB37_68>
     655:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001480 <LBB37_68>:
;     return head + network_header;
     656:	57 09 00 00 ff ff 00 00	r9 &= 65535
     657:	0f 96 00 00 00 00 00 00	r6 += r9
     658:	b7 01 00 00 08 00 00 00	r1 = 8
     659:	bf 63 00 00 00 00 00 00	r3 = r6
     660:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
     661:	bf 71 00 00 00 00 00 00	r1 = r7
     662:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     663:	b7 02 00 00 10 00 00 00	r2 = 16
     664:	85 00 00 00 04 00 00 00	call 4
     665:	b7 01 00 00 18 00 00 00	r1 = 24
     666:	bf 63 00 00 00 00 00 00	r3 = r6
     667:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     668:	bf 71 00 00 00 00 00 00	r1 = r7
     669:	07 01 00 00 80 00 00 00	r1 += 128
     670:	b7 02 00 00 10 00 00 00	r2 = 16
     671:	85 00 00 00 04 00 00 00	call 4
     672:	b7 01 00 00 04 00 00 00	r1 = 4
     673:	bf 63 00 00 00 00 00 00	r3 = r6
     674:	0f 13 00 00 00 00 00 00	r3 += r1
     675:	bf a1 00 00 00 00 00 00	r1 = r10
     676:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     677:	b7 02 00 00 02 00 00 00	r2 = 2
     678:	85 00 00 00 71 00 00 00	call 113
     679:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     680:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     681:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000001550 <LBB37_69>:
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
     684:	bf a1 00 00 00 00 00 00	r1 = r10
     685:	07 01 00 00 f8 ff ff ff	r1 += -8
     686:	b7 02 00 00 01 00 00 00	r2 = 1
     687:	85 00 00 00 71 00 00 00	call 113
     688:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     689:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     690:	bf a1 00 00 00 00 00 00	r1 = r10
     691:	07 01 00 00 f8 ff ff ff	r1 += -8
     692:	b7 02 00 00 01 00 00 00	r2 = 1
     693:	bf 63 00 00 00 00 00 00	r3 = r6
     694:	85 00 00 00 04 00 00 00	call 4
     695:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     696:	57 01 00 00 f0 00 00 00	r1 &= 240
     697:	77 01 00 00 04 00 00 00	r1 >>= 4
     698:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     699:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     700:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB37_72>
     701:	15 01 53 00 01 00 00 00	if r1 == 1 goto +83 <LBB37_84>
     702:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB37_74>
     703:	05 00 b9 fe 00 00 00 00	goto -327 <LBB37_92>

0000000000001600 <LBB37_74>:
     704:	b7 01 00 00 c0 00 00 00	r1 = 192
     705:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     706:	bf 93 00 00 00 00 00 00	r3 = r9
     707:	0f 13 00 00 00 00 00 00	r3 += r1
     708:	bf a1 00 00 00 00 00 00	r1 = r10
     709:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     710:	b7 02 00 00 08 00 00 00	r2 = 8
     711:	85 00 00 00 71 00 00 00	call 113
     712:	b7 01 00 00 b6 00 00 00	r1 = 182
     713:	bf 93 00 00 00 00 00 00	r3 = r9
     714:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     715:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     716:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     717:	bf a1 00 00 00 00 00 00	r1 = r10
     718:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     719:	b7 02 00 00 02 00 00 00	r2 = 2
     720:	85 00 00 00 71 00 00 00	call 113
     721:	b7 01 00 00 b4 00 00 00	r1 = 180
     722:	0f 19 00 00 00 00 00 00	r9 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     723:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     726:	b7 02 00 00 02 00 00 00	r2 = 2
     727:	bf 93 00 00 00 00 00 00	r3 = r9
     728:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     729:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     730:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     731:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB37_76>
     732:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000016e8 <LBB37_76>:
;     return head + network_header;
     733:	57 06 00 00 ff ff 00 00	r6 &= 65535
     734:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
     735:	0f 61 00 00 00 00 00 00	r1 += r6
     736:	bf 16 00 00 00 00 00 00	r6 = r1
     737:	bf a1 00 00 00 00 00 00	r1 = r10
     738:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     739:	b7 02 00 00 01 00 00 00	r2 = 1
     740:	bf 63 00 00 00 00 00 00	r3 = r6
     741:	85 00 00 00 04 00 00 00	call 4
     742:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     743:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     744:	57 02 00 00 f0 00 00 00	r2 &= 240
     745:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB37_78>
     746:	bf a1 00 00 00 00 00 00	r1 = r10
     747:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     748:	b7 02 00 00 01 00 00 00	r2 = 1
     749:	bf 63 00 00 00 00 00 00	r3 = r6
     750:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     751:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     752:	67 01 00 00 02 00 00 00	r1 <<= 2
     753:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001790 <LBB37_78>:
;     return l3_header + transport_size;
     754:	0f 16 00 00 00 00 00 00	r6 += r1
     755:	b7 01 00 00 00 00 00 00	r1 = 0
     756:	bf 63 00 00 00 00 00 00	r3 = r6
     757:	0f 13 00 00 00 00 00 00	r3 += r1
     758:	bf a1 00 00 00 00 00 00	r1 = r10
     759:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     760:	b7 02 00 00 02 00 00 00	r2 = 2
     761:	85 00 00 00 71 00 00 00	call 113
     762:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     763:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     764:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     765:	b7 01 00 00 02 00 00 00	r1 = 2
     766:	bf 63 00 00 00 00 00 00	r3 = r6
     767:	0f 13 00 00 00 00 00 00	r3 += r1
     768:	bf a1 00 00 00 00 00 00	r1 = r10
     769:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     770:	b7 02 00 00 02 00 00 00	r2 = 2
     771:	85 00 00 00 71 00 00 00	call 113
     772:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     773:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     774:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     775:	07 06 00 00 0c 00 00 00	r6 += 12
     776:	bf 71 00 00 00 00 00 00	r1 = r7
     777:	07 01 00 00 9c 00 00 00	r1 += 156
     778:	b7 02 00 00 02 00 00 00	r2 = 2
     779:	bf 63 00 00 00 00 00 00	r3 = r6
     780:	85 00 00 00 04 00 00 00	call 4
     781:	05 00 8a 00 00 00 00 00	goto +138 <LBB37_89>

0000000000001870 <LBB37_72>:
;     if (l4_proto == IPPROTO_TCP) {
     782:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB37_79>
     783:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB37_84>
     784:	05 00 68 fe 00 00 00 00	goto -408 <LBB37_92>

0000000000001888 <LBB37_84>:
     785:	b7 01 00 00 c0 00 00 00	r1 = 192
     786:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     787:	bf 63 00 00 00 00 00 00	r3 = r6
     788:	0f 13 00 00 00 00 00 00	r3 += r1
     789:	bf a1 00 00 00 00 00 00	r1 = r10
     790:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     791:	b7 02 00 00 08 00 00 00	r2 = 8
     792:	85 00 00 00 71 00 00 00	call 113
     793:	b7 01 00 00 b6 00 00 00	r1 = 182
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     796:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     797:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     798:	bf a1 00 00 00 00 00 00	r1 = r10
     799:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     800:	b7 02 00 00 02 00 00 00	r2 = 2
     801:	85 00 00 00 71 00 00 00	call 113
     802:	b7 01 00 00 b4 00 00 00	r1 = 180
     803:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     804:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     805:	bf a1 00 00 00 00 00 00	r1 = r10
     806:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     807:	b7 02 00 00 02 00 00 00	r2 = 2
     808:	bf 63 00 00 00 00 00 00	r3 = r6
     809:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     810:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     811:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     812:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB37_86>
     813:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001970 <LBB37_86>:
;     return head + network_header;
     814:	57 09 00 00 ff ff 00 00	r9 &= 65535
     815:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     816:	0f 96 00 00 00 00 00 00	r6 += r9
     817:	bf a1 00 00 00 00 00 00	r1 = r10
     818:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     819:	b7 02 00 00 01 00 00 00	r2 = 1
     820:	bf 63 00 00 00 00 00 00	r3 = r6
     821:	85 00 00 00 04 00 00 00	call 4
     822:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     823:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     824:	57 02 00 00 f0 00 00 00	r2 &= 240
     825:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB37_88>
     826:	bf a1 00 00 00 00 00 00	r1 = r10
     827:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     828:	b7 02 00 00 01 00 00 00	r2 = 1
     829:	bf 63 00 00 00 00 00 00	r3 = r6
     830:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     831:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     832:	67 01 00 00 02 00 00 00	r1 <<= 2
     833:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a10 <LBB37_88>:
;     return l3_header + transport_size;
     834:	0f 16 00 00 00 00 00 00	r6 += r1
     835:	bf a9 00 00 00 00 00 00	r9 = r10
     836:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     837:	bf 91 00 00 00 00 00 00	r1 = r9
     838:	b7 02 00 00 08 00 00 00	r2 = 8
     839:	bf 63 00 00 00 00 00 00	r3 = r6
     840:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     841:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     842:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     843:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     844:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     845:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     846:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     847:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     848:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     849:	05 00 46 00 00 00 00 00	goto +70 <LBB37_89>

0000000000001a90 <LBB37_79>:
     850:	b7 01 00 00 c0 00 00 00	r1 = 192
     851:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     852:	bf 63 00 00 00 00 00 00	r3 = r6
     853:	0f 13 00 00 00 00 00 00	r3 += r1
     854:	bf a1 00 00 00 00 00 00	r1 = r10
     855:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     856:	b7 02 00 00 08 00 00 00	r2 = 8
     857:	85 00 00 00 71 00 00 00	call 113
     858:	b7 01 00 00 b6 00 00 00	r1 = 182
     859:	bf 63 00 00 00 00 00 00	r3 = r6
     860:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     861:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     862:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     863:	bf a1 00 00 00 00 00 00	r1 = r10
     864:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     865:	b7 02 00 00 02 00 00 00	r2 = 2
     866:	85 00 00 00 71 00 00 00	call 113
     867:	b7 01 00 00 b4 00 00 00	r1 = 180
     868:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     869:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     870:	bf a1 00 00 00 00 00 00	r1 = r10
     871:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     872:	b7 02 00 00 02 00 00 00	r2 = 2
     873:	bf 63 00 00 00 00 00 00	r3 = r6
     874:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     875:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     876:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     877:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB37_81>
     878:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001b78 <LBB37_81>:
;     return head + network_header;
     879:	57 09 00 00 ff ff 00 00	r9 &= 65535
     880:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     881:	0f 96 00 00 00 00 00 00	r6 += r9
     882:	bf a1 00 00 00 00 00 00	r1 = r10
     883:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     884:	b7 02 00 00 01 00 00 00	r2 = 1
     885:	bf 63 00 00 00 00 00 00	r3 = r6
     886:	85 00 00 00 04 00 00 00	call 4
     887:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     888:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     889:	57 02 00 00 f0 00 00 00	r2 &= 240
     890:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB37_83>
     891:	bf a1 00 00 00 00 00 00	r1 = r10
     892:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     893:	b7 02 00 00 01 00 00 00	r2 = 1
     894:	bf 63 00 00 00 00 00 00	r3 = r6
     895:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     896:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     897:	67 01 00 00 02 00 00 00	r1 <<= 2
     898:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c18 <LBB37_83>:
;     return l3_header + transport_size;
     899:	0f 16 00 00 00 00 00 00	r6 += r1
     900:	b7 01 00 00 00 00 00 00	r1 = 0
     901:	bf 63 00 00 00 00 00 00	r3 = r6
     902:	0f 13 00 00 00 00 00 00	r3 += r1
     903:	bf a1 00 00 00 00 00 00	r1 = r10
     904:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     905:	b7 02 00 00 02 00 00 00	r2 = 2
     906:	85 00 00 00 71 00 00 00	call 113
     907:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     908:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     909:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     910:	b7 01 00 00 02 00 00 00	r1 = 2
     911:	0f 16 00 00 00 00 00 00	r6 += r1
     912:	bf a1 00 00 00 00 00 00	r1 = r10
     913:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     914:	b7 02 00 00 02 00 00 00	r2 = 2
     915:	bf 63 00 00 00 00 00 00	r3 = r6
     916:	85 00 00 00 71 00 00 00	call 113
     917:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     918:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     919:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001cc0 <LBB37_89>:
     920:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
;     return cfg->callstack == 0;
     921:	71 81 11 00 00 00 00 00	r1 = *(u8 *)(r8 + 17)
;     if (!filter_callstack(cfg))
     922:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB37_91>
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
     923:	bf 61 00 00 00 00 00 00	r1 = r6
     924:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     926:	b7 03 00 00 00 00 00 00	r3 = 0
     927:	85 00 00 00 1b 00 00 00	call 27
     928:	63 07 30 00 00 00 00 00	*(u32 *)(r7 + 48) = r0

0000000000001d08 <LBB37_91>:
     929:	b7 01 00 00 64 00 00 00	r1 = 100
;     for (j = 10; j < 64; j += 10) CPY(j);
     930:	73 17 09 00 00 00 00 00	*(u8 *)(r7 + 9) = r1
     931:	b7 01 00 00 61 00 00 00	r1 = 97
     932:	73 17 07 00 00 00 00 00	*(u8 *)(r7 + 7) = r1
     933:	b7 01 00 00 77 00 00 00	r1 = 119
     934:	73 17 06 00 00 00 00 00	*(u8 *)(r7 + 6) = r1
     935:	b7 01 00 00 6f 00 00 00	r1 = 111
     936:	73 17 04 00 00 00 00 00	*(u8 *)(r7 + 4) = r1
     937:	b7 01 00 00 66 00 00 00	r1 = 102
     938:	73 17 03 00 00 00 00 00	*(u8 *)(r7 + 3) = r1
     939:	b7 01 00 00 5f 00 00 00	r1 = 95
     940:	73 17 02 00 00 00 00 00	*(u8 *)(r7 + 2) = r1
     941:	b7 01 00 00 72 00 00 00	r1 = 114
     942:	73 17 08 00 00 00 00 00	*(u8 *)(r7 + 8) = r1
     943:	73 17 05 00 00 00 00 00	*(u8 *)(r7 + 5) = r1
     944:	73 17 01 00 00 00 00 00	*(u8 *)(r7 + 1) = r1
     945:	b7 01 00 00 62 00 00 00	r1 = 98
     946:	73 17 00 00 00 00 00 00	*(u8 *)(r7 + 0) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     947:	bf 61 00 00 00 00 00 00	r1 = r6
     948:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     950:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     952:	bf 74 00 00 00 00 00 00	r4 = r7
     953:	b7 05 00 00 e0 00 00 00	r5 = 224
     954:	85 00 00 00 19 00 00 00	call 25
     955:	05 00 bd fd 00 00 00 00	goto -579 <LBB37_92>

Disassembly of section kprobe/__br_forward:

0000000000000000 <k___br_fwd>:
; int k___br_fwd(struct pt_regs *ctx) {
       0:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM2(ctx);
       1:	79 11 68 00 00 00 00 00	r1 = *(u64 *)(r1 + 104)
       2:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       3:	b7 06 00 00 00 00 00 00	r6 = 0
;     GET_CFG();
       4:	63 6a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r6
       5:	bf a2 00 00 00 00 00 00	r2 = r10
       6:	07 02 00 00 e4 ff ff ff	r2 += -28
;     GET_CFG();
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	85 00 00 00 01 00 00 00	call 1
      10:	bf 08 00 00 00 00 00 00	r8 = r0
      11:	15 08 6d 01 00 00 00 00	if r8 == 0 goto +365 <LBB38_92>
      12:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
      13:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      14:	63 18 08 00 00 00 00 00	*(u32 *)(r8 + 8) = r1
;     u32 ev_buff_id = 0;
      15:	63 6a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r6
      16:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      17:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      18:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      20:	85 00 00 00 01 00 00 00	call 1
      21:	bf 07 00 00 00 00 00 00	r7 = r0
;     if (!ev) return NULL;
      22:	55 07 01 00 00 00 00 00	if r7 != 0 goto +1 <LBB38_3>
      23:	05 00 61 01 00 00 00 00	goto +353 <LBB38_92>

00000000000000c0 <LBB38_3>:
      24:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      25:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      26:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      27:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      28:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      29:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      30:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      31:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      32:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      33:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      34:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      35:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      36:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      37:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      38:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      39:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      40:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      41:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      42:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      43:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      44:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      45:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      46:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      47:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      48:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      49:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      50:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      51:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      52:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      53:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      54:	61 81 04 00 00 00 00 00	r1 = *(u32 *)(r8 + 4)
      55:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB38_5>
      56:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      57:	5d 01 3f 01 00 00 00 00	if r1 != r0 goto +319 <LBB38_92>

00000000000001d0 <LBB38_5>:
      58:	b7 01 00 00 10 00 00 00	r1 = 16
      59:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
      60:	bf 93 00 00 00 00 00 00	r3 = r9
      61:	0f 13 00 00 00 00 00 00	r3 += r1
      62:	bf a6 00 00 00 00 00 00	r6 = r10
      63:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      64:	bf 61 00 00 00 00 00 00	r1 = r6
      65:	b7 02 00 00 08 00 00 00	r2 = 8
      66:	85 00 00 00 71 00 00 00	call 113
      67:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      68:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      69:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      70:	bf 61 00 00 00 00 00 00	r1 = r6
      71:	b7 02 00 00 08 00 00 00	r2 = 8
      72:	85 00 00 00 71 00 00 00	call 113
      73:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      74:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      75:	0f 13 00 00 00 00 00 00	r3 += r1
      76:	bf a1 00 00 00 00 00 00	r1 = r10
      77:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      78:	b7 02 00 00 04 00 00 00	r2 = 4
      79:	85 00 00 00 71 00 00 00	call 113
      80:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      81:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB38_8>
      82:	b7 01 00 00 18 00 00 00	r1 = 24
      83:	bf 93 00 00 00 00 00 00	r3 = r9
      84:	0f 13 00 00 00 00 00 00	r3 += r1
      85:	bf a1 00 00 00 00 00 00	r1 = r10
      86:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
      87:	b7 02 00 00 08 00 00 00	r2 = 8
      88:	85 00 00 00 71 00 00 00	call 113
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
      90:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB38_11>
      91:	b7 01 00 00 30 00 00 00	r1 = 48
      92:	0f 13 00 00 00 00 00 00	r3 += r1
      93:	bf a1 00 00 00 00 00 00	r1 = r10
      94:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      95:	b7 02 00 00 08 00 00 00	r2 = 8
      96:	85 00 00 00 71 00 00 00	call 113
      97:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      98:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     102:	b7 02 00 00 04 00 00 00	r2 = 4
     103:	85 00 00 00 71 00 00 00	call 113
     104:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000348 <LBB38_8>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     105:	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0)
     106:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB38_11>
     107:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB38_11>
     108:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB38_92>

0000000000000368 <LBB38_11>:
;     u16 icmpid = cfg->icmpid;
     109:	69 81 0e 00 00 00 00 00	r1 = *(u16 *)(r8 + 14)
;     u16 port = cfg->port;
     110:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     111:	69 81 0c 00 00 00 00 00	r1 = *(u16 *)(r8 + 12)
;     u8 proto = cfg->proto;
     112:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     113:	71 81 12 00 00 00 00 00	r1 = *(u8 *)(r8 + 18)
;     u32 addr = cfg->ip;
     114:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     115:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
     116:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     117:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     118:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     119:	b7 01 00 00 c0 00 00 00	r1 = 192
     120:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     121:	bf 93 00 00 00 00 00 00	r3 = r9
     122:	0f 13 00 00 00 00 00 00	r3 += r1
     123:	bf a1 00 00 00 00 00 00	r1 = r10
     124:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     125:	b7 02 00 00 08 00 00 00	r2 = 8
     126:	85 00 00 00 71 00 00 00	call 113
     127:	b7 01 00 00 b6 00 00 00	r1 = 182
     128:	bf 93 00 00 00 00 00 00	r3 = r9
     129:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     130:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     131:	bf a1 00 00 00 00 00 00	r1 = r10
     132:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     133:	b7 02 00 00 02 00 00 00	r2 = 2
     134:	85 00 00 00 71 00 00 00	call 113
     135:	b7 01 00 00 b4 00 00 00	r1 = 180
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     138:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     139:	bf a1 00 00 00 00 00 00	r1 = r10
     140:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     141:	b7 02 00 00 02 00 00 00	r2 = 2
     142:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     143:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     144:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     145:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB38_13>
     146:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000498 <LBB38_13>:
;     return head + network_header;
     147:	57 09 00 00 ff ff 00 00	r9 &= 65535
     148:	0f 96 00 00 00 00 00 00	r6 += r9
     149:	bf a1 00 00 00 00 00 00	r1 = r10
     150:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     151:	b7 02 00 00 01 00 00 00	r2 = 1
     152:	bf 63 00 00 00 00 00 00	r3 = r6
     153:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     154:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     155:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     156:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB38_20>
     157:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB38_92>
;         if (addr != 0) {
     158:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     159:	bf 19 00 00 00 00 00 00	r9 = r1
     160:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB38_18>
     161:	b7 01 00 00 0c 00 00 00	r1 = 12
     162:	bf 63 00 00 00 00 00 00	r3 = r6
     163:	0f 13 00 00 00 00 00 00	r3 += r1
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     166:	b7 02 00 00 04 00 00 00	r2 = 4
     167:	85 00 00 00 71 00 00 00	call 113
     168:	b7 01 00 00 10 00 00 00	r1 = 16
     169:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     170:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     171:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     172:	bf a1 00 00 00 00 00 00	r1 = r10
     173:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     174:	b7 02 00 00 04 00 00 00	r2 = 4
     175:	bf 63 00 00 00 00 00 00	r3 = r6
     176:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     177:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     178:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB38_54>
     179:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     180:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     181:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB38_92>
     182:	05 00 da 00 00 00 00 00	goto +218 <LBB38_54>

00000000000005b8 <LBB38_20>:
     183:	b7 01 00 00 06 00 00 00	r1 = 6
     184:	0f 16 00 00 00 00 00 00	r6 += r1
     185:	bf a1 00 00 00 00 00 00	r1 = r10
     186:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     187:	b7 02 00 00 01 00 00 00	r2 = 1
     188:	bf 63 00 00 00 00 00 00	r3 = r6
     189:	85 00 00 00 04 00 00 00	call 4
     190:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     191:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     192:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     193:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB38_22>
     194:	b7 04 00 00 80 00 00 00	r4 = 128
     195:	b7 03 00 00 81 00 00 00	r3 = 129
     196:	b7 01 00 00 3a 00 00 00	r1 = 58
     197:	05 00 0d 00 00 00 00 00	goto +13 <LBB38_22>

0000000000000630 <LBB38_18>:
     198:	b7 01 00 00 09 00 00 00	r1 = 9
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     208:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB38_22>
     209:	b7 04 00 00 08 00 00 00	r4 = 8
     210:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000698 <LBB38_22>:
;     if (proto != 0 && proto != l4_proto)
     211:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     212:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB38_24>
     213:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB38_92>

00000000000006b0 <LBB38_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     214:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB38_27>
     215:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB38_29>
     216:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB38_35>
     217:	05 00 9f 00 00 00 00 00	goto +159 <LBB38_92>

00000000000006d0 <LBB38_35>:
     218:	b7 01 00 00 c0 00 00 00	r1 = 192
     219:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     220:	bf 63 00 00 00 00 00 00	r3 = r6
     221:	0f 13 00 00 00 00 00 00	r3 += r1
     222:	bf a1 00 00 00 00 00 00	r1 = r10
     223:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     224:	b7 02 00 00 08 00 00 00	r2 = 8
     225:	85 00 00 00 71 00 00 00	call 113
     226:	b7 01 00 00 b6 00 00 00	r1 = 182
     227:	bf 63 00 00 00 00 00 00	r3 = r6
     228:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     229:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     230:	bf a1 00 00 00 00 00 00	r1 = r10
     231:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     232:	b7 02 00 00 02 00 00 00	r2 = 2
     233:	85 00 00 00 71 00 00 00	call 113
     234:	b7 01 00 00 b4 00 00 00	r1 = 180
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     237:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     238:	bf a1 00 00 00 00 00 00	r1 = r10
     239:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     240:	b7 02 00 00 02 00 00 00	r2 = 2
     241:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     242:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     243:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     244:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB38_37>
     245:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000007b0 <LBB38_37>:
;     return head + network_header;
     246:	57 06 00 00 ff ff 00 00	r6 &= 65535
     247:	0f 69 00 00 00 00 00 00	r9 += r6
     248:	bf a1 00 00 00 00 00 00	r1 = r10
     249:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     250:	b7 02 00 00 01 00 00 00	r2 = 1
     251:	bf 93 00 00 00 00 00 00	r3 = r9
     252:	85 00 00 00 04 00 00 00	call 4
     253:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     254:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     255:	57 02 00 00 f0 00 00 00	r2 &= 240
     256:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB38_39>
     257:	bf a1 00 00 00 00 00 00	r1 = r10
     258:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     259:	b7 02 00 00 01 00 00 00	r2 = 1
     260:	bf 93 00 00 00 00 00 00	r3 = r9
     261:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     262:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     263:	67 01 00 00 02 00 00 00	r1 <<= 2
     264:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000848 <LBB38_39>:
;     return l3_header + transport_size;
     265:	0f 19 00 00 00 00 00 00	r9 += r1
     266:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9

0000000000000858 <LBB38_40>:
     267:	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 72)
;     if (port != 0) {
     268:	bf 92 00 00 00 00 00 00	r2 = r9
     269:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB38_45>
;         if (l4_proto == IPPROTO_TCP) {
     270:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     271:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB38_52>
     272:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB38_45>
     273:	b7 01 00 00 00 00 00 00	r1 = 0
     274:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     275:	bf 63 00 00 00 00 00 00	r3 = r6
     276:	0f 13 00 00 00 00 00 00	r3 += r1
     277:	bf a1 00 00 00 00 00 00	r1 = r10
     278:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     279:	b7 02 00 00 02 00 00 00	r2 = 2
     280:	85 00 00 00 71 00 00 00	call 113
     281:	b7 01 00 00 02 00 00 00	r1 = 2
     282:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     283:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     284:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     285:	bf a1 00 00 00 00 00 00	r1 = r10
     286:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     287:	b7 02 00 00 02 00 00 00	r2 = 2
     288:	bf 63 00 00 00 00 00 00	r3 = r6
     289:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     290:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     291:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     292:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB38_54>
     293:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     294:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB38_92>
     295:	05 00 69 00 00 00 00 00	goto +105 <LBB38_54>

0000000000000940 <LBB38_27>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     296:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB38_35>
     297:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB38_92>

0000000000000950 <LBB38_29>:
     298:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r4
     299:	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r3
     300:	b7 01 00 00 c0 00 00 00	r1 = 192
     301:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     302:	bf 63 00 00 00 00 00 00	r3 = r6
     303:	0f 13 00 00 00 00 00 00	r3 += r1
     304:	bf a1 00 00 00 00 00 00	r1 = r10
     305:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     306:	b7 02 00 00 08 00 00 00	r2 = 8
     307:	85 00 00 00 71 00 00 00	call 113
     308:	b7 01 00 00 b6 00 00 00	r1 = 182
     309:	bf 63 00 00 00 00 00 00	r3 = r6
     310:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     311:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     312:	bf a1 00 00 00 00 00 00	r1 = r10
     313:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     314:	b7 02 00 00 02 00 00 00	r2 = 2
     315:	85 00 00 00 71 00 00 00	call 113
     316:	b7 01 00 00 b4 00 00 00	r1 = 180
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     319:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     320:	bf a1 00 00 00 00 00 00	r1 = r10
     321:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     322:	b7 02 00 00 02 00 00 00	r2 = 2
     323:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     324:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     325:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     326:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB38_31>
     327:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000a40 <LBB38_31>:
;     return head + network_header;
     328:	57 06 00 00 ff ff 00 00	r6 &= 65535
     329:	0f 69 00 00 00 00 00 00	r9 += r6
     330:	bf a1 00 00 00 00 00 00	r1 = r10
     331:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     332:	b7 02 00 00 01 00 00 00	r2 = 1
     333:	bf 93 00 00 00 00 00 00	r3 = r9
     334:	85 00 00 00 04 00 00 00	call 4
     335:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     336:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     337:	57 02 00 00 f0 00 00 00	r2 &= 240
     338:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB38_33>
     339:	bf a1 00 00 00 00 00 00	r1 = r10
     340:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     341:	b7 02 00 00 01 00 00 00	r2 = 1
     342:	bf 93 00 00 00 00 00 00	r3 = r9
     343:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     344:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     345:	67 01 00 00 02 00 00 00	r1 <<= 2
     346:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000ad8 <LBB38_33>:
;     return l3_header + transport_size;
     347:	0f 19 00 00 00 00 00 00	r9 += r1
     348:	bf a6 00 00 00 00 00 00	r6 = r10
     349:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     350:	bf 61 00 00 00 00 00 00	r1 = r6
     351:	b7 02 00 00 08 00 00 00	r2 = 8
     352:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
     353:	bf 93 00 00 00 00 00 00	r3 = r9
     354:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     355:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     356:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     357:	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 88)
     358:	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 96)
     359:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB38_40>
     360:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     361:	07 02 00 00 e8 ff ff ff	r2 += -24
     362:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     363:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB38_40>
     364:	05 00 0c 00 00 00 00 00	goto +12 <LBB38_92>

0000000000000b68 <LBB38_45>:
;     if (proto != 0 && proto != l4_proto)
     365:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     366:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB38_54>
     367:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
;     if (proto != 0 && icmpid != 0) {
     368:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB38_54>
     369:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     370:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB38_54>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     371:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     372:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB38_50>
     373:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB38_54>

0000000000000bb0 <LBB38_50>:
;         if (icmpid != ev_icmpid)
     374:	57 01 00 00 ff ff 00 00	r1 &= 65535
     375:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
     376:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB38_54>

0000000000000bc8 <LBB38_92>:
;     return do_trace(ctx, skb, "__br_forward");
     377:	b7 00 00 00 00 00 00 00	r0 = 0
     378:	95 00 00 00 00 00 00 00	exit

0000000000000bd8 <LBB38_52>:
     379:	b7 01 00 00 00 00 00 00	r1 = 0
     380:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     381:	bf 63 00 00 00 00 00 00	r3 = r6
     382:	0f 13 00 00 00 00 00 00	r3 += r1
     383:	bf a1 00 00 00 00 00 00	r1 = r10
     384:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     385:	b7 02 00 00 02 00 00 00	r2 = 2
     386:	85 00 00 00 71 00 00 00	call 113
     387:	b7 01 00 00 02 00 00 00	r1 = 2
     388:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     389:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     390:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     391:	bf a1 00 00 00 00 00 00	r1 = r10
     392:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     393:	b7 02 00 00 02 00 00 00	r2 = 2
     394:	bf 63 00 00 00 00 00 00	r3 = r6
     395:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     396:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     397:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     398:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB38_54>
     399:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     400:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB38_92>

0000000000000c88 <LBB38_54>:
;     event->flags |= SKBTRACER_EVENT_IF;
     401:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     402:	47 01 00 00 01 00 00 00	r1 |= 1
     403:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     404:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
;     ev->skb = (u64)skb;
     405:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     406:	85 00 00 00 05 00 00 00	call 5
     407:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     408:	b7 01 00 00 10 00 00 00	r1 = 16
     409:	bf 96 00 00 00 00 00 00	r6 = r9
     410:	0f 16 00 00 00 00 00 00	r6 += r1
     411:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     412:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     413:	b7 02 00 00 08 00 00 00	r2 = 8
     414:	bf 63 00 00 00 00 00 00	r3 = r6
     415:	85 00 00 00 71 00 00 00	call 113
     416:	b7 01 00 00 70 00 00 00	r1 = 112
     417:	bf 93 00 00 00 00 00 00	r3 = r9
     418:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     419:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     420:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     421:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     422:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     423:	b7 02 00 00 04 00 00 00	r2 = 4
     424:	85 00 00 00 71 00 00 00	call 113
     425:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     426:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     427:	85 00 00 00 08 00 00 00	call 8
     428:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     429:	85 00 00 00 0e 00 00 00	call 14
     430:	57 00 00 00 ff ff 00 00	r0 &= 65535
     431:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     432:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     433:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     434:	bf 91 00 00 00 00 00 00	r1 = r9
     435:	b7 02 00 00 08 00 00 00	r2 = 8
     436:	bf 63 00 00 00 00 00 00	r3 = r6
     437:	85 00 00 00 71 00 00 00	call 113
     438:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     439:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     440:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     441:	bf 91 00 00 00 00 00 00	r1 = r9
     442:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     443:	b7 02 00 00 08 00 00 00	r2 = 8
     444:	85 00 00 00 71 00 00 00	call 113
     445:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     446:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     447:	0f 13 00 00 00 00 00 00	r3 += r1
     448:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     449:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     450:	b7 02 00 00 04 00 00 00	r2 = 4
     451:	85 00 00 00 71 00 00 00	call 113
     452:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     453:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB38_57>
     454:	b7 01 00 00 18 00 00 00	r1 = 24
     455:	bf 93 00 00 00 00 00 00	r3 = r9
     456:	0f 13 00 00 00 00 00 00	r3 += r1
     457:	bf a1 00 00 00 00 00 00	r1 = r10
     458:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     459:	b7 02 00 00 08 00 00 00	r2 = 8
     460:	85 00 00 00 71 00 00 00	call 113
     461:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     462:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     463:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB38_57>
     464:	b7 01 00 00 30 00 00 00	r1 = 48
     465:	0f 13 00 00 00 00 00 00	r3 += r1
     466:	bf a1 00 00 00 00 00 00	r1 = r10
     467:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     468:	b7 02 00 00 08 00 00 00	r2 = 8
     469:	85 00 00 00 71 00 00 00	call 113
     470:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     471:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     472:	0f 13 00 00 00 00 00 00	r3 += r1
     473:	bf a1 00 00 00 00 00 00	r1 = r10
     474:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     475:	b7 02 00 00 04 00 00 00	r2 = 4
     476:	85 00 00 00 71 00 00 00	call 113
     477:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000ef0 <LBB38_57>:
;     pkt_info->netns = get_netns(skb);
     478:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     479:	b7 01 00 00 80 00 00 00	r1 = 128
     480:	bf 93 00 00 00 00 00 00	r3 = r9
     481:	0f 13 00 00 00 00 00 00	r3 += r1
     482:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     483:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     484:	bf a1 00 00 00 00 00 00	r1 = r10
     485:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     486:	b7 02 00 00 01 00 00 00	r2 = 1
     487:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     488:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     489:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     490:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     491:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     492:	b7 01 00 00 00 00 00 00	r1 = 0
     493:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     494:	0f 13 00 00 00 00 00 00	r3 += r1
;     pkt_info->ifname[0] = 0;
     495:	bf 71 00 00 00 00 00 00	r1 = r7
     496:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     497:	b7 02 00 00 10 00 00 00	r2 = 16
     498:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     499:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     500:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB38_59>
     501:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     502:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     503:	b7 01 00 00 69 00 00 00	r1 = 105
     504:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     505:	b7 01 00 00 6e 00 00 00	r1 = 110
     506:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000000fd8 <LBB38_59>:
     507:	b7 01 00 00 c0 00 00 00	r1 = 192
     508:	bf 93 00 00 00 00 00 00	r3 = r9
     509:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     510:	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r3
     511:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     512:	07 01 00 00 f8 ff ff ff	r1 += -8
     513:	b7 02 00 00 08 00 00 00	r2 = 8
     514:	85 00 00 00 71 00 00 00	call 113
     515:	b7 01 00 00 b6 00 00 00	r1 = 182
     516:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     517:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     518:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     519:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     520:	b7 02 00 00 02 00 00 00	r2 = 2
     521:	bf 93 00 00 00 00 00 00	r3 = r9
     522:	85 00 00 00 71 00 00 00	call 113
     523:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     524:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     525:	bf 71 00 00 00 00 00 00	r1 = r7
     526:	07 01 00 00 64 00 00 00	r1 += 100
     527:	b7 02 00 00 06 00 00 00	r2 = 6
     528:	bf 63 00 00 00 00 00 00	r3 = r6
     529:	85 00 00 00 04 00 00 00	call 4
     530:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     531:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	b7 02 00 00 08 00 00 00	r2 = 8
     533:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     534:	85 00 00 00 71 00 00 00	call 113
     535:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     536:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     537:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     538:	b7 02 00 00 02 00 00 00	r2 = 2
     539:	bf 93 00 00 00 00 00 00	r3 = r9
     540:	85 00 00 00 71 00 00 00	call 113
     541:	b7 01 00 00 b4 00 00 00	r1 = 180
     542:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
     543:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     544:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     547:	b7 02 00 00 02 00 00 00	r2 = 2
     548:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     549:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     550:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     551:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB38_61>
     552:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001148 <LBB38_61>:
;     return head + network_header;
     553:	57 09 00 00 ff ff 00 00	r9 &= 65535
     554:	0f 96 00 00 00 00 00 00	r6 += r9
     555:	bf a1 00 00 00 00 00 00	r1 = r10
     556:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     557:	b7 02 00 00 01 00 00 00	r2 = 1
     558:	bf 63 00 00 00 00 00 00	r3 = r6
     559:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     560:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     561:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     562:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB38_66>
     563:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB38_92>
     564:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     565:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     566:	b7 01 00 00 c0 00 00 00	r1 = 192
     567:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     568:	bf 93 00 00 00 00 00 00	r3 = r9
     569:	0f 13 00 00 00 00 00 00	r3 += r1
     570:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     572:	b7 02 00 00 08 00 00 00	r2 = 8
     573:	85 00 00 00 71 00 00 00	call 113
     574:	b7 01 00 00 b6 00 00 00	r1 = 182
     575:	bf 93 00 00 00 00 00 00	r3 = r9
     576:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     577:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     578:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     579:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     580:	b7 02 00 00 02 00 00 00	r2 = 2
     581:	85 00 00 00 71 00 00 00	call 113
     582:	b7 01 00 00 b4 00 00 00	r1 = 180
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     585:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     586:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     587:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     588:	b7 02 00 00 02 00 00 00	r2 = 2
     589:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     590:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     591:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     592:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB38_65>
     593:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001290 <LBB38_65>:
;     return head + network_header;
     594:	57 09 00 00 ff ff 00 00	r9 &= 65535
     595:	0f 96 00 00 00 00 00 00	r6 += r9
     596:	b7 01 00 00 0c 00 00 00	r1 = 12
     597:	bf 63 00 00 00 00 00 00	r3 = r6
     598:	0f 13 00 00 00 00 00 00	r3 += r1
     599:	bf a1 00 00 00 00 00 00	r1 = r10
     600:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     601:	b7 02 00 00 04 00 00 00	r2 = 4
     602:	85 00 00 00 71 00 00 00	call 113
     603:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     604:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     605:	b7 01 00 00 10 00 00 00	r1 = 16
     606:	bf 63 00 00 00 00 00 00	r3 = r6
     607:	0f 13 00 00 00 00 00 00	r3 += r1
     608:	bf a1 00 00 00 00 00 00	r1 = r10
     609:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     610:	b7 02 00 00 04 00 00 00	r2 = 4
     611:	85 00 00 00 71 00 00 00	call 113
     612:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     613:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     614:	b7 01 00 00 02 00 00 00	r1 = 2
     615:	bf 63 00 00 00 00 00 00	r3 = r6
     616:	0f 13 00 00 00 00 00 00	r3 += r1
     617:	bf a1 00 00 00 00 00 00	r1 = r10
     618:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     619:	b7 02 00 00 02 00 00 00	r2 = 2
     620:	85 00 00 00 71 00 00 00	call 113
     621:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     622:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     623:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     624:	b7 01 00 00 09 00 00 00	r1 = 9
     625:	05 00 38 00 00 00 00 00	goto +56 <LBB38_69>

0000000000001390 <LBB38_66>:
     626:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     627:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     628:	b7 01 00 00 c0 00 00 00	r1 = 192
     629:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     630:	bf 93 00 00 00 00 00 00	r3 = r9
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     634:	b7 02 00 00 08 00 00 00	r2 = 8
     635:	85 00 00 00 71 00 00 00	call 113
     636:	b7 01 00 00 b6 00 00 00	r1 = 182
     637:	bf 93 00 00 00 00 00 00	r3 = r9
     638:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     639:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     640:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     641:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     642:	b7 02 00 00 02 00 00 00	r2 = 2
     643:	85 00 00 00 71 00 00 00	call 113
     644:	b7 01 00 00 b4 00 00 00	r1 = 180
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     647:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     648:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     649:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     650:	b7 02 00 00 02 00 00 00	r2 = 2
     651:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     652:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     653:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     654:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB38_68>
     655:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001480 <LBB38_68>:
;     return head + network_header;
     656:	57 09 00 00 ff ff 00 00	r9 &= 65535
     657:	0f 96 00 00 00 00 00 00	r6 += r9
     658:	b7 01 00 00 08 00 00 00	r1 = 8
     659:	bf 63 00 00 00 00 00 00	r3 = r6
     660:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
     661:	bf 71 00 00 00 00 00 00	r1 = r7
     662:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     663:	b7 02 00 00 10 00 00 00	r2 = 16
     664:	85 00 00 00 04 00 00 00	call 4
     665:	b7 01 00 00 18 00 00 00	r1 = 24
     666:	bf 63 00 00 00 00 00 00	r3 = r6
     667:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     668:	bf 71 00 00 00 00 00 00	r1 = r7
     669:	07 01 00 00 80 00 00 00	r1 += 128
     670:	b7 02 00 00 10 00 00 00	r2 = 16
     671:	85 00 00 00 04 00 00 00	call 4
     672:	b7 01 00 00 04 00 00 00	r1 = 4
     673:	bf 63 00 00 00 00 00 00	r3 = r6
     674:	0f 13 00 00 00 00 00 00	r3 += r1
     675:	bf a1 00 00 00 00 00 00	r1 = r10
     676:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     677:	b7 02 00 00 02 00 00 00	r2 = 2
     678:	85 00 00 00 71 00 00 00	call 113
     679:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     680:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     681:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000001550 <LBB38_69>:
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
     684:	bf a1 00 00 00 00 00 00	r1 = r10
     685:	07 01 00 00 f8 ff ff ff	r1 += -8
     686:	b7 02 00 00 01 00 00 00	r2 = 1
     687:	85 00 00 00 71 00 00 00	call 113
     688:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     689:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     690:	bf a1 00 00 00 00 00 00	r1 = r10
     691:	07 01 00 00 f8 ff ff ff	r1 += -8
     692:	b7 02 00 00 01 00 00 00	r2 = 1
     693:	bf 63 00 00 00 00 00 00	r3 = r6
     694:	85 00 00 00 04 00 00 00	call 4
     695:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     696:	57 01 00 00 f0 00 00 00	r1 &= 240
     697:	77 01 00 00 04 00 00 00	r1 >>= 4
     698:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     699:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     700:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB38_72>
     701:	15 01 53 00 01 00 00 00	if r1 == 1 goto +83 <LBB38_84>
     702:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB38_74>
     703:	05 00 b9 fe 00 00 00 00	goto -327 <LBB38_92>

0000000000001600 <LBB38_74>:
     704:	b7 01 00 00 c0 00 00 00	r1 = 192
     705:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     706:	bf 93 00 00 00 00 00 00	r3 = r9
     707:	0f 13 00 00 00 00 00 00	r3 += r1
     708:	bf a1 00 00 00 00 00 00	r1 = r10
     709:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     710:	b7 02 00 00 08 00 00 00	r2 = 8
     711:	85 00 00 00 71 00 00 00	call 113
     712:	b7 01 00 00 b6 00 00 00	r1 = 182
     713:	bf 93 00 00 00 00 00 00	r3 = r9
     714:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     715:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     716:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     717:	bf a1 00 00 00 00 00 00	r1 = r10
     718:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     719:	b7 02 00 00 02 00 00 00	r2 = 2
     720:	85 00 00 00 71 00 00 00	call 113
     721:	b7 01 00 00 b4 00 00 00	r1 = 180
     722:	0f 19 00 00 00 00 00 00	r9 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     723:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     726:	b7 02 00 00 02 00 00 00	r2 = 2
     727:	bf 93 00 00 00 00 00 00	r3 = r9
     728:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     729:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     730:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     731:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB38_76>
     732:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000016e8 <LBB38_76>:
;     return head + network_header;
     733:	57 06 00 00 ff ff 00 00	r6 &= 65535
     734:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
     735:	0f 61 00 00 00 00 00 00	r1 += r6
     736:	bf 16 00 00 00 00 00 00	r6 = r1
     737:	bf a1 00 00 00 00 00 00	r1 = r10
     738:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     739:	b7 02 00 00 01 00 00 00	r2 = 1
     740:	bf 63 00 00 00 00 00 00	r3 = r6
     741:	85 00 00 00 04 00 00 00	call 4
     742:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     743:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     744:	57 02 00 00 f0 00 00 00	r2 &= 240
     745:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB38_78>
     746:	bf a1 00 00 00 00 00 00	r1 = r10
     747:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     748:	b7 02 00 00 01 00 00 00	r2 = 1
     749:	bf 63 00 00 00 00 00 00	r3 = r6
     750:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     751:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     752:	67 01 00 00 02 00 00 00	r1 <<= 2
     753:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001790 <LBB38_78>:
;     return l3_header + transport_size;
     754:	0f 16 00 00 00 00 00 00	r6 += r1
     755:	b7 01 00 00 00 00 00 00	r1 = 0
     756:	bf 63 00 00 00 00 00 00	r3 = r6
     757:	0f 13 00 00 00 00 00 00	r3 += r1
     758:	bf a1 00 00 00 00 00 00	r1 = r10
     759:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     760:	b7 02 00 00 02 00 00 00	r2 = 2
     761:	85 00 00 00 71 00 00 00	call 113
     762:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     763:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     764:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     765:	b7 01 00 00 02 00 00 00	r1 = 2
     766:	bf 63 00 00 00 00 00 00	r3 = r6
     767:	0f 13 00 00 00 00 00 00	r3 += r1
     768:	bf a1 00 00 00 00 00 00	r1 = r10
     769:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     770:	b7 02 00 00 02 00 00 00	r2 = 2
     771:	85 00 00 00 71 00 00 00	call 113
     772:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     773:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     774:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     775:	07 06 00 00 0c 00 00 00	r6 += 12
     776:	bf 71 00 00 00 00 00 00	r1 = r7
     777:	07 01 00 00 9c 00 00 00	r1 += 156
     778:	b7 02 00 00 02 00 00 00	r2 = 2
     779:	bf 63 00 00 00 00 00 00	r3 = r6
     780:	85 00 00 00 04 00 00 00	call 4
     781:	05 00 8a 00 00 00 00 00	goto +138 <LBB38_89>

0000000000001870 <LBB38_72>:
;     if (l4_proto == IPPROTO_TCP) {
     782:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB38_79>
     783:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB38_84>
     784:	05 00 68 fe 00 00 00 00	goto -408 <LBB38_92>

0000000000001888 <LBB38_84>:
     785:	b7 01 00 00 c0 00 00 00	r1 = 192
     786:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     787:	bf 63 00 00 00 00 00 00	r3 = r6
     788:	0f 13 00 00 00 00 00 00	r3 += r1
     789:	bf a1 00 00 00 00 00 00	r1 = r10
     790:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     791:	b7 02 00 00 08 00 00 00	r2 = 8
     792:	85 00 00 00 71 00 00 00	call 113
     793:	b7 01 00 00 b6 00 00 00	r1 = 182
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     796:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     797:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     798:	bf a1 00 00 00 00 00 00	r1 = r10
     799:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     800:	b7 02 00 00 02 00 00 00	r2 = 2
     801:	85 00 00 00 71 00 00 00	call 113
     802:	b7 01 00 00 b4 00 00 00	r1 = 180
     803:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     804:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     805:	bf a1 00 00 00 00 00 00	r1 = r10
     806:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     807:	b7 02 00 00 02 00 00 00	r2 = 2
     808:	bf 63 00 00 00 00 00 00	r3 = r6
     809:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     810:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     811:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     812:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB38_86>
     813:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001970 <LBB38_86>:
;     return head + network_header;
     814:	57 09 00 00 ff ff 00 00	r9 &= 65535
     815:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     816:	0f 96 00 00 00 00 00 00	r6 += r9
     817:	bf a1 00 00 00 00 00 00	r1 = r10
     818:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     819:	b7 02 00 00 01 00 00 00	r2 = 1
     820:	bf 63 00 00 00 00 00 00	r3 = r6
     821:	85 00 00 00 04 00 00 00	call 4
     822:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     823:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     824:	57 02 00 00 f0 00 00 00	r2 &= 240
     825:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB38_88>
     826:	bf a1 00 00 00 00 00 00	r1 = r10
     827:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     828:	b7 02 00 00 01 00 00 00	r2 = 1
     829:	bf 63 00 00 00 00 00 00	r3 = r6
     830:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     831:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     832:	67 01 00 00 02 00 00 00	r1 <<= 2
     833:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a10 <LBB38_88>:
;     return l3_header + transport_size;
     834:	0f 16 00 00 00 00 00 00	r6 += r1
     835:	bf a9 00 00 00 00 00 00	r9 = r10
     836:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     837:	bf 91 00 00 00 00 00 00	r1 = r9
     838:	b7 02 00 00 08 00 00 00	r2 = 8
     839:	bf 63 00 00 00 00 00 00	r3 = r6
     840:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     841:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     842:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     843:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     844:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     845:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     846:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     847:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     848:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     849:	05 00 46 00 00 00 00 00	goto +70 <LBB38_89>

0000000000001a90 <LBB38_79>:
     850:	b7 01 00 00 c0 00 00 00	r1 = 192
     851:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     852:	bf 63 00 00 00 00 00 00	r3 = r6
     853:	0f 13 00 00 00 00 00 00	r3 += r1
     854:	bf a1 00 00 00 00 00 00	r1 = r10
     855:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     856:	b7 02 00 00 08 00 00 00	r2 = 8
     857:	85 00 00 00 71 00 00 00	call 113
     858:	b7 01 00 00 b6 00 00 00	r1 = 182
     859:	bf 63 00 00 00 00 00 00	r3 = r6
     860:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     861:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     862:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     863:	bf a1 00 00 00 00 00 00	r1 = r10
     864:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     865:	b7 02 00 00 02 00 00 00	r2 = 2
     866:	85 00 00 00 71 00 00 00	call 113
     867:	b7 01 00 00 b4 00 00 00	r1 = 180
     868:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     869:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     870:	bf a1 00 00 00 00 00 00	r1 = r10
     871:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     872:	b7 02 00 00 02 00 00 00	r2 = 2
     873:	bf 63 00 00 00 00 00 00	r3 = r6
     874:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     875:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     876:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     877:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB38_81>
     878:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001b78 <LBB38_81>:
;     return head + network_header;
     879:	57 09 00 00 ff ff 00 00	r9 &= 65535
     880:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     881:	0f 96 00 00 00 00 00 00	r6 += r9
     882:	bf a1 00 00 00 00 00 00	r1 = r10
     883:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     884:	b7 02 00 00 01 00 00 00	r2 = 1
     885:	bf 63 00 00 00 00 00 00	r3 = r6
     886:	85 00 00 00 04 00 00 00	call 4
     887:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     888:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     889:	57 02 00 00 f0 00 00 00	r2 &= 240
     890:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB38_83>
     891:	bf a1 00 00 00 00 00 00	r1 = r10
     892:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     893:	b7 02 00 00 01 00 00 00	r2 = 1
     894:	bf 63 00 00 00 00 00 00	r3 = r6
     895:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     896:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     897:	67 01 00 00 02 00 00 00	r1 <<= 2
     898:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c18 <LBB38_83>:
;     return l3_header + transport_size;
     899:	0f 16 00 00 00 00 00 00	r6 += r1
     900:	b7 01 00 00 00 00 00 00	r1 = 0
     901:	bf 63 00 00 00 00 00 00	r3 = r6
     902:	0f 13 00 00 00 00 00 00	r3 += r1
     903:	bf a1 00 00 00 00 00 00	r1 = r10
     904:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     905:	b7 02 00 00 02 00 00 00	r2 = 2
     906:	85 00 00 00 71 00 00 00	call 113
     907:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     908:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     909:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     910:	b7 01 00 00 02 00 00 00	r1 = 2
     911:	0f 16 00 00 00 00 00 00	r6 += r1
     912:	bf a1 00 00 00 00 00 00	r1 = r10
     913:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     914:	b7 02 00 00 02 00 00 00	r2 = 2
     915:	bf 63 00 00 00 00 00 00	r3 = r6
     916:	85 00 00 00 71 00 00 00	call 113
     917:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     918:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     919:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001cc0 <LBB38_89>:
     920:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
;     return cfg->callstack == 0;
     921:	71 81 11 00 00 00 00 00	r1 = *(u8 *)(r8 + 17)
;     if (!filter_callstack(cfg))
     922:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB38_91>
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
     923:	bf 61 00 00 00 00 00 00	r1 = r6
     924:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     926:	b7 03 00 00 00 00 00 00	r3 = 0
     927:	85 00 00 00 1b 00 00 00	call 27
     928:	63 07 30 00 00 00 00 00	*(u32 *)(r7 + 48) = r0

0000000000001d08 <LBB38_91>:
     929:	b7 01 00 00 64 00 00 00	r1 = 100
;     for (j = 10; j < 64; j += 10) CPY(j);
     930:	73 17 0b 00 00 00 00 00	*(u8 *)(r7 + 11) = r1
     931:	b7 01 00 00 61 00 00 00	r1 = 97
     932:	73 17 09 00 00 00 00 00	*(u8 *)(r7 + 9) = r1
     933:	b7 01 00 00 77 00 00 00	r1 = 119
     934:	73 17 08 00 00 00 00 00	*(u8 *)(r7 + 8) = r1
     935:	b7 01 00 00 6f 00 00 00	r1 = 111
     936:	73 17 06 00 00 00 00 00	*(u8 *)(r7 + 6) = r1
     937:	b7 01 00 00 66 00 00 00	r1 = 102
     938:	73 17 05 00 00 00 00 00	*(u8 *)(r7 + 5) = r1
     939:	b7 01 00 00 72 00 00 00	r1 = 114
     940:	73 17 0a 00 00 00 00 00	*(u8 *)(r7 + 10) = r1
     941:	73 17 07 00 00 00 00 00	*(u8 *)(r7 + 7) = r1
     942:	73 17 03 00 00 00 00 00	*(u8 *)(r7 + 3) = r1
     943:	b7 01 00 00 62 00 00 00	r1 = 98
     944:	73 17 02 00 00 00 00 00	*(u8 *)(r7 + 2) = r1
     945:	b7 01 00 00 5f 00 00 00	r1 = 95
     946:	73 17 04 00 00 00 00 00	*(u8 *)(r7 + 4) = r1
     947:	73 17 01 00 00 00 00 00	*(u8 *)(r7 + 1) = r1
     948:	73 17 00 00 00 00 00 00	*(u8 *)(r7 + 0) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     949:	bf 61 00 00 00 00 00 00	r1 = r6
     950:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     952:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     954:	bf 74 00 00 00 00 00 00	r4 = r7
     955:	b7 05 00 00 e0 00 00 00	r5 = 224
     956:	85 00 00 00 19 00 00 00	call 25
     957:	05 00 bb fd 00 00 00 00	goto -581 <LBB38_92>

Disassembly of section kprobe/br_forward_finish:

0000000000000000 <k_br_fwd_f>:
; int k_br_fwd_f(struct pt_regs *ctx) {
       0:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM3(ctx);
       1:	79 11 60 00 00 00 00 00	r1 = *(u64 *)(r1 + 96)
       2:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       3:	b7 06 00 00 00 00 00 00	r6 = 0
;     GET_CFG();
       4:	63 6a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r6
       5:	bf a2 00 00 00 00 00 00	r2 = r10
       6:	07 02 00 00 e4 ff ff ff	r2 += -28
;     GET_CFG();
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	85 00 00 00 01 00 00 00	call 1
      10:	bf 08 00 00 00 00 00 00	r8 = r0
      11:	15 08 6d 01 00 00 00 00	if r8 == 0 goto +365 <LBB39_92>
      12:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
      13:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      14:	63 18 08 00 00 00 00 00	*(u32 *)(r8 + 8) = r1
;     u32 ev_buff_id = 0;
      15:	63 6a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r6
      16:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      17:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      18:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      20:	85 00 00 00 01 00 00 00	call 1
      21:	bf 07 00 00 00 00 00 00	r7 = r0
;     if (!ev) return NULL;
      22:	55 07 01 00 00 00 00 00	if r7 != 0 goto +1 <LBB39_3>
      23:	05 00 61 01 00 00 00 00	goto +353 <LBB39_92>

00000000000000c0 <LBB39_3>:
      24:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      25:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      26:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      27:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      28:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      29:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      30:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      31:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      32:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      33:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      34:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      35:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      36:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      37:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      38:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      39:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      40:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      41:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      42:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      43:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      44:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      45:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      46:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      47:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      48:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      49:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      50:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      51:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      52:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      53:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      54:	61 81 04 00 00 00 00 00	r1 = *(u32 *)(r8 + 4)
      55:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB39_5>
      56:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      57:	5d 01 3f 01 00 00 00 00	if r1 != r0 goto +319 <LBB39_92>

00000000000001d0 <LBB39_5>:
      58:	b7 01 00 00 10 00 00 00	r1 = 16
      59:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
      60:	bf 93 00 00 00 00 00 00	r3 = r9
      61:	0f 13 00 00 00 00 00 00	r3 += r1
      62:	bf a6 00 00 00 00 00 00	r6 = r10
      63:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      64:	bf 61 00 00 00 00 00 00	r1 = r6
      65:	b7 02 00 00 08 00 00 00	r2 = 8
      66:	85 00 00 00 71 00 00 00	call 113
      67:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      68:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      69:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      70:	bf 61 00 00 00 00 00 00	r1 = r6
      71:	b7 02 00 00 08 00 00 00	r2 = 8
      72:	85 00 00 00 71 00 00 00	call 113
      73:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      74:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      75:	0f 13 00 00 00 00 00 00	r3 += r1
      76:	bf a1 00 00 00 00 00 00	r1 = r10
      77:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      78:	b7 02 00 00 04 00 00 00	r2 = 4
      79:	85 00 00 00 71 00 00 00	call 113
      80:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      81:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB39_8>
      82:	b7 01 00 00 18 00 00 00	r1 = 24
      83:	bf 93 00 00 00 00 00 00	r3 = r9
      84:	0f 13 00 00 00 00 00 00	r3 += r1
      85:	bf a1 00 00 00 00 00 00	r1 = r10
      86:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
      87:	b7 02 00 00 08 00 00 00	r2 = 8
      88:	85 00 00 00 71 00 00 00	call 113
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
      90:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB39_11>
      91:	b7 01 00 00 30 00 00 00	r1 = 48
      92:	0f 13 00 00 00 00 00 00	r3 += r1
      93:	bf a1 00 00 00 00 00 00	r1 = r10
      94:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      95:	b7 02 00 00 08 00 00 00	r2 = 8
      96:	85 00 00 00 71 00 00 00	call 113
      97:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      98:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     102:	b7 02 00 00 04 00 00 00	r2 = 4
     103:	85 00 00 00 71 00 00 00	call 113
     104:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000348 <LBB39_8>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     105:	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0)
     106:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB39_11>
     107:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB39_11>
     108:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB39_92>

0000000000000368 <LBB39_11>:
;     u16 icmpid = cfg->icmpid;
     109:	69 81 0e 00 00 00 00 00	r1 = *(u16 *)(r8 + 14)
;     u16 port = cfg->port;
     110:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     111:	69 81 0c 00 00 00 00 00	r1 = *(u16 *)(r8 + 12)
;     u8 proto = cfg->proto;
     112:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     113:	71 81 12 00 00 00 00 00	r1 = *(u8 *)(r8 + 18)
;     u32 addr = cfg->ip;
     114:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     115:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
     116:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     117:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     118:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     119:	b7 01 00 00 c0 00 00 00	r1 = 192
     120:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     121:	bf 93 00 00 00 00 00 00	r3 = r9
     122:	0f 13 00 00 00 00 00 00	r3 += r1
     123:	bf a1 00 00 00 00 00 00	r1 = r10
     124:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     125:	b7 02 00 00 08 00 00 00	r2 = 8
     126:	85 00 00 00 71 00 00 00	call 113
     127:	b7 01 00 00 b6 00 00 00	r1 = 182
     128:	bf 93 00 00 00 00 00 00	r3 = r9
     129:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     130:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     131:	bf a1 00 00 00 00 00 00	r1 = r10
     132:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     133:	b7 02 00 00 02 00 00 00	r2 = 2
     134:	85 00 00 00 71 00 00 00	call 113
     135:	b7 01 00 00 b4 00 00 00	r1 = 180
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     138:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     139:	bf a1 00 00 00 00 00 00	r1 = r10
     140:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     141:	b7 02 00 00 02 00 00 00	r2 = 2
     142:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     143:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     144:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     145:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB39_13>
     146:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000498 <LBB39_13>:
;     return head + network_header;
     147:	57 09 00 00 ff ff 00 00	r9 &= 65535
     148:	0f 96 00 00 00 00 00 00	r6 += r9
     149:	bf a1 00 00 00 00 00 00	r1 = r10
     150:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     151:	b7 02 00 00 01 00 00 00	r2 = 1
     152:	bf 63 00 00 00 00 00 00	r3 = r6
     153:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     154:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     155:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     156:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB39_20>
     157:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB39_92>
;         if (addr != 0) {
     158:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     159:	bf 19 00 00 00 00 00 00	r9 = r1
     160:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB39_18>
     161:	b7 01 00 00 0c 00 00 00	r1 = 12
     162:	bf 63 00 00 00 00 00 00	r3 = r6
     163:	0f 13 00 00 00 00 00 00	r3 += r1
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     166:	b7 02 00 00 04 00 00 00	r2 = 4
     167:	85 00 00 00 71 00 00 00	call 113
     168:	b7 01 00 00 10 00 00 00	r1 = 16
     169:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     170:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     171:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     172:	bf a1 00 00 00 00 00 00	r1 = r10
     173:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     174:	b7 02 00 00 04 00 00 00	r2 = 4
     175:	bf 63 00 00 00 00 00 00	r3 = r6
     176:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     177:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     178:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB39_54>
     179:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     180:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     181:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB39_92>
     182:	05 00 da 00 00 00 00 00	goto +218 <LBB39_54>

00000000000005b8 <LBB39_20>:
     183:	b7 01 00 00 06 00 00 00	r1 = 6
     184:	0f 16 00 00 00 00 00 00	r6 += r1
     185:	bf a1 00 00 00 00 00 00	r1 = r10
     186:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     187:	b7 02 00 00 01 00 00 00	r2 = 1
     188:	bf 63 00 00 00 00 00 00	r3 = r6
     189:	85 00 00 00 04 00 00 00	call 4
     190:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     191:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     192:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     193:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB39_22>
     194:	b7 04 00 00 80 00 00 00	r4 = 128
     195:	b7 03 00 00 81 00 00 00	r3 = 129
     196:	b7 01 00 00 3a 00 00 00	r1 = 58
     197:	05 00 0d 00 00 00 00 00	goto +13 <LBB39_22>

0000000000000630 <LBB39_18>:
     198:	b7 01 00 00 09 00 00 00	r1 = 9
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     208:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB39_22>
     209:	b7 04 00 00 08 00 00 00	r4 = 8
     210:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000698 <LBB39_22>:
;     if (proto != 0 && proto != l4_proto)
     211:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     212:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB39_24>
     213:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB39_92>

00000000000006b0 <LBB39_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     214:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB39_27>
     215:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB39_29>
     216:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB39_35>
     217:	05 00 9f 00 00 00 00 00	goto +159 <LBB39_92>

00000000000006d0 <LBB39_35>:
     218:	b7 01 00 00 c0 00 00 00	r1 = 192
     219:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     220:	bf 63 00 00 00 00 00 00	r3 = r6
     221:	0f 13 00 00 00 00 00 00	r3 += r1
     222:	bf a1 00 00 00 00 00 00	r1 = r10
     223:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     224:	b7 02 00 00 08 00 00 00	r2 = 8
     225:	85 00 00 00 71 00 00 00	call 113
     226:	b7 01 00 00 b6 00 00 00	r1 = 182
     227:	bf 63 00 00 00 00 00 00	r3 = r6
     228:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     229:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     230:	bf a1 00 00 00 00 00 00	r1 = r10
     231:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     232:	b7 02 00 00 02 00 00 00	r2 = 2
     233:	85 00 00 00 71 00 00 00	call 113
     234:	b7 01 00 00 b4 00 00 00	r1 = 180
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     237:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     238:	bf a1 00 00 00 00 00 00	r1 = r10
     239:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     240:	b7 02 00 00 02 00 00 00	r2 = 2
     241:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     242:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     243:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     244:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB39_37>
     245:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000007b0 <LBB39_37>:
;     return head + network_header;
     246:	57 06 00 00 ff ff 00 00	r6 &= 65535
     247:	0f 69 00 00 00 00 00 00	r9 += r6
     248:	bf a1 00 00 00 00 00 00	r1 = r10
     249:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     250:	b7 02 00 00 01 00 00 00	r2 = 1
     251:	bf 93 00 00 00 00 00 00	r3 = r9
     252:	85 00 00 00 04 00 00 00	call 4
     253:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     254:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     255:	57 02 00 00 f0 00 00 00	r2 &= 240
     256:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB39_39>
     257:	bf a1 00 00 00 00 00 00	r1 = r10
     258:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     259:	b7 02 00 00 01 00 00 00	r2 = 1
     260:	bf 93 00 00 00 00 00 00	r3 = r9
     261:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     262:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     263:	67 01 00 00 02 00 00 00	r1 <<= 2
     264:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000848 <LBB39_39>:
;     return l3_header + transport_size;
     265:	0f 19 00 00 00 00 00 00	r9 += r1
     266:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9

0000000000000858 <LBB39_40>:
     267:	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 72)
;     if (port != 0) {
     268:	bf 92 00 00 00 00 00 00	r2 = r9
     269:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB39_45>
;         if (l4_proto == IPPROTO_TCP) {
     270:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     271:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB39_52>
     272:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB39_45>
     273:	b7 01 00 00 00 00 00 00	r1 = 0
     274:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     275:	bf 63 00 00 00 00 00 00	r3 = r6
     276:	0f 13 00 00 00 00 00 00	r3 += r1
     277:	bf a1 00 00 00 00 00 00	r1 = r10
     278:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     279:	b7 02 00 00 02 00 00 00	r2 = 2
     280:	85 00 00 00 71 00 00 00	call 113
     281:	b7 01 00 00 02 00 00 00	r1 = 2
     282:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     283:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     284:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     285:	bf a1 00 00 00 00 00 00	r1 = r10
     286:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     287:	b7 02 00 00 02 00 00 00	r2 = 2
     288:	bf 63 00 00 00 00 00 00	r3 = r6
     289:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     290:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     291:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     292:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB39_54>
     293:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     294:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB39_92>
     295:	05 00 69 00 00 00 00 00	goto +105 <LBB39_54>

0000000000000940 <LBB39_27>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     296:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB39_35>
     297:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB39_92>

0000000000000950 <LBB39_29>:
     298:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r4
     299:	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r3
     300:	b7 01 00 00 c0 00 00 00	r1 = 192
     301:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     302:	bf 63 00 00 00 00 00 00	r3 = r6
     303:	0f 13 00 00 00 00 00 00	r3 += r1
     304:	bf a1 00 00 00 00 00 00	r1 = r10
     305:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     306:	b7 02 00 00 08 00 00 00	r2 = 8
     307:	85 00 00 00 71 00 00 00	call 113
     308:	b7 01 00 00 b6 00 00 00	r1 = 182
     309:	bf 63 00 00 00 00 00 00	r3 = r6
     310:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     311:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     312:	bf a1 00 00 00 00 00 00	r1 = r10
     313:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     314:	b7 02 00 00 02 00 00 00	r2 = 2
     315:	85 00 00 00 71 00 00 00	call 113
     316:	b7 01 00 00 b4 00 00 00	r1 = 180
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     319:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     320:	bf a1 00 00 00 00 00 00	r1 = r10
     321:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     322:	b7 02 00 00 02 00 00 00	r2 = 2
     323:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     324:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     325:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     326:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB39_31>
     327:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000a40 <LBB39_31>:
;     return head + network_header;
     328:	57 06 00 00 ff ff 00 00	r6 &= 65535
     329:	0f 69 00 00 00 00 00 00	r9 += r6
     330:	bf a1 00 00 00 00 00 00	r1 = r10
     331:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     332:	b7 02 00 00 01 00 00 00	r2 = 1
     333:	bf 93 00 00 00 00 00 00	r3 = r9
     334:	85 00 00 00 04 00 00 00	call 4
     335:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     336:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     337:	57 02 00 00 f0 00 00 00	r2 &= 240
     338:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB39_33>
     339:	bf a1 00 00 00 00 00 00	r1 = r10
     340:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     341:	b7 02 00 00 01 00 00 00	r2 = 1
     342:	bf 93 00 00 00 00 00 00	r3 = r9
     343:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     344:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     345:	67 01 00 00 02 00 00 00	r1 <<= 2
     346:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000ad8 <LBB39_33>:
;     return l3_header + transport_size;
     347:	0f 19 00 00 00 00 00 00	r9 += r1
     348:	bf a6 00 00 00 00 00 00	r6 = r10
     349:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     350:	bf 61 00 00 00 00 00 00	r1 = r6
     351:	b7 02 00 00 08 00 00 00	r2 = 8
     352:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
     353:	bf 93 00 00 00 00 00 00	r3 = r9
     354:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     355:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     356:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     357:	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 88)
     358:	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 96)
     359:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB39_40>
     360:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     361:	07 02 00 00 e8 ff ff ff	r2 += -24
     362:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     363:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB39_40>
     364:	05 00 0c 00 00 00 00 00	goto +12 <LBB39_92>

0000000000000b68 <LBB39_45>:
;     if (proto != 0 && proto != l4_proto)
     365:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     366:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB39_54>
     367:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
;     if (proto != 0 && icmpid != 0) {
     368:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB39_54>
     369:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     370:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB39_54>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     371:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     372:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB39_50>
     373:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB39_54>

0000000000000bb0 <LBB39_50>:
;         if (icmpid != ev_icmpid)
     374:	57 01 00 00 ff ff 00 00	r1 &= 65535
     375:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
     376:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB39_54>

0000000000000bc8 <LBB39_92>:
;     return do_trace(ctx, skb, "br_forward_finish");
     377:	b7 00 00 00 00 00 00 00	r0 = 0
     378:	95 00 00 00 00 00 00 00	exit

0000000000000bd8 <LBB39_52>:
     379:	b7 01 00 00 00 00 00 00	r1 = 0
     380:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     381:	bf 63 00 00 00 00 00 00	r3 = r6
     382:	0f 13 00 00 00 00 00 00	r3 += r1
     383:	bf a1 00 00 00 00 00 00	r1 = r10
     384:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     385:	b7 02 00 00 02 00 00 00	r2 = 2
     386:	85 00 00 00 71 00 00 00	call 113
     387:	b7 01 00 00 02 00 00 00	r1 = 2
     388:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     389:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     390:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     391:	bf a1 00 00 00 00 00 00	r1 = r10
     392:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     393:	b7 02 00 00 02 00 00 00	r2 = 2
     394:	bf 63 00 00 00 00 00 00	r3 = r6
     395:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     396:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     397:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     398:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB39_54>
     399:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     400:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB39_92>

0000000000000c88 <LBB39_54>:
;     event->flags |= SKBTRACER_EVENT_IF;
     401:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     402:	47 01 00 00 01 00 00 00	r1 |= 1
     403:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     404:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
;     ev->skb = (u64)skb;
     405:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     406:	85 00 00 00 05 00 00 00	call 5
     407:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     408:	b7 01 00 00 10 00 00 00	r1 = 16
     409:	bf 96 00 00 00 00 00 00	r6 = r9
     410:	0f 16 00 00 00 00 00 00	r6 += r1
     411:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     412:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     413:	b7 02 00 00 08 00 00 00	r2 = 8
     414:	bf 63 00 00 00 00 00 00	r3 = r6
     415:	85 00 00 00 71 00 00 00	call 113
     416:	b7 01 00 00 70 00 00 00	r1 = 112
     417:	bf 93 00 00 00 00 00 00	r3 = r9
     418:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     419:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     420:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     421:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     422:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     423:	b7 02 00 00 04 00 00 00	r2 = 4
     424:	85 00 00 00 71 00 00 00	call 113
     425:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     426:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     427:	85 00 00 00 08 00 00 00	call 8
     428:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     429:	85 00 00 00 0e 00 00 00	call 14
     430:	57 00 00 00 ff ff 00 00	r0 &= 65535
     431:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     432:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     433:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     434:	bf 91 00 00 00 00 00 00	r1 = r9
     435:	b7 02 00 00 08 00 00 00	r2 = 8
     436:	bf 63 00 00 00 00 00 00	r3 = r6
     437:	85 00 00 00 71 00 00 00	call 113
     438:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     439:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     440:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     441:	bf 91 00 00 00 00 00 00	r1 = r9
     442:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     443:	b7 02 00 00 08 00 00 00	r2 = 8
     444:	85 00 00 00 71 00 00 00	call 113
     445:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     446:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     447:	0f 13 00 00 00 00 00 00	r3 += r1
     448:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     449:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     450:	b7 02 00 00 04 00 00 00	r2 = 4
     451:	85 00 00 00 71 00 00 00	call 113
     452:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     453:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB39_57>
     454:	b7 01 00 00 18 00 00 00	r1 = 24
     455:	bf 93 00 00 00 00 00 00	r3 = r9
     456:	0f 13 00 00 00 00 00 00	r3 += r1
     457:	bf a1 00 00 00 00 00 00	r1 = r10
     458:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     459:	b7 02 00 00 08 00 00 00	r2 = 8
     460:	85 00 00 00 71 00 00 00	call 113
     461:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     462:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     463:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB39_57>
     464:	b7 01 00 00 30 00 00 00	r1 = 48
     465:	0f 13 00 00 00 00 00 00	r3 += r1
     466:	bf a1 00 00 00 00 00 00	r1 = r10
     467:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     468:	b7 02 00 00 08 00 00 00	r2 = 8
     469:	85 00 00 00 71 00 00 00	call 113
     470:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     471:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     472:	0f 13 00 00 00 00 00 00	r3 += r1
     473:	bf a1 00 00 00 00 00 00	r1 = r10
     474:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     475:	b7 02 00 00 04 00 00 00	r2 = 4
     476:	85 00 00 00 71 00 00 00	call 113
     477:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000ef0 <LBB39_57>:
;     pkt_info->netns = get_netns(skb);
     478:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     479:	b7 01 00 00 80 00 00 00	r1 = 128
     480:	bf 93 00 00 00 00 00 00	r3 = r9
     481:	0f 13 00 00 00 00 00 00	r3 += r1
     482:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     483:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     484:	bf a1 00 00 00 00 00 00	r1 = r10
     485:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     486:	b7 02 00 00 01 00 00 00	r2 = 1
     487:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     488:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     489:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     490:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     491:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     492:	b7 01 00 00 00 00 00 00	r1 = 0
     493:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     494:	0f 13 00 00 00 00 00 00	r3 += r1
;     pkt_info->ifname[0] = 0;
     495:	bf 71 00 00 00 00 00 00	r1 = r7
     496:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     497:	b7 02 00 00 10 00 00 00	r2 = 16
     498:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     499:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     500:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB39_59>
     501:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     502:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     503:	b7 01 00 00 69 00 00 00	r1 = 105
     504:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     505:	b7 01 00 00 6e 00 00 00	r1 = 110
     506:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000000fd8 <LBB39_59>:
     507:	b7 01 00 00 c0 00 00 00	r1 = 192
     508:	bf 93 00 00 00 00 00 00	r3 = r9
     509:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     510:	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r3
     511:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     512:	07 01 00 00 f8 ff ff ff	r1 += -8
     513:	b7 02 00 00 08 00 00 00	r2 = 8
     514:	85 00 00 00 71 00 00 00	call 113
     515:	b7 01 00 00 b6 00 00 00	r1 = 182
     516:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     517:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     518:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     519:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     520:	b7 02 00 00 02 00 00 00	r2 = 2
     521:	bf 93 00 00 00 00 00 00	r3 = r9
     522:	85 00 00 00 71 00 00 00	call 113
     523:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     524:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     525:	bf 71 00 00 00 00 00 00	r1 = r7
     526:	07 01 00 00 64 00 00 00	r1 += 100
     527:	b7 02 00 00 06 00 00 00	r2 = 6
     528:	bf 63 00 00 00 00 00 00	r3 = r6
     529:	85 00 00 00 04 00 00 00	call 4
     530:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     531:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	b7 02 00 00 08 00 00 00	r2 = 8
     533:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     534:	85 00 00 00 71 00 00 00	call 113
     535:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     536:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     537:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     538:	b7 02 00 00 02 00 00 00	r2 = 2
     539:	bf 93 00 00 00 00 00 00	r3 = r9
     540:	85 00 00 00 71 00 00 00	call 113
     541:	b7 01 00 00 b4 00 00 00	r1 = 180
     542:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
     543:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     544:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     547:	b7 02 00 00 02 00 00 00	r2 = 2
     548:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     549:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     550:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     551:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB39_61>
     552:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001148 <LBB39_61>:
;     return head + network_header;
     553:	57 09 00 00 ff ff 00 00	r9 &= 65535
     554:	0f 96 00 00 00 00 00 00	r6 += r9
     555:	bf a1 00 00 00 00 00 00	r1 = r10
     556:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     557:	b7 02 00 00 01 00 00 00	r2 = 1
     558:	bf 63 00 00 00 00 00 00	r3 = r6
     559:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     560:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     561:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     562:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB39_66>
     563:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB39_92>
     564:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     565:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     566:	b7 01 00 00 c0 00 00 00	r1 = 192
     567:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     568:	bf 93 00 00 00 00 00 00	r3 = r9
     569:	0f 13 00 00 00 00 00 00	r3 += r1
     570:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     572:	b7 02 00 00 08 00 00 00	r2 = 8
     573:	85 00 00 00 71 00 00 00	call 113
     574:	b7 01 00 00 b6 00 00 00	r1 = 182
     575:	bf 93 00 00 00 00 00 00	r3 = r9
     576:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     577:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     578:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     579:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     580:	b7 02 00 00 02 00 00 00	r2 = 2
     581:	85 00 00 00 71 00 00 00	call 113
     582:	b7 01 00 00 b4 00 00 00	r1 = 180
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     585:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     586:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     587:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     588:	b7 02 00 00 02 00 00 00	r2 = 2
     589:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     590:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     591:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     592:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB39_65>
     593:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001290 <LBB39_65>:
;     return head + network_header;
     594:	57 09 00 00 ff ff 00 00	r9 &= 65535
     595:	0f 96 00 00 00 00 00 00	r6 += r9
     596:	b7 01 00 00 0c 00 00 00	r1 = 12
     597:	bf 63 00 00 00 00 00 00	r3 = r6
     598:	0f 13 00 00 00 00 00 00	r3 += r1
     599:	bf a1 00 00 00 00 00 00	r1 = r10
     600:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     601:	b7 02 00 00 04 00 00 00	r2 = 4
     602:	85 00 00 00 71 00 00 00	call 113
     603:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     604:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     605:	b7 01 00 00 10 00 00 00	r1 = 16
     606:	bf 63 00 00 00 00 00 00	r3 = r6
     607:	0f 13 00 00 00 00 00 00	r3 += r1
     608:	bf a1 00 00 00 00 00 00	r1 = r10
     609:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     610:	b7 02 00 00 04 00 00 00	r2 = 4
     611:	85 00 00 00 71 00 00 00	call 113
     612:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     613:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     614:	b7 01 00 00 02 00 00 00	r1 = 2
     615:	bf 63 00 00 00 00 00 00	r3 = r6
     616:	0f 13 00 00 00 00 00 00	r3 += r1
     617:	bf a1 00 00 00 00 00 00	r1 = r10
     618:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     619:	b7 02 00 00 02 00 00 00	r2 = 2
     620:	85 00 00 00 71 00 00 00	call 113
     621:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     622:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     623:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     624:	b7 01 00 00 09 00 00 00	r1 = 9
     625:	05 00 38 00 00 00 00 00	goto +56 <LBB39_69>

0000000000001390 <LBB39_66>:
     626:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     627:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     628:	b7 01 00 00 c0 00 00 00	r1 = 192
     629:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     630:	bf 93 00 00 00 00 00 00	r3 = r9
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     634:	b7 02 00 00 08 00 00 00	r2 = 8
     635:	85 00 00 00 71 00 00 00	call 113
     636:	b7 01 00 00 b6 00 00 00	r1 = 182
     637:	bf 93 00 00 00 00 00 00	r3 = r9
     638:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     639:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     640:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     641:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     642:	b7 02 00 00 02 00 00 00	r2 = 2
     643:	85 00 00 00 71 00 00 00	call 113
     644:	b7 01 00 00 b4 00 00 00	r1 = 180
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     647:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     648:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     649:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     650:	b7 02 00 00 02 00 00 00	r2 = 2
     651:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     652:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     653:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     654:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB39_68>
     655:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001480 <LBB39_68>:
;     return head + network_header;
     656:	57 09 00 00 ff ff 00 00	r9 &= 65535
     657:	0f 96 00 00 00 00 00 00	r6 += r9
     658:	b7 01 00 00 08 00 00 00	r1 = 8
     659:	bf 63 00 00 00 00 00 00	r3 = r6
     660:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
     661:	bf 71 00 00 00 00 00 00	r1 = r7
     662:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     663:	b7 02 00 00 10 00 00 00	r2 = 16
     664:	85 00 00 00 04 00 00 00	call 4
     665:	b7 01 00 00 18 00 00 00	r1 = 24
     666:	bf 63 00 00 00 00 00 00	r3 = r6
     667:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     668:	bf 71 00 00 00 00 00 00	r1 = r7
     669:	07 01 00 00 80 00 00 00	r1 += 128
     670:	b7 02 00 00 10 00 00 00	r2 = 16
     671:	85 00 00 00 04 00 00 00	call 4
     672:	b7 01 00 00 04 00 00 00	r1 = 4
     673:	bf 63 00 00 00 00 00 00	r3 = r6
     674:	0f 13 00 00 00 00 00 00	r3 += r1
     675:	bf a1 00 00 00 00 00 00	r1 = r10
     676:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     677:	b7 02 00 00 02 00 00 00	r2 = 2
     678:	85 00 00 00 71 00 00 00	call 113
     679:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     680:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     681:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000001550 <LBB39_69>:
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
     684:	bf a1 00 00 00 00 00 00	r1 = r10
     685:	07 01 00 00 f8 ff ff ff	r1 += -8
     686:	b7 02 00 00 01 00 00 00	r2 = 1
     687:	85 00 00 00 71 00 00 00	call 113
     688:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     689:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     690:	bf a1 00 00 00 00 00 00	r1 = r10
     691:	07 01 00 00 f8 ff ff ff	r1 += -8
     692:	b7 02 00 00 01 00 00 00	r2 = 1
     693:	bf 63 00 00 00 00 00 00	r3 = r6
     694:	85 00 00 00 04 00 00 00	call 4
     695:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     696:	57 01 00 00 f0 00 00 00	r1 &= 240
     697:	77 01 00 00 04 00 00 00	r1 >>= 4
     698:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     699:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     700:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB39_72>
     701:	15 01 53 00 01 00 00 00	if r1 == 1 goto +83 <LBB39_84>
     702:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB39_74>
     703:	05 00 b9 fe 00 00 00 00	goto -327 <LBB39_92>

0000000000001600 <LBB39_74>:
     704:	b7 01 00 00 c0 00 00 00	r1 = 192
     705:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     706:	bf 93 00 00 00 00 00 00	r3 = r9
     707:	0f 13 00 00 00 00 00 00	r3 += r1
     708:	bf a1 00 00 00 00 00 00	r1 = r10
     709:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     710:	b7 02 00 00 08 00 00 00	r2 = 8
     711:	85 00 00 00 71 00 00 00	call 113
     712:	b7 01 00 00 b6 00 00 00	r1 = 182
     713:	bf 93 00 00 00 00 00 00	r3 = r9
     714:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     715:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     716:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     717:	bf a1 00 00 00 00 00 00	r1 = r10
     718:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     719:	b7 02 00 00 02 00 00 00	r2 = 2
     720:	85 00 00 00 71 00 00 00	call 113
     721:	b7 01 00 00 b4 00 00 00	r1 = 180
     722:	0f 19 00 00 00 00 00 00	r9 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     723:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     726:	b7 02 00 00 02 00 00 00	r2 = 2
     727:	bf 93 00 00 00 00 00 00	r3 = r9
     728:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     729:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     730:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     731:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB39_76>
     732:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000016e8 <LBB39_76>:
;     return head + network_header;
     733:	57 06 00 00 ff ff 00 00	r6 &= 65535
     734:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
     735:	0f 61 00 00 00 00 00 00	r1 += r6
     736:	bf 16 00 00 00 00 00 00	r6 = r1
     737:	bf a1 00 00 00 00 00 00	r1 = r10
     738:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     739:	b7 02 00 00 01 00 00 00	r2 = 1
     740:	bf 63 00 00 00 00 00 00	r3 = r6
     741:	85 00 00 00 04 00 00 00	call 4
     742:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     743:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     744:	57 02 00 00 f0 00 00 00	r2 &= 240
     745:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB39_78>
     746:	bf a1 00 00 00 00 00 00	r1 = r10
     747:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     748:	b7 02 00 00 01 00 00 00	r2 = 1
     749:	bf 63 00 00 00 00 00 00	r3 = r6
     750:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     751:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     752:	67 01 00 00 02 00 00 00	r1 <<= 2
     753:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001790 <LBB39_78>:
;     return l3_header + transport_size;
     754:	0f 16 00 00 00 00 00 00	r6 += r1
     755:	b7 01 00 00 00 00 00 00	r1 = 0
     756:	bf 63 00 00 00 00 00 00	r3 = r6
     757:	0f 13 00 00 00 00 00 00	r3 += r1
     758:	bf a1 00 00 00 00 00 00	r1 = r10
     759:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     760:	b7 02 00 00 02 00 00 00	r2 = 2
     761:	85 00 00 00 71 00 00 00	call 113
     762:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     763:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     764:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     765:	b7 01 00 00 02 00 00 00	r1 = 2
     766:	bf 63 00 00 00 00 00 00	r3 = r6
     767:	0f 13 00 00 00 00 00 00	r3 += r1
     768:	bf a1 00 00 00 00 00 00	r1 = r10
     769:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     770:	b7 02 00 00 02 00 00 00	r2 = 2
     771:	85 00 00 00 71 00 00 00	call 113
     772:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     773:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     774:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     775:	07 06 00 00 0c 00 00 00	r6 += 12
     776:	bf 71 00 00 00 00 00 00	r1 = r7
     777:	07 01 00 00 9c 00 00 00	r1 += 156
     778:	b7 02 00 00 02 00 00 00	r2 = 2
     779:	bf 63 00 00 00 00 00 00	r3 = r6
     780:	85 00 00 00 04 00 00 00	call 4
     781:	05 00 8a 00 00 00 00 00	goto +138 <LBB39_89>

0000000000001870 <LBB39_72>:
;     if (l4_proto == IPPROTO_TCP) {
     782:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB39_79>
     783:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB39_84>
     784:	05 00 68 fe 00 00 00 00	goto -408 <LBB39_92>

0000000000001888 <LBB39_84>:
     785:	b7 01 00 00 c0 00 00 00	r1 = 192
     786:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     787:	bf 63 00 00 00 00 00 00	r3 = r6
     788:	0f 13 00 00 00 00 00 00	r3 += r1
     789:	bf a1 00 00 00 00 00 00	r1 = r10
     790:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     791:	b7 02 00 00 08 00 00 00	r2 = 8
     792:	85 00 00 00 71 00 00 00	call 113
     793:	b7 01 00 00 b6 00 00 00	r1 = 182
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     796:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     797:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     798:	bf a1 00 00 00 00 00 00	r1 = r10
     799:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     800:	b7 02 00 00 02 00 00 00	r2 = 2
     801:	85 00 00 00 71 00 00 00	call 113
     802:	b7 01 00 00 b4 00 00 00	r1 = 180
     803:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     804:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     805:	bf a1 00 00 00 00 00 00	r1 = r10
     806:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     807:	b7 02 00 00 02 00 00 00	r2 = 2
     808:	bf 63 00 00 00 00 00 00	r3 = r6
     809:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     810:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     811:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     812:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB39_86>
     813:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001970 <LBB39_86>:
;     return head + network_header;
     814:	57 09 00 00 ff ff 00 00	r9 &= 65535
     815:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     816:	0f 96 00 00 00 00 00 00	r6 += r9
     817:	bf a1 00 00 00 00 00 00	r1 = r10
     818:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     819:	b7 02 00 00 01 00 00 00	r2 = 1
     820:	bf 63 00 00 00 00 00 00	r3 = r6
     821:	85 00 00 00 04 00 00 00	call 4
     822:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     823:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     824:	57 02 00 00 f0 00 00 00	r2 &= 240
     825:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB39_88>
     826:	bf a1 00 00 00 00 00 00	r1 = r10
     827:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     828:	b7 02 00 00 01 00 00 00	r2 = 1
     829:	bf 63 00 00 00 00 00 00	r3 = r6
     830:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     831:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     832:	67 01 00 00 02 00 00 00	r1 <<= 2
     833:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a10 <LBB39_88>:
;     return l3_header + transport_size;
     834:	0f 16 00 00 00 00 00 00	r6 += r1
     835:	bf a9 00 00 00 00 00 00	r9 = r10
     836:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     837:	bf 91 00 00 00 00 00 00	r1 = r9
     838:	b7 02 00 00 08 00 00 00	r2 = 8
     839:	bf 63 00 00 00 00 00 00	r3 = r6
     840:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     841:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     842:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     843:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     844:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     845:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     846:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     847:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     848:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     849:	05 00 46 00 00 00 00 00	goto +70 <LBB39_89>

0000000000001a90 <LBB39_79>:
     850:	b7 01 00 00 c0 00 00 00	r1 = 192
     851:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     852:	bf 63 00 00 00 00 00 00	r3 = r6
     853:	0f 13 00 00 00 00 00 00	r3 += r1
     854:	bf a1 00 00 00 00 00 00	r1 = r10
     855:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     856:	b7 02 00 00 08 00 00 00	r2 = 8
     857:	85 00 00 00 71 00 00 00	call 113
     858:	b7 01 00 00 b6 00 00 00	r1 = 182
     859:	bf 63 00 00 00 00 00 00	r3 = r6
     860:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     861:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     862:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     863:	bf a1 00 00 00 00 00 00	r1 = r10
     864:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     865:	b7 02 00 00 02 00 00 00	r2 = 2
     866:	85 00 00 00 71 00 00 00	call 113
     867:	b7 01 00 00 b4 00 00 00	r1 = 180
     868:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     869:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     870:	bf a1 00 00 00 00 00 00	r1 = r10
     871:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     872:	b7 02 00 00 02 00 00 00	r2 = 2
     873:	bf 63 00 00 00 00 00 00	r3 = r6
     874:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     875:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     876:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     877:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB39_81>
     878:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001b78 <LBB39_81>:
;     return head + network_header;
     879:	57 09 00 00 ff ff 00 00	r9 &= 65535
     880:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     881:	0f 96 00 00 00 00 00 00	r6 += r9
     882:	bf a1 00 00 00 00 00 00	r1 = r10
     883:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     884:	b7 02 00 00 01 00 00 00	r2 = 1
     885:	bf 63 00 00 00 00 00 00	r3 = r6
     886:	85 00 00 00 04 00 00 00	call 4
     887:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     888:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     889:	57 02 00 00 f0 00 00 00	r2 &= 240
     890:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB39_83>
     891:	bf a1 00 00 00 00 00 00	r1 = r10
     892:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     893:	b7 02 00 00 01 00 00 00	r2 = 1
     894:	bf 63 00 00 00 00 00 00	r3 = r6
     895:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     896:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     897:	67 01 00 00 02 00 00 00	r1 <<= 2
     898:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c18 <LBB39_83>:
;     return l3_header + transport_size;
     899:	0f 16 00 00 00 00 00 00	r6 += r1
     900:	b7 01 00 00 00 00 00 00	r1 = 0
     901:	bf 63 00 00 00 00 00 00	r3 = r6
     902:	0f 13 00 00 00 00 00 00	r3 += r1
     903:	bf a1 00 00 00 00 00 00	r1 = r10
     904:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     905:	b7 02 00 00 02 00 00 00	r2 = 2
     906:	85 00 00 00 71 00 00 00	call 113
     907:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     908:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     909:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     910:	b7 01 00 00 02 00 00 00	r1 = 2
     911:	0f 16 00 00 00 00 00 00	r6 += r1
     912:	bf a1 00 00 00 00 00 00	r1 = r10
     913:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     914:	b7 02 00 00 02 00 00 00	r2 = 2
     915:	bf 63 00 00 00 00 00 00	r3 = r6
     916:	85 00 00 00 71 00 00 00	call 113
     917:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     918:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     919:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001cc0 <LBB39_89>:
     920:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
;     return cfg->callstack == 0;
     921:	71 81 11 00 00 00 00 00	r1 = *(u8 *)(r8 + 17)
;     if (!filter_callstack(cfg))
     922:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB39_91>
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
     923:	bf 61 00 00 00 00 00 00	r1 = r6
     924:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     926:	b7 03 00 00 00 00 00 00	r3 = 0
     927:	85 00 00 00 1b 00 00 00	call 27
     928:	63 07 30 00 00 00 00 00	*(u32 *)(r7 + 48) = r0

0000000000001d08 <LBB39_91>:
     929:	b7 01 00 00 68 00 00 00	r1 = 104
;     for (j = 10; j < 64; j += 10) CPY(j);
     930:	73 17 10 00 00 00 00 00	*(u8 *)(r7 + 16) = r1
     931:	b7 01 00 00 73 00 00 00	r1 = 115
     932:	73 17 0f 00 00 00 00 00	*(u8 *)(r7 + 15) = r1
     933:	b7 01 00 00 6e 00 00 00	r1 = 110
     934:	73 17 0d 00 00 00 00 00	*(u8 *)(r7 + 13) = r1
     935:	b7 01 00 00 69 00 00 00	r1 = 105
     936:	73 17 0e 00 00 00 00 00	*(u8 *)(r7 + 14) = r1
     937:	73 17 0c 00 00 00 00 00	*(u8 *)(r7 + 12) = r1
     938:	b7 01 00 00 64 00 00 00	r1 = 100
     939:	73 17 09 00 00 00 00 00	*(u8 *)(r7 + 9) = r1
     940:	b7 01 00 00 61 00 00 00	r1 = 97
     941:	73 17 07 00 00 00 00 00	*(u8 *)(r7 + 7) = r1
     942:	b7 01 00 00 77 00 00 00	r1 = 119
     943:	73 17 06 00 00 00 00 00	*(u8 *)(r7 + 6) = r1
     944:	b7 01 00 00 6f 00 00 00	r1 = 111
     945:	73 17 04 00 00 00 00 00	*(u8 *)(r7 + 4) = r1
     946:	b7 01 00 00 66 00 00 00	r1 = 102
     947:	73 17 0b 00 00 00 00 00	*(u8 *)(r7 + 11) = r1
     948:	73 17 03 00 00 00 00 00	*(u8 *)(r7 + 3) = r1
     949:	b7 01 00 00 5f 00 00 00	r1 = 95
     950:	73 17 0a 00 00 00 00 00	*(u8 *)(r7 + 10) = r1
     951:	73 17 02 00 00 00 00 00	*(u8 *)(r7 + 2) = r1
     952:	b7 01 00 00 72 00 00 00	r1 = 114
     953:	73 17 08 00 00 00 00 00	*(u8 *)(r7 + 8) = r1
     954:	73 17 05 00 00 00 00 00	*(u8 *)(r7 + 5) = r1
     955:	73 17 01 00 00 00 00 00	*(u8 *)(r7 + 1) = r1
     956:	b7 01 00 00 62 00 00 00	r1 = 98
     957:	73 17 00 00 00 00 00 00	*(u8 *)(r7 + 0) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     958:	bf 61 00 00 00 00 00 00	r1 = r6
     959:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     961:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     963:	bf 74 00 00 00 00 00 00	r4 = r7
     964:	b7 05 00 00 e0 00 00 00	r5 = 224
     965:	85 00 00 00 19 00 00 00	call 25
     966:	05 00 b2 fd 00 00 00 00	goto -590 <LBB39_92>

Disassembly of section kprobe/br_nf_forward_ip:

0000000000000000 <k_br_nf_fwd_ip>:
; int k_br_nf_fwd_ip(struct pt_regs *ctx) {
       0:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM2(ctx);
       1:	79 11 68 00 00 00 00 00	r1 = *(u64 *)(r1 + 104)
       2:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       3:	b7 06 00 00 00 00 00 00	r6 = 0
;     GET_CFG();
       4:	63 6a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r6
       5:	bf a2 00 00 00 00 00 00	r2 = r10
       6:	07 02 00 00 e4 ff ff ff	r2 += -28
;     GET_CFG();
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	85 00 00 00 01 00 00 00	call 1
      10:	bf 08 00 00 00 00 00 00	r8 = r0
      11:	15 08 6d 01 00 00 00 00	if r8 == 0 goto +365 <LBB40_92>
      12:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
      13:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      14:	63 18 08 00 00 00 00 00	*(u32 *)(r8 + 8) = r1
;     u32 ev_buff_id = 0;
      15:	63 6a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r6
      16:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      17:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      18:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      20:	85 00 00 00 01 00 00 00	call 1
      21:	bf 07 00 00 00 00 00 00	r7 = r0
;     if (!ev) return NULL;
      22:	55 07 01 00 00 00 00 00	if r7 != 0 goto +1 <LBB40_3>
      23:	05 00 61 01 00 00 00 00	goto +353 <LBB40_92>

00000000000000c0 <LBB40_3>:
      24:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      25:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      26:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      27:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      28:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      29:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      30:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      31:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      32:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      33:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      34:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      35:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      36:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      37:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      38:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      39:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      40:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      41:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      42:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      43:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      44:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      45:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      46:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      47:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      48:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      49:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      50:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      51:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      52:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      53:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      54:	61 81 04 00 00 00 00 00	r1 = *(u32 *)(r8 + 4)
      55:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB40_5>
      56:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      57:	5d 01 3f 01 00 00 00 00	if r1 != r0 goto +319 <LBB40_92>

00000000000001d0 <LBB40_5>:
      58:	b7 01 00 00 10 00 00 00	r1 = 16
      59:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
      60:	bf 93 00 00 00 00 00 00	r3 = r9
      61:	0f 13 00 00 00 00 00 00	r3 += r1
      62:	bf a6 00 00 00 00 00 00	r6 = r10
      63:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      64:	bf 61 00 00 00 00 00 00	r1 = r6
      65:	b7 02 00 00 08 00 00 00	r2 = 8
      66:	85 00 00 00 71 00 00 00	call 113
      67:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      68:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      69:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      70:	bf 61 00 00 00 00 00 00	r1 = r6
      71:	b7 02 00 00 08 00 00 00	r2 = 8
      72:	85 00 00 00 71 00 00 00	call 113
      73:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      74:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      75:	0f 13 00 00 00 00 00 00	r3 += r1
      76:	bf a1 00 00 00 00 00 00	r1 = r10
      77:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      78:	b7 02 00 00 04 00 00 00	r2 = 4
      79:	85 00 00 00 71 00 00 00	call 113
      80:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      81:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB40_8>
      82:	b7 01 00 00 18 00 00 00	r1 = 24
      83:	bf 93 00 00 00 00 00 00	r3 = r9
      84:	0f 13 00 00 00 00 00 00	r3 += r1
      85:	bf a1 00 00 00 00 00 00	r1 = r10
      86:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
      87:	b7 02 00 00 08 00 00 00	r2 = 8
      88:	85 00 00 00 71 00 00 00	call 113
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
      90:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB40_11>
      91:	b7 01 00 00 30 00 00 00	r1 = 48
      92:	0f 13 00 00 00 00 00 00	r3 += r1
      93:	bf a1 00 00 00 00 00 00	r1 = r10
      94:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      95:	b7 02 00 00 08 00 00 00	r2 = 8
      96:	85 00 00 00 71 00 00 00	call 113
      97:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      98:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     102:	b7 02 00 00 04 00 00 00	r2 = 4
     103:	85 00 00 00 71 00 00 00	call 113
     104:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000348 <LBB40_8>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     105:	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0)
     106:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB40_11>
     107:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB40_11>
     108:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB40_92>

0000000000000368 <LBB40_11>:
;     u16 icmpid = cfg->icmpid;
     109:	69 81 0e 00 00 00 00 00	r1 = *(u16 *)(r8 + 14)
;     u16 port = cfg->port;
     110:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     111:	69 81 0c 00 00 00 00 00	r1 = *(u16 *)(r8 + 12)
;     u8 proto = cfg->proto;
     112:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     113:	71 81 12 00 00 00 00 00	r1 = *(u8 *)(r8 + 18)
;     u32 addr = cfg->ip;
     114:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     115:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
     116:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     117:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     118:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     119:	b7 01 00 00 c0 00 00 00	r1 = 192
     120:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     121:	bf 93 00 00 00 00 00 00	r3 = r9
     122:	0f 13 00 00 00 00 00 00	r3 += r1
     123:	bf a1 00 00 00 00 00 00	r1 = r10
     124:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     125:	b7 02 00 00 08 00 00 00	r2 = 8
     126:	85 00 00 00 71 00 00 00	call 113
     127:	b7 01 00 00 b6 00 00 00	r1 = 182
     128:	bf 93 00 00 00 00 00 00	r3 = r9
     129:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     130:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     131:	bf a1 00 00 00 00 00 00	r1 = r10
     132:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     133:	b7 02 00 00 02 00 00 00	r2 = 2
     134:	85 00 00 00 71 00 00 00	call 113
     135:	b7 01 00 00 b4 00 00 00	r1 = 180
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     138:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     139:	bf a1 00 00 00 00 00 00	r1 = r10
     140:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     141:	b7 02 00 00 02 00 00 00	r2 = 2
     142:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     143:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     144:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     145:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB40_13>
     146:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000498 <LBB40_13>:
;     return head + network_header;
     147:	57 09 00 00 ff ff 00 00	r9 &= 65535
     148:	0f 96 00 00 00 00 00 00	r6 += r9
     149:	bf a1 00 00 00 00 00 00	r1 = r10
     150:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     151:	b7 02 00 00 01 00 00 00	r2 = 1
     152:	bf 63 00 00 00 00 00 00	r3 = r6
     153:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     154:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     155:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     156:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB40_20>
     157:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB40_92>
;         if (addr != 0) {
     158:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     159:	bf 19 00 00 00 00 00 00	r9 = r1
     160:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB40_18>
     161:	b7 01 00 00 0c 00 00 00	r1 = 12
     162:	bf 63 00 00 00 00 00 00	r3 = r6
     163:	0f 13 00 00 00 00 00 00	r3 += r1
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     166:	b7 02 00 00 04 00 00 00	r2 = 4
     167:	85 00 00 00 71 00 00 00	call 113
     168:	b7 01 00 00 10 00 00 00	r1 = 16
     169:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     170:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     171:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     172:	bf a1 00 00 00 00 00 00	r1 = r10
     173:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     174:	b7 02 00 00 04 00 00 00	r2 = 4
     175:	bf 63 00 00 00 00 00 00	r3 = r6
     176:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     177:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     178:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB40_54>
     179:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     180:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     181:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB40_92>
     182:	05 00 da 00 00 00 00 00	goto +218 <LBB40_54>

00000000000005b8 <LBB40_20>:
     183:	b7 01 00 00 06 00 00 00	r1 = 6
     184:	0f 16 00 00 00 00 00 00	r6 += r1
     185:	bf a1 00 00 00 00 00 00	r1 = r10
     186:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     187:	b7 02 00 00 01 00 00 00	r2 = 1
     188:	bf 63 00 00 00 00 00 00	r3 = r6
     189:	85 00 00 00 04 00 00 00	call 4
     190:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     191:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     192:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     193:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB40_22>
     194:	b7 04 00 00 80 00 00 00	r4 = 128
     195:	b7 03 00 00 81 00 00 00	r3 = 129
     196:	b7 01 00 00 3a 00 00 00	r1 = 58
     197:	05 00 0d 00 00 00 00 00	goto +13 <LBB40_22>

0000000000000630 <LBB40_18>:
     198:	b7 01 00 00 09 00 00 00	r1 = 9
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     208:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB40_22>
     209:	b7 04 00 00 08 00 00 00	r4 = 8
     210:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000698 <LBB40_22>:
;     if (proto != 0 && proto != l4_proto)
     211:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     212:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB40_24>
     213:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB40_92>

00000000000006b0 <LBB40_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     214:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB40_27>
     215:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB40_29>
     216:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB40_35>
     217:	05 00 9f 00 00 00 00 00	goto +159 <LBB40_92>

00000000000006d0 <LBB40_35>:
     218:	b7 01 00 00 c0 00 00 00	r1 = 192
     219:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     220:	bf 63 00 00 00 00 00 00	r3 = r6
     221:	0f 13 00 00 00 00 00 00	r3 += r1
     222:	bf a1 00 00 00 00 00 00	r1 = r10
     223:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     224:	b7 02 00 00 08 00 00 00	r2 = 8
     225:	85 00 00 00 71 00 00 00	call 113
     226:	b7 01 00 00 b6 00 00 00	r1 = 182
     227:	bf 63 00 00 00 00 00 00	r3 = r6
     228:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     229:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     230:	bf a1 00 00 00 00 00 00	r1 = r10
     231:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     232:	b7 02 00 00 02 00 00 00	r2 = 2
     233:	85 00 00 00 71 00 00 00	call 113
     234:	b7 01 00 00 b4 00 00 00	r1 = 180
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     237:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     238:	bf a1 00 00 00 00 00 00	r1 = r10
     239:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     240:	b7 02 00 00 02 00 00 00	r2 = 2
     241:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     242:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     243:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     244:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB40_37>
     245:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000007b0 <LBB40_37>:
;     return head + network_header;
     246:	57 06 00 00 ff ff 00 00	r6 &= 65535
     247:	0f 69 00 00 00 00 00 00	r9 += r6
     248:	bf a1 00 00 00 00 00 00	r1 = r10
     249:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     250:	b7 02 00 00 01 00 00 00	r2 = 1
     251:	bf 93 00 00 00 00 00 00	r3 = r9
     252:	85 00 00 00 04 00 00 00	call 4
     253:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     254:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     255:	57 02 00 00 f0 00 00 00	r2 &= 240
     256:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB40_39>
     257:	bf a1 00 00 00 00 00 00	r1 = r10
     258:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     259:	b7 02 00 00 01 00 00 00	r2 = 1
     260:	bf 93 00 00 00 00 00 00	r3 = r9
     261:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     262:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     263:	67 01 00 00 02 00 00 00	r1 <<= 2
     264:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000848 <LBB40_39>:
;     return l3_header + transport_size;
     265:	0f 19 00 00 00 00 00 00	r9 += r1
     266:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9

0000000000000858 <LBB40_40>:
     267:	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 72)
;     if (port != 0) {
     268:	bf 92 00 00 00 00 00 00	r2 = r9
     269:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB40_45>
;         if (l4_proto == IPPROTO_TCP) {
     270:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     271:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB40_52>
     272:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB40_45>
     273:	b7 01 00 00 00 00 00 00	r1 = 0
     274:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     275:	bf 63 00 00 00 00 00 00	r3 = r6
     276:	0f 13 00 00 00 00 00 00	r3 += r1
     277:	bf a1 00 00 00 00 00 00	r1 = r10
     278:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     279:	b7 02 00 00 02 00 00 00	r2 = 2
     280:	85 00 00 00 71 00 00 00	call 113
     281:	b7 01 00 00 02 00 00 00	r1 = 2
     282:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     283:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     284:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     285:	bf a1 00 00 00 00 00 00	r1 = r10
     286:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     287:	b7 02 00 00 02 00 00 00	r2 = 2
     288:	bf 63 00 00 00 00 00 00	r3 = r6
     289:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     290:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     291:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     292:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB40_54>
     293:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     294:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB40_92>
     295:	05 00 69 00 00 00 00 00	goto +105 <LBB40_54>

0000000000000940 <LBB40_27>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     296:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB40_35>
     297:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB40_92>

0000000000000950 <LBB40_29>:
     298:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r4
     299:	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r3
     300:	b7 01 00 00 c0 00 00 00	r1 = 192
     301:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     302:	bf 63 00 00 00 00 00 00	r3 = r6
     303:	0f 13 00 00 00 00 00 00	r3 += r1
     304:	bf a1 00 00 00 00 00 00	r1 = r10
     305:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     306:	b7 02 00 00 08 00 00 00	r2 = 8
     307:	85 00 00 00 71 00 00 00	call 113
     308:	b7 01 00 00 b6 00 00 00	r1 = 182
     309:	bf 63 00 00 00 00 00 00	r3 = r6
     310:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     311:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     312:	bf a1 00 00 00 00 00 00	r1 = r10
     313:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     314:	b7 02 00 00 02 00 00 00	r2 = 2
     315:	85 00 00 00 71 00 00 00	call 113
     316:	b7 01 00 00 b4 00 00 00	r1 = 180
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     319:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     320:	bf a1 00 00 00 00 00 00	r1 = r10
     321:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     322:	b7 02 00 00 02 00 00 00	r2 = 2
     323:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     324:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     325:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     326:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB40_31>
     327:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000a40 <LBB40_31>:
;     return head + network_header;
     328:	57 06 00 00 ff ff 00 00	r6 &= 65535
     329:	0f 69 00 00 00 00 00 00	r9 += r6
     330:	bf a1 00 00 00 00 00 00	r1 = r10
     331:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     332:	b7 02 00 00 01 00 00 00	r2 = 1
     333:	bf 93 00 00 00 00 00 00	r3 = r9
     334:	85 00 00 00 04 00 00 00	call 4
     335:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     336:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     337:	57 02 00 00 f0 00 00 00	r2 &= 240
     338:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB40_33>
     339:	bf a1 00 00 00 00 00 00	r1 = r10
     340:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     341:	b7 02 00 00 01 00 00 00	r2 = 1
     342:	bf 93 00 00 00 00 00 00	r3 = r9
     343:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     344:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     345:	67 01 00 00 02 00 00 00	r1 <<= 2
     346:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000ad8 <LBB40_33>:
;     return l3_header + transport_size;
     347:	0f 19 00 00 00 00 00 00	r9 += r1
     348:	bf a6 00 00 00 00 00 00	r6 = r10
     349:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     350:	bf 61 00 00 00 00 00 00	r1 = r6
     351:	b7 02 00 00 08 00 00 00	r2 = 8
     352:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
     353:	bf 93 00 00 00 00 00 00	r3 = r9
     354:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     355:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     356:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     357:	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 88)
     358:	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 96)
     359:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB40_40>
     360:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     361:	07 02 00 00 e8 ff ff ff	r2 += -24
     362:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     363:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB40_40>
     364:	05 00 0c 00 00 00 00 00	goto +12 <LBB40_92>

0000000000000b68 <LBB40_45>:
;     if (proto != 0 && proto != l4_proto)
     365:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     366:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB40_54>
     367:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
;     if (proto != 0 && icmpid != 0) {
     368:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB40_54>
     369:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     370:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB40_54>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     371:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     372:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB40_50>
     373:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB40_54>

0000000000000bb0 <LBB40_50>:
;         if (icmpid != ev_icmpid)
     374:	57 01 00 00 ff ff 00 00	r1 &= 65535
     375:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
     376:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB40_54>

0000000000000bc8 <LBB40_92>:
;     return do_trace(ctx, skb, "br_nf_forward_ip");
     377:	b7 00 00 00 00 00 00 00	r0 = 0
     378:	95 00 00 00 00 00 00 00	exit

0000000000000bd8 <LBB40_52>:
     379:	b7 01 00 00 00 00 00 00	r1 = 0
     380:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     381:	bf 63 00 00 00 00 00 00	r3 = r6
     382:	0f 13 00 00 00 00 00 00	r3 += r1
     383:	bf a1 00 00 00 00 00 00	r1 = r10
     384:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     385:	b7 02 00 00 02 00 00 00	r2 = 2
     386:	85 00 00 00 71 00 00 00	call 113
     387:	b7 01 00 00 02 00 00 00	r1 = 2
     388:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     389:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     390:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     391:	bf a1 00 00 00 00 00 00	r1 = r10
     392:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     393:	b7 02 00 00 02 00 00 00	r2 = 2
     394:	bf 63 00 00 00 00 00 00	r3 = r6
     395:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     396:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     397:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     398:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB40_54>
     399:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     400:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB40_92>

0000000000000c88 <LBB40_54>:
;     event->flags |= SKBTRACER_EVENT_IF;
     401:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     402:	47 01 00 00 01 00 00 00	r1 |= 1
     403:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     404:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
;     ev->skb = (u64)skb;
     405:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     406:	85 00 00 00 05 00 00 00	call 5
     407:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     408:	b7 01 00 00 10 00 00 00	r1 = 16
     409:	bf 96 00 00 00 00 00 00	r6 = r9
     410:	0f 16 00 00 00 00 00 00	r6 += r1
     411:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     412:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     413:	b7 02 00 00 08 00 00 00	r2 = 8
     414:	bf 63 00 00 00 00 00 00	r3 = r6
     415:	85 00 00 00 71 00 00 00	call 113
     416:	b7 01 00 00 70 00 00 00	r1 = 112
     417:	bf 93 00 00 00 00 00 00	r3 = r9
     418:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     419:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     420:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     421:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     422:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     423:	b7 02 00 00 04 00 00 00	r2 = 4
     424:	85 00 00 00 71 00 00 00	call 113
     425:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     426:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     427:	85 00 00 00 08 00 00 00	call 8
     428:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     429:	85 00 00 00 0e 00 00 00	call 14
     430:	57 00 00 00 ff ff 00 00	r0 &= 65535
     431:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     432:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     433:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     434:	bf 91 00 00 00 00 00 00	r1 = r9
     435:	b7 02 00 00 08 00 00 00	r2 = 8
     436:	bf 63 00 00 00 00 00 00	r3 = r6
     437:	85 00 00 00 71 00 00 00	call 113
     438:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     439:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     440:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     441:	bf 91 00 00 00 00 00 00	r1 = r9
     442:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     443:	b7 02 00 00 08 00 00 00	r2 = 8
     444:	85 00 00 00 71 00 00 00	call 113
     445:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     446:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     447:	0f 13 00 00 00 00 00 00	r3 += r1
     448:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     449:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     450:	b7 02 00 00 04 00 00 00	r2 = 4
     451:	85 00 00 00 71 00 00 00	call 113
     452:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     453:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB40_57>
     454:	b7 01 00 00 18 00 00 00	r1 = 24
     455:	bf 93 00 00 00 00 00 00	r3 = r9
     456:	0f 13 00 00 00 00 00 00	r3 += r1
     457:	bf a1 00 00 00 00 00 00	r1 = r10
     458:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     459:	b7 02 00 00 08 00 00 00	r2 = 8
     460:	85 00 00 00 71 00 00 00	call 113
     461:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     462:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     463:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB40_57>
     464:	b7 01 00 00 30 00 00 00	r1 = 48
     465:	0f 13 00 00 00 00 00 00	r3 += r1
     466:	bf a1 00 00 00 00 00 00	r1 = r10
     467:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     468:	b7 02 00 00 08 00 00 00	r2 = 8
     469:	85 00 00 00 71 00 00 00	call 113
     470:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     471:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     472:	0f 13 00 00 00 00 00 00	r3 += r1
     473:	bf a1 00 00 00 00 00 00	r1 = r10
     474:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     475:	b7 02 00 00 04 00 00 00	r2 = 4
     476:	85 00 00 00 71 00 00 00	call 113
     477:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000ef0 <LBB40_57>:
;     pkt_info->netns = get_netns(skb);
     478:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     479:	b7 01 00 00 80 00 00 00	r1 = 128
     480:	bf 93 00 00 00 00 00 00	r3 = r9
     481:	0f 13 00 00 00 00 00 00	r3 += r1
     482:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     483:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     484:	bf a1 00 00 00 00 00 00	r1 = r10
     485:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     486:	b7 02 00 00 01 00 00 00	r2 = 1
     487:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     488:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     489:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     490:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     491:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     492:	b7 01 00 00 00 00 00 00	r1 = 0
     493:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     494:	0f 13 00 00 00 00 00 00	r3 += r1
;     pkt_info->ifname[0] = 0;
     495:	bf 71 00 00 00 00 00 00	r1 = r7
     496:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     497:	b7 02 00 00 10 00 00 00	r2 = 16
     498:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     499:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     500:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB40_59>
     501:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     502:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     503:	b7 01 00 00 69 00 00 00	r1 = 105
     504:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     505:	b7 01 00 00 6e 00 00 00	r1 = 110
     506:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000000fd8 <LBB40_59>:
     507:	b7 01 00 00 c0 00 00 00	r1 = 192
     508:	bf 93 00 00 00 00 00 00	r3 = r9
     509:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     510:	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r3
     511:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     512:	07 01 00 00 f8 ff ff ff	r1 += -8
     513:	b7 02 00 00 08 00 00 00	r2 = 8
     514:	85 00 00 00 71 00 00 00	call 113
     515:	b7 01 00 00 b6 00 00 00	r1 = 182
     516:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     517:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     518:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     519:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     520:	b7 02 00 00 02 00 00 00	r2 = 2
     521:	bf 93 00 00 00 00 00 00	r3 = r9
     522:	85 00 00 00 71 00 00 00	call 113
     523:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     524:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     525:	bf 71 00 00 00 00 00 00	r1 = r7
     526:	07 01 00 00 64 00 00 00	r1 += 100
     527:	b7 02 00 00 06 00 00 00	r2 = 6
     528:	bf 63 00 00 00 00 00 00	r3 = r6
     529:	85 00 00 00 04 00 00 00	call 4
     530:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     531:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	b7 02 00 00 08 00 00 00	r2 = 8
     533:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     534:	85 00 00 00 71 00 00 00	call 113
     535:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     536:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     537:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     538:	b7 02 00 00 02 00 00 00	r2 = 2
     539:	bf 93 00 00 00 00 00 00	r3 = r9
     540:	85 00 00 00 71 00 00 00	call 113
     541:	b7 01 00 00 b4 00 00 00	r1 = 180
     542:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
     543:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     544:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     547:	b7 02 00 00 02 00 00 00	r2 = 2
     548:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     549:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     550:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     551:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB40_61>
     552:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001148 <LBB40_61>:
;     return head + network_header;
     553:	57 09 00 00 ff ff 00 00	r9 &= 65535
     554:	0f 96 00 00 00 00 00 00	r6 += r9
     555:	bf a1 00 00 00 00 00 00	r1 = r10
     556:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     557:	b7 02 00 00 01 00 00 00	r2 = 1
     558:	bf 63 00 00 00 00 00 00	r3 = r6
     559:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     560:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     561:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     562:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB40_66>
     563:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB40_92>
     564:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     565:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     566:	b7 01 00 00 c0 00 00 00	r1 = 192
     567:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     568:	bf 93 00 00 00 00 00 00	r3 = r9
     569:	0f 13 00 00 00 00 00 00	r3 += r1
     570:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     572:	b7 02 00 00 08 00 00 00	r2 = 8
     573:	85 00 00 00 71 00 00 00	call 113
     574:	b7 01 00 00 b6 00 00 00	r1 = 182
     575:	bf 93 00 00 00 00 00 00	r3 = r9
     576:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     577:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     578:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     579:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     580:	b7 02 00 00 02 00 00 00	r2 = 2
     581:	85 00 00 00 71 00 00 00	call 113
     582:	b7 01 00 00 b4 00 00 00	r1 = 180
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     585:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     586:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     587:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     588:	b7 02 00 00 02 00 00 00	r2 = 2
     589:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     590:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     591:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     592:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB40_65>
     593:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001290 <LBB40_65>:
;     return head + network_header;
     594:	57 09 00 00 ff ff 00 00	r9 &= 65535
     595:	0f 96 00 00 00 00 00 00	r6 += r9
     596:	b7 01 00 00 0c 00 00 00	r1 = 12
     597:	bf 63 00 00 00 00 00 00	r3 = r6
     598:	0f 13 00 00 00 00 00 00	r3 += r1
     599:	bf a1 00 00 00 00 00 00	r1 = r10
     600:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     601:	b7 02 00 00 04 00 00 00	r2 = 4
     602:	85 00 00 00 71 00 00 00	call 113
     603:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     604:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     605:	b7 01 00 00 10 00 00 00	r1 = 16
     606:	bf 63 00 00 00 00 00 00	r3 = r6
     607:	0f 13 00 00 00 00 00 00	r3 += r1
     608:	bf a1 00 00 00 00 00 00	r1 = r10
     609:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     610:	b7 02 00 00 04 00 00 00	r2 = 4
     611:	85 00 00 00 71 00 00 00	call 113
     612:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     613:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     614:	b7 01 00 00 02 00 00 00	r1 = 2
     615:	bf 63 00 00 00 00 00 00	r3 = r6
     616:	0f 13 00 00 00 00 00 00	r3 += r1
     617:	bf a1 00 00 00 00 00 00	r1 = r10
     618:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     619:	b7 02 00 00 02 00 00 00	r2 = 2
     620:	85 00 00 00 71 00 00 00	call 113
     621:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     622:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     623:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     624:	b7 01 00 00 09 00 00 00	r1 = 9
     625:	05 00 38 00 00 00 00 00	goto +56 <LBB40_69>

0000000000001390 <LBB40_66>:
     626:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     627:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     628:	b7 01 00 00 c0 00 00 00	r1 = 192
     629:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     630:	bf 93 00 00 00 00 00 00	r3 = r9
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     634:	b7 02 00 00 08 00 00 00	r2 = 8
     635:	85 00 00 00 71 00 00 00	call 113
     636:	b7 01 00 00 b6 00 00 00	r1 = 182
     637:	bf 93 00 00 00 00 00 00	r3 = r9
     638:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     639:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     640:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     641:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     642:	b7 02 00 00 02 00 00 00	r2 = 2
     643:	85 00 00 00 71 00 00 00	call 113
     644:	b7 01 00 00 b4 00 00 00	r1 = 180
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     647:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     648:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     649:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     650:	b7 02 00 00 02 00 00 00	r2 = 2
     651:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     652:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     653:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     654:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB40_68>
     655:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001480 <LBB40_68>:
;     return head + network_header;
     656:	57 09 00 00 ff ff 00 00	r9 &= 65535
     657:	0f 96 00 00 00 00 00 00	r6 += r9
     658:	b7 01 00 00 08 00 00 00	r1 = 8
     659:	bf 63 00 00 00 00 00 00	r3 = r6
     660:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
     661:	bf 71 00 00 00 00 00 00	r1 = r7
     662:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     663:	b7 02 00 00 10 00 00 00	r2 = 16
     664:	85 00 00 00 04 00 00 00	call 4
     665:	b7 01 00 00 18 00 00 00	r1 = 24
     666:	bf 63 00 00 00 00 00 00	r3 = r6
     667:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     668:	bf 71 00 00 00 00 00 00	r1 = r7
     669:	07 01 00 00 80 00 00 00	r1 += 128
     670:	b7 02 00 00 10 00 00 00	r2 = 16
     671:	85 00 00 00 04 00 00 00	call 4
     672:	b7 01 00 00 04 00 00 00	r1 = 4
     673:	bf 63 00 00 00 00 00 00	r3 = r6
     674:	0f 13 00 00 00 00 00 00	r3 += r1
     675:	bf a1 00 00 00 00 00 00	r1 = r10
     676:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     677:	b7 02 00 00 02 00 00 00	r2 = 2
     678:	85 00 00 00 71 00 00 00	call 113
     679:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     680:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     681:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000001550 <LBB40_69>:
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
     684:	bf a1 00 00 00 00 00 00	r1 = r10
     685:	07 01 00 00 f8 ff ff ff	r1 += -8
     686:	b7 02 00 00 01 00 00 00	r2 = 1
     687:	85 00 00 00 71 00 00 00	call 113
     688:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     689:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     690:	bf a1 00 00 00 00 00 00	r1 = r10
     691:	07 01 00 00 f8 ff ff ff	r1 += -8
     692:	b7 02 00 00 01 00 00 00	r2 = 1
     693:	bf 63 00 00 00 00 00 00	r3 = r6
     694:	85 00 00 00 04 00 00 00	call 4
     695:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     696:	57 01 00 00 f0 00 00 00	r1 &= 240
     697:	77 01 00 00 04 00 00 00	r1 >>= 4
     698:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     699:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     700:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB40_72>
     701:	15 01 53 00 01 00 00 00	if r1 == 1 goto +83 <LBB40_84>
     702:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB40_74>
     703:	05 00 b9 fe 00 00 00 00	goto -327 <LBB40_92>

0000000000001600 <LBB40_74>:
     704:	b7 01 00 00 c0 00 00 00	r1 = 192
     705:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     706:	bf 93 00 00 00 00 00 00	r3 = r9
     707:	0f 13 00 00 00 00 00 00	r3 += r1
     708:	bf a1 00 00 00 00 00 00	r1 = r10
     709:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     710:	b7 02 00 00 08 00 00 00	r2 = 8
     711:	85 00 00 00 71 00 00 00	call 113
     712:	b7 01 00 00 b6 00 00 00	r1 = 182
     713:	bf 93 00 00 00 00 00 00	r3 = r9
     714:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     715:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     716:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     717:	bf a1 00 00 00 00 00 00	r1 = r10
     718:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     719:	b7 02 00 00 02 00 00 00	r2 = 2
     720:	85 00 00 00 71 00 00 00	call 113
     721:	b7 01 00 00 b4 00 00 00	r1 = 180
     722:	0f 19 00 00 00 00 00 00	r9 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     723:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     726:	b7 02 00 00 02 00 00 00	r2 = 2
     727:	bf 93 00 00 00 00 00 00	r3 = r9
     728:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     729:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     730:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     731:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB40_76>
     732:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000016e8 <LBB40_76>:
;     return head + network_header;
     733:	57 06 00 00 ff ff 00 00	r6 &= 65535
     734:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
     735:	0f 61 00 00 00 00 00 00	r1 += r6
     736:	bf 16 00 00 00 00 00 00	r6 = r1
     737:	bf a1 00 00 00 00 00 00	r1 = r10
     738:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     739:	b7 02 00 00 01 00 00 00	r2 = 1
     740:	bf 63 00 00 00 00 00 00	r3 = r6
     741:	85 00 00 00 04 00 00 00	call 4
     742:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     743:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     744:	57 02 00 00 f0 00 00 00	r2 &= 240
     745:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB40_78>
     746:	bf a1 00 00 00 00 00 00	r1 = r10
     747:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     748:	b7 02 00 00 01 00 00 00	r2 = 1
     749:	bf 63 00 00 00 00 00 00	r3 = r6
     750:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     751:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     752:	67 01 00 00 02 00 00 00	r1 <<= 2
     753:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001790 <LBB40_78>:
;     return l3_header + transport_size;
     754:	0f 16 00 00 00 00 00 00	r6 += r1
     755:	b7 01 00 00 00 00 00 00	r1 = 0
     756:	bf 63 00 00 00 00 00 00	r3 = r6
     757:	0f 13 00 00 00 00 00 00	r3 += r1
     758:	bf a1 00 00 00 00 00 00	r1 = r10
     759:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     760:	b7 02 00 00 02 00 00 00	r2 = 2
     761:	85 00 00 00 71 00 00 00	call 113
     762:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     763:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     764:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     765:	b7 01 00 00 02 00 00 00	r1 = 2
     766:	bf 63 00 00 00 00 00 00	r3 = r6
     767:	0f 13 00 00 00 00 00 00	r3 += r1
     768:	bf a1 00 00 00 00 00 00	r1 = r10
     769:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     770:	b7 02 00 00 02 00 00 00	r2 = 2
     771:	85 00 00 00 71 00 00 00	call 113
     772:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     773:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     774:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     775:	07 06 00 00 0c 00 00 00	r6 += 12
     776:	bf 71 00 00 00 00 00 00	r1 = r7
     777:	07 01 00 00 9c 00 00 00	r1 += 156
     778:	b7 02 00 00 02 00 00 00	r2 = 2
     779:	bf 63 00 00 00 00 00 00	r3 = r6
     780:	85 00 00 00 04 00 00 00	call 4
     781:	05 00 8a 00 00 00 00 00	goto +138 <LBB40_89>

0000000000001870 <LBB40_72>:
;     if (l4_proto == IPPROTO_TCP) {
     782:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB40_79>
     783:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB40_84>
     784:	05 00 68 fe 00 00 00 00	goto -408 <LBB40_92>

0000000000001888 <LBB40_84>:
     785:	b7 01 00 00 c0 00 00 00	r1 = 192
     786:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     787:	bf 63 00 00 00 00 00 00	r3 = r6
     788:	0f 13 00 00 00 00 00 00	r3 += r1
     789:	bf a1 00 00 00 00 00 00	r1 = r10
     790:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     791:	b7 02 00 00 08 00 00 00	r2 = 8
     792:	85 00 00 00 71 00 00 00	call 113
     793:	b7 01 00 00 b6 00 00 00	r1 = 182
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     796:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     797:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     798:	bf a1 00 00 00 00 00 00	r1 = r10
     799:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     800:	b7 02 00 00 02 00 00 00	r2 = 2
     801:	85 00 00 00 71 00 00 00	call 113
     802:	b7 01 00 00 b4 00 00 00	r1 = 180
     803:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     804:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     805:	bf a1 00 00 00 00 00 00	r1 = r10
     806:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     807:	b7 02 00 00 02 00 00 00	r2 = 2
     808:	bf 63 00 00 00 00 00 00	r3 = r6
     809:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     810:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     811:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     812:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB40_86>
     813:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001970 <LBB40_86>:
;     return head + network_header;
     814:	57 09 00 00 ff ff 00 00	r9 &= 65535
     815:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     816:	0f 96 00 00 00 00 00 00	r6 += r9
     817:	bf a1 00 00 00 00 00 00	r1 = r10
     818:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     819:	b7 02 00 00 01 00 00 00	r2 = 1
     820:	bf 63 00 00 00 00 00 00	r3 = r6
     821:	85 00 00 00 04 00 00 00	call 4
     822:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     823:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     824:	57 02 00 00 f0 00 00 00	r2 &= 240
     825:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB40_88>
     826:	bf a1 00 00 00 00 00 00	r1 = r10
     827:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     828:	b7 02 00 00 01 00 00 00	r2 = 1
     829:	bf 63 00 00 00 00 00 00	r3 = r6
     830:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     831:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     832:	67 01 00 00 02 00 00 00	r1 <<= 2
     833:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a10 <LBB40_88>:
;     return l3_header + transport_size;
     834:	0f 16 00 00 00 00 00 00	r6 += r1
     835:	bf a9 00 00 00 00 00 00	r9 = r10
     836:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     837:	bf 91 00 00 00 00 00 00	r1 = r9
     838:	b7 02 00 00 08 00 00 00	r2 = 8
     839:	bf 63 00 00 00 00 00 00	r3 = r6
     840:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     841:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     842:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     843:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     844:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     845:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     846:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     847:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     848:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     849:	05 00 46 00 00 00 00 00	goto +70 <LBB40_89>

0000000000001a90 <LBB40_79>:
     850:	b7 01 00 00 c0 00 00 00	r1 = 192
     851:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     852:	bf 63 00 00 00 00 00 00	r3 = r6
     853:	0f 13 00 00 00 00 00 00	r3 += r1
     854:	bf a1 00 00 00 00 00 00	r1 = r10
     855:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     856:	b7 02 00 00 08 00 00 00	r2 = 8
     857:	85 00 00 00 71 00 00 00	call 113
     858:	b7 01 00 00 b6 00 00 00	r1 = 182
     859:	bf 63 00 00 00 00 00 00	r3 = r6
     860:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     861:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     862:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     863:	bf a1 00 00 00 00 00 00	r1 = r10
     864:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     865:	b7 02 00 00 02 00 00 00	r2 = 2
     866:	85 00 00 00 71 00 00 00	call 113
     867:	b7 01 00 00 b4 00 00 00	r1 = 180
     868:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     869:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     870:	bf a1 00 00 00 00 00 00	r1 = r10
     871:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     872:	b7 02 00 00 02 00 00 00	r2 = 2
     873:	bf 63 00 00 00 00 00 00	r3 = r6
     874:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     875:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     876:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     877:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB40_81>
     878:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001b78 <LBB40_81>:
;     return head + network_header;
     879:	57 09 00 00 ff ff 00 00	r9 &= 65535
     880:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     881:	0f 96 00 00 00 00 00 00	r6 += r9
     882:	bf a1 00 00 00 00 00 00	r1 = r10
     883:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     884:	b7 02 00 00 01 00 00 00	r2 = 1
     885:	bf 63 00 00 00 00 00 00	r3 = r6
     886:	85 00 00 00 04 00 00 00	call 4
     887:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     888:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     889:	57 02 00 00 f0 00 00 00	r2 &= 240
     890:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB40_83>
     891:	bf a1 00 00 00 00 00 00	r1 = r10
     892:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     893:	b7 02 00 00 01 00 00 00	r2 = 1
     894:	bf 63 00 00 00 00 00 00	r3 = r6
     895:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     896:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     897:	67 01 00 00 02 00 00 00	r1 <<= 2
     898:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c18 <LBB40_83>:
;     return l3_header + transport_size;
     899:	0f 16 00 00 00 00 00 00	r6 += r1
     900:	b7 01 00 00 00 00 00 00	r1 = 0
     901:	bf 63 00 00 00 00 00 00	r3 = r6
     902:	0f 13 00 00 00 00 00 00	r3 += r1
     903:	bf a1 00 00 00 00 00 00	r1 = r10
     904:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     905:	b7 02 00 00 02 00 00 00	r2 = 2
     906:	85 00 00 00 71 00 00 00	call 113
     907:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     908:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     909:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     910:	b7 01 00 00 02 00 00 00	r1 = 2
     911:	0f 16 00 00 00 00 00 00	r6 += r1
     912:	bf a1 00 00 00 00 00 00	r1 = r10
     913:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     914:	b7 02 00 00 02 00 00 00	r2 = 2
     915:	bf 63 00 00 00 00 00 00	r3 = r6
     916:	85 00 00 00 71 00 00 00	call 113
     917:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     918:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     919:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001cc0 <LBB40_89>:
     920:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
;     return cfg->callstack == 0;
     921:	71 81 11 00 00 00 00 00	r1 = *(u8 *)(r8 + 17)
;     if (!filter_callstack(cfg))
     922:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB40_91>
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
     923:	bf 61 00 00 00 00 00 00	r1 = r6
     924:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     926:	b7 03 00 00 00 00 00 00	r3 = 0
     927:	85 00 00 00 1b 00 00 00	call 27
     928:	63 07 30 00 00 00 00 00	*(u32 *)(r7 + 48) = r0

0000000000001d08 <LBB40_91>:
     929:	b7 01 00 00 70 00 00 00	r1 = 112
;     for (j = 10; j < 64; j += 10) CPY(j);
     930:	73 17 0f 00 00 00 00 00	*(u8 *)(r7 + 15) = r1
     931:	b7 01 00 00 69 00 00 00	r1 = 105
     932:	73 17 0e 00 00 00 00 00	*(u8 *)(r7 + 14) = r1
     933:	b7 01 00 00 64 00 00 00	r1 = 100
     934:	73 17 0c 00 00 00 00 00	*(u8 *)(r7 + 12) = r1
     935:	b7 01 00 00 61 00 00 00	r1 = 97
     936:	73 17 0a 00 00 00 00 00	*(u8 *)(r7 + 10) = r1
     937:	b7 01 00 00 77 00 00 00	r1 = 119
     938:	73 17 09 00 00 00 00 00	*(u8 *)(r7 + 9) = r1
     939:	b7 01 00 00 6f 00 00 00	r1 = 111
     940:	73 17 07 00 00 00 00 00	*(u8 *)(r7 + 7) = r1
     941:	b7 01 00 00 66 00 00 00	r1 = 102
     942:	73 17 06 00 00 00 00 00	*(u8 *)(r7 + 6) = r1
     943:	73 17 04 00 00 00 00 00	*(u8 *)(r7 + 4) = r1
     944:	b7 01 00 00 6e 00 00 00	r1 = 110
     945:	73 17 03 00 00 00 00 00	*(u8 *)(r7 + 3) = r1
     946:	b7 01 00 00 5f 00 00 00	r1 = 95
     947:	73 17 0d 00 00 00 00 00	*(u8 *)(r7 + 13) = r1
     948:	73 17 05 00 00 00 00 00	*(u8 *)(r7 + 5) = r1
     949:	73 17 02 00 00 00 00 00	*(u8 *)(r7 + 2) = r1
     950:	b7 01 00 00 72 00 00 00	r1 = 114
     951:	73 17 0b 00 00 00 00 00	*(u8 *)(r7 + 11) = r1
     952:	73 17 08 00 00 00 00 00	*(u8 *)(r7 + 8) = r1
     953:	73 17 01 00 00 00 00 00	*(u8 *)(r7 + 1) = r1
     954:	b7 01 00 00 62 00 00 00	r1 = 98
     955:	73 17 00 00 00 00 00 00	*(u8 *)(r7 + 0) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     956:	bf 61 00 00 00 00 00 00	r1 = r6
     957:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     959:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     961:	bf 74 00 00 00 00 00 00	r4 = r7
     962:	b7 05 00 00 e0 00 00 00	r5 = 224
     963:	85 00 00 00 19 00 00 00	call 25
     964:	05 00 b4 fd 00 00 00 00	goto -588 <LBB40_92>

Disassembly of section kprobe/br_nf_forward_finish:

0000000000000000 <k_br_nf_fwd_fin>:
; int k_br_nf_fwd_fin(struct pt_regs *ctx) {
       0:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM3(ctx);
       1:	79 11 60 00 00 00 00 00	r1 = *(u64 *)(r1 + 96)
       2:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       3:	b7 06 00 00 00 00 00 00	r6 = 0
;     GET_CFG();
       4:	63 6a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r6
       5:	bf a2 00 00 00 00 00 00	r2 = r10
       6:	07 02 00 00 e4 ff ff ff	r2 += -28
;     GET_CFG();
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	85 00 00 00 01 00 00 00	call 1
      10:	bf 08 00 00 00 00 00 00	r8 = r0
      11:	15 08 6d 01 00 00 00 00	if r8 == 0 goto +365 <LBB41_92>
      12:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
      13:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      14:	63 18 08 00 00 00 00 00	*(u32 *)(r8 + 8) = r1
;     u32 ev_buff_id = 0;
      15:	63 6a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r6
      16:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      17:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      18:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      20:	85 00 00 00 01 00 00 00	call 1
      21:	bf 07 00 00 00 00 00 00	r7 = r0
;     if (!ev) return NULL;
      22:	55 07 01 00 00 00 00 00	if r7 != 0 goto +1 <LBB41_3>
      23:	05 00 61 01 00 00 00 00	goto +353 <LBB41_92>

00000000000000c0 <LBB41_3>:
      24:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      25:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      26:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      27:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      28:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      29:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      30:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      31:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      32:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      33:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      34:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      35:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      36:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      37:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      38:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      39:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      40:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      41:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      42:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      43:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      44:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      45:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      46:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      47:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      48:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      49:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      50:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      51:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      52:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      53:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      54:	61 81 04 00 00 00 00 00	r1 = *(u32 *)(r8 + 4)
      55:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB41_5>
      56:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      57:	5d 01 3f 01 00 00 00 00	if r1 != r0 goto +319 <LBB41_92>

00000000000001d0 <LBB41_5>:
      58:	b7 01 00 00 10 00 00 00	r1 = 16
      59:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
      60:	bf 93 00 00 00 00 00 00	r3 = r9
      61:	0f 13 00 00 00 00 00 00	r3 += r1
      62:	bf a6 00 00 00 00 00 00	r6 = r10
      63:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      64:	bf 61 00 00 00 00 00 00	r1 = r6
      65:	b7 02 00 00 08 00 00 00	r2 = 8
      66:	85 00 00 00 71 00 00 00	call 113
      67:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      68:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      69:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      70:	bf 61 00 00 00 00 00 00	r1 = r6
      71:	b7 02 00 00 08 00 00 00	r2 = 8
      72:	85 00 00 00 71 00 00 00	call 113
      73:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      74:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      75:	0f 13 00 00 00 00 00 00	r3 += r1
      76:	bf a1 00 00 00 00 00 00	r1 = r10
      77:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      78:	b7 02 00 00 04 00 00 00	r2 = 4
      79:	85 00 00 00 71 00 00 00	call 113
      80:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      81:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB41_8>
      82:	b7 01 00 00 18 00 00 00	r1 = 24
      83:	bf 93 00 00 00 00 00 00	r3 = r9
      84:	0f 13 00 00 00 00 00 00	r3 += r1
      85:	bf a1 00 00 00 00 00 00	r1 = r10
      86:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
      87:	b7 02 00 00 08 00 00 00	r2 = 8
      88:	85 00 00 00 71 00 00 00	call 113
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
      90:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB41_11>
      91:	b7 01 00 00 30 00 00 00	r1 = 48
      92:	0f 13 00 00 00 00 00 00	r3 += r1
      93:	bf a1 00 00 00 00 00 00	r1 = r10
      94:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      95:	b7 02 00 00 08 00 00 00	r2 = 8
      96:	85 00 00 00 71 00 00 00	call 113
      97:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      98:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     102:	b7 02 00 00 04 00 00 00	r2 = 4
     103:	85 00 00 00 71 00 00 00	call 113
     104:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000348 <LBB41_8>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     105:	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0)
     106:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB41_11>
     107:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB41_11>
     108:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB41_92>

0000000000000368 <LBB41_11>:
;     u16 icmpid = cfg->icmpid;
     109:	69 81 0e 00 00 00 00 00	r1 = *(u16 *)(r8 + 14)
;     u16 port = cfg->port;
     110:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     111:	69 81 0c 00 00 00 00 00	r1 = *(u16 *)(r8 + 12)
;     u8 proto = cfg->proto;
     112:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     113:	71 81 12 00 00 00 00 00	r1 = *(u8 *)(r8 + 18)
;     u32 addr = cfg->ip;
     114:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     115:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
     116:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     117:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     118:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     119:	b7 01 00 00 c0 00 00 00	r1 = 192
     120:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     121:	bf 93 00 00 00 00 00 00	r3 = r9
     122:	0f 13 00 00 00 00 00 00	r3 += r1
     123:	bf a1 00 00 00 00 00 00	r1 = r10
     124:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     125:	b7 02 00 00 08 00 00 00	r2 = 8
     126:	85 00 00 00 71 00 00 00	call 113
     127:	b7 01 00 00 b6 00 00 00	r1 = 182
     128:	bf 93 00 00 00 00 00 00	r3 = r9
     129:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     130:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     131:	bf a1 00 00 00 00 00 00	r1 = r10
     132:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     133:	b7 02 00 00 02 00 00 00	r2 = 2
     134:	85 00 00 00 71 00 00 00	call 113
     135:	b7 01 00 00 b4 00 00 00	r1 = 180
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     138:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     139:	bf a1 00 00 00 00 00 00	r1 = r10
     140:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     141:	b7 02 00 00 02 00 00 00	r2 = 2
     142:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     143:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     144:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     145:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB41_13>
     146:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000498 <LBB41_13>:
;     return head + network_header;
     147:	57 09 00 00 ff ff 00 00	r9 &= 65535
     148:	0f 96 00 00 00 00 00 00	r6 += r9
     149:	bf a1 00 00 00 00 00 00	r1 = r10
     150:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     151:	b7 02 00 00 01 00 00 00	r2 = 1
     152:	bf 63 00 00 00 00 00 00	r3 = r6
     153:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     154:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     155:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     156:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB41_20>
     157:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB41_92>
;         if (addr != 0) {
     158:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     159:	bf 19 00 00 00 00 00 00	r9 = r1
     160:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB41_18>
     161:	b7 01 00 00 0c 00 00 00	r1 = 12
     162:	bf 63 00 00 00 00 00 00	r3 = r6
     163:	0f 13 00 00 00 00 00 00	r3 += r1
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     166:	b7 02 00 00 04 00 00 00	r2 = 4
     167:	85 00 00 00 71 00 00 00	call 113
     168:	b7 01 00 00 10 00 00 00	r1 = 16
     169:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     170:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     171:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     172:	bf a1 00 00 00 00 00 00	r1 = r10
     173:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     174:	b7 02 00 00 04 00 00 00	r2 = 4
     175:	bf 63 00 00 00 00 00 00	r3 = r6
     176:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     177:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     178:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB41_54>
     179:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     180:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     181:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB41_92>
     182:	05 00 da 00 00 00 00 00	goto +218 <LBB41_54>

00000000000005b8 <LBB41_20>:
     183:	b7 01 00 00 06 00 00 00	r1 = 6
     184:	0f 16 00 00 00 00 00 00	r6 += r1
     185:	bf a1 00 00 00 00 00 00	r1 = r10
     186:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     187:	b7 02 00 00 01 00 00 00	r2 = 1
     188:	bf 63 00 00 00 00 00 00	r3 = r6
     189:	85 00 00 00 04 00 00 00	call 4
     190:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     191:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     192:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     193:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB41_22>
     194:	b7 04 00 00 80 00 00 00	r4 = 128
     195:	b7 03 00 00 81 00 00 00	r3 = 129
     196:	b7 01 00 00 3a 00 00 00	r1 = 58
     197:	05 00 0d 00 00 00 00 00	goto +13 <LBB41_22>

0000000000000630 <LBB41_18>:
     198:	b7 01 00 00 09 00 00 00	r1 = 9
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     208:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB41_22>
     209:	b7 04 00 00 08 00 00 00	r4 = 8
     210:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000698 <LBB41_22>:
;     if (proto != 0 && proto != l4_proto)
     211:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     212:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB41_24>
     213:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB41_92>

00000000000006b0 <LBB41_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     214:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB41_27>
     215:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB41_29>
     216:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB41_35>
     217:	05 00 9f 00 00 00 00 00	goto +159 <LBB41_92>

00000000000006d0 <LBB41_35>:
     218:	b7 01 00 00 c0 00 00 00	r1 = 192
     219:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     220:	bf 63 00 00 00 00 00 00	r3 = r6
     221:	0f 13 00 00 00 00 00 00	r3 += r1
     222:	bf a1 00 00 00 00 00 00	r1 = r10
     223:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     224:	b7 02 00 00 08 00 00 00	r2 = 8
     225:	85 00 00 00 71 00 00 00	call 113
     226:	b7 01 00 00 b6 00 00 00	r1 = 182
     227:	bf 63 00 00 00 00 00 00	r3 = r6
     228:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     229:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     230:	bf a1 00 00 00 00 00 00	r1 = r10
     231:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     232:	b7 02 00 00 02 00 00 00	r2 = 2
     233:	85 00 00 00 71 00 00 00	call 113
     234:	b7 01 00 00 b4 00 00 00	r1 = 180
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     237:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     238:	bf a1 00 00 00 00 00 00	r1 = r10
     239:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     240:	b7 02 00 00 02 00 00 00	r2 = 2
     241:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     242:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     243:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     244:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB41_37>
     245:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000007b0 <LBB41_37>:
;     return head + network_header;
     246:	57 06 00 00 ff ff 00 00	r6 &= 65535
     247:	0f 69 00 00 00 00 00 00	r9 += r6
     248:	bf a1 00 00 00 00 00 00	r1 = r10
     249:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     250:	b7 02 00 00 01 00 00 00	r2 = 1
     251:	bf 93 00 00 00 00 00 00	r3 = r9
     252:	85 00 00 00 04 00 00 00	call 4
     253:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     254:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     255:	57 02 00 00 f0 00 00 00	r2 &= 240
     256:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB41_39>
     257:	bf a1 00 00 00 00 00 00	r1 = r10
     258:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     259:	b7 02 00 00 01 00 00 00	r2 = 1
     260:	bf 93 00 00 00 00 00 00	r3 = r9
     261:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     262:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     263:	67 01 00 00 02 00 00 00	r1 <<= 2
     264:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000848 <LBB41_39>:
;     return l3_header + transport_size;
     265:	0f 19 00 00 00 00 00 00	r9 += r1
     266:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9

0000000000000858 <LBB41_40>:
     267:	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 72)
;     if (port != 0) {
     268:	bf 92 00 00 00 00 00 00	r2 = r9
     269:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB41_45>
;         if (l4_proto == IPPROTO_TCP) {
     270:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     271:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB41_52>
     272:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB41_45>
     273:	b7 01 00 00 00 00 00 00	r1 = 0
     274:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     275:	bf 63 00 00 00 00 00 00	r3 = r6
     276:	0f 13 00 00 00 00 00 00	r3 += r1
     277:	bf a1 00 00 00 00 00 00	r1 = r10
     278:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     279:	b7 02 00 00 02 00 00 00	r2 = 2
     280:	85 00 00 00 71 00 00 00	call 113
     281:	b7 01 00 00 02 00 00 00	r1 = 2
     282:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     283:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     284:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     285:	bf a1 00 00 00 00 00 00	r1 = r10
     286:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     287:	b7 02 00 00 02 00 00 00	r2 = 2
     288:	bf 63 00 00 00 00 00 00	r3 = r6
     289:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     290:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     291:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     292:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB41_54>
     293:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     294:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB41_92>
     295:	05 00 69 00 00 00 00 00	goto +105 <LBB41_54>

0000000000000940 <LBB41_27>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     296:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB41_35>
     297:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB41_92>

0000000000000950 <LBB41_29>:
     298:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r4
     299:	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r3
     300:	b7 01 00 00 c0 00 00 00	r1 = 192
     301:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     302:	bf 63 00 00 00 00 00 00	r3 = r6
     303:	0f 13 00 00 00 00 00 00	r3 += r1
     304:	bf a1 00 00 00 00 00 00	r1 = r10
     305:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     306:	b7 02 00 00 08 00 00 00	r2 = 8
     307:	85 00 00 00 71 00 00 00	call 113
     308:	b7 01 00 00 b6 00 00 00	r1 = 182
     309:	bf 63 00 00 00 00 00 00	r3 = r6
     310:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     311:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     312:	bf a1 00 00 00 00 00 00	r1 = r10
     313:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     314:	b7 02 00 00 02 00 00 00	r2 = 2
     315:	85 00 00 00 71 00 00 00	call 113
     316:	b7 01 00 00 b4 00 00 00	r1 = 180
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     319:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     320:	bf a1 00 00 00 00 00 00	r1 = r10
     321:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     322:	b7 02 00 00 02 00 00 00	r2 = 2
     323:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     324:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     325:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     326:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB41_31>
     327:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000a40 <LBB41_31>:
;     return head + network_header;
     328:	57 06 00 00 ff ff 00 00	r6 &= 65535
     329:	0f 69 00 00 00 00 00 00	r9 += r6
     330:	bf a1 00 00 00 00 00 00	r1 = r10
     331:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     332:	b7 02 00 00 01 00 00 00	r2 = 1
     333:	bf 93 00 00 00 00 00 00	r3 = r9
     334:	85 00 00 00 04 00 00 00	call 4
     335:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     336:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     337:	57 02 00 00 f0 00 00 00	r2 &= 240
     338:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB41_33>
     339:	bf a1 00 00 00 00 00 00	r1 = r10
     340:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     341:	b7 02 00 00 01 00 00 00	r2 = 1
     342:	bf 93 00 00 00 00 00 00	r3 = r9
     343:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     344:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     345:	67 01 00 00 02 00 00 00	r1 <<= 2
     346:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000ad8 <LBB41_33>:
;     return l3_header + transport_size;
     347:	0f 19 00 00 00 00 00 00	r9 += r1
     348:	bf a6 00 00 00 00 00 00	r6 = r10
     349:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     350:	bf 61 00 00 00 00 00 00	r1 = r6
     351:	b7 02 00 00 08 00 00 00	r2 = 8
     352:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
     353:	bf 93 00 00 00 00 00 00	r3 = r9
     354:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     355:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     356:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     357:	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 88)
     358:	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 96)
     359:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB41_40>
     360:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     361:	07 02 00 00 e8 ff ff ff	r2 += -24
     362:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     363:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB41_40>
     364:	05 00 0c 00 00 00 00 00	goto +12 <LBB41_92>

0000000000000b68 <LBB41_45>:
;     if (proto != 0 && proto != l4_proto)
     365:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     366:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB41_54>
     367:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
;     if (proto != 0 && icmpid != 0) {
     368:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB41_54>
     369:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     370:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB41_54>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     371:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     372:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB41_50>
     373:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB41_54>

0000000000000bb0 <LBB41_50>:
;         if (icmpid != ev_icmpid)
     374:	57 01 00 00 ff ff 00 00	r1 &= 65535
     375:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
     376:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB41_54>

0000000000000bc8 <LBB41_92>:
;     return do_trace(ctx, skb, "br_nf_forward_finish");
     377:	b7 00 00 00 00 00 00 00	r0 = 0
     378:	95 00 00 00 00 00 00 00	exit

0000000000000bd8 <LBB41_52>:
     379:	b7 01 00 00 00 00 00 00	r1 = 0
     380:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     381:	bf 63 00 00 00 00 00 00	r3 = r6
     382:	0f 13 00 00 00 00 00 00	r3 += r1
     383:	bf a1 00 00 00 00 00 00	r1 = r10
     384:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     385:	b7 02 00 00 02 00 00 00	r2 = 2
     386:	85 00 00 00 71 00 00 00	call 113
     387:	b7 01 00 00 02 00 00 00	r1 = 2
     388:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     389:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     390:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     391:	bf a1 00 00 00 00 00 00	r1 = r10
     392:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     393:	b7 02 00 00 02 00 00 00	r2 = 2
     394:	bf 63 00 00 00 00 00 00	r3 = r6
     395:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     396:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     397:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     398:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB41_54>
     399:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     400:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB41_92>

0000000000000c88 <LBB41_54>:
;     event->flags |= SKBTRACER_EVENT_IF;
     401:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     402:	47 01 00 00 01 00 00 00	r1 |= 1
     403:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     404:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
;     ev->skb = (u64)skb;
     405:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     406:	85 00 00 00 05 00 00 00	call 5
     407:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     408:	b7 01 00 00 10 00 00 00	r1 = 16
     409:	bf 96 00 00 00 00 00 00	r6 = r9
     410:	0f 16 00 00 00 00 00 00	r6 += r1
     411:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     412:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     413:	b7 02 00 00 08 00 00 00	r2 = 8
     414:	bf 63 00 00 00 00 00 00	r3 = r6
     415:	85 00 00 00 71 00 00 00	call 113
     416:	b7 01 00 00 70 00 00 00	r1 = 112
     417:	bf 93 00 00 00 00 00 00	r3 = r9
     418:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     419:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     420:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     421:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     422:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     423:	b7 02 00 00 04 00 00 00	r2 = 4
     424:	85 00 00 00 71 00 00 00	call 113
     425:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     426:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     427:	85 00 00 00 08 00 00 00	call 8
     428:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     429:	85 00 00 00 0e 00 00 00	call 14
     430:	57 00 00 00 ff ff 00 00	r0 &= 65535
     431:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     432:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     433:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     434:	bf 91 00 00 00 00 00 00	r1 = r9
     435:	b7 02 00 00 08 00 00 00	r2 = 8
     436:	bf 63 00 00 00 00 00 00	r3 = r6
     437:	85 00 00 00 71 00 00 00	call 113
     438:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     439:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     440:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     441:	bf 91 00 00 00 00 00 00	r1 = r9
     442:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     443:	b7 02 00 00 08 00 00 00	r2 = 8
     444:	85 00 00 00 71 00 00 00	call 113
     445:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     446:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     447:	0f 13 00 00 00 00 00 00	r3 += r1
     448:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     449:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     450:	b7 02 00 00 04 00 00 00	r2 = 4
     451:	85 00 00 00 71 00 00 00	call 113
     452:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     453:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB41_57>
     454:	b7 01 00 00 18 00 00 00	r1 = 24
     455:	bf 93 00 00 00 00 00 00	r3 = r9
     456:	0f 13 00 00 00 00 00 00	r3 += r1
     457:	bf a1 00 00 00 00 00 00	r1 = r10
     458:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     459:	b7 02 00 00 08 00 00 00	r2 = 8
     460:	85 00 00 00 71 00 00 00	call 113
     461:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     462:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     463:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB41_57>
     464:	b7 01 00 00 30 00 00 00	r1 = 48
     465:	0f 13 00 00 00 00 00 00	r3 += r1
     466:	bf a1 00 00 00 00 00 00	r1 = r10
     467:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     468:	b7 02 00 00 08 00 00 00	r2 = 8
     469:	85 00 00 00 71 00 00 00	call 113
     470:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     471:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     472:	0f 13 00 00 00 00 00 00	r3 += r1
     473:	bf a1 00 00 00 00 00 00	r1 = r10
     474:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     475:	b7 02 00 00 04 00 00 00	r2 = 4
     476:	85 00 00 00 71 00 00 00	call 113
     477:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000ef0 <LBB41_57>:
;     pkt_info->netns = get_netns(skb);
     478:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     479:	b7 01 00 00 80 00 00 00	r1 = 128
     480:	bf 93 00 00 00 00 00 00	r3 = r9
     481:	0f 13 00 00 00 00 00 00	r3 += r1
     482:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     483:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     484:	bf a1 00 00 00 00 00 00	r1 = r10
     485:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     486:	b7 02 00 00 01 00 00 00	r2 = 1
     487:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     488:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     489:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     490:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     491:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     492:	b7 01 00 00 00 00 00 00	r1 = 0
     493:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     494:	0f 13 00 00 00 00 00 00	r3 += r1
;     pkt_info->ifname[0] = 0;
     495:	bf 71 00 00 00 00 00 00	r1 = r7
     496:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     497:	b7 02 00 00 10 00 00 00	r2 = 16
     498:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     499:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     500:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB41_59>
     501:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     502:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     503:	b7 01 00 00 69 00 00 00	r1 = 105
     504:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     505:	b7 01 00 00 6e 00 00 00	r1 = 110
     506:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000000fd8 <LBB41_59>:
     507:	b7 01 00 00 c0 00 00 00	r1 = 192
     508:	bf 93 00 00 00 00 00 00	r3 = r9
     509:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     510:	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r3
     511:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     512:	07 01 00 00 f8 ff ff ff	r1 += -8
     513:	b7 02 00 00 08 00 00 00	r2 = 8
     514:	85 00 00 00 71 00 00 00	call 113
     515:	b7 01 00 00 b6 00 00 00	r1 = 182
     516:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     517:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     518:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     519:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     520:	b7 02 00 00 02 00 00 00	r2 = 2
     521:	bf 93 00 00 00 00 00 00	r3 = r9
     522:	85 00 00 00 71 00 00 00	call 113
     523:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     524:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     525:	bf 71 00 00 00 00 00 00	r1 = r7
     526:	07 01 00 00 64 00 00 00	r1 += 100
     527:	b7 02 00 00 06 00 00 00	r2 = 6
     528:	bf 63 00 00 00 00 00 00	r3 = r6
     529:	85 00 00 00 04 00 00 00	call 4
     530:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     531:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	b7 02 00 00 08 00 00 00	r2 = 8
     533:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     534:	85 00 00 00 71 00 00 00	call 113
     535:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     536:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     537:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     538:	b7 02 00 00 02 00 00 00	r2 = 2
     539:	bf 93 00 00 00 00 00 00	r3 = r9
     540:	85 00 00 00 71 00 00 00	call 113
     541:	b7 01 00 00 b4 00 00 00	r1 = 180
     542:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
     543:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     544:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     547:	b7 02 00 00 02 00 00 00	r2 = 2
     548:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     549:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     550:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     551:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB41_61>
     552:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001148 <LBB41_61>:
;     return head + network_header;
     553:	57 09 00 00 ff ff 00 00	r9 &= 65535
     554:	0f 96 00 00 00 00 00 00	r6 += r9
     555:	bf a1 00 00 00 00 00 00	r1 = r10
     556:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     557:	b7 02 00 00 01 00 00 00	r2 = 1
     558:	bf 63 00 00 00 00 00 00	r3 = r6
     559:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     560:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     561:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     562:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB41_66>
     563:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB41_92>
     564:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     565:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     566:	b7 01 00 00 c0 00 00 00	r1 = 192
     567:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     568:	bf 93 00 00 00 00 00 00	r3 = r9
     569:	0f 13 00 00 00 00 00 00	r3 += r1
     570:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     572:	b7 02 00 00 08 00 00 00	r2 = 8
     573:	85 00 00 00 71 00 00 00	call 113
     574:	b7 01 00 00 b6 00 00 00	r1 = 182
     575:	bf 93 00 00 00 00 00 00	r3 = r9
     576:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     577:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     578:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     579:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     580:	b7 02 00 00 02 00 00 00	r2 = 2
     581:	85 00 00 00 71 00 00 00	call 113
     582:	b7 01 00 00 b4 00 00 00	r1 = 180
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     585:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     586:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     587:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     588:	b7 02 00 00 02 00 00 00	r2 = 2
     589:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     590:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     591:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     592:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB41_65>
     593:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001290 <LBB41_65>:
;     return head + network_header;
     594:	57 09 00 00 ff ff 00 00	r9 &= 65535
     595:	0f 96 00 00 00 00 00 00	r6 += r9
     596:	b7 01 00 00 0c 00 00 00	r1 = 12
     597:	bf 63 00 00 00 00 00 00	r3 = r6
     598:	0f 13 00 00 00 00 00 00	r3 += r1
     599:	bf a1 00 00 00 00 00 00	r1 = r10
     600:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     601:	b7 02 00 00 04 00 00 00	r2 = 4
     602:	85 00 00 00 71 00 00 00	call 113
     603:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     604:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     605:	b7 01 00 00 10 00 00 00	r1 = 16
     606:	bf 63 00 00 00 00 00 00	r3 = r6
     607:	0f 13 00 00 00 00 00 00	r3 += r1
     608:	bf a1 00 00 00 00 00 00	r1 = r10
     609:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     610:	b7 02 00 00 04 00 00 00	r2 = 4
     611:	85 00 00 00 71 00 00 00	call 113
     612:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     613:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     614:	b7 01 00 00 02 00 00 00	r1 = 2
     615:	bf 63 00 00 00 00 00 00	r3 = r6
     616:	0f 13 00 00 00 00 00 00	r3 += r1
     617:	bf a1 00 00 00 00 00 00	r1 = r10
     618:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     619:	b7 02 00 00 02 00 00 00	r2 = 2
     620:	85 00 00 00 71 00 00 00	call 113
     621:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     622:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     623:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     624:	b7 01 00 00 09 00 00 00	r1 = 9
     625:	05 00 38 00 00 00 00 00	goto +56 <LBB41_69>

0000000000001390 <LBB41_66>:
     626:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     627:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     628:	b7 01 00 00 c0 00 00 00	r1 = 192
     629:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     630:	bf 93 00 00 00 00 00 00	r3 = r9
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     634:	b7 02 00 00 08 00 00 00	r2 = 8
     635:	85 00 00 00 71 00 00 00	call 113
     636:	b7 01 00 00 b6 00 00 00	r1 = 182
     637:	bf 93 00 00 00 00 00 00	r3 = r9
     638:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     639:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     640:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     641:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     642:	b7 02 00 00 02 00 00 00	r2 = 2
     643:	85 00 00 00 71 00 00 00	call 113
     644:	b7 01 00 00 b4 00 00 00	r1 = 180
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     647:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     648:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     649:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     650:	b7 02 00 00 02 00 00 00	r2 = 2
     651:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     652:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     653:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     654:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB41_68>
     655:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001480 <LBB41_68>:
;     return head + network_header;
     656:	57 09 00 00 ff ff 00 00	r9 &= 65535
     657:	0f 96 00 00 00 00 00 00	r6 += r9
     658:	b7 01 00 00 08 00 00 00	r1 = 8
     659:	bf 63 00 00 00 00 00 00	r3 = r6
     660:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
     661:	bf 71 00 00 00 00 00 00	r1 = r7
     662:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     663:	b7 02 00 00 10 00 00 00	r2 = 16
     664:	85 00 00 00 04 00 00 00	call 4
     665:	b7 01 00 00 18 00 00 00	r1 = 24
     666:	bf 63 00 00 00 00 00 00	r3 = r6
     667:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     668:	bf 71 00 00 00 00 00 00	r1 = r7
     669:	07 01 00 00 80 00 00 00	r1 += 128
     670:	b7 02 00 00 10 00 00 00	r2 = 16
     671:	85 00 00 00 04 00 00 00	call 4
     672:	b7 01 00 00 04 00 00 00	r1 = 4
     673:	bf 63 00 00 00 00 00 00	r3 = r6
     674:	0f 13 00 00 00 00 00 00	r3 += r1
     675:	bf a1 00 00 00 00 00 00	r1 = r10
     676:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     677:	b7 02 00 00 02 00 00 00	r2 = 2
     678:	85 00 00 00 71 00 00 00	call 113
     679:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     680:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     681:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000001550 <LBB41_69>:
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
     684:	bf a1 00 00 00 00 00 00	r1 = r10
     685:	07 01 00 00 f8 ff ff ff	r1 += -8
     686:	b7 02 00 00 01 00 00 00	r2 = 1
     687:	85 00 00 00 71 00 00 00	call 113
     688:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     689:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     690:	bf a1 00 00 00 00 00 00	r1 = r10
     691:	07 01 00 00 f8 ff ff ff	r1 += -8
     692:	b7 02 00 00 01 00 00 00	r2 = 1
     693:	bf 63 00 00 00 00 00 00	r3 = r6
     694:	85 00 00 00 04 00 00 00	call 4
     695:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     696:	57 01 00 00 f0 00 00 00	r1 &= 240
     697:	77 01 00 00 04 00 00 00	r1 >>= 4
     698:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     699:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     700:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB41_72>
     701:	15 01 53 00 01 00 00 00	if r1 == 1 goto +83 <LBB41_84>
     702:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB41_74>
     703:	05 00 b9 fe 00 00 00 00	goto -327 <LBB41_92>

0000000000001600 <LBB41_74>:
     704:	b7 01 00 00 c0 00 00 00	r1 = 192
     705:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     706:	bf 93 00 00 00 00 00 00	r3 = r9
     707:	0f 13 00 00 00 00 00 00	r3 += r1
     708:	bf a1 00 00 00 00 00 00	r1 = r10
     709:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     710:	b7 02 00 00 08 00 00 00	r2 = 8
     711:	85 00 00 00 71 00 00 00	call 113
     712:	b7 01 00 00 b6 00 00 00	r1 = 182
     713:	bf 93 00 00 00 00 00 00	r3 = r9
     714:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     715:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     716:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     717:	bf a1 00 00 00 00 00 00	r1 = r10
     718:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     719:	b7 02 00 00 02 00 00 00	r2 = 2
     720:	85 00 00 00 71 00 00 00	call 113
     721:	b7 01 00 00 b4 00 00 00	r1 = 180
     722:	0f 19 00 00 00 00 00 00	r9 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     723:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     726:	b7 02 00 00 02 00 00 00	r2 = 2
     727:	bf 93 00 00 00 00 00 00	r3 = r9
     728:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     729:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     730:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     731:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB41_76>
     732:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000016e8 <LBB41_76>:
;     return head + network_header;
     733:	57 06 00 00 ff ff 00 00	r6 &= 65535
     734:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
     735:	0f 61 00 00 00 00 00 00	r1 += r6
     736:	bf 16 00 00 00 00 00 00	r6 = r1
     737:	bf a1 00 00 00 00 00 00	r1 = r10
     738:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     739:	b7 02 00 00 01 00 00 00	r2 = 1
     740:	bf 63 00 00 00 00 00 00	r3 = r6
     741:	85 00 00 00 04 00 00 00	call 4
     742:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     743:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     744:	57 02 00 00 f0 00 00 00	r2 &= 240
     745:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB41_78>
     746:	bf a1 00 00 00 00 00 00	r1 = r10
     747:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     748:	b7 02 00 00 01 00 00 00	r2 = 1
     749:	bf 63 00 00 00 00 00 00	r3 = r6
     750:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     751:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     752:	67 01 00 00 02 00 00 00	r1 <<= 2
     753:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001790 <LBB41_78>:
;     return l3_header + transport_size;
     754:	0f 16 00 00 00 00 00 00	r6 += r1
     755:	b7 01 00 00 00 00 00 00	r1 = 0
     756:	bf 63 00 00 00 00 00 00	r3 = r6
     757:	0f 13 00 00 00 00 00 00	r3 += r1
     758:	bf a1 00 00 00 00 00 00	r1 = r10
     759:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     760:	b7 02 00 00 02 00 00 00	r2 = 2
     761:	85 00 00 00 71 00 00 00	call 113
     762:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     763:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     764:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     765:	b7 01 00 00 02 00 00 00	r1 = 2
     766:	bf 63 00 00 00 00 00 00	r3 = r6
     767:	0f 13 00 00 00 00 00 00	r3 += r1
     768:	bf a1 00 00 00 00 00 00	r1 = r10
     769:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     770:	b7 02 00 00 02 00 00 00	r2 = 2
     771:	85 00 00 00 71 00 00 00	call 113
     772:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     773:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     774:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     775:	07 06 00 00 0c 00 00 00	r6 += 12
     776:	bf 71 00 00 00 00 00 00	r1 = r7
     777:	07 01 00 00 9c 00 00 00	r1 += 156
     778:	b7 02 00 00 02 00 00 00	r2 = 2
     779:	bf 63 00 00 00 00 00 00	r3 = r6
     780:	85 00 00 00 04 00 00 00	call 4
     781:	05 00 8a 00 00 00 00 00	goto +138 <LBB41_89>

0000000000001870 <LBB41_72>:
;     if (l4_proto == IPPROTO_TCP) {
     782:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB41_79>
     783:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB41_84>
     784:	05 00 68 fe 00 00 00 00	goto -408 <LBB41_92>

0000000000001888 <LBB41_84>:
     785:	b7 01 00 00 c0 00 00 00	r1 = 192
     786:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     787:	bf 63 00 00 00 00 00 00	r3 = r6
     788:	0f 13 00 00 00 00 00 00	r3 += r1
     789:	bf a1 00 00 00 00 00 00	r1 = r10
     790:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     791:	b7 02 00 00 08 00 00 00	r2 = 8
     792:	85 00 00 00 71 00 00 00	call 113
     793:	b7 01 00 00 b6 00 00 00	r1 = 182
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     796:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     797:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     798:	bf a1 00 00 00 00 00 00	r1 = r10
     799:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     800:	b7 02 00 00 02 00 00 00	r2 = 2
     801:	85 00 00 00 71 00 00 00	call 113
     802:	b7 01 00 00 b4 00 00 00	r1 = 180
     803:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     804:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     805:	bf a1 00 00 00 00 00 00	r1 = r10
     806:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     807:	b7 02 00 00 02 00 00 00	r2 = 2
     808:	bf 63 00 00 00 00 00 00	r3 = r6
     809:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     810:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     811:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     812:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB41_86>
     813:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001970 <LBB41_86>:
;     return head + network_header;
     814:	57 09 00 00 ff ff 00 00	r9 &= 65535
     815:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     816:	0f 96 00 00 00 00 00 00	r6 += r9
     817:	bf a1 00 00 00 00 00 00	r1 = r10
     818:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     819:	b7 02 00 00 01 00 00 00	r2 = 1
     820:	bf 63 00 00 00 00 00 00	r3 = r6
     821:	85 00 00 00 04 00 00 00	call 4
     822:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     823:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     824:	57 02 00 00 f0 00 00 00	r2 &= 240
     825:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB41_88>
     826:	bf a1 00 00 00 00 00 00	r1 = r10
     827:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     828:	b7 02 00 00 01 00 00 00	r2 = 1
     829:	bf 63 00 00 00 00 00 00	r3 = r6
     830:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     831:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     832:	67 01 00 00 02 00 00 00	r1 <<= 2
     833:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a10 <LBB41_88>:
;     return l3_header + transport_size;
     834:	0f 16 00 00 00 00 00 00	r6 += r1
     835:	bf a9 00 00 00 00 00 00	r9 = r10
     836:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     837:	bf 91 00 00 00 00 00 00	r1 = r9
     838:	b7 02 00 00 08 00 00 00	r2 = 8
     839:	bf 63 00 00 00 00 00 00	r3 = r6
     840:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     841:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     842:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     843:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     844:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     845:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     846:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     847:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     848:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     849:	05 00 46 00 00 00 00 00	goto +70 <LBB41_89>

0000000000001a90 <LBB41_79>:
     850:	b7 01 00 00 c0 00 00 00	r1 = 192
     851:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     852:	bf 63 00 00 00 00 00 00	r3 = r6
     853:	0f 13 00 00 00 00 00 00	r3 += r1
     854:	bf a1 00 00 00 00 00 00	r1 = r10
     855:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     856:	b7 02 00 00 08 00 00 00	r2 = 8
     857:	85 00 00 00 71 00 00 00	call 113
     858:	b7 01 00 00 b6 00 00 00	r1 = 182
     859:	bf 63 00 00 00 00 00 00	r3 = r6
     860:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     861:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     862:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     863:	bf a1 00 00 00 00 00 00	r1 = r10
     864:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     865:	b7 02 00 00 02 00 00 00	r2 = 2
     866:	85 00 00 00 71 00 00 00	call 113
     867:	b7 01 00 00 b4 00 00 00	r1 = 180
     868:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     869:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     870:	bf a1 00 00 00 00 00 00	r1 = r10
     871:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     872:	b7 02 00 00 02 00 00 00	r2 = 2
     873:	bf 63 00 00 00 00 00 00	r3 = r6
     874:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     875:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     876:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     877:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB41_81>
     878:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001b78 <LBB41_81>:
;     return head + network_header;
     879:	57 09 00 00 ff ff 00 00	r9 &= 65535
     880:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     881:	0f 96 00 00 00 00 00 00	r6 += r9
     882:	bf a1 00 00 00 00 00 00	r1 = r10
     883:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     884:	b7 02 00 00 01 00 00 00	r2 = 1
     885:	bf 63 00 00 00 00 00 00	r3 = r6
     886:	85 00 00 00 04 00 00 00	call 4
     887:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     888:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     889:	57 02 00 00 f0 00 00 00	r2 &= 240
     890:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB41_83>
     891:	bf a1 00 00 00 00 00 00	r1 = r10
     892:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     893:	b7 02 00 00 01 00 00 00	r2 = 1
     894:	bf 63 00 00 00 00 00 00	r3 = r6
     895:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     896:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     897:	67 01 00 00 02 00 00 00	r1 <<= 2
     898:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c18 <LBB41_83>:
;     return l3_header + transport_size;
     899:	0f 16 00 00 00 00 00 00	r6 += r1
     900:	b7 01 00 00 00 00 00 00	r1 = 0
     901:	bf 63 00 00 00 00 00 00	r3 = r6
     902:	0f 13 00 00 00 00 00 00	r3 += r1
     903:	bf a1 00 00 00 00 00 00	r1 = r10
     904:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     905:	b7 02 00 00 02 00 00 00	r2 = 2
     906:	85 00 00 00 71 00 00 00	call 113
     907:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     908:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     909:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     910:	b7 01 00 00 02 00 00 00	r1 = 2
     911:	0f 16 00 00 00 00 00 00	r6 += r1
     912:	bf a1 00 00 00 00 00 00	r1 = r10
     913:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     914:	b7 02 00 00 02 00 00 00	r2 = 2
     915:	bf 63 00 00 00 00 00 00	r3 = r6
     916:	85 00 00 00 71 00 00 00	call 113
     917:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     918:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     919:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001cc0 <LBB41_89>:
     920:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
;     return cfg->callstack == 0;
     921:	71 81 11 00 00 00 00 00	r1 = *(u8 *)(r8 + 17)
;     if (!filter_callstack(cfg))
     922:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB41_91>
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
     923:	bf 61 00 00 00 00 00 00	r1 = r6
     924:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     926:	b7 03 00 00 00 00 00 00	r3 = 0
     927:	85 00 00 00 1b 00 00 00	call 27
     928:	63 07 30 00 00 00 00 00	*(u32 *)(r7 + 48) = r0

0000000000001d08 <LBB41_91>:
     929:	b7 01 00 00 68 00 00 00	r1 = 104
;     for (j = 10; j < 64; j += 10) CPY(j);
     930:	73 17 13 00 00 00 00 00	*(u8 *)(r7 + 19) = r1
     931:	b7 01 00 00 73 00 00 00	r1 = 115
     932:	73 17 12 00 00 00 00 00	*(u8 *)(r7 + 18) = r1
     933:	b7 01 00 00 69 00 00 00	r1 = 105
     934:	73 17 11 00 00 00 00 00	*(u8 *)(r7 + 17) = r1
     935:	73 17 0f 00 00 00 00 00	*(u8 *)(r7 + 15) = r1
     936:	b7 01 00 00 64 00 00 00	r1 = 100
     937:	73 17 0c 00 00 00 00 00	*(u8 *)(r7 + 12) = r1
     938:	b7 01 00 00 61 00 00 00	r1 = 97
     939:	73 17 0a 00 00 00 00 00	*(u8 *)(r7 + 10) = r1
     940:	b7 01 00 00 77 00 00 00	r1 = 119
     941:	73 17 09 00 00 00 00 00	*(u8 *)(r7 + 9) = r1
     942:	b7 01 00 00 6f 00 00 00	r1 = 111
     943:	73 17 07 00 00 00 00 00	*(u8 *)(r7 + 7) = r1
     944:	b7 01 00 00 66 00 00 00	r1 = 102
     945:	73 17 0e 00 00 00 00 00	*(u8 *)(r7 + 14) = r1
     946:	73 17 06 00 00 00 00 00	*(u8 *)(r7 + 6) = r1
     947:	73 17 04 00 00 00 00 00	*(u8 *)(r7 + 4) = r1
     948:	b7 01 00 00 6e 00 00 00	r1 = 110
     949:	73 17 10 00 00 00 00 00	*(u8 *)(r7 + 16) = r1
     950:	73 17 03 00 00 00 00 00	*(u8 *)(r7 + 3) = r1
     951:	b7 01 00 00 5f 00 00 00	r1 = 95
     952:	73 17 0d 00 00 00 00 00	*(u8 *)(r7 + 13) = r1
     953:	73 17 05 00 00 00 00 00	*(u8 *)(r7 + 5) = r1
     954:	73 17 02 00 00 00 00 00	*(u8 *)(r7 + 2) = r1
     955:	b7 01 00 00 72 00 00 00	r1 = 114
     956:	73 17 0b 00 00 00 00 00	*(u8 *)(r7 + 11) = r1
     957:	73 17 08 00 00 00 00 00	*(u8 *)(r7 + 8) = r1
     958:	73 17 01 00 00 00 00 00	*(u8 *)(r7 + 1) = r1
     959:	b7 01 00 00 62 00 00 00	r1 = 98
     960:	73 17 00 00 00 00 00 00	*(u8 *)(r7 + 0) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     961:	bf 61 00 00 00 00 00 00	r1 = r6
     962:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     964:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     966:	bf 74 00 00 00 00 00 00	r4 = r7
     967:	b7 05 00 00 e0 00 00 00	r5 = 224
     968:	85 00 00 00 19 00 00 00	call 25
     969:	05 00 af fd 00 00 00 00	goto -593 <LBB41_92>

Disassembly of section kprobe/br_nf_post_routing:

0000000000000000 <k_br_nf_post_ro>:
; int k_br_nf_post_ro(struct pt_regs *ctx) {
       0:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM2(ctx);
       1:	79 11 68 00 00 00 00 00	r1 = *(u64 *)(r1 + 104)
       2:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       3:	b7 06 00 00 00 00 00 00	r6 = 0
;     GET_CFG();
       4:	63 6a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r6
       5:	bf a2 00 00 00 00 00 00	r2 = r10
       6:	07 02 00 00 e4 ff ff ff	r2 += -28
;     GET_CFG();
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	85 00 00 00 01 00 00 00	call 1
      10:	bf 08 00 00 00 00 00 00	r8 = r0
      11:	15 08 6d 01 00 00 00 00	if r8 == 0 goto +365 <LBB42_92>
      12:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
      13:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      14:	63 18 08 00 00 00 00 00	*(u32 *)(r8 + 8) = r1
;     u32 ev_buff_id = 0;
      15:	63 6a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r6
      16:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      17:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      18:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      20:	85 00 00 00 01 00 00 00	call 1
      21:	bf 07 00 00 00 00 00 00	r7 = r0
;     if (!ev) return NULL;
      22:	55 07 01 00 00 00 00 00	if r7 != 0 goto +1 <LBB42_3>
      23:	05 00 61 01 00 00 00 00	goto +353 <LBB42_92>

00000000000000c0 <LBB42_3>:
      24:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      25:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      26:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      27:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      28:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      29:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      30:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      31:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      32:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      33:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      34:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      35:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      36:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      37:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      38:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      39:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      40:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      41:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      42:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      43:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      44:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      45:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      46:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      47:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      48:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      49:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      50:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      51:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      52:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      53:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      54:	61 81 04 00 00 00 00 00	r1 = *(u32 *)(r8 + 4)
      55:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB42_5>
      56:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      57:	5d 01 3f 01 00 00 00 00	if r1 != r0 goto +319 <LBB42_92>

00000000000001d0 <LBB42_5>:
      58:	b7 01 00 00 10 00 00 00	r1 = 16
      59:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
      60:	bf 93 00 00 00 00 00 00	r3 = r9
      61:	0f 13 00 00 00 00 00 00	r3 += r1
      62:	bf a6 00 00 00 00 00 00	r6 = r10
      63:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      64:	bf 61 00 00 00 00 00 00	r1 = r6
      65:	b7 02 00 00 08 00 00 00	r2 = 8
      66:	85 00 00 00 71 00 00 00	call 113
      67:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      68:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      69:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      70:	bf 61 00 00 00 00 00 00	r1 = r6
      71:	b7 02 00 00 08 00 00 00	r2 = 8
      72:	85 00 00 00 71 00 00 00	call 113
      73:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      74:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      75:	0f 13 00 00 00 00 00 00	r3 += r1
      76:	bf a1 00 00 00 00 00 00	r1 = r10
      77:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      78:	b7 02 00 00 04 00 00 00	r2 = 4
      79:	85 00 00 00 71 00 00 00	call 113
      80:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      81:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB42_8>
      82:	b7 01 00 00 18 00 00 00	r1 = 24
      83:	bf 93 00 00 00 00 00 00	r3 = r9
      84:	0f 13 00 00 00 00 00 00	r3 += r1
      85:	bf a1 00 00 00 00 00 00	r1 = r10
      86:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
      87:	b7 02 00 00 08 00 00 00	r2 = 8
      88:	85 00 00 00 71 00 00 00	call 113
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
      90:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB42_11>
      91:	b7 01 00 00 30 00 00 00	r1 = 48
      92:	0f 13 00 00 00 00 00 00	r3 += r1
      93:	bf a1 00 00 00 00 00 00	r1 = r10
      94:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      95:	b7 02 00 00 08 00 00 00	r2 = 8
      96:	85 00 00 00 71 00 00 00	call 113
      97:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      98:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     102:	b7 02 00 00 04 00 00 00	r2 = 4
     103:	85 00 00 00 71 00 00 00	call 113
     104:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000348 <LBB42_8>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     105:	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0)
     106:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB42_11>
     107:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB42_11>
     108:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB42_92>

0000000000000368 <LBB42_11>:
;     u16 icmpid = cfg->icmpid;
     109:	69 81 0e 00 00 00 00 00	r1 = *(u16 *)(r8 + 14)
;     u16 port = cfg->port;
     110:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     111:	69 81 0c 00 00 00 00 00	r1 = *(u16 *)(r8 + 12)
;     u8 proto = cfg->proto;
     112:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     113:	71 81 12 00 00 00 00 00	r1 = *(u8 *)(r8 + 18)
;     u32 addr = cfg->ip;
     114:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     115:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
     116:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     117:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     118:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     119:	b7 01 00 00 c0 00 00 00	r1 = 192
     120:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     121:	bf 93 00 00 00 00 00 00	r3 = r9
     122:	0f 13 00 00 00 00 00 00	r3 += r1
     123:	bf a1 00 00 00 00 00 00	r1 = r10
     124:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     125:	b7 02 00 00 08 00 00 00	r2 = 8
     126:	85 00 00 00 71 00 00 00	call 113
     127:	b7 01 00 00 b6 00 00 00	r1 = 182
     128:	bf 93 00 00 00 00 00 00	r3 = r9
     129:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     130:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     131:	bf a1 00 00 00 00 00 00	r1 = r10
     132:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     133:	b7 02 00 00 02 00 00 00	r2 = 2
     134:	85 00 00 00 71 00 00 00	call 113
     135:	b7 01 00 00 b4 00 00 00	r1 = 180
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     138:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     139:	bf a1 00 00 00 00 00 00	r1 = r10
     140:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     141:	b7 02 00 00 02 00 00 00	r2 = 2
     142:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     143:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     144:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     145:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB42_13>
     146:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000498 <LBB42_13>:
;     return head + network_header;
     147:	57 09 00 00 ff ff 00 00	r9 &= 65535
     148:	0f 96 00 00 00 00 00 00	r6 += r9
     149:	bf a1 00 00 00 00 00 00	r1 = r10
     150:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     151:	b7 02 00 00 01 00 00 00	r2 = 1
     152:	bf 63 00 00 00 00 00 00	r3 = r6
     153:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     154:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     155:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     156:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB42_20>
     157:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB42_92>
;         if (addr != 0) {
     158:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     159:	bf 19 00 00 00 00 00 00	r9 = r1
     160:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB42_18>
     161:	b7 01 00 00 0c 00 00 00	r1 = 12
     162:	bf 63 00 00 00 00 00 00	r3 = r6
     163:	0f 13 00 00 00 00 00 00	r3 += r1
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     166:	b7 02 00 00 04 00 00 00	r2 = 4
     167:	85 00 00 00 71 00 00 00	call 113
     168:	b7 01 00 00 10 00 00 00	r1 = 16
     169:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     170:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     171:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     172:	bf a1 00 00 00 00 00 00	r1 = r10
     173:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     174:	b7 02 00 00 04 00 00 00	r2 = 4
     175:	bf 63 00 00 00 00 00 00	r3 = r6
     176:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     177:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     178:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB42_54>
     179:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     180:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     181:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB42_92>
     182:	05 00 da 00 00 00 00 00	goto +218 <LBB42_54>

00000000000005b8 <LBB42_20>:
     183:	b7 01 00 00 06 00 00 00	r1 = 6
     184:	0f 16 00 00 00 00 00 00	r6 += r1
     185:	bf a1 00 00 00 00 00 00	r1 = r10
     186:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     187:	b7 02 00 00 01 00 00 00	r2 = 1
     188:	bf 63 00 00 00 00 00 00	r3 = r6
     189:	85 00 00 00 04 00 00 00	call 4
     190:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     191:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     192:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     193:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB42_22>
     194:	b7 04 00 00 80 00 00 00	r4 = 128
     195:	b7 03 00 00 81 00 00 00	r3 = 129
     196:	b7 01 00 00 3a 00 00 00	r1 = 58
     197:	05 00 0d 00 00 00 00 00	goto +13 <LBB42_22>

0000000000000630 <LBB42_18>:
     198:	b7 01 00 00 09 00 00 00	r1 = 9
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     208:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB42_22>
     209:	b7 04 00 00 08 00 00 00	r4 = 8
     210:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000698 <LBB42_22>:
;     if (proto != 0 && proto != l4_proto)
     211:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     212:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB42_24>
     213:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB42_92>

00000000000006b0 <LBB42_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     214:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB42_27>
     215:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB42_29>
     216:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB42_35>
     217:	05 00 9f 00 00 00 00 00	goto +159 <LBB42_92>

00000000000006d0 <LBB42_35>:
     218:	b7 01 00 00 c0 00 00 00	r1 = 192
     219:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     220:	bf 63 00 00 00 00 00 00	r3 = r6
     221:	0f 13 00 00 00 00 00 00	r3 += r1
     222:	bf a1 00 00 00 00 00 00	r1 = r10
     223:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     224:	b7 02 00 00 08 00 00 00	r2 = 8
     225:	85 00 00 00 71 00 00 00	call 113
     226:	b7 01 00 00 b6 00 00 00	r1 = 182
     227:	bf 63 00 00 00 00 00 00	r3 = r6
     228:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     229:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     230:	bf a1 00 00 00 00 00 00	r1 = r10
     231:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     232:	b7 02 00 00 02 00 00 00	r2 = 2
     233:	85 00 00 00 71 00 00 00	call 113
     234:	b7 01 00 00 b4 00 00 00	r1 = 180
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     237:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     238:	bf a1 00 00 00 00 00 00	r1 = r10
     239:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     240:	b7 02 00 00 02 00 00 00	r2 = 2
     241:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     242:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     243:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     244:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB42_37>
     245:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000007b0 <LBB42_37>:
;     return head + network_header;
     246:	57 06 00 00 ff ff 00 00	r6 &= 65535
     247:	0f 69 00 00 00 00 00 00	r9 += r6
     248:	bf a1 00 00 00 00 00 00	r1 = r10
     249:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     250:	b7 02 00 00 01 00 00 00	r2 = 1
     251:	bf 93 00 00 00 00 00 00	r3 = r9
     252:	85 00 00 00 04 00 00 00	call 4
     253:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     254:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     255:	57 02 00 00 f0 00 00 00	r2 &= 240
     256:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB42_39>
     257:	bf a1 00 00 00 00 00 00	r1 = r10
     258:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     259:	b7 02 00 00 01 00 00 00	r2 = 1
     260:	bf 93 00 00 00 00 00 00	r3 = r9
     261:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     262:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     263:	67 01 00 00 02 00 00 00	r1 <<= 2
     264:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000848 <LBB42_39>:
;     return l3_header + transport_size;
     265:	0f 19 00 00 00 00 00 00	r9 += r1
     266:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9

0000000000000858 <LBB42_40>:
     267:	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 72)
;     if (port != 0) {
     268:	bf 92 00 00 00 00 00 00	r2 = r9
     269:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB42_45>
;         if (l4_proto == IPPROTO_TCP) {
     270:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     271:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB42_52>
     272:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB42_45>
     273:	b7 01 00 00 00 00 00 00	r1 = 0
     274:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     275:	bf 63 00 00 00 00 00 00	r3 = r6
     276:	0f 13 00 00 00 00 00 00	r3 += r1
     277:	bf a1 00 00 00 00 00 00	r1 = r10
     278:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     279:	b7 02 00 00 02 00 00 00	r2 = 2
     280:	85 00 00 00 71 00 00 00	call 113
     281:	b7 01 00 00 02 00 00 00	r1 = 2
     282:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     283:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     284:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     285:	bf a1 00 00 00 00 00 00	r1 = r10
     286:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     287:	b7 02 00 00 02 00 00 00	r2 = 2
     288:	bf 63 00 00 00 00 00 00	r3 = r6
     289:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     290:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     291:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     292:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB42_54>
     293:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     294:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB42_92>
     295:	05 00 69 00 00 00 00 00	goto +105 <LBB42_54>

0000000000000940 <LBB42_27>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     296:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB42_35>
     297:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB42_92>

0000000000000950 <LBB42_29>:
     298:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r4
     299:	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r3
     300:	b7 01 00 00 c0 00 00 00	r1 = 192
     301:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     302:	bf 63 00 00 00 00 00 00	r3 = r6
     303:	0f 13 00 00 00 00 00 00	r3 += r1
     304:	bf a1 00 00 00 00 00 00	r1 = r10
     305:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     306:	b7 02 00 00 08 00 00 00	r2 = 8
     307:	85 00 00 00 71 00 00 00	call 113
     308:	b7 01 00 00 b6 00 00 00	r1 = 182
     309:	bf 63 00 00 00 00 00 00	r3 = r6
     310:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     311:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     312:	bf a1 00 00 00 00 00 00	r1 = r10
     313:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     314:	b7 02 00 00 02 00 00 00	r2 = 2
     315:	85 00 00 00 71 00 00 00	call 113
     316:	b7 01 00 00 b4 00 00 00	r1 = 180
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     319:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     320:	bf a1 00 00 00 00 00 00	r1 = r10
     321:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     322:	b7 02 00 00 02 00 00 00	r2 = 2
     323:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     324:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     325:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     326:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB42_31>
     327:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000a40 <LBB42_31>:
;     return head + network_header;
     328:	57 06 00 00 ff ff 00 00	r6 &= 65535
     329:	0f 69 00 00 00 00 00 00	r9 += r6
     330:	bf a1 00 00 00 00 00 00	r1 = r10
     331:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     332:	b7 02 00 00 01 00 00 00	r2 = 1
     333:	bf 93 00 00 00 00 00 00	r3 = r9
     334:	85 00 00 00 04 00 00 00	call 4
     335:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     336:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     337:	57 02 00 00 f0 00 00 00	r2 &= 240
     338:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB42_33>
     339:	bf a1 00 00 00 00 00 00	r1 = r10
     340:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     341:	b7 02 00 00 01 00 00 00	r2 = 1
     342:	bf 93 00 00 00 00 00 00	r3 = r9
     343:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     344:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     345:	67 01 00 00 02 00 00 00	r1 <<= 2
     346:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000ad8 <LBB42_33>:
;     return l3_header + transport_size;
     347:	0f 19 00 00 00 00 00 00	r9 += r1
     348:	bf a6 00 00 00 00 00 00	r6 = r10
     349:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     350:	bf 61 00 00 00 00 00 00	r1 = r6
     351:	b7 02 00 00 08 00 00 00	r2 = 8
     352:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
     353:	bf 93 00 00 00 00 00 00	r3 = r9
     354:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     355:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     356:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     357:	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 88)
     358:	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 96)
     359:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB42_40>
     360:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     361:	07 02 00 00 e8 ff ff ff	r2 += -24
     362:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     363:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB42_40>
     364:	05 00 0c 00 00 00 00 00	goto +12 <LBB42_92>

0000000000000b68 <LBB42_45>:
;     if (proto != 0 && proto != l4_proto)
     365:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     366:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB42_54>
     367:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
;     if (proto != 0 && icmpid != 0) {
     368:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB42_54>
     369:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     370:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB42_54>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     371:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     372:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB42_50>
     373:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB42_54>

0000000000000bb0 <LBB42_50>:
;         if (icmpid != ev_icmpid)
     374:	57 01 00 00 ff ff 00 00	r1 &= 65535
     375:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
     376:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB42_54>

0000000000000bc8 <LBB42_92>:
;     return do_trace(ctx, skb, "br_nf_post_routing");
     377:	b7 00 00 00 00 00 00 00	r0 = 0
     378:	95 00 00 00 00 00 00 00	exit

0000000000000bd8 <LBB42_52>:
     379:	b7 01 00 00 00 00 00 00	r1 = 0
     380:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     381:	bf 63 00 00 00 00 00 00	r3 = r6
     382:	0f 13 00 00 00 00 00 00	r3 += r1
     383:	bf a1 00 00 00 00 00 00	r1 = r10
     384:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     385:	b7 02 00 00 02 00 00 00	r2 = 2
     386:	85 00 00 00 71 00 00 00	call 113
     387:	b7 01 00 00 02 00 00 00	r1 = 2
     388:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     389:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     390:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     391:	bf a1 00 00 00 00 00 00	r1 = r10
     392:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     393:	b7 02 00 00 02 00 00 00	r2 = 2
     394:	bf 63 00 00 00 00 00 00	r3 = r6
     395:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     396:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     397:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     398:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB42_54>
     399:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     400:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB42_92>

0000000000000c88 <LBB42_54>:
;     event->flags |= SKBTRACER_EVENT_IF;
     401:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     402:	47 01 00 00 01 00 00 00	r1 |= 1
     403:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     404:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
;     ev->skb = (u64)skb;
     405:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     406:	85 00 00 00 05 00 00 00	call 5
     407:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     408:	b7 01 00 00 10 00 00 00	r1 = 16
     409:	bf 96 00 00 00 00 00 00	r6 = r9
     410:	0f 16 00 00 00 00 00 00	r6 += r1
     411:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     412:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     413:	b7 02 00 00 08 00 00 00	r2 = 8
     414:	bf 63 00 00 00 00 00 00	r3 = r6
     415:	85 00 00 00 71 00 00 00	call 113
     416:	b7 01 00 00 70 00 00 00	r1 = 112
     417:	bf 93 00 00 00 00 00 00	r3 = r9
     418:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     419:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     420:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     421:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     422:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     423:	b7 02 00 00 04 00 00 00	r2 = 4
     424:	85 00 00 00 71 00 00 00	call 113
     425:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     426:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     427:	85 00 00 00 08 00 00 00	call 8
     428:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     429:	85 00 00 00 0e 00 00 00	call 14
     430:	57 00 00 00 ff ff 00 00	r0 &= 65535
     431:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     432:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     433:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     434:	bf 91 00 00 00 00 00 00	r1 = r9
     435:	b7 02 00 00 08 00 00 00	r2 = 8
     436:	bf 63 00 00 00 00 00 00	r3 = r6
     437:	85 00 00 00 71 00 00 00	call 113
     438:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     439:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     440:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     441:	bf 91 00 00 00 00 00 00	r1 = r9
     442:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     443:	b7 02 00 00 08 00 00 00	r2 = 8
     444:	85 00 00 00 71 00 00 00	call 113
     445:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     446:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     447:	0f 13 00 00 00 00 00 00	r3 += r1
     448:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     449:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     450:	b7 02 00 00 04 00 00 00	r2 = 4
     451:	85 00 00 00 71 00 00 00	call 113
     452:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     453:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB42_57>
     454:	b7 01 00 00 18 00 00 00	r1 = 24
     455:	bf 93 00 00 00 00 00 00	r3 = r9
     456:	0f 13 00 00 00 00 00 00	r3 += r1
     457:	bf a1 00 00 00 00 00 00	r1 = r10
     458:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     459:	b7 02 00 00 08 00 00 00	r2 = 8
     460:	85 00 00 00 71 00 00 00	call 113
     461:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     462:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     463:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB42_57>
     464:	b7 01 00 00 30 00 00 00	r1 = 48
     465:	0f 13 00 00 00 00 00 00	r3 += r1
     466:	bf a1 00 00 00 00 00 00	r1 = r10
     467:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     468:	b7 02 00 00 08 00 00 00	r2 = 8
     469:	85 00 00 00 71 00 00 00	call 113
     470:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     471:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     472:	0f 13 00 00 00 00 00 00	r3 += r1
     473:	bf a1 00 00 00 00 00 00	r1 = r10
     474:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     475:	b7 02 00 00 04 00 00 00	r2 = 4
     476:	85 00 00 00 71 00 00 00	call 113
     477:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000ef0 <LBB42_57>:
;     pkt_info->netns = get_netns(skb);
     478:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     479:	b7 01 00 00 80 00 00 00	r1 = 128
     480:	bf 93 00 00 00 00 00 00	r3 = r9
     481:	0f 13 00 00 00 00 00 00	r3 += r1
     482:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     483:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     484:	bf a1 00 00 00 00 00 00	r1 = r10
     485:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     486:	b7 02 00 00 01 00 00 00	r2 = 1
     487:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     488:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     489:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     490:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     491:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     492:	b7 01 00 00 00 00 00 00	r1 = 0
     493:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     494:	0f 13 00 00 00 00 00 00	r3 += r1
;     pkt_info->ifname[0] = 0;
     495:	bf 71 00 00 00 00 00 00	r1 = r7
     496:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     497:	b7 02 00 00 10 00 00 00	r2 = 16
     498:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     499:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     500:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB42_59>
     501:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     502:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     503:	b7 01 00 00 69 00 00 00	r1 = 105
     504:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     505:	b7 01 00 00 6e 00 00 00	r1 = 110
     506:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000000fd8 <LBB42_59>:
     507:	b7 01 00 00 c0 00 00 00	r1 = 192
     508:	bf 93 00 00 00 00 00 00	r3 = r9
     509:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     510:	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r3
     511:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     512:	07 01 00 00 f8 ff ff ff	r1 += -8
     513:	b7 02 00 00 08 00 00 00	r2 = 8
     514:	85 00 00 00 71 00 00 00	call 113
     515:	b7 01 00 00 b6 00 00 00	r1 = 182
     516:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     517:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     518:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     519:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     520:	b7 02 00 00 02 00 00 00	r2 = 2
     521:	bf 93 00 00 00 00 00 00	r3 = r9
     522:	85 00 00 00 71 00 00 00	call 113
     523:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     524:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     525:	bf 71 00 00 00 00 00 00	r1 = r7
     526:	07 01 00 00 64 00 00 00	r1 += 100
     527:	b7 02 00 00 06 00 00 00	r2 = 6
     528:	bf 63 00 00 00 00 00 00	r3 = r6
     529:	85 00 00 00 04 00 00 00	call 4
     530:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     531:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	b7 02 00 00 08 00 00 00	r2 = 8
     533:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     534:	85 00 00 00 71 00 00 00	call 113
     535:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     536:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     537:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     538:	b7 02 00 00 02 00 00 00	r2 = 2
     539:	bf 93 00 00 00 00 00 00	r3 = r9
     540:	85 00 00 00 71 00 00 00	call 113
     541:	b7 01 00 00 b4 00 00 00	r1 = 180
     542:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
     543:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     544:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     547:	b7 02 00 00 02 00 00 00	r2 = 2
     548:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     549:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     550:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     551:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB42_61>
     552:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001148 <LBB42_61>:
;     return head + network_header;
     553:	57 09 00 00 ff ff 00 00	r9 &= 65535
     554:	0f 96 00 00 00 00 00 00	r6 += r9
     555:	bf a1 00 00 00 00 00 00	r1 = r10
     556:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     557:	b7 02 00 00 01 00 00 00	r2 = 1
     558:	bf 63 00 00 00 00 00 00	r3 = r6
     559:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     560:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     561:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     562:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB42_66>
     563:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB42_92>
     564:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     565:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     566:	b7 01 00 00 c0 00 00 00	r1 = 192
     567:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     568:	bf 93 00 00 00 00 00 00	r3 = r9
     569:	0f 13 00 00 00 00 00 00	r3 += r1
     570:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     572:	b7 02 00 00 08 00 00 00	r2 = 8
     573:	85 00 00 00 71 00 00 00	call 113
     574:	b7 01 00 00 b6 00 00 00	r1 = 182
     575:	bf 93 00 00 00 00 00 00	r3 = r9
     576:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     577:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     578:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     579:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     580:	b7 02 00 00 02 00 00 00	r2 = 2
     581:	85 00 00 00 71 00 00 00	call 113
     582:	b7 01 00 00 b4 00 00 00	r1 = 180
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     585:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     586:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     587:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     588:	b7 02 00 00 02 00 00 00	r2 = 2
     589:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     590:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     591:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     592:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB42_65>
     593:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001290 <LBB42_65>:
;     return head + network_header;
     594:	57 09 00 00 ff ff 00 00	r9 &= 65535
     595:	0f 96 00 00 00 00 00 00	r6 += r9
     596:	b7 01 00 00 0c 00 00 00	r1 = 12
     597:	bf 63 00 00 00 00 00 00	r3 = r6
     598:	0f 13 00 00 00 00 00 00	r3 += r1
     599:	bf a1 00 00 00 00 00 00	r1 = r10
     600:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     601:	b7 02 00 00 04 00 00 00	r2 = 4
     602:	85 00 00 00 71 00 00 00	call 113
     603:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     604:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     605:	b7 01 00 00 10 00 00 00	r1 = 16
     606:	bf 63 00 00 00 00 00 00	r3 = r6
     607:	0f 13 00 00 00 00 00 00	r3 += r1
     608:	bf a1 00 00 00 00 00 00	r1 = r10
     609:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     610:	b7 02 00 00 04 00 00 00	r2 = 4
     611:	85 00 00 00 71 00 00 00	call 113
     612:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     613:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     614:	b7 01 00 00 02 00 00 00	r1 = 2
     615:	bf 63 00 00 00 00 00 00	r3 = r6
     616:	0f 13 00 00 00 00 00 00	r3 += r1
     617:	bf a1 00 00 00 00 00 00	r1 = r10
     618:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     619:	b7 02 00 00 02 00 00 00	r2 = 2
     620:	85 00 00 00 71 00 00 00	call 113
     621:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     622:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     623:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     624:	b7 01 00 00 09 00 00 00	r1 = 9
     625:	05 00 38 00 00 00 00 00	goto +56 <LBB42_69>

0000000000001390 <LBB42_66>:
     626:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     627:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     628:	b7 01 00 00 c0 00 00 00	r1 = 192
     629:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     630:	bf 93 00 00 00 00 00 00	r3 = r9
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     634:	b7 02 00 00 08 00 00 00	r2 = 8
     635:	85 00 00 00 71 00 00 00	call 113
     636:	b7 01 00 00 b6 00 00 00	r1 = 182
     637:	bf 93 00 00 00 00 00 00	r3 = r9
     638:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     639:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     640:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     641:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     642:	b7 02 00 00 02 00 00 00	r2 = 2
     643:	85 00 00 00 71 00 00 00	call 113
     644:	b7 01 00 00 b4 00 00 00	r1 = 180
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     647:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     648:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     649:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     650:	b7 02 00 00 02 00 00 00	r2 = 2
     651:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     652:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     653:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     654:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB42_68>
     655:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001480 <LBB42_68>:
;     return head + network_header;
     656:	57 09 00 00 ff ff 00 00	r9 &= 65535
     657:	0f 96 00 00 00 00 00 00	r6 += r9
     658:	b7 01 00 00 08 00 00 00	r1 = 8
     659:	bf 63 00 00 00 00 00 00	r3 = r6
     660:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
     661:	bf 71 00 00 00 00 00 00	r1 = r7
     662:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     663:	b7 02 00 00 10 00 00 00	r2 = 16
     664:	85 00 00 00 04 00 00 00	call 4
     665:	b7 01 00 00 18 00 00 00	r1 = 24
     666:	bf 63 00 00 00 00 00 00	r3 = r6
     667:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     668:	bf 71 00 00 00 00 00 00	r1 = r7
     669:	07 01 00 00 80 00 00 00	r1 += 128
     670:	b7 02 00 00 10 00 00 00	r2 = 16
     671:	85 00 00 00 04 00 00 00	call 4
     672:	b7 01 00 00 04 00 00 00	r1 = 4
     673:	bf 63 00 00 00 00 00 00	r3 = r6
     674:	0f 13 00 00 00 00 00 00	r3 += r1
     675:	bf a1 00 00 00 00 00 00	r1 = r10
     676:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     677:	b7 02 00 00 02 00 00 00	r2 = 2
     678:	85 00 00 00 71 00 00 00	call 113
     679:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     680:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     681:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000001550 <LBB42_69>:
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
     684:	bf a1 00 00 00 00 00 00	r1 = r10
     685:	07 01 00 00 f8 ff ff ff	r1 += -8
     686:	b7 02 00 00 01 00 00 00	r2 = 1
     687:	85 00 00 00 71 00 00 00	call 113
     688:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     689:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     690:	bf a1 00 00 00 00 00 00	r1 = r10
     691:	07 01 00 00 f8 ff ff ff	r1 += -8
     692:	b7 02 00 00 01 00 00 00	r2 = 1
     693:	bf 63 00 00 00 00 00 00	r3 = r6
     694:	85 00 00 00 04 00 00 00	call 4
     695:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     696:	57 01 00 00 f0 00 00 00	r1 &= 240
     697:	77 01 00 00 04 00 00 00	r1 >>= 4
     698:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     699:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     700:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB42_72>
     701:	15 01 53 00 01 00 00 00	if r1 == 1 goto +83 <LBB42_84>
     702:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB42_74>
     703:	05 00 b9 fe 00 00 00 00	goto -327 <LBB42_92>

0000000000001600 <LBB42_74>:
     704:	b7 01 00 00 c0 00 00 00	r1 = 192
     705:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     706:	bf 93 00 00 00 00 00 00	r3 = r9
     707:	0f 13 00 00 00 00 00 00	r3 += r1
     708:	bf a1 00 00 00 00 00 00	r1 = r10
     709:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     710:	b7 02 00 00 08 00 00 00	r2 = 8
     711:	85 00 00 00 71 00 00 00	call 113
     712:	b7 01 00 00 b6 00 00 00	r1 = 182
     713:	bf 93 00 00 00 00 00 00	r3 = r9
     714:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     715:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     716:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     717:	bf a1 00 00 00 00 00 00	r1 = r10
     718:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     719:	b7 02 00 00 02 00 00 00	r2 = 2
     720:	85 00 00 00 71 00 00 00	call 113
     721:	b7 01 00 00 b4 00 00 00	r1 = 180
     722:	0f 19 00 00 00 00 00 00	r9 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     723:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     726:	b7 02 00 00 02 00 00 00	r2 = 2
     727:	bf 93 00 00 00 00 00 00	r3 = r9
     728:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     729:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     730:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     731:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB42_76>
     732:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000016e8 <LBB42_76>:
;     return head + network_header;
     733:	57 06 00 00 ff ff 00 00	r6 &= 65535
     734:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
     735:	0f 61 00 00 00 00 00 00	r1 += r6
     736:	bf 16 00 00 00 00 00 00	r6 = r1
     737:	bf a1 00 00 00 00 00 00	r1 = r10
     738:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     739:	b7 02 00 00 01 00 00 00	r2 = 1
     740:	bf 63 00 00 00 00 00 00	r3 = r6
     741:	85 00 00 00 04 00 00 00	call 4
     742:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     743:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     744:	57 02 00 00 f0 00 00 00	r2 &= 240
     745:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB42_78>
     746:	bf a1 00 00 00 00 00 00	r1 = r10
     747:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     748:	b7 02 00 00 01 00 00 00	r2 = 1
     749:	bf 63 00 00 00 00 00 00	r3 = r6
     750:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     751:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     752:	67 01 00 00 02 00 00 00	r1 <<= 2
     753:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001790 <LBB42_78>:
;     return l3_header + transport_size;
     754:	0f 16 00 00 00 00 00 00	r6 += r1
     755:	b7 01 00 00 00 00 00 00	r1 = 0
     756:	bf 63 00 00 00 00 00 00	r3 = r6
     757:	0f 13 00 00 00 00 00 00	r3 += r1
     758:	bf a1 00 00 00 00 00 00	r1 = r10
     759:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     760:	b7 02 00 00 02 00 00 00	r2 = 2
     761:	85 00 00 00 71 00 00 00	call 113
     762:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     763:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     764:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     765:	b7 01 00 00 02 00 00 00	r1 = 2
     766:	bf 63 00 00 00 00 00 00	r3 = r6
     767:	0f 13 00 00 00 00 00 00	r3 += r1
     768:	bf a1 00 00 00 00 00 00	r1 = r10
     769:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     770:	b7 02 00 00 02 00 00 00	r2 = 2
     771:	85 00 00 00 71 00 00 00	call 113
     772:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     773:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     774:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     775:	07 06 00 00 0c 00 00 00	r6 += 12
     776:	bf 71 00 00 00 00 00 00	r1 = r7
     777:	07 01 00 00 9c 00 00 00	r1 += 156
     778:	b7 02 00 00 02 00 00 00	r2 = 2
     779:	bf 63 00 00 00 00 00 00	r3 = r6
     780:	85 00 00 00 04 00 00 00	call 4
     781:	05 00 8a 00 00 00 00 00	goto +138 <LBB42_89>

0000000000001870 <LBB42_72>:
;     if (l4_proto == IPPROTO_TCP) {
     782:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB42_79>
     783:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB42_84>
     784:	05 00 68 fe 00 00 00 00	goto -408 <LBB42_92>

0000000000001888 <LBB42_84>:
     785:	b7 01 00 00 c0 00 00 00	r1 = 192
     786:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     787:	bf 63 00 00 00 00 00 00	r3 = r6
     788:	0f 13 00 00 00 00 00 00	r3 += r1
     789:	bf a1 00 00 00 00 00 00	r1 = r10
     790:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     791:	b7 02 00 00 08 00 00 00	r2 = 8
     792:	85 00 00 00 71 00 00 00	call 113
     793:	b7 01 00 00 b6 00 00 00	r1 = 182
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     796:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     797:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     798:	bf a1 00 00 00 00 00 00	r1 = r10
     799:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     800:	b7 02 00 00 02 00 00 00	r2 = 2
     801:	85 00 00 00 71 00 00 00	call 113
     802:	b7 01 00 00 b4 00 00 00	r1 = 180
     803:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     804:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     805:	bf a1 00 00 00 00 00 00	r1 = r10
     806:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     807:	b7 02 00 00 02 00 00 00	r2 = 2
     808:	bf 63 00 00 00 00 00 00	r3 = r6
     809:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     810:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     811:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     812:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB42_86>
     813:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001970 <LBB42_86>:
;     return head + network_header;
     814:	57 09 00 00 ff ff 00 00	r9 &= 65535
     815:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     816:	0f 96 00 00 00 00 00 00	r6 += r9
     817:	bf a1 00 00 00 00 00 00	r1 = r10
     818:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     819:	b7 02 00 00 01 00 00 00	r2 = 1
     820:	bf 63 00 00 00 00 00 00	r3 = r6
     821:	85 00 00 00 04 00 00 00	call 4
     822:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     823:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     824:	57 02 00 00 f0 00 00 00	r2 &= 240
     825:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB42_88>
     826:	bf a1 00 00 00 00 00 00	r1 = r10
     827:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     828:	b7 02 00 00 01 00 00 00	r2 = 1
     829:	bf 63 00 00 00 00 00 00	r3 = r6
     830:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     831:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     832:	67 01 00 00 02 00 00 00	r1 <<= 2
     833:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a10 <LBB42_88>:
;     return l3_header + transport_size;
     834:	0f 16 00 00 00 00 00 00	r6 += r1
     835:	bf a9 00 00 00 00 00 00	r9 = r10
     836:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     837:	bf 91 00 00 00 00 00 00	r1 = r9
     838:	b7 02 00 00 08 00 00 00	r2 = 8
     839:	bf 63 00 00 00 00 00 00	r3 = r6
     840:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     841:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     842:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     843:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     844:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     845:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     846:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     847:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     848:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     849:	05 00 46 00 00 00 00 00	goto +70 <LBB42_89>

0000000000001a90 <LBB42_79>:
     850:	b7 01 00 00 c0 00 00 00	r1 = 192
     851:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     852:	bf 63 00 00 00 00 00 00	r3 = r6
     853:	0f 13 00 00 00 00 00 00	r3 += r1
     854:	bf a1 00 00 00 00 00 00	r1 = r10
     855:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     856:	b7 02 00 00 08 00 00 00	r2 = 8
     857:	85 00 00 00 71 00 00 00	call 113
     858:	b7 01 00 00 b6 00 00 00	r1 = 182
     859:	bf 63 00 00 00 00 00 00	r3 = r6
     860:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     861:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     862:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     863:	bf a1 00 00 00 00 00 00	r1 = r10
     864:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     865:	b7 02 00 00 02 00 00 00	r2 = 2
     866:	85 00 00 00 71 00 00 00	call 113
     867:	b7 01 00 00 b4 00 00 00	r1 = 180
     868:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     869:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     870:	bf a1 00 00 00 00 00 00	r1 = r10
     871:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     872:	b7 02 00 00 02 00 00 00	r2 = 2
     873:	bf 63 00 00 00 00 00 00	r3 = r6
     874:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     875:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     876:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     877:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB42_81>
     878:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001b78 <LBB42_81>:
;     return head + network_header;
     879:	57 09 00 00 ff ff 00 00	r9 &= 65535
     880:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     881:	0f 96 00 00 00 00 00 00	r6 += r9
     882:	bf a1 00 00 00 00 00 00	r1 = r10
     883:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     884:	b7 02 00 00 01 00 00 00	r2 = 1
     885:	bf 63 00 00 00 00 00 00	r3 = r6
     886:	85 00 00 00 04 00 00 00	call 4
     887:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     888:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     889:	57 02 00 00 f0 00 00 00	r2 &= 240
     890:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB42_83>
     891:	bf a1 00 00 00 00 00 00	r1 = r10
     892:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     893:	b7 02 00 00 01 00 00 00	r2 = 1
     894:	bf 63 00 00 00 00 00 00	r3 = r6
     895:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     896:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     897:	67 01 00 00 02 00 00 00	r1 <<= 2
     898:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c18 <LBB42_83>:
;     return l3_header + transport_size;
     899:	0f 16 00 00 00 00 00 00	r6 += r1
     900:	b7 01 00 00 00 00 00 00	r1 = 0
     901:	bf 63 00 00 00 00 00 00	r3 = r6
     902:	0f 13 00 00 00 00 00 00	r3 += r1
     903:	bf a1 00 00 00 00 00 00	r1 = r10
     904:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     905:	b7 02 00 00 02 00 00 00	r2 = 2
     906:	85 00 00 00 71 00 00 00	call 113
     907:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     908:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     909:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     910:	b7 01 00 00 02 00 00 00	r1 = 2
     911:	0f 16 00 00 00 00 00 00	r6 += r1
     912:	bf a1 00 00 00 00 00 00	r1 = r10
     913:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     914:	b7 02 00 00 02 00 00 00	r2 = 2
     915:	bf 63 00 00 00 00 00 00	r3 = r6
     916:	85 00 00 00 71 00 00 00	call 113
     917:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     918:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     919:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001cc0 <LBB42_89>:
     920:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
;     return cfg->callstack == 0;
     921:	71 81 11 00 00 00 00 00	r1 = *(u8 *)(r8 + 17)
;     if (!filter_callstack(cfg))
     922:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB42_91>
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
     923:	bf 61 00 00 00 00 00 00	r1 = r6
     924:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     926:	b7 03 00 00 00 00 00 00	r3 = 0
     927:	85 00 00 00 1b 00 00 00	call 27
     928:	63 07 30 00 00 00 00 00	*(u32 *)(r7 + 48) = r0

0000000000001d08 <LBB42_91>:
     929:	b7 01 00 00 67 00 00 00	r1 = 103
;     for (j = 10; j < 64; j += 10) CPY(j);
     930:	73 17 11 00 00 00 00 00	*(u8 *)(r7 + 17) = r1
     931:	b7 01 00 00 69 00 00 00	r1 = 105
     932:	73 17 0f 00 00 00 00 00	*(u8 *)(r7 + 15) = r1
     933:	b7 01 00 00 75 00 00 00	r1 = 117
     934:	73 17 0d 00 00 00 00 00	*(u8 *)(r7 + 13) = r1
     935:	b7 01 00 00 74 00 00 00	r1 = 116
     936:	73 17 0e 00 00 00 00 00	*(u8 *)(r7 + 14) = r1
     937:	73 17 09 00 00 00 00 00	*(u8 *)(r7 + 9) = r1
     938:	b7 01 00 00 73 00 00 00	r1 = 115
     939:	73 17 08 00 00 00 00 00	*(u8 *)(r7 + 8) = r1
     940:	b7 01 00 00 6f 00 00 00	r1 = 111
     941:	73 17 0c 00 00 00 00 00	*(u8 *)(r7 + 12) = r1
     942:	73 17 07 00 00 00 00 00	*(u8 *)(r7 + 7) = r1
     943:	b7 01 00 00 70 00 00 00	r1 = 112
     944:	73 17 06 00 00 00 00 00	*(u8 *)(r7 + 6) = r1
     945:	b7 01 00 00 66 00 00 00	r1 = 102
     946:	73 17 04 00 00 00 00 00	*(u8 *)(r7 + 4) = r1
     947:	b7 01 00 00 6e 00 00 00	r1 = 110
     948:	73 17 10 00 00 00 00 00	*(u8 *)(r7 + 16) = r1
     949:	73 17 03 00 00 00 00 00	*(u8 *)(r7 + 3) = r1
     950:	b7 01 00 00 5f 00 00 00	r1 = 95
     951:	73 17 0a 00 00 00 00 00	*(u8 *)(r7 + 10) = r1
     952:	73 17 05 00 00 00 00 00	*(u8 *)(r7 + 5) = r1
     953:	73 17 02 00 00 00 00 00	*(u8 *)(r7 + 2) = r1
     954:	b7 01 00 00 72 00 00 00	r1 = 114
     955:	73 17 0b 00 00 00 00 00	*(u8 *)(r7 + 11) = r1
     956:	73 17 01 00 00 00 00 00	*(u8 *)(r7 + 1) = r1
     957:	b7 01 00 00 62 00 00 00	r1 = 98
     958:	73 17 00 00 00 00 00 00	*(u8 *)(r7 + 0) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     959:	bf 61 00 00 00 00 00 00	r1 = r6
     960:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     962:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     964:	bf 74 00 00 00 00 00 00	r4 = r7
     965:	b7 05 00 00 e0 00 00 00	r5 = 224
     966:	85 00 00 00 19 00 00 00	call 25
     967:	05 00 b1 fd 00 00 00 00	goto -591 <LBB42_92>

Disassembly of section kprobe/br_nf_dev_queue_xmit:

0000000000000000 <k_br_nf_q_xmit>:
; int k_br_nf_q_xmit(struct pt_regs *ctx) {
       0:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM3(ctx);
       1:	79 11 60 00 00 00 00 00	r1 = *(u64 *)(r1 + 96)
       2:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       3:	b7 06 00 00 00 00 00 00	r6 = 0
;     GET_CFG();
       4:	63 6a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r6
       5:	bf a2 00 00 00 00 00 00	r2 = r10
       6:	07 02 00 00 e4 ff ff ff	r2 += -28
;     GET_CFG();
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	85 00 00 00 01 00 00 00	call 1
      10:	bf 08 00 00 00 00 00 00	r8 = r0
      11:	15 08 6d 01 00 00 00 00	if r8 == 0 goto +365 <LBB43_92>
      12:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
      13:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      14:	63 18 08 00 00 00 00 00	*(u32 *)(r8 + 8) = r1
;     u32 ev_buff_id = 0;
      15:	63 6a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r6
      16:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      17:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      18:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      20:	85 00 00 00 01 00 00 00	call 1
      21:	bf 07 00 00 00 00 00 00	r7 = r0
;     if (!ev) return NULL;
      22:	55 07 01 00 00 00 00 00	if r7 != 0 goto +1 <LBB43_3>
      23:	05 00 61 01 00 00 00 00	goto +353 <LBB43_92>

00000000000000c0 <LBB43_3>:
      24:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      25:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      26:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      27:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      28:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      29:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      30:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      31:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      32:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      33:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      34:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      35:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      36:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      37:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      38:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      39:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      40:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      41:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      42:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      43:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      44:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      45:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      46:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      47:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      48:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      49:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      50:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      51:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      52:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      53:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      54:	61 81 04 00 00 00 00 00	r1 = *(u32 *)(r8 + 4)
      55:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB43_5>
      56:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      57:	5d 01 3f 01 00 00 00 00	if r1 != r0 goto +319 <LBB43_92>

00000000000001d0 <LBB43_5>:
      58:	b7 01 00 00 10 00 00 00	r1 = 16
      59:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
      60:	bf 93 00 00 00 00 00 00	r3 = r9
      61:	0f 13 00 00 00 00 00 00	r3 += r1
      62:	bf a6 00 00 00 00 00 00	r6 = r10
      63:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      64:	bf 61 00 00 00 00 00 00	r1 = r6
      65:	b7 02 00 00 08 00 00 00	r2 = 8
      66:	85 00 00 00 71 00 00 00	call 113
      67:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      68:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      69:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      70:	bf 61 00 00 00 00 00 00	r1 = r6
      71:	b7 02 00 00 08 00 00 00	r2 = 8
      72:	85 00 00 00 71 00 00 00	call 113
      73:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      74:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      75:	0f 13 00 00 00 00 00 00	r3 += r1
      76:	bf a1 00 00 00 00 00 00	r1 = r10
      77:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      78:	b7 02 00 00 04 00 00 00	r2 = 4
      79:	85 00 00 00 71 00 00 00	call 113
      80:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      81:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB43_8>
      82:	b7 01 00 00 18 00 00 00	r1 = 24
      83:	bf 93 00 00 00 00 00 00	r3 = r9
      84:	0f 13 00 00 00 00 00 00	r3 += r1
      85:	bf a1 00 00 00 00 00 00	r1 = r10
      86:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
      87:	b7 02 00 00 08 00 00 00	r2 = 8
      88:	85 00 00 00 71 00 00 00	call 113
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
      90:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB43_11>
      91:	b7 01 00 00 30 00 00 00	r1 = 48
      92:	0f 13 00 00 00 00 00 00	r3 += r1
      93:	bf a1 00 00 00 00 00 00	r1 = r10
      94:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      95:	b7 02 00 00 08 00 00 00	r2 = 8
      96:	85 00 00 00 71 00 00 00	call 113
      97:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      98:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     102:	b7 02 00 00 04 00 00 00	r2 = 4
     103:	85 00 00 00 71 00 00 00	call 113
     104:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000348 <LBB43_8>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     105:	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0)
     106:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB43_11>
     107:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB43_11>
     108:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB43_92>

0000000000000368 <LBB43_11>:
;     u16 icmpid = cfg->icmpid;
     109:	69 81 0e 00 00 00 00 00	r1 = *(u16 *)(r8 + 14)
;     u16 port = cfg->port;
     110:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     111:	69 81 0c 00 00 00 00 00	r1 = *(u16 *)(r8 + 12)
;     u8 proto = cfg->proto;
     112:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     113:	71 81 12 00 00 00 00 00	r1 = *(u8 *)(r8 + 18)
;     u32 addr = cfg->ip;
     114:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     115:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
     116:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     117:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     118:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     119:	b7 01 00 00 c0 00 00 00	r1 = 192
     120:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     121:	bf 93 00 00 00 00 00 00	r3 = r9
     122:	0f 13 00 00 00 00 00 00	r3 += r1
     123:	bf a1 00 00 00 00 00 00	r1 = r10
     124:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     125:	b7 02 00 00 08 00 00 00	r2 = 8
     126:	85 00 00 00 71 00 00 00	call 113
     127:	b7 01 00 00 b6 00 00 00	r1 = 182
     128:	bf 93 00 00 00 00 00 00	r3 = r9
     129:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     130:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     131:	bf a1 00 00 00 00 00 00	r1 = r10
     132:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     133:	b7 02 00 00 02 00 00 00	r2 = 2
     134:	85 00 00 00 71 00 00 00	call 113
     135:	b7 01 00 00 b4 00 00 00	r1 = 180
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     138:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     139:	bf a1 00 00 00 00 00 00	r1 = r10
     140:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     141:	b7 02 00 00 02 00 00 00	r2 = 2
     142:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     143:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     144:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     145:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB43_13>
     146:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000498 <LBB43_13>:
;     return head + network_header;
     147:	57 09 00 00 ff ff 00 00	r9 &= 65535
     148:	0f 96 00 00 00 00 00 00	r6 += r9
     149:	bf a1 00 00 00 00 00 00	r1 = r10
     150:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     151:	b7 02 00 00 01 00 00 00	r2 = 1
     152:	bf 63 00 00 00 00 00 00	r3 = r6
     153:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     154:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     155:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     156:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB43_20>
     157:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB43_92>
;         if (addr != 0) {
     158:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     159:	bf 19 00 00 00 00 00 00	r9 = r1
     160:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB43_18>
     161:	b7 01 00 00 0c 00 00 00	r1 = 12
     162:	bf 63 00 00 00 00 00 00	r3 = r6
     163:	0f 13 00 00 00 00 00 00	r3 += r1
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     166:	b7 02 00 00 04 00 00 00	r2 = 4
     167:	85 00 00 00 71 00 00 00	call 113
     168:	b7 01 00 00 10 00 00 00	r1 = 16
     169:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     170:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     171:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     172:	bf a1 00 00 00 00 00 00	r1 = r10
     173:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     174:	b7 02 00 00 04 00 00 00	r2 = 4
     175:	bf 63 00 00 00 00 00 00	r3 = r6
     176:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     177:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     178:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB43_54>
     179:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     180:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     181:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB43_92>
     182:	05 00 da 00 00 00 00 00	goto +218 <LBB43_54>

00000000000005b8 <LBB43_20>:
     183:	b7 01 00 00 06 00 00 00	r1 = 6
     184:	0f 16 00 00 00 00 00 00	r6 += r1
     185:	bf a1 00 00 00 00 00 00	r1 = r10
     186:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     187:	b7 02 00 00 01 00 00 00	r2 = 1
     188:	bf 63 00 00 00 00 00 00	r3 = r6
     189:	85 00 00 00 04 00 00 00	call 4
     190:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     191:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     192:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     193:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB43_22>
     194:	b7 04 00 00 80 00 00 00	r4 = 128
     195:	b7 03 00 00 81 00 00 00	r3 = 129
     196:	b7 01 00 00 3a 00 00 00	r1 = 58
     197:	05 00 0d 00 00 00 00 00	goto +13 <LBB43_22>

0000000000000630 <LBB43_18>:
     198:	b7 01 00 00 09 00 00 00	r1 = 9
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     208:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB43_22>
     209:	b7 04 00 00 08 00 00 00	r4 = 8
     210:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000698 <LBB43_22>:
;     if (proto != 0 && proto != l4_proto)
     211:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     212:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB43_24>
     213:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB43_92>

00000000000006b0 <LBB43_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     214:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB43_27>
     215:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB43_29>
     216:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB43_35>
     217:	05 00 9f 00 00 00 00 00	goto +159 <LBB43_92>

00000000000006d0 <LBB43_35>:
     218:	b7 01 00 00 c0 00 00 00	r1 = 192
     219:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     220:	bf 63 00 00 00 00 00 00	r3 = r6
     221:	0f 13 00 00 00 00 00 00	r3 += r1
     222:	bf a1 00 00 00 00 00 00	r1 = r10
     223:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     224:	b7 02 00 00 08 00 00 00	r2 = 8
     225:	85 00 00 00 71 00 00 00	call 113
     226:	b7 01 00 00 b6 00 00 00	r1 = 182
     227:	bf 63 00 00 00 00 00 00	r3 = r6
     228:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     229:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     230:	bf a1 00 00 00 00 00 00	r1 = r10
     231:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     232:	b7 02 00 00 02 00 00 00	r2 = 2
     233:	85 00 00 00 71 00 00 00	call 113
     234:	b7 01 00 00 b4 00 00 00	r1 = 180
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     237:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     238:	bf a1 00 00 00 00 00 00	r1 = r10
     239:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     240:	b7 02 00 00 02 00 00 00	r2 = 2
     241:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     242:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     243:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     244:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB43_37>
     245:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000007b0 <LBB43_37>:
;     return head + network_header;
     246:	57 06 00 00 ff ff 00 00	r6 &= 65535
     247:	0f 69 00 00 00 00 00 00	r9 += r6
     248:	bf a1 00 00 00 00 00 00	r1 = r10
     249:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     250:	b7 02 00 00 01 00 00 00	r2 = 1
     251:	bf 93 00 00 00 00 00 00	r3 = r9
     252:	85 00 00 00 04 00 00 00	call 4
     253:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     254:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     255:	57 02 00 00 f0 00 00 00	r2 &= 240
     256:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB43_39>
     257:	bf a1 00 00 00 00 00 00	r1 = r10
     258:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     259:	b7 02 00 00 01 00 00 00	r2 = 1
     260:	bf 93 00 00 00 00 00 00	r3 = r9
     261:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     262:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     263:	67 01 00 00 02 00 00 00	r1 <<= 2
     264:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000848 <LBB43_39>:
;     return l3_header + transport_size;
     265:	0f 19 00 00 00 00 00 00	r9 += r1
     266:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9

0000000000000858 <LBB43_40>:
     267:	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 72)
;     if (port != 0) {
     268:	bf 92 00 00 00 00 00 00	r2 = r9
     269:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB43_45>
;         if (l4_proto == IPPROTO_TCP) {
     270:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     271:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB43_52>
     272:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB43_45>
     273:	b7 01 00 00 00 00 00 00	r1 = 0
     274:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     275:	bf 63 00 00 00 00 00 00	r3 = r6
     276:	0f 13 00 00 00 00 00 00	r3 += r1
     277:	bf a1 00 00 00 00 00 00	r1 = r10
     278:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     279:	b7 02 00 00 02 00 00 00	r2 = 2
     280:	85 00 00 00 71 00 00 00	call 113
     281:	b7 01 00 00 02 00 00 00	r1 = 2
     282:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     283:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     284:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     285:	bf a1 00 00 00 00 00 00	r1 = r10
     286:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     287:	b7 02 00 00 02 00 00 00	r2 = 2
     288:	bf 63 00 00 00 00 00 00	r3 = r6
     289:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     290:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     291:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     292:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB43_54>
     293:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     294:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB43_92>
     295:	05 00 69 00 00 00 00 00	goto +105 <LBB43_54>

0000000000000940 <LBB43_27>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     296:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB43_35>
     297:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB43_92>

0000000000000950 <LBB43_29>:
     298:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r4
     299:	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r3
     300:	b7 01 00 00 c0 00 00 00	r1 = 192
     301:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     302:	bf 63 00 00 00 00 00 00	r3 = r6
     303:	0f 13 00 00 00 00 00 00	r3 += r1
     304:	bf a1 00 00 00 00 00 00	r1 = r10
     305:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     306:	b7 02 00 00 08 00 00 00	r2 = 8
     307:	85 00 00 00 71 00 00 00	call 113
     308:	b7 01 00 00 b6 00 00 00	r1 = 182
     309:	bf 63 00 00 00 00 00 00	r3 = r6
     310:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     311:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     312:	bf a1 00 00 00 00 00 00	r1 = r10
     313:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     314:	b7 02 00 00 02 00 00 00	r2 = 2
     315:	85 00 00 00 71 00 00 00	call 113
     316:	b7 01 00 00 b4 00 00 00	r1 = 180
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     319:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     320:	bf a1 00 00 00 00 00 00	r1 = r10
     321:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     322:	b7 02 00 00 02 00 00 00	r2 = 2
     323:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     324:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     325:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     326:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB43_31>
     327:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000a40 <LBB43_31>:
;     return head + network_header;
     328:	57 06 00 00 ff ff 00 00	r6 &= 65535
     329:	0f 69 00 00 00 00 00 00	r9 += r6
     330:	bf a1 00 00 00 00 00 00	r1 = r10
     331:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     332:	b7 02 00 00 01 00 00 00	r2 = 1
     333:	bf 93 00 00 00 00 00 00	r3 = r9
     334:	85 00 00 00 04 00 00 00	call 4
     335:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     336:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     337:	57 02 00 00 f0 00 00 00	r2 &= 240
     338:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB43_33>
     339:	bf a1 00 00 00 00 00 00	r1 = r10
     340:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     341:	b7 02 00 00 01 00 00 00	r2 = 1
     342:	bf 93 00 00 00 00 00 00	r3 = r9
     343:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     344:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     345:	67 01 00 00 02 00 00 00	r1 <<= 2
     346:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000ad8 <LBB43_33>:
;     return l3_header + transport_size;
     347:	0f 19 00 00 00 00 00 00	r9 += r1
     348:	bf a6 00 00 00 00 00 00	r6 = r10
     349:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     350:	bf 61 00 00 00 00 00 00	r1 = r6
     351:	b7 02 00 00 08 00 00 00	r2 = 8
     352:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
     353:	bf 93 00 00 00 00 00 00	r3 = r9
     354:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     355:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     356:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     357:	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 88)
     358:	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 96)
     359:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB43_40>
     360:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     361:	07 02 00 00 e8 ff ff ff	r2 += -24
     362:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     363:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB43_40>
     364:	05 00 0c 00 00 00 00 00	goto +12 <LBB43_92>

0000000000000b68 <LBB43_45>:
;     if (proto != 0 && proto != l4_proto)
     365:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     366:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB43_54>
     367:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
;     if (proto != 0 && icmpid != 0) {
     368:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB43_54>
     369:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     370:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB43_54>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     371:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     372:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB43_50>
     373:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB43_54>

0000000000000bb0 <LBB43_50>:
;         if (icmpid != ev_icmpid)
     374:	57 01 00 00 ff ff 00 00	r1 &= 65535
     375:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
     376:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB43_54>

0000000000000bc8 <LBB43_92>:
;     return do_trace(ctx, skb, "br_nf_dev_queue_xmit");
     377:	b7 00 00 00 00 00 00 00	r0 = 0
     378:	95 00 00 00 00 00 00 00	exit

0000000000000bd8 <LBB43_52>:
     379:	b7 01 00 00 00 00 00 00	r1 = 0
     380:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     381:	bf 63 00 00 00 00 00 00	r3 = r6
     382:	0f 13 00 00 00 00 00 00	r3 += r1
     383:	bf a1 00 00 00 00 00 00	r1 = r10
     384:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     385:	b7 02 00 00 02 00 00 00	r2 = 2
     386:	85 00 00 00 71 00 00 00	call 113
     387:	b7 01 00 00 02 00 00 00	r1 = 2
     388:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     389:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     390:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     391:	bf a1 00 00 00 00 00 00	r1 = r10
     392:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     393:	b7 02 00 00 02 00 00 00	r2 = 2
     394:	bf 63 00 00 00 00 00 00	r3 = r6
     395:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     396:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     397:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     398:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB43_54>
     399:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     400:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB43_92>

0000000000000c88 <LBB43_54>:
;     event->flags |= SKBTRACER_EVENT_IF;
     401:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     402:	47 01 00 00 01 00 00 00	r1 |= 1
     403:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     404:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
;     ev->skb = (u64)skb;
     405:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     406:	85 00 00 00 05 00 00 00	call 5
     407:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     408:	b7 01 00 00 10 00 00 00	r1 = 16
     409:	bf 96 00 00 00 00 00 00	r6 = r9
     410:	0f 16 00 00 00 00 00 00	r6 += r1
     411:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     412:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     413:	b7 02 00 00 08 00 00 00	r2 = 8
     414:	bf 63 00 00 00 00 00 00	r3 = r6
     415:	85 00 00 00 71 00 00 00	call 113
     416:	b7 01 00 00 70 00 00 00	r1 = 112
     417:	bf 93 00 00 00 00 00 00	r3 = r9
     418:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     419:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     420:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     421:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     422:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     423:	b7 02 00 00 04 00 00 00	r2 = 4
     424:	85 00 00 00 71 00 00 00	call 113
     425:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     426:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     427:	85 00 00 00 08 00 00 00	call 8
     428:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     429:	85 00 00 00 0e 00 00 00	call 14
     430:	57 00 00 00 ff ff 00 00	r0 &= 65535
     431:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     432:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     433:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     434:	bf 91 00 00 00 00 00 00	r1 = r9
     435:	b7 02 00 00 08 00 00 00	r2 = 8
     436:	bf 63 00 00 00 00 00 00	r3 = r6
     437:	85 00 00 00 71 00 00 00	call 113
     438:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     439:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     440:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     441:	bf 91 00 00 00 00 00 00	r1 = r9
     442:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     443:	b7 02 00 00 08 00 00 00	r2 = 8
     444:	85 00 00 00 71 00 00 00	call 113
     445:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     446:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     447:	0f 13 00 00 00 00 00 00	r3 += r1
     448:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     449:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     450:	b7 02 00 00 04 00 00 00	r2 = 4
     451:	85 00 00 00 71 00 00 00	call 113
     452:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     453:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB43_57>
     454:	b7 01 00 00 18 00 00 00	r1 = 24
     455:	bf 93 00 00 00 00 00 00	r3 = r9
     456:	0f 13 00 00 00 00 00 00	r3 += r1
     457:	bf a1 00 00 00 00 00 00	r1 = r10
     458:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     459:	b7 02 00 00 08 00 00 00	r2 = 8
     460:	85 00 00 00 71 00 00 00	call 113
     461:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     462:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     463:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB43_57>
     464:	b7 01 00 00 30 00 00 00	r1 = 48
     465:	0f 13 00 00 00 00 00 00	r3 += r1
     466:	bf a1 00 00 00 00 00 00	r1 = r10
     467:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     468:	b7 02 00 00 08 00 00 00	r2 = 8
     469:	85 00 00 00 71 00 00 00	call 113
     470:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     471:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     472:	0f 13 00 00 00 00 00 00	r3 += r1
     473:	bf a1 00 00 00 00 00 00	r1 = r10
     474:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     475:	b7 02 00 00 04 00 00 00	r2 = 4
     476:	85 00 00 00 71 00 00 00	call 113
     477:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000ef0 <LBB43_57>:
;     pkt_info->netns = get_netns(skb);
     478:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     479:	b7 01 00 00 80 00 00 00	r1 = 128
     480:	bf 93 00 00 00 00 00 00	r3 = r9
     481:	0f 13 00 00 00 00 00 00	r3 += r1
     482:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     483:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     484:	bf a1 00 00 00 00 00 00	r1 = r10
     485:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     486:	b7 02 00 00 01 00 00 00	r2 = 1
     487:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     488:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     489:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     490:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     491:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     492:	b7 01 00 00 00 00 00 00	r1 = 0
     493:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     494:	0f 13 00 00 00 00 00 00	r3 += r1
;     pkt_info->ifname[0] = 0;
     495:	bf 71 00 00 00 00 00 00	r1 = r7
     496:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     497:	b7 02 00 00 10 00 00 00	r2 = 16
     498:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     499:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     500:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB43_59>
     501:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     502:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     503:	b7 01 00 00 69 00 00 00	r1 = 105
     504:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     505:	b7 01 00 00 6e 00 00 00	r1 = 110
     506:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000000fd8 <LBB43_59>:
     507:	b7 01 00 00 c0 00 00 00	r1 = 192
     508:	bf 93 00 00 00 00 00 00	r3 = r9
     509:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     510:	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r3
     511:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     512:	07 01 00 00 f8 ff ff ff	r1 += -8
     513:	b7 02 00 00 08 00 00 00	r2 = 8
     514:	85 00 00 00 71 00 00 00	call 113
     515:	b7 01 00 00 b6 00 00 00	r1 = 182
     516:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     517:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     518:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     519:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     520:	b7 02 00 00 02 00 00 00	r2 = 2
     521:	bf 93 00 00 00 00 00 00	r3 = r9
     522:	85 00 00 00 71 00 00 00	call 113
     523:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     524:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     525:	bf 71 00 00 00 00 00 00	r1 = r7
     526:	07 01 00 00 64 00 00 00	r1 += 100
     527:	b7 02 00 00 06 00 00 00	r2 = 6
     528:	bf 63 00 00 00 00 00 00	r3 = r6
     529:	85 00 00 00 04 00 00 00	call 4
     530:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     531:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	b7 02 00 00 08 00 00 00	r2 = 8
     533:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     534:	85 00 00 00 71 00 00 00	call 113
     535:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     536:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     537:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     538:	b7 02 00 00 02 00 00 00	r2 = 2
     539:	bf 93 00 00 00 00 00 00	r3 = r9
     540:	85 00 00 00 71 00 00 00	call 113
     541:	b7 01 00 00 b4 00 00 00	r1 = 180
     542:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
     543:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     544:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     547:	b7 02 00 00 02 00 00 00	r2 = 2
     548:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     549:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     550:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     551:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB43_61>
     552:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001148 <LBB43_61>:
;     return head + network_header;
     553:	57 09 00 00 ff ff 00 00	r9 &= 65535
     554:	0f 96 00 00 00 00 00 00	r6 += r9
     555:	bf a1 00 00 00 00 00 00	r1 = r10
     556:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     557:	b7 02 00 00 01 00 00 00	r2 = 1
     558:	bf 63 00 00 00 00 00 00	r3 = r6
     559:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     560:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     561:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     562:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB43_66>
     563:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB43_92>
     564:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     565:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     566:	b7 01 00 00 c0 00 00 00	r1 = 192
     567:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     568:	bf 93 00 00 00 00 00 00	r3 = r9
     569:	0f 13 00 00 00 00 00 00	r3 += r1
     570:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     572:	b7 02 00 00 08 00 00 00	r2 = 8
     573:	85 00 00 00 71 00 00 00	call 113
     574:	b7 01 00 00 b6 00 00 00	r1 = 182
     575:	bf 93 00 00 00 00 00 00	r3 = r9
     576:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     577:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     578:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     579:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     580:	b7 02 00 00 02 00 00 00	r2 = 2
     581:	85 00 00 00 71 00 00 00	call 113
     582:	b7 01 00 00 b4 00 00 00	r1 = 180
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     585:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     586:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     587:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     588:	b7 02 00 00 02 00 00 00	r2 = 2
     589:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     590:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     591:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     592:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB43_65>
     593:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001290 <LBB43_65>:
;     return head + network_header;
     594:	57 09 00 00 ff ff 00 00	r9 &= 65535
     595:	0f 96 00 00 00 00 00 00	r6 += r9
     596:	b7 01 00 00 0c 00 00 00	r1 = 12
     597:	bf 63 00 00 00 00 00 00	r3 = r6
     598:	0f 13 00 00 00 00 00 00	r3 += r1
     599:	bf a1 00 00 00 00 00 00	r1 = r10
     600:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     601:	b7 02 00 00 04 00 00 00	r2 = 4
     602:	85 00 00 00 71 00 00 00	call 113
     603:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     604:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     605:	b7 01 00 00 10 00 00 00	r1 = 16
     606:	bf 63 00 00 00 00 00 00	r3 = r6
     607:	0f 13 00 00 00 00 00 00	r3 += r1
     608:	bf a1 00 00 00 00 00 00	r1 = r10
     609:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     610:	b7 02 00 00 04 00 00 00	r2 = 4
     611:	85 00 00 00 71 00 00 00	call 113
     612:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     613:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     614:	b7 01 00 00 02 00 00 00	r1 = 2
     615:	bf 63 00 00 00 00 00 00	r3 = r6
     616:	0f 13 00 00 00 00 00 00	r3 += r1
     617:	bf a1 00 00 00 00 00 00	r1 = r10
     618:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     619:	b7 02 00 00 02 00 00 00	r2 = 2
     620:	85 00 00 00 71 00 00 00	call 113
     621:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     622:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     623:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     624:	b7 01 00 00 09 00 00 00	r1 = 9
     625:	05 00 38 00 00 00 00 00	goto +56 <LBB43_69>

0000000000001390 <LBB43_66>:
     626:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     627:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     628:	b7 01 00 00 c0 00 00 00	r1 = 192
     629:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     630:	bf 93 00 00 00 00 00 00	r3 = r9
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     634:	b7 02 00 00 08 00 00 00	r2 = 8
     635:	85 00 00 00 71 00 00 00	call 113
     636:	b7 01 00 00 b6 00 00 00	r1 = 182
     637:	bf 93 00 00 00 00 00 00	r3 = r9
     638:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     639:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     640:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     641:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     642:	b7 02 00 00 02 00 00 00	r2 = 2
     643:	85 00 00 00 71 00 00 00	call 113
     644:	b7 01 00 00 b4 00 00 00	r1 = 180
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     647:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     648:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     649:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     650:	b7 02 00 00 02 00 00 00	r2 = 2
     651:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     652:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     653:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     654:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB43_68>
     655:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001480 <LBB43_68>:
;     return head + network_header;
     656:	57 09 00 00 ff ff 00 00	r9 &= 65535
     657:	0f 96 00 00 00 00 00 00	r6 += r9
     658:	b7 01 00 00 08 00 00 00	r1 = 8
     659:	bf 63 00 00 00 00 00 00	r3 = r6
     660:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
     661:	bf 71 00 00 00 00 00 00	r1 = r7
     662:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     663:	b7 02 00 00 10 00 00 00	r2 = 16
     664:	85 00 00 00 04 00 00 00	call 4
     665:	b7 01 00 00 18 00 00 00	r1 = 24
     666:	bf 63 00 00 00 00 00 00	r3 = r6
     667:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     668:	bf 71 00 00 00 00 00 00	r1 = r7
     669:	07 01 00 00 80 00 00 00	r1 += 128
     670:	b7 02 00 00 10 00 00 00	r2 = 16
     671:	85 00 00 00 04 00 00 00	call 4
     672:	b7 01 00 00 04 00 00 00	r1 = 4
     673:	bf 63 00 00 00 00 00 00	r3 = r6
     674:	0f 13 00 00 00 00 00 00	r3 += r1
     675:	bf a1 00 00 00 00 00 00	r1 = r10
     676:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     677:	b7 02 00 00 02 00 00 00	r2 = 2
     678:	85 00 00 00 71 00 00 00	call 113
     679:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     680:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     681:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000001550 <LBB43_69>:
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
     684:	bf a1 00 00 00 00 00 00	r1 = r10
     685:	07 01 00 00 f8 ff ff ff	r1 += -8
     686:	b7 02 00 00 01 00 00 00	r2 = 1
     687:	85 00 00 00 71 00 00 00	call 113
     688:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     689:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     690:	bf a1 00 00 00 00 00 00	r1 = r10
     691:	07 01 00 00 f8 ff ff ff	r1 += -8
     692:	b7 02 00 00 01 00 00 00	r2 = 1
     693:	bf 63 00 00 00 00 00 00	r3 = r6
     694:	85 00 00 00 04 00 00 00	call 4
     695:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     696:	57 01 00 00 f0 00 00 00	r1 &= 240
     697:	77 01 00 00 04 00 00 00	r1 >>= 4
     698:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     699:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     700:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB43_72>
     701:	15 01 53 00 01 00 00 00	if r1 == 1 goto +83 <LBB43_84>
     702:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB43_74>
     703:	05 00 b9 fe 00 00 00 00	goto -327 <LBB43_92>

0000000000001600 <LBB43_74>:
     704:	b7 01 00 00 c0 00 00 00	r1 = 192
     705:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     706:	bf 93 00 00 00 00 00 00	r3 = r9
     707:	0f 13 00 00 00 00 00 00	r3 += r1
     708:	bf a1 00 00 00 00 00 00	r1 = r10
     709:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     710:	b7 02 00 00 08 00 00 00	r2 = 8
     711:	85 00 00 00 71 00 00 00	call 113
     712:	b7 01 00 00 b6 00 00 00	r1 = 182
     713:	bf 93 00 00 00 00 00 00	r3 = r9
     714:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     715:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     716:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     717:	bf a1 00 00 00 00 00 00	r1 = r10
     718:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     719:	b7 02 00 00 02 00 00 00	r2 = 2
     720:	85 00 00 00 71 00 00 00	call 113
     721:	b7 01 00 00 b4 00 00 00	r1 = 180
     722:	0f 19 00 00 00 00 00 00	r9 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     723:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     726:	b7 02 00 00 02 00 00 00	r2 = 2
     727:	bf 93 00 00 00 00 00 00	r3 = r9
     728:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     729:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     730:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     731:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB43_76>
     732:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000016e8 <LBB43_76>:
;     return head + network_header;
     733:	57 06 00 00 ff ff 00 00	r6 &= 65535
     734:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
     735:	0f 61 00 00 00 00 00 00	r1 += r6
     736:	bf 16 00 00 00 00 00 00	r6 = r1
     737:	bf a1 00 00 00 00 00 00	r1 = r10
     738:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     739:	b7 02 00 00 01 00 00 00	r2 = 1
     740:	bf 63 00 00 00 00 00 00	r3 = r6
     741:	85 00 00 00 04 00 00 00	call 4
     742:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     743:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     744:	57 02 00 00 f0 00 00 00	r2 &= 240
     745:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB43_78>
     746:	bf a1 00 00 00 00 00 00	r1 = r10
     747:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     748:	b7 02 00 00 01 00 00 00	r2 = 1
     749:	bf 63 00 00 00 00 00 00	r3 = r6
     750:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     751:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     752:	67 01 00 00 02 00 00 00	r1 <<= 2
     753:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001790 <LBB43_78>:
;     return l3_header + transport_size;
     754:	0f 16 00 00 00 00 00 00	r6 += r1
     755:	b7 01 00 00 00 00 00 00	r1 = 0
     756:	bf 63 00 00 00 00 00 00	r3 = r6
     757:	0f 13 00 00 00 00 00 00	r3 += r1
     758:	bf a1 00 00 00 00 00 00	r1 = r10
     759:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     760:	b7 02 00 00 02 00 00 00	r2 = 2
     761:	85 00 00 00 71 00 00 00	call 113
     762:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     763:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     764:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     765:	b7 01 00 00 02 00 00 00	r1 = 2
     766:	bf 63 00 00 00 00 00 00	r3 = r6
     767:	0f 13 00 00 00 00 00 00	r3 += r1
     768:	bf a1 00 00 00 00 00 00	r1 = r10
     769:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     770:	b7 02 00 00 02 00 00 00	r2 = 2
     771:	85 00 00 00 71 00 00 00	call 113
     772:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     773:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     774:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     775:	07 06 00 00 0c 00 00 00	r6 += 12
     776:	bf 71 00 00 00 00 00 00	r1 = r7
     777:	07 01 00 00 9c 00 00 00	r1 += 156
     778:	b7 02 00 00 02 00 00 00	r2 = 2
     779:	bf 63 00 00 00 00 00 00	r3 = r6
     780:	85 00 00 00 04 00 00 00	call 4
     781:	05 00 8a 00 00 00 00 00	goto +138 <LBB43_89>

0000000000001870 <LBB43_72>:
;     if (l4_proto == IPPROTO_TCP) {
     782:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB43_79>
     783:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB43_84>
     784:	05 00 68 fe 00 00 00 00	goto -408 <LBB43_92>

0000000000001888 <LBB43_84>:
     785:	b7 01 00 00 c0 00 00 00	r1 = 192
     786:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     787:	bf 63 00 00 00 00 00 00	r3 = r6
     788:	0f 13 00 00 00 00 00 00	r3 += r1
     789:	bf a1 00 00 00 00 00 00	r1 = r10
     790:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     791:	b7 02 00 00 08 00 00 00	r2 = 8
     792:	85 00 00 00 71 00 00 00	call 113
     793:	b7 01 00 00 b6 00 00 00	r1 = 182
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     796:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     797:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     798:	bf a1 00 00 00 00 00 00	r1 = r10
     799:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     800:	b7 02 00 00 02 00 00 00	r2 = 2
     801:	85 00 00 00 71 00 00 00	call 113
     802:	b7 01 00 00 b4 00 00 00	r1 = 180
     803:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     804:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     805:	bf a1 00 00 00 00 00 00	r1 = r10
     806:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     807:	b7 02 00 00 02 00 00 00	r2 = 2
     808:	bf 63 00 00 00 00 00 00	r3 = r6
     809:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     810:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     811:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     812:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB43_86>
     813:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001970 <LBB43_86>:
;     return head + network_header;
     814:	57 09 00 00 ff ff 00 00	r9 &= 65535
     815:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     816:	0f 96 00 00 00 00 00 00	r6 += r9
     817:	bf a1 00 00 00 00 00 00	r1 = r10
     818:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     819:	b7 02 00 00 01 00 00 00	r2 = 1
     820:	bf 63 00 00 00 00 00 00	r3 = r6
     821:	85 00 00 00 04 00 00 00	call 4
     822:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     823:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     824:	57 02 00 00 f0 00 00 00	r2 &= 240
     825:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB43_88>
     826:	bf a1 00 00 00 00 00 00	r1 = r10
     827:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     828:	b7 02 00 00 01 00 00 00	r2 = 1
     829:	bf 63 00 00 00 00 00 00	r3 = r6
     830:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     831:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     832:	67 01 00 00 02 00 00 00	r1 <<= 2
     833:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a10 <LBB43_88>:
;     return l3_header + transport_size;
     834:	0f 16 00 00 00 00 00 00	r6 += r1
     835:	bf a9 00 00 00 00 00 00	r9 = r10
     836:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     837:	bf 91 00 00 00 00 00 00	r1 = r9
     838:	b7 02 00 00 08 00 00 00	r2 = 8
     839:	bf 63 00 00 00 00 00 00	r3 = r6
     840:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     841:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     842:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     843:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     844:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     845:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     846:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     847:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     848:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     849:	05 00 46 00 00 00 00 00	goto +70 <LBB43_89>

0000000000001a90 <LBB43_79>:
     850:	b7 01 00 00 c0 00 00 00	r1 = 192
     851:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     852:	bf 63 00 00 00 00 00 00	r3 = r6
     853:	0f 13 00 00 00 00 00 00	r3 += r1
     854:	bf a1 00 00 00 00 00 00	r1 = r10
     855:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     856:	b7 02 00 00 08 00 00 00	r2 = 8
     857:	85 00 00 00 71 00 00 00	call 113
     858:	b7 01 00 00 b6 00 00 00	r1 = 182
     859:	bf 63 00 00 00 00 00 00	r3 = r6
     860:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     861:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     862:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     863:	bf a1 00 00 00 00 00 00	r1 = r10
     864:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     865:	b7 02 00 00 02 00 00 00	r2 = 2
     866:	85 00 00 00 71 00 00 00	call 113
     867:	b7 01 00 00 b4 00 00 00	r1 = 180
     868:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     869:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     870:	bf a1 00 00 00 00 00 00	r1 = r10
     871:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     872:	b7 02 00 00 02 00 00 00	r2 = 2
     873:	bf 63 00 00 00 00 00 00	r3 = r6
     874:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     875:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     876:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     877:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB43_81>
     878:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001b78 <LBB43_81>:
;     return head + network_header;
     879:	57 09 00 00 ff ff 00 00	r9 &= 65535
     880:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     881:	0f 96 00 00 00 00 00 00	r6 += r9
     882:	bf a1 00 00 00 00 00 00	r1 = r10
     883:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     884:	b7 02 00 00 01 00 00 00	r2 = 1
     885:	bf 63 00 00 00 00 00 00	r3 = r6
     886:	85 00 00 00 04 00 00 00	call 4
     887:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     888:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     889:	57 02 00 00 f0 00 00 00	r2 &= 240
     890:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB43_83>
     891:	bf a1 00 00 00 00 00 00	r1 = r10
     892:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     893:	b7 02 00 00 01 00 00 00	r2 = 1
     894:	bf 63 00 00 00 00 00 00	r3 = r6
     895:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     896:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     897:	67 01 00 00 02 00 00 00	r1 <<= 2
     898:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c18 <LBB43_83>:
;     return l3_header + transport_size;
     899:	0f 16 00 00 00 00 00 00	r6 += r1
     900:	b7 01 00 00 00 00 00 00	r1 = 0
     901:	bf 63 00 00 00 00 00 00	r3 = r6
     902:	0f 13 00 00 00 00 00 00	r3 += r1
     903:	bf a1 00 00 00 00 00 00	r1 = r10
     904:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     905:	b7 02 00 00 02 00 00 00	r2 = 2
     906:	85 00 00 00 71 00 00 00	call 113
     907:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     908:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     909:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     910:	b7 01 00 00 02 00 00 00	r1 = 2
     911:	0f 16 00 00 00 00 00 00	r6 += r1
     912:	bf a1 00 00 00 00 00 00	r1 = r10
     913:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     914:	b7 02 00 00 02 00 00 00	r2 = 2
     915:	bf 63 00 00 00 00 00 00	r3 = r6
     916:	85 00 00 00 71 00 00 00	call 113
     917:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     918:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     919:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001cc0 <LBB43_89>:
     920:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
;     return cfg->callstack == 0;
     921:	71 81 11 00 00 00 00 00	r1 = *(u8 *)(r8 + 17)
;     if (!filter_callstack(cfg))
     922:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB43_91>
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
     923:	bf 61 00 00 00 00 00 00	r1 = r6
     924:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     926:	b7 03 00 00 00 00 00 00	r3 = 0
     927:	85 00 00 00 1b 00 00 00	call 27
     928:	63 07 30 00 00 00 00 00	*(u32 *)(r7 + 48) = r0

0000000000001d08 <LBB43_91>:
     929:	b7 01 00 00 74 00 00 00	r1 = 116
;     for (j = 10; j < 64; j += 10) CPY(j);
     930:	73 17 13 00 00 00 00 00	*(u8 *)(r7 + 19) = r1
     931:	b7 01 00 00 69 00 00 00	r1 = 105
     932:	73 17 12 00 00 00 00 00	*(u8 *)(r7 + 18) = r1
     933:	b7 01 00 00 6d 00 00 00	r1 = 109
     934:	73 17 11 00 00 00 00 00	*(u8 *)(r7 + 17) = r1
     935:	b7 01 00 00 78 00 00 00	r1 = 120
     936:	73 17 10 00 00 00 00 00	*(u8 *)(r7 + 16) = r1
     937:	b7 01 00 00 75 00 00 00	r1 = 117
     938:	73 17 0d 00 00 00 00 00	*(u8 *)(r7 + 13) = r1
     939:	73 17 0b 00 00 00 00 00	*(u8 *)(r7 + 11) = r1
     940:	b7 01 00 00 71 00 00 00	r1 = 113
     941:	73 17 0a 00 00 00 00 00	*(u8 *)(r7 + 10) = r1
     942:	b7 01 00 00 76 00 00 00	r1 = 118
     943:	73 17 08 00 00 00 00 00	*(u8 *)(r7 + 8) = r1
     944:	b7 01 00 00 65 00 00 00	r1 = 101
     945:	73 17 0e 00 00 00 00 00	*(u8 *)(r7 + 14) = r1
     946:	73 17 0c 00 00 00 00 00	*(u8 *)(r7 + 12) = r1
     947:	73 17 07 00 00 00 00 00	*(u8 *)(r7 + 7) = r1
     948:	b7 01 00 00 64 00 00 00	r1 = 100
     949:	73 17 06 00 00 00 00 00	*(u8 *)(r7 + 6) = r1
     950:	b7 01 00 00 66 00 00 00	r1 = 102
     951:	73 17 04 00 00 00 00 00	*(u8 *)(r7 + 4) = r1
     952:	b7 01 00 00 6e 00 00 00	r1 = 110
     953:	73 17 03 00 00 00 00 00	*(u8 *)(r7 + 3) = r1
     954:	b7 01 00 00 5f 00 00 00	r1 = 95
     955:	73 17 0f 00 00 00 00 00	*(u8 *)(r7 + 15) = r1
     956:	73 17 09 00 00 00 00 00	*(u8 *)(r7 + 9) = r1
     957:	73 17 05 00 00 00 00 00	*(u8 *)(r7 + 5) = r1
     958:	73 17 02 00 00 00 00 00	*(u8 *)(r7 + 2) = r1
     959:	b7 01 00 00 72 00 00 00	r1 = 114
     960:	73 17 01 00 00 00 00 00	*(u8 *)(r7 + 1) = r1
     961:	b7 01 00 00 62 00 00 00	r1 = 98
     962:	73 17 00 00 00 00 00 00	*(u8 *)(r7 + 0) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     963:	bf 61 00 00 00 00 00 00	r1 = r6
     964:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     966:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     968:	bf 74 00 00 00 00 00 00	r4 = r7
     969:	b7 05 00 00 e0 00 00 00	r5 = 224
     970:	85 00 00 00 19 00 00 00	call 25
     971:	05 00 ad fd 00 00 00 00	goto -595 <LBB43_92>

Disassembly of section kprobe/ip_rcv:

0000000000000000 <k_ip_rcv>:
; int k_ip_rcv(struct pt_regs *ctx) {
       0:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM1(ctx);
       1:	79 11 70 00 00 00 00 00	r1 = *(u64 *)(r1 + 112)
       2:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       3:	b7 06 00 00 00 00 00 00	r6 = 0
;     GET_CFG();
       4:	63 6a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r6
       5:	bf a2 00 00 00 00 00 00	r2 = r10
       6:	07 02 00 00 e4 ff ff ff	r2 += -28
;     GET_CFG();
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	85 00 00 00 01 00 00 00	call 1
      10:	bf 08 00 00 00 00 00 00	r8 = r0
      11:	15 08 6d 01 00 00 00 00	if r8 == 0 goto +365 <LBB44_92>
      12:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
      13:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      14:	63 18 08 00 00 00 00 00	*(u32 *)(r8 + 8) = r1
;     u32 ev_buff_id = 0;
      15:	63 6a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r6
      16:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      17:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      18:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      20:	85 00 00 00 01 00 00 00	call 1
      21:	bf 07 00 00 00 00 00 00	r7 = r0
;     if (!ev) return NULL;
      22:	55 07 01 00 00 00 00 00	if r7 != 0 goto +1 <LBB44_3>
      23:	05 00 61 01 00 00 00 00	goto +353 <LBB44_92>

00000000000000c0 <LBB44_3>:
      24:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      25:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      26:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      27:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      28:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      29:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      30:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      31:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      32:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      33:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      34:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      35:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      36:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      37:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      38:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      39:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      40:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      41:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      42:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      43:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      44:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      45:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      46:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      47:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      48:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      49:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      50:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      51:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      52:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      53:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      54:	61 81 04 00 00 00 00 00	r1 = *(u32 *)(r8 + 4)
      55:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB44_5>
      56:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      57:	5d 01 3f 01 00 00 00 00	if r1 != r0 goto +319 <LBB44_92>

00000000000001d0 <LBB44_5>:
      58:	b7 01 00 00 10 00 00 00	r1 = 16
      59:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
      60:	bf 93 00 00 00 00 00 00	r3 = r9
      61:	0f 13 00 00 00 00 00 00	r3 += r1
      62:	bf a6 00 00 00 00 00 00	r6 = r10
      63:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      64:	bf 61 00 00 00 00 00 00	r1 = r6
      65:	b7 02 00 00 08 00 00 00	r2 = 8
      66:	85 00 00 00 71 00 00 00	call 113
      67:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      68:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      69:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      70:	bf 61 00 00 00 00 00 00	r1 = r6
      71:	b7 02 00 00 08 00 00 00	r2 = 8
      72:	85 00 00 00 71 00 00 00	call 113
      73:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      74:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      75:	0f 13 00 00 00 00 00 00	r3 += r1
      76:	bf a1 00 00 00 00 00 00	r1 = r10
      77:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      78:	b7 02 00 00 04 00 00 00	r2 = 4
      79:	85 00 00 00 71 00 00 00	call 113
      80:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      81:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB44_8>
      82:	b7 01 00 00 18 00 00 00	r1 = 24
      83:	bf 93 00 00 00 00 00 00	r3 = r9
      84:	0f 13 00 00 00 00 00 00	r3 += r1
      85:	bf a1 00 00 00 00 00 00	r1 = r10
      86:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
      87:	b7 02 00 00 08 00 00 00	r2 = 8
      88:	85 00 00 00 71 00 00 00	call 113
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
      90:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB44_11>
      91:	b7 01 00 00 30 00 00 00	r1 = 48
      92:	0f 13 00 00 00 00 00 00	r3 += r1
      93:	bf a1 00 00 00 00 00 00	r1 = r10
      94:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      95:	b7 02 00 00 08 00 00 00	r2 = 8
      96:	85 00 00 00 71 00 00 00	call 113
      97:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      98:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     102:	b7 02 00 00 04 00 00 00	r2 = 4
     103:	85 00 00 00 71 00 00 00	call 113
     104:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000348 <LBB44_8>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     105:	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0)
     106:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB44_11>
     107:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB44_11>
     108:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB44_92>

0000000000000368 <LBB44_11>:
;     u16 icmpid = cfg->icmpid;
     109:	69 81 0e 00 00 00 00 00	r1 = *(u16 *)(r8 + 14)
;     u16 port = cfg->port;
     110:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     111:	69 81 0c 00 00 00 00 00	r1 = *(u16 *)(r8 + 12)
;     u8 proto = cfg->proto;
     112:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     113:	71 81 12 00 00 00 00 00	r1 = *(u8 *)(r8 + 18)
;     u32 addr = cfg->ip;
     114:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     115:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
     116:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     117:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     118:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     119:	b7 01 00 00 c0 00 00 00	r1 = 192
     120:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     121:	bf 93 00 00 00 00 00 00	r3 = r9
     122:	0f 13 00 00 00 00 00 00	r3 += r1
     123:	bf a1 00 00 00 00 00 00	r1 = r10
     124:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     125:	b7 02 00 00 08 00 00 00	r2 = 8
     126:	85 00 00 00 71 00 00 00	call 113
     127:	b7 01 00 00 b6 00 00 00	r1 = 182
     128:	bf 93 00 00 00 00 00 00	r3 = r9
     129:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     130:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     131:	bf a1 00 00 00 00 00 00	r1 = r10
     132:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     133:	b7 02 00 00 02 00 00 00	r2 = 2
     134:	85 00 00 00 71 00 00 00	call 113
     135:	b7 01 00 00 b4 00 00 00	r1 = 180
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     138:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     139:	bf a1 00 00 00 00 00 00	r1 = r10
     140:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     141:	b7 02 00 00 02 00 00 00	r2 = 2
     142:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     143:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     144:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     145:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB44_13>
     146:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000498 <LBB44_13>:
;     return head + network_header;
     147:	57 09 00 00 ff ff 00 00	r9 &= 65535
     148:	0f 96 00 00 00 00 00 00	r6 += r9
     149:	bf a1 00 00 00 00 00 00	r1 = r10
     150:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     151:	b7 02 00 00 01 00 00 00	r2 = 1
     152:	bf 63 00 00 00 00 00 00	r3 = r6
     153:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     154:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     155:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     156:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB44_20>
     157:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB44_92>
;         if (addr != 0) {
     158:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     159:	bf 19 00 00 00 00 00 00	r9 = r1
     160:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB44_18>
     161:	b7 01 00 00 0c 00 00 00	r1 = 12
     162:	bf 63 00 00 00 00 00 00	r3 = r6
     163:	0f 13 00 00 00 00 00 00	r3 += r1
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     166:	b7 02 00 00 04 00 00 00	r2 = 4
     167:	85 00 00 00 71 00 00 00	call 113
     168:	b7 01 00 00 10 00 00 00	r1 = 16
     169:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     170:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     171:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     172:	bf a1 00 00 00 00 00 00	r1 = r10
     173:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     174:	b7 02 00 00 04 00 00 00	r2 = 4
     175:	bf 63 00 00 00 00 00 00	r3 = r6
     176:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     177:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     178:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB44_54>
     179:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     180:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     181:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB44_92>
     182:	05 00 da 00 00 00 00 00	goto +218 <LBB44_54>

00000000000005b8 <LBB44_20>:
     183:	b7 01 00 00 06 00 00 00	r1 = 6
     184:	0f 16 00 00 00 00 00 00	r6 += r1
     185:	bf a1 00 00 00 00 00 00	r1 = r10
     186:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     187:	b7 02 00 00 01 00 00 00	r2 = 1
     188:	bf 63 00 00 00 00 00 00	r3 = r6
     189:	85 00 00 00 04 00 00 00	call 4
     190:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     191:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     192:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     193:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB44_22>
     194:	b7 04 00 00 80 00 00 00	r4 = 128
     195:	b7 03 00 00 81 00 00 00	r3 = 129
     196:	b7 01 00 00 3a 00 00 00	r1 = 58
     197:	05 00 0d 00 00 00 00 00	goto +13 <LBB44_22>

0000000000000630 <LBB44_18>:
     198:	b7 01 00 00 09 00 00 00	r1 = 9
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     208:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB44_22>
     209:	b7 04 00 00 08 00 00 00	r4 = 8
     210:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000698 <LBB44_22>:
;     if (proto != 0 && proto != l4_proto)
     211:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     212:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB44_24>
     213:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB44_92>

00000000000006b0 <LBB44_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     214:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB44_27>
     215:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB44_29>
     216:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB44_35>
     217:	05 00 9f 00 00 00 00 00	goto +159 <LBB44_92>

00000000000006d0 <LBB44_35>:
     218:	b7 01 00 00 c0 00 00 00	r1 = 192
     219:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     220:	bf 63 00 00 00 00 00 00	r3 = r6
     221:	0f 13 00 00 00 00 00 00	r3 += r1
     222:	bf a1 00 00 00 00 00 00	r1 = r10
     223:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     224:	b7 02 00 00 08 00 00 00	r2 = 8
     225:	85 00 00 00 71 00 00 00	call 113
     226:	b7 01 00 00 b6 00 00 00	r1 = 182
     227:	bf 63 00 00 00 00 00 00	r3 = r6
     228:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     229:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     230:	bf a1 00 00 00 00 00 00	r1 = r10
     231:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     232:	b7 02 00 00 02 00 00 00	r2 = 2
     233:	85 00 00 00 71 00 00 00	call 113
     234:	b7 01 00 00 b4 00 00 00	r1 = 180
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     237:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     238:	bf a1 00 00 00 00 00 00	r1 = r10
     239:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     240:	b7 02 00 00 02 00 00 00	r2 = 2
     241:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     242:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     243:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     244:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB44_37>
     245:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000007b0 <LBB44_37>:
;     return head + network_header;
     246:	57 06 00 00 ff ff 00 00	r6 &= 65535
     247:	0f 69 00 00 00 00 00 00	r9 += r6
     248:	bf a1 00 00 00 00 00 00	r1 = r10
     249:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     250:	b7 02 00 00 01 00 00 00	r2 = 1
     251:	bf 93 00 00 00 00 00 00	r3 = r9
     252:	85 00 00 00 04 00 00 00	call 4
     253:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     254:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     255:	57 02 00 00 f0 00 00 00	r2 &= 240
     256:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB44_39>
     257:	bf a1 00 00 00 00 00 00	r1 = r10
     258:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     259:	b7 02 00 00 01 00 00 00	r2 = 1
     260:	bf 93 00 00 00 00 00 00	r3 = r9
     261:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     262:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     263:	67 01 00 00 02 00 00 00	r1 <<= 2
     264:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000848 <LBB44_39>:
;     return l3_header + transport_size;
     265:	0f 19 00 00 00 00 00 00	r9 += r1
     266:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9

0000000000000858 <LBB44_40>:
     267:	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 72)
;     if (port != 0) {
     268:	bf 92 00 00 00 00 00 00	r2 = r9
     269:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB44_45>
;         if (l4_proto == IPPROTO_TCP) {
     270:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     271:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB44_52>
     272:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB44_45>
     273:	b7 01 00 00 00 00 00 00	r1 = 0
     274:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     275:	bf 63 00 00 00 00 00 00	r3 = r6
     276:	0f 13 00 00 00 00 00 00	r3 += r1
     277:	bf a1 00 00 00 00 00 00	r1 = r10
     278:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     279:	b7 02 00 00 02 00 00 00	r2 = 2
     280:	85 00 00 00 71 00 00 00	call 113
     281:	b7 01 00 00 02 00 00 00	r1 = 2
     282:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     283:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     284:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     285:	bf a1 00 00 00 00 00 00	r1 = r10
     286:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     287:	b7 02 00 00 02 00 00 00	r2 = 2
     288:	bf 63 00 00 00 00 00 00	r3 = r6
     289:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     290:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     291:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     292:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB44_54>
     293:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     294:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB44_92>
     295:	05 00 69 00 00 00 00 00	goto +105 <LBB44_54>

0000000000000940 <LBB44_27>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     296:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB44_35>
     297:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB44_92>

0000000000000950 <LBB44_29>:
     298:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r4
     299:	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r3
     300:	b7 01 00 00 c0 00 00 00	r1 = 192
     301:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     302:	bf 63 00 00 00 00 00 00	r3 = r6
     303:	0f 13 00 00 00 00 00 00	r3 += r1
     304:	bf a1 00 00 00 00 00 00	r1 = r10
     305:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     306:	b7 02 00 00 08 00 00 00	r2 = 8
     307:	85 00 00 00 71 00 00 00	call 113
     308:	b7 01 00 00 b6 00 00 00	r1 = 182
     309:	bf 63 00 00 00 00 00 00	r3 = r6
     310:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     311:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     312:	bf a1 00 00 00 00 00 00	r1 = r10
     313:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     314:	b7 02 00 00 02 00 00 00	r2 = 2
     315:	85 00 00 00 71 00 00 00	call 113
     316:	b7 01 00 00 b4 00 00 00	r1 = 180
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     319:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     320:	bf a1 00 00 00 00 00 00	r1 = r10
     321:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     322:	b7 02 00 00 02 00 00 00	r2 = 2
     323:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     324:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     325:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     326:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB44_31>
     327:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000a40 <LBB44_31>:
;     return head + network_header;
     328:	57 06 00 00 ff ff 00 00	r6 &= 65535
     329:	0f 69 00 00 00 00 00 00	r9 += r6
     330:	bf a1 00 00 00 00 00 00	r1 = r10
     331:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     332:	b7 02 00 00 01 00 00 00	r2 = 1
     333:	bf 93 00 00 00 00 00 00	r3 = r9
     334:	85 00 00 00 04 00 00 00	call 4
     335:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     336:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     337:	57 02 00 00 f0 00 00 00	r2 &= 240
     338:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB44_33>
     339:	bf a1 00 00 00 00 00 00	r1 = r10
     340:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     341:	b7 02 00 00 01 00 00 00	r2 = 1
     342:	bf 93 00 00 00 00 00 00	r3 = r9
     343:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     344:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     345:	67 01 00 00 02 00 00 00	r1 <<= 2
     346:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000ad8 <LBB44_33>:
;     return l3_header + transport_size;
     347:	0f 19 00 00 00 00 00 00	r9 += r1
     348:	bf a6 00 00 00 00 00 00	r6 = r10
     349:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     350:	bf 61 00 00 00 00 00 00	r1 = r6
     351:	b7 02 00 00 08 00 00 00	r2 = 8
     352:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
     353:	bf 93 00 00 00 00 00 00	r3 = r9
     354:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     355:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     356:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     357:	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 88)
     358:	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 96)
     359:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB44_40>
     360:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     361:	07 02 00 00 e8 ff ff ff	r2 += -24
     362:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     363:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB44_40>
     364:	05 00 0c 00 00 00 00 00	goto +12 <LBB44_92>

0000000000000b68 <LBB44_45>:
;     if (proto != 0 && proto != l4_proto)
     365:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     366:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB44_54>
     367:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
;     if (proto != 0 && icmpid != 0) {
     368:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB44_54>
     369:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     370:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB44_54>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     371:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     372:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB44_50>
     373:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB44_54>

0000000000000bb0 <LBB44_50>:
;         if (icmpid != ev_icmpid)
     374:	57 01 00 00 ff ff 00 00	r1 &= 65535
     375:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
     376:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB44_54>

0000000000000bc8 <LBB44_92>:
;     return do_trace(ctx, skb, "ip_rcv");
     377:	b7 00 00 00 00 00 00 00	r0 = 0
     378:	95 00 00 00 00 00 00 00	exit

0000000000000bd8 <LBB44_52>:
     379:	b7 01 00 00 00 00 00 00	r1 = 0
     380:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     381:	bf 63 00 00 00 00 00 00	r3 = r6
     382:	0f 13 00 00 00 00 00 00	r3 += r1
     383:	bf a1 00 00 00 00 00 00	r1 = r10
     384:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     385:	b7 02 00 00 02 00 00 00	r2 = 2
     386:	85 00 00 00 71 00 00 00	call 113
     387:	b7 01 00 00 02 00 00 00	r1 = 2
     388:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     389:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     390:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     391:	bf a1 00 00 00 00 00 00	r1 = r10
     392:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     393:	b7 02 00 00 02 00 00 00	r2 = 2
     394:	bf 63 00 00 00 00 00 00	r3 = r6
     395:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     396:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     397:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     398:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB44_54>
     399:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     400:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB44_92>

0000000000000c88 <LBB44_54>:
;     event->flags |= SKBTRACER_EVENT_IF;
     401:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     402:	47 01 00 00 01 00 00 00	r1 |= 1
     403:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     404:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
;     ev->skb = (u64)skb;
     405:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     406:	85 00 00 00 05 00 00 00	call 5
     407:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     408:	b7 01 00 00 10 00 00 00	r1 = 16
     409:	bf 96 00 00 00 00 00 00	r6 = r9
     410:	0f 16 00 00 00 00 00 00	r6 += r1
     411:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     412:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     413:	b7 02 00 00 08 00 00 00	r2 = 8
     414:	bf 63 00 00 00 00 00 00	r3 = r6
     415:	85 00 00 00 71 00 00 00	call 113
     416:	b7 01 00 00 70 00 00 00	r1 = 112
     417:	bf 93 00 00 00 00 00 00	r3 = r9
     418:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     419:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     420:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     421:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     422:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     423:	b7 02 00 00 04 00 00 00	r2 = 4
     424:	85 00 00 00 71 00 00 00	call 113
     425:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     426:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     427:	85 00 00 00 08 00 00 00	call 8
     428:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     429:	85 00 00 00 0e 00 00 00	call 14
     430:	57 00 00 00 ff ff 00 00	r0 &= 65535
     431:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     432:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     433:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     434:	bf 91 00 00 00 00 00 00	r1 = r9
     435:	b7 02 00 00 08 00 00 00	r2 = 8
     436:	bf 63 00 00 00 00 00 00	r3 = r6
     437:	85 00 00 00 71 00 00 00	call 113
     438:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     439:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     440:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     441:	bf 91 00 00 00 00 00 00	r1 = r9
     442:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     443:	b7 02 00 00 08 00 00 00	r2 = 8
     444:	85 00 00 00 71 00 00 00	call 113
     445:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     446:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     447:	0f 13 00 00 00 00 00 00	r3 += r1
     448:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     449:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     450:	b7 02 00 00 04 00 00 00	r2 = 4
     451:	85 00 00 00 71 00 00 00	call 113
     452:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     453:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB44_57>
     454:	b7 01 00 00 18 00 00 00	r1 = 24
     455:	bf 93 00 00 00 00 00 00	r3 = r9
     456:	0f 13 00 00 00 00 00 00	r3 += r1
     457:	bf a1 00 00 00 00 00 00	r1 = r10
     458:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     459:	b7 02 00 00 08 00 00 00	r2 = 8
     460:	85 00 00 00 71 00 00 00	call 113
     461:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     462:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     463:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB44_57>
     464:	b7 01 00 00 30 00 00 00	r1 = 48
     465:	0f 13 00 00 00 00 00 00	r3 += r1
     466:	bf a1 00 00 00 00 00 00	r1 = r10
     467:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     468:	b7 02 00 00 08 00 00 00	r2 = 8
     469:	85 00 00 00 71 00 00 00	call 113
     470:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     471:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     472:	0f 13 00 00 00 00 00 00	r3 += r1
     473:	bf a1 00 00 00 00 00 00	r1 = r10
     474:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     475:	b7 02 00 00 04 00 00 00	r2 = 4
     476:	85 00 00 00 71 00 00 00	call 113
     477:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000ef0 <LBB44_57>:
;     pkt_info->netns = get_netns(skb);
     478:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     479:	b7 01 00 00 80 00 00 00	r1 = 128
     480:	bf 93 00 00 00 00 00 00	r3 = r9
     481:	0f 13 00 00 00 00 00 00	r3 += r1
     482:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     483:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     484:	bf a1 00 00 00 00 00 00	r1 = r10
     485:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     486:	b7 02 00 00 01 00 00 00	r2 = 1
     487:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     488:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     489:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     490:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     491:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     492:	b7 01 00 00 00 00 00 00	r1 = 0
     493:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     494:	0f 13 00 00 00 00 00 00	r3 += r1
;     pkt_info->ifname[0] = 0;
     495:	bf 71 00 00 00 00 00 00	r1 = r7
     496:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     497:	b7 02 00 00 10 00 00 00	r2 = 16
     498:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     499:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     500:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB44_59>
     501:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     502:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     503:	b7 01 00 00 69 00 00 00	r1 = 105
     504:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     505:	b7 01 00 00 6e 00 00 00	r1 = 110
     506:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000000fd8 <LBB44_59>:
     507:	b7 01 00 00 c0 00 00 00	r1 = 192
     508:	bf 93 00 00 00 00 00 00	r3 = r9
     509:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     510:	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r3
     511:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     512:	07 01 00 00 f8 ff ff ff	r1 += -8
     513:	b7 02 00 00 08 00 00 00	r2 = 8
     514:	85 00 00 00 71 00 00 00	call 113
     515:	b7 01 00 00 b6 00 00 00	r1 = 182
     516:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     517:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     518:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     519:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     520:	b7 02 00 00 02 00 00 00	r2 = 2
     521:	bf 93 00 00 00 00 00 00	r3 = r9
     522:	85 00 00 00 71 00 00 00	call 113
     523:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     524:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     525:	bf 71 00 00 00 00 00 00	r1 = r7
     526:	07 01 00 00 64 00 00 00	r1 += 100
     527:	b7 02 00 00 06 00 00 00	r2 = 6
     528:	bf 63 00 00 00 00 00 00	r3 = r6
     529:	85 00 00 00 04 00 00 00	call 4
     530:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     531:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	b7 02 00 00 08 00 00 00	r2 = 8
     533:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     534:	85 00 00 00 71 00 00 00	call 113
     535:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     536:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     537:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     538:	b7 02 00 00 02 00 00 00	r2 = 2
     539:	bf 93 00 00 00 00 00 00	r3 = r9
     540:	85 00 00 00 71 00 00 00	call 113
     541:	b7 01 00 00 b4 00 00 00	r1 = 180
     542:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
     543:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     544:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     547:	b7 02 00 00 02 00 00 00	r2 = 2
     548:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     549:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     550:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     551:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB44_61>
     552:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001148 <LBB44_61>:
;     return head + network_header;
     553:	57 09 00 00 ff ff 00 00	r9 &= 65535
     554:	0f 96 00 00 00 00 00 00	r6 += r9
     555:	bf a1 00 00 00 00 00 00	r1 = r10
     556:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     557:	b7 02 00 00 01 00 00 00	r2 = 1
     558:	bf 63 00 00 00 00 00 00	r3 = r6
     559:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     560:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     561:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     562:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB44_66>
     563:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB44_92>
     564:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     565:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     566:	b7 01 00 00 c0 00 00 00	r1 = 192
     567:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     568:	bf 93 00 00 00 00 00 00	r3 = r9
     569:	0f 13 00 00 00 00 00 00	r3 += r1
     570:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     572:	b7 02 00 00 08 00 00 00	r2 = 8
     573:	85 00 00 00 71 00 00 00	call 113
     574:	b7 01 00 00 b6 00 00 00	r1 = 182
     575:	bf 93 00 00 00 00 00 00	r3 = r9
     576:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     577:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     578:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     579:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     580:	b7 02 00 00 02 00 00 00	r2 = 2
     581:	85 00 00 00 71 00 00 00	call 113
     582:	b7 01 00 00 b4 00 00 00	r1 = 180
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     585:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     586:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     587:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     588:	b7 02 00 00 02 00 00 00	r2 = 2
     589:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     590:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     591:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     592:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB44_65>
     593:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001290 <LBB44_65>:
;     return head + network_header;
     594:	57 09 00 00 ff ff 00 00	r9 &= 65535
     595:	0f 96 00 00 00 00 00 00	r6 += r9
     596:	b7 01 00 00 0c 00 00 00	r1 = 12
     597:	bf 63 00 00 00 00 00 00	r3 = r6
     598:	0f 13 00 00 00 00 00 00	r3 += r1
     599:	bf a1 00 00 00 00 00 00	r1 = r10
     600:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     601:	b7 02 00 00 04 00 00 00	r2 = 4
     602:	85 00 00 00 71 00 00 00	call 113
     603:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     604:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     605:	b7 01 00 00 10 00 00 00	r1 = 16
     606:	bf 63 00 00 00 00 00 00	r3 = r6
     607:	0f 13 00 00 00 00 00 00	r3 += r1
     608:	bf a1 00 00 00 00 00 00	r1 = r10
     609:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     610:	b7 02 00 00 04 00 00 00	r2 = 4
     611:	85 00 00 00 71 00 00 00	call 113
     612:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     613:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     614:	b7 01 00 00 02 00 00 00	r1 = 2
     615:	bf 63 00 00 00 00 00 00	r3 = r6
     616:	0f 13 00 00 00 00 00 00	r3 += r1
     617:	bf a1 00 00 00 00 00 00	r1 = r10
     618:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     619:	b7 02 00 00 02 00 00 00	r2 = 2
     620:	85 00 00 00 71 00 00 00	call 113
     621:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     622:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     623:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     624:	b7 01 00 00 09 00 00 00	r1 = 9
     625:	05 00 38 00 00 00 00 00	goto +56 <LBB44_69>

0000000000001390 <LBB44_66>:
     626:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     627:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     628:	b7 01 00 00 c0 00 00 00	r1 = 192
     629:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     630:	bf 93 00 00 00 00 00 00	r3 = r9
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     634:	b7 02 00 00 08 00 00 00	r2 = 8
     635:	85 00 00 00 71 00 00 00	call 113
     636:	b7 01 00 00 b6 00 00 00	r1 = 182
     637:	bf 93 00 00 00 00 00 00	r3 = r9
     638:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     639:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     640:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     641:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     642:	b7 02 00 00 02 00 00 00	r2 = 2
     643:	85 00 00 00 71 00 00 00	call 113
     644:	b7 01 00 00 b4 00 00 00	r1 = 180
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     647:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     648:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     649:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     650:	b7 02 00 00 02 00 00 00	r2 = 2
     651:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     652:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     653:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     654:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB44_68>
     655:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001480 <LBB44_68>:
;     return head + network_header;
     656:	57 09 00 00 ff ff 00 00	r9 &= 65535
     657:	0f 96 00 00 00 00 00 00	r6 += r9
     658:	b7 01 00 00 08 00 00 00	r1 = 8
     659:	bf 63 00 00 00 00 00 00	r3 = r6
     660:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
     661:	bf 71 00 00 00 00 00 00	r1 = r7
     662:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     663:	b7 02 00 00 10 00 00 00	r2 = 16
     664:	85 00 00 00 04 00 00 00	call 4
     665:	b7 01 00 00 18 00 00 00	r1 = 24
     666:	bf 63 00 00 00 00 00 00	r3 = r6
     667:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     668:	bf 71 00 00 00 00 00 00	r1 = r7
     669:	07 01 00 00 80 00 00 00	r1 += 128
     670:	b7 02 00 00 10 00 00 00	r2 = 16
     671:	85 00 00 00 04 00 00 00	call 4
     672:	b7 01 00 00 04 00 00 00	r1 = 4
     673:	bf 63 00 00 00 00 00 00	r3 = r6
     674:	0f 13 00 00 00 00 00 00	r3 += r1
     675:	bf a1 00 00 00 00 00 00	r1 = r10
     676:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     677:	b7 02 00 00 02 00 00 00	r2 = 2
     678:	85 00 00 00 71 00 00 00	call 113
     679:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     680:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     681:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000001550 <LBB44_69>:
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
     684:	bf a1 00 00 00 00 00 00	r1 = r10
     685:	07 01 00 00 f8 ff ff ff	r1 += -8
     686:	b7 02 00 00 01 00 00 00	r2 = 1
     687:	85 00 00 00 71 00 00 00	call 113
     688:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     689:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     690:	bf a1 00 00 00 00 00 00	r1 = r10
     691:	07 01 00 00 f8 ff ff ff	r1 += -8
     692:	b7 02 00 00 01 00 00 00	r2 = 1
     693:	bf 63 00 00 00 00 00 00	r3 = r6
     694:	85 00 00 00 04 00 00 00	call 4
     695:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     696:	57 01 00 00 f0 00 00 00	r1 &= 240
     697:	77 01 00 00 04 00 00 00	r1 >>= 4
     698:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     699:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     700:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB44_72>
     701:	15 01 53 00 01 00 00 00	if r1 == 1 goto +83 <LBB44_84>
     702:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB44_74>
     703:	05 00 b9 fe 00 00 00 00	goto -327 <LBB44_92>

0000000000001600 <LBB44_74>:
     704:	b7 01 00 00 c0 00 00 00	r1 = 192
     705:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     706:	bf 93 00 00 00 00 00 00	r3 = r9
     707:	0f 13 00 00 00 00 00 00	r3 += r1
     708:	bf a1 00 00 00 00 00 00	r1 = r10
     709:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     710:	b7 02 00 00 08 00 00 00	r2 = 8
     711:	85 00 00 00 71 00 00 00	call 113
     712:	b7 01 00 00 b6 00 00 00	r1 = 182
     713:	bf 93 00 00 00 00 00 00	r3 = r9
     714:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     715:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     716:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     717:	bf a1 00 00 00 00 00 00	r1 = r10
     718:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     719:	b7 02 00 00 02 00 00 00	r2 = 2
     720:	85 00 00 00 71 00 00 00	call 113
     721:	b7 01 00 00 b4 00 00 00	r1 = 180
     722:	0f 19 00 00 00 00 00 00	r9 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     723:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     726:	b7 02 00 00 02 00 00 00	r2 = 2
     727:	bf 93 00 00 00 00 00 00	r3 = r9
     728:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     729:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     730:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     731:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB44_76>
     732:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000016e8 <LBB44_76>:
;     return head + network_header;
     733:	57 06 00 00 ff ff 00 00	r6 &= 65535
     734:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
     735:	0f 61 00 00 00 00 00 00	r1 += r6
     736:	bf 16 00 00 00 00 00 00	r6 = r1
     737:	bf a1 00 00 00 00 00 00	r1 = r10
     738:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     739:	b7 02 00 00 01 00 00 00	r2 = 1
     740:	bf 63 00 00 00 00 00 00	r3 = r6
     741:	85 00 00 00 04 00 00 00	call 4
     742:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     743:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     744:	57 02 00 00 f0 00 00 00	r2 &= 240
     745:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB44_78>
     746:	bf a1 00 00 00 00 00 00	r1 = r10
     747:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     748:	b7 02 00 00 01 00 00 00	r2 = 1
     749:	bf 63 00 00 00 00 00 00	r3 = r6
     750:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     751:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     752:	67 01 00 00 02 00 00 00	r1 <<= 2
     753:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001790 <LBB44_78>:
;     return l3_header + transport_size;
     754:	0f 16 00 00 00 00 00 00	r6 += r1
     755:	b7 01 00 00 00 00 00 00	r1 = 0
     756:	bf 63 00 00 00 00 00 00	r3 = r6
     757:	0f 13 00 00 00 00 00 00	r3 += r1
     758:	bf a1 00 00 00 00 00 00	r1 = r10
     759:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     760:	b7 02 00 00 02 00 00 00	r2 = 2
     761:	85 00 00 00 71 00 00 00	call 113
     762:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     763:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     764:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     765:	b7 01 00 00 02 00 00 00	r1 = 2
     766:	bf 63 00 00 00 00 00 00	r3 = r6
     767:	0f 13 00 00 00 00 00 00	r3 += r1
     768:	bf a1 00 00 00 00 00 00	r1 = r10
     769:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     770:	b7 02 00 00 02 00 00 00	r2 = 2
     771:	85 00 00 00 71 00 00 00	call 113
     772:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     773:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     774:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     775:	07 06 00 00 0c 00 00 00	r6 += 12
     776:	bf 71 00 00 00 00 00 00	r1 = r7
     777:	07 01 00 00 9c 00 00 00	r1 += 156
     778:	b7 02 00 00 02 00 00 00	r2 = 2
     779:	bf 63 00 00 00 00 00 00	r3 = r6
     780:	85 00 00 00 04 00 00 00	call 4
     781:	05 00 8a 00 00 00 00 00	goto +138 <LBB44_89>

0000000000001870 <LBB44_72>:
;     if (l4_proto == IPPROTO_TCP) {
     782:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB44_79>
     783:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB44_84>
     784:	05 00 68 fe 00 00 00 00	goto -408 <LBB44_92>

0000000000001888 <LBB44_84>:
     785:	b7 01 00 00 c0 00 00 00	r1 = 192
     786:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     787:	bf 63 00 00 00 00 00 00	r3 = r6
     788:	0f 13 00 00 00 00 00 00	r3 += r1
     789:	bf a1 00 00 00 00 00 00	r1 = r10
     790:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     791:	b7 02 00 00 08 00 00 00	r2 = 8
     792:	85 00 00 00 71 00 00 00	call 113
     793:	b7 01 00 00 b6 00 00 00	r1 = 182
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     796:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     797:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     798:	bf a1 00 00 00 00 00 00	r1 = r10
     799:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     800:	b7 02 00 00 02 00 00 00	r2 = 2
     801:	85 00 00 00 71 00 00 00	call 113
     802:	b7 01 00 00 b4 00 00 00	r1 = 180
     803:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     804:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     805:	bf a1 00 00 00 00 00 00	r1 = r10
     806:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     807:	b7 02 00 00 02 00 00 00	r2 = 2
     808:	bf 63 00 00 00 00 00 00	r3 = r6
     809:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     810:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     811:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     812:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB44_86>
     813:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001970 <LBB44_86>:
;     return head + network_header;
     814:	57 09 00 00 ff ff 00 00	r9 &= 65535
     815:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     816:	0f 96 00 00 00 00 00 00	r6 += r9
     817:	bf a1 00 00 00 00 00 00	r1 = r10
     818:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     819:	b7 02 00 00 01 00 00 00	r2 = 1
     820:	bf 63 00 00 00 00 00 00	r3 = r6
     821:	85 00 00 00 04 00 00 00	call 4
     822:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     823:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     824:	57 02 00 00 f0 00 00 00	r2 &= 240
     825:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB44_88>
     826:	bf a1 00 00 00 00 00 00	r1 = r10
     827:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     828:	b7 02 00 00 01 00 00 00	r2 = 1
     829:	bf 63 00 00 00 00 00 00	r3 = r6
     830:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     831:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     832:	67 01 00 00 02 00 00 00	r1 <<= 2
     833:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a10 <LBB44_88>:
;     return l3_header + transport_size;
     834:	0f 16 00 00 00 00 00 00	r6 += r1
     835:	bf a9 00 00 00 00 00 00	r9 = r10
     836:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     837:	bf 91 00 00 00 00 00 00	r1 = r9
     838:	b7 02 00 00 08 00 00 00	r2 = 8
     839:	bf 63 00 00 00 00 00 00	r3 = r6
     840:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     841:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     842:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     843:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     844:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     845:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     846:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     847:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     848:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     849:	05 00 46 00 00 00 00 00	goto +70 <LBB44_89>

0000000000001a90 <LBB44_79>:
     850:	b7 01 00 00 c0 00 00 00	r1 = 192
     851:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     852:	bf 63 00 00 00 00 00 00	r3 = r6
     853:	0f 13 00 00 00 00 00 00	r3 += r1
     854:	bf a1 00 00 00 00 00 00	r1 = r10
     855:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     856:	b7 02 00 00 08 00 00 00	r2 = 8
     857:	85 00 00 00 71 00 00 00	call 113
     858:	b7 01 00 00 b6 00 00 00	r1 = 182
     859:	bf 63 00 00 00 00 00 00	r3 = r6
     860:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     861:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     862:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     863:	bf a1 00 00 00 00 00 00	r1 = r10
     864:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     865:	b7 02 00 00 02 00 00 00	r2 = 2
     866:	85 00 00 00 71 00 00 00	call 113
     867:	b7 01 00 00 b4 00 00 00	r1 = 180
     868:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     869:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     870:	bf a1 00 00 00 00 00 00	r1 = r10
     871:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     872:	b7 02 00 00 02 00 00 00	r2 = 2
     873:	bf 63 00 00 00 00 00 00	r3 = r6
     874:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     875:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     876:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     877:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB44_81>
     878:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001b78 <LBB44_81>:
;     return head + network_header;
     879:	57 09 00 00 ff ff 00 00	r9 &= 65535
     880:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     881:	0f 96 00 00 00 00 00 00	r6 += r9
     882:	bf a1 00 00 00 00 00 00	r1 = r10
     883:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     884:	b7 02 00 00 01 00 00 00	r2 = 1
     885:	bf 63 00 00 00 00 00 00	r3 = r6
     886:	85 00 00 00 04 00 00 00	call 4
     887:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     888:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     889:	57 02 00 00 f0 00 00 00	r2 &= 240
     890:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB44_83>
     891:	bf a1 00 00 00 00 00 00	r1 = r10
     892:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     893:	b7 02 00 00 01 00 00 00	r2 = 1
     894:	bf 63 00 00 00 00 00 00	r3 = r6
     895:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     896:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     897:	67 01 00 00 02 00 00 00	r1 <<= 2
     898:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c18 <LBB44_83>:
;     return l3_header + transport_size;
     899:	0f 16 00 00 00 00 00 00	r6 += r1
     900:	b7 01 00 00 00 00 00 00	r1 = 0
     901:	bf 63 00 00 00 00 00 00	r3 = r6
     902:	0f 13 00 00 00 00 00 00	r3 += r1
     903:	bf a1 00 00 00 00 00 00	r1 = r10
     904:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     905:	b7 02 00 00 02 00 00 00	r2 = 2
     906:	85 00 00 00 71 00 00 00	call 113
     907:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     908:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     909:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     910:	b7 01 00 00 02 00 00 00	r1 = 2
     911:	0f 16 00 00 00 00 00 00	r6 += r1
     912:	bf a1 00 00 00 00 00 00	r1 = r10
     913:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     914:	b7 02 00 00 02 00 00 00	r2 = 2
     915:	bf 63 00 00 00 00 00 00	r3 = r6
     916:	85 00 00 00 71 00 00 00	call 113
     917:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     918:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     919:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001cc0 <LBB44_89>:
     920:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
;     return cfg->callstack == 0;
     921:	71 81 11 00 00 00 00 00	r1 = *(u8 *)(r8 + 17)
;     if (!filter_callstack(cfg))
     922:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB44_91>
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
     923:	bf 61 00 00 00 00 00 00	r1 = r6
     924:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     926:	b7 03 00 00 00 00 00 00	r3 = 0
     927:	85 00 00 00 1b 00 00 00	call 27
     928:	63 07 30 00 00 00 00 00	*(u32 *)(r7 + 48) = r0

0000000000001d08 <LBB44_91>:
     929:	b7 01 00 00 76 00 00 00	r1 = 118
;     for (j = 10; j < 64; j += 10) CPY(j);
     930:	73 17 05 00 00 00 00 00	*(u8 *)(r7 + 5) = r1
     931:	b7 01 00 00 63 00 00 00	r1 = 99
     932:	73 17 04 00 00 00 00 00	*(u8 *)(r7 + 4) = r1
     933:	b7 01 00 00 72 00 00 00	r1 = 114
     934:	73 17 03 00 00 00 00 00	*(u8 *)(r7 + 3) = r1
     935:	b7 01 00 00 5f 00 00 00	r1 = 95
     936:	73 17 02 00 00 00 00 00	*(u8 *)(r7 + 2) = r1
     937:	b7 01 00 00 70 00 00 00	r1 = 112
     938:	73 17 01 00 00 00 00 00	*(u8 *)(r7 + 1) = r1
     939:	b7 01 00 00 69 00 00 00	r1 = 105
     940:	73 17 00 00 00 00 00 00	*(u8 *)(r7 + 0) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     941:	bf 61 00 00 00 00 00 00	r1 = r6
     942:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     944:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     946:	bf 74 00 00 00 00 00 00	r4 = r7
     947:	b7 05 00 00 e0 00 00 00	r5 = 224
     948:	85 00 00 00 19 00 00 00	call 25
     949:	05 00 c3 fd 00 00 00 00	goto -573 <LBB44_92>

Disassembly of section kprobe/ip_rcv_finish:

0000000000000000 <k_ip_rcv_finish>:
; int k_ip_rcv_finish(struct pt_regs *ctx) {
       0:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM3(ctx);
       1:	79 11 60 00 00 00 00 00	r1 = *(u64 *)(r1 + 96)
       2:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       3:	b7 06 00 00 00 00 00 00	r6 = 0
;     GET_CFG();
       4:	63 6a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r6
       5:	bf a2 00 00 00 00 00 00	r2 = r10
       6:	07 02 00 00 e4 ff ff ff	r2 += -28
;     GET_CFG();
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	85 00 00 00 01 00 00 00	call 1
      10:	bf 08 00 00 00 00 00 00	r8 = r0
      11:	15 08 6d 01 00 00 00 00	if r8 == 0 goto +365 <LBB45_92>
      12:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
      13:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      14:	63 18 08 00 00 00 00 00	*(u32 *)(r8 + 8) = r1
;     u32 ev_buff_id = 0;
      15:	63 6a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r6
      16:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      17:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      18:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      20:	85 00 00 00 01 00 00 00	call 1
      21:	bf 07 00 00 00 00 00 00	r7 = r0
;     if (!ev) return NULL;
      22:	55 07 01 00 00 00 00 00	if r7 != 0 goto +1 <LBB45_3>
      23:	05 00 61 01 00 00 00 00	goto +353 <LBB45_92>

00000000000000c0 <LBB45_3>:
      24:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      25:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      26:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      27:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      28:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      29:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      30:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      31:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      32:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      33:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      34:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      35:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      36:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      37:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      38:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      39:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      40:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      41:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      42:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      43:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      44:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      45:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      46:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      47:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      48:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      49:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      50:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      51:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      52:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      53:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      54:	61 81 04 00 00 00 00 00	r1 = *(u32 *)(r8 + 4)
      55:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB45_5>
      56:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      57:	5d 01 3f 01 00 00 00 00	if r1 != r0 goto +319 <LBB45_92>

00000000000001d0 <LBB45_5>:
      58:	b7 01 00 00 10 00 00 00	r1 = 16
      59:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
      60:	bf 93 00 00 00 00 00 00	r3 = r9
      61:	0f 13 00 00 00 00 00 00	r3 += r1
      62:	bf a6 00 00 00 00 00 00	r6 = r10
      63:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      64:	bf 61 00 00 00 00 00 00	r1 = r6
      65:	b7 02 00 00 08 00 00 00	r2 = 8
      66:	85 00 00 00 71 00 00 00	call 113
      67:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      68:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      69:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      70:	bf 61 00 00 00 00 00 00	r1 = r6
      71:	b7 02 00 00 08 00 00 00	r2 = 8
      72:	85 00 00 00 71 00 00 00	call 113
      73:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      74:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      75:	0f 13 00 00 00 00 00 00	r3 += r1
      76:	bf a1 00 00 00 00 00 00	r1 = r10
      77:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      78:	b7 02 00 00 04 00 00 00	r2 = 4
      79:	85 00 00 00 71 00 00 00	call 113
      80:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      81:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB45_8>
      82:	b7 01 00 00 18 00 00 00	r1 = 24
      83:	bf 93 00 00 00 00 00 00	r3 = r9
      84:	0f 13 00 00 00 00 00 00	r3 += r1
      85:	bf a1 00 00 00 00 00 00	r1 = r10
      86:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
      87:	b7 02 00 00 08 00 00 00	r2 = 8
      88:	85 00 00 00 71 00 00 00	call 113
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
      90:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB45_11>
      91:	b7 01 00 00 30 00 00 00	r1 = 48
      92:	0f 13 00 00 00 00 00 00	r3 += r1
      93:	bf a1 00 00 00 00 00 00	r1 = r10
      94:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      95:	b7 02 00 00 08 00 00 00	r2 = 8
      96:	85 00 00 00 71 00 00 00	call 113
      97:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      98:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     102:	b7 02 00 00 04 00 00 00	r2 = 4
     103:	85 00 00 00 71 00 00 00	call 113
     104:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000348 <LBB45_8>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     105:	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0)
     106:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB45_11>
     107:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB45_11>
     108:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB45_92>

0000000000000368 <LBB45_11>:
;     u16 icmpid = cfg->icmpid;
     109:	69 81 0e 00 00 00 00 00	r1 = *(u16 *)(r8 + 14)
;     u16 port = cfg->port;
     110:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     111:	69 81 0c 00 00 00 00 00	r1 = *(u16 *)(r8 + 12)
;     u8 proto = cfg->proto;
     112:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     113:	71 81 12 00 00 00 00 00	r1 = *(u8 *)(r8 + 18)
;     u32 addr = cfg->ip;
     114:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     115:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
     116:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     117:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     118:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     119:	b7 01 00 00 c0 00 00 00	r1 = 192
     120:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     121:	bf 93 00 00 00 00 00 00	r3 = r9
     122:	0f 13 00 00 00 00 00 00	r3 += r1
     123:	bf a1 00 00 00 00 00 00	r1 = r10
     124:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     125:	b7 02 00 00 08 00 00 00	r2 = 8
     126:	85 00 00 00 71 00 00 00	call 113
     127:	b7 01 00 00 b6 00 00 00	r1 = 182
     128:	bf 93 00 00 00 00 00 00	r3 = r9
     129:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     130:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     131:	bf a1 00 00 00 00 00 00	r1 = r10
     132:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     133:	b7 02 00 00 02 00 00 00	r2 = 2
     134:	85 00 00 00 71 00 00 00	call 113
     135:	b7 01 00 00 b4 00 00 00	r1 = 180
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     138:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     139:	bf a1 00 00 00 00 00 00	r1 = r10
     140:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     141:	b7 02 00 00 02 00 00 00	r2 = 2
     142:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     143:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     144:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     145:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB45_13>
     146:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000498 <LBB45_13>:
;     return head + network_header;
     147:	57 09 00 00 ff ff 00 00	r9 &= 65535
     148:	0f 96 00 00 00 00 00 00	r6 += r9
     149:	bf a1 00 00 00 00 00 00	r1 = r10
     150:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     151:	b7 02 00 00 01 00 00 00	r2 = 1
     152:	bf 63 00 00 00 00 00 00	r3 = r6
     153:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     154:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     155:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     156:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB45_20>
     157:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB45_92>
;         if (addr != 0) {
     158:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     159:	bf 19 00 00 00 00 00 00	r9 = r1
     160:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB45_18>
     161:	b7 01 00 00 0c 00 00 00	r1 = 12
     162:	bf 63 00 00 00 00 00 00	r3 = r6
     163:	0f 13 00 00 00 00 00 00	r3 += r1
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     166:	b7 02 00 00 04 00 00 00	r2 = 4
     167:	85 00 00 00 71 00 00 00	call 113
     168:	b7 01 00 00 10 00 00 00	r1 = 16
     169:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     170:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     171:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     172:	bf a1 00 00 00 00 00 00	r1 = r10
     173:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     174:	b7 02 00 00 04 00 00 00	r2 = 4
     175:	bf 63 00 00 00 00 00 00	r3 = r6
     176:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     177:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     178:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB45_54>
     179:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     180:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     181:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB45_92>
     182:	05 00 da 00 00 00 00 00	goto +218 <LBB45_54>

00000000000005b8 <LBB45_20>:
     183:	b7 01 00 00 06 00 00 00	r1 = 6
     184:	0f 16 00 00 00 00 00 00	r6 += r1
     185:	bf a1 00 00 00 00 00 00	r1 = r10
     186:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     187:	b7 02 00 00 01 00 00 00	r2 = 1
     188:	bf 63 00 00 00 00 00 00	r3 = r6
     189:	85 00 00 00 04 00 00 00	call 4
     190:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     191:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     192:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     193:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB45_22>
     194:	b7 04 00 00 80 00 00 00	r4 = 128
     195:	b7 03 00 00 81 00 00 00	r3 = 129
     196:	b7 01 00 00 3a 00 00 00	r1 = 58
     197:	05 00 0d 00 00 00 00 00	goto +13 <LBB45_22>

0000000000000630 <LBB45_18>:
     198:	b7 01 00 00 09 00 00 00	r1 = 9
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     208:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB45_22>
     209:	b7 04 00 00 08 00 00 00	r4 = 8
     210:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000698 <LBB45_22>:
;     if (proto != 0 && proto != l4_proto)
     211:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     212:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB45_24>
     213:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB45_92>

00000000000006b0 <LBB45_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     214:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB45_27>
     215:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB45_29>
     216:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB45_35>
     217:	05 00 9f 00 00 00 00 00	goto +159 <LBB45_92>

00000000000006d0 <LBB45_35>:
     218:	b7 01 00 00 c0 00 00 00	r1 = 192
     219:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     220:	bf 63 00 00 00 00 00 00	r3 = r6
     221:	0f 13 00 00 00 00 00 00	r3 += r1
     222:	bf a1 00 00 00 00 00 00	r1 = r10
     223:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     224:	b7 02 00 00 08 00 00 00	r2 = 8
     225:	85 00 00 00 71 00 00 00	call 113
     226:	b7 01 00 00 b6 00 00 00	r1 = 182
     227:	bf 63 00 00 00 00 00 00	r3 = r6
     228:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     229:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     230:	bf a1 00 00 00 00 00 00	r1 = r10
     231:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     232:	b7 02 00 00 02 00 00 00	r2 = 2
     233:	85 00 00 00 71 00 00 00	call 113
     234:	b7 01 00 00 b4 00 00 00	r1 = 180
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     237:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     238:	bf a1 00 00 00 00 00 00	r1 = r10
     239:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     240:	b7 02 00 00 02 00 00 00	r2 = 2
     241:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     242:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     243:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     244:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB45_37>
     245:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000007b0 <LBB45_37>:
;     return head + network_header;
     246:	57 06 00 00 ff ff 00 00	r6 &= 65535
     247:	0f 69 00 00 00 00 00 00	r9 += r6
     248:	bf a1 00 00 00 00 00 00	r1 = r10
     249:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     250:	b7 02 00 00 01 00 00 00	r2 = 1
     251:	bf 93 00 00 00 00 00 00	r3 = r9
     252:	85 00 00 00 04 00 00 00	call 4
     253:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     254:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     255:	57 02 00 00 f0 00 00 00	r2 &= 240
     256:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB45_39>
     257:	bf a1 00 00 00 00 00 00	r1 = r10
     258:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     259:	b7 02 00 00 01 00 00 00	r2 = 1
     260:	bf 93 00 00 00 00 00 00	r3 = r9
     261:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     262:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     263:	67 01 00 00 02 00 00 00	r1 <<= 2
     264:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000848 <LBB45_39>:
;     return l3_header + transport_size;
     265:	0f 19 00 00 00 00 00 00	r9 += r1
     266:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9

0000000000000858 <LBB45_40>:
     267:	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 72)
;     if (port != 0) {
     268:	bf 92 00 00 00 00 00 00	r2 = r9
     269:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB45_45>
;         if (l4_proto == IPPROTO_TCP) {
     270:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     271:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB45_52>
     272:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB45_45>
     273:	b7 01 00 00 00 00 00 00	r1 = 0
     274:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     275:	bf 63 00 00 00 00 00 00	r3 = r6
     276:	0f 13 00 00 00 00 00 00	r3 += r1
     277:	bf a1 00 00 00 00 00 00	r1 = r10
     278:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     279:	b7 02 00 00 02 00 00 00	r2 = 2
     280:	85 00 00 00 71 00 00 00	call 113
     281:	b7 01 00 00 02 00 00 00	r1 = 2
     282:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     283:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     284:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     285:	bf a1 00 00 00 00 00 00	r1 = r10
     286:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     287:	b7 02 00 00 02 00 00 00	r2 = 2
     288:	bf 63 00 00 00 00 00 00	r3 = r6
     289:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     290:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     291:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     292:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB45_54>
     293:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     294:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB45_92>
     295:	05 00 69 00 00 00 00 00	goto +105 <LBB45_54>

0000000000000940 <LBB45_27>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     296:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB45_35>
     297:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB45_92>

0000000000000950 <LBB45_29>:
     298:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r4
     299:	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r3
     300:	b7 01 00 00 c0 00 00 00	r1 = 192
     301:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     302:	bf 63 00 00 00 00 00 00	r3 = r6
     303:	0f 13 00 00 00 00 00 00	r3 += r1
     304:	bf a1 00 00 00 00 00 00	r1 = r10
     305:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     306:	b7 02 00 00 08 00 00 00	r2 = 8
     307:	85 00 00 00 71 00 00 00	call 113
     308:	b7 01 00 00 b6 00 00 00	r1 = 182
     309:	bf 63 00 00 00 00 00 00	r3 = r6
     310:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     311:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     312:	bf a1 00 00 00 00 00 00	r1 = r10
     313:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     314:	b7 02 00 00 02 00 00 00	r2 = 2
     315:	85 00 00 00 71 00 00 00	call 113
     316:	b7 01 00 00 b4 00 00 00	r1 = 180
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     319:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     320:	bf a1 00 00 00 00 00 00	r1 = r10
     321:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     322:	b7 02 00 00 02 00 00 00	r2 = 2
     323:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     324:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     325:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     326:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB45_31>
     327:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000a40 <LBB45_31>:
;     return head + network_header;
     328:	57 06 00 00 ff ff 00 00	r6 &= 65535
     329:	0f 69 00 00 00 00 00 00	r9 += r6
     330:	bf a1 00 00 00 00 00 00	r1 = r10
     331:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     332:	b7 02 00 00 01 00 00 00	r2 = 1
     333:	bf 93 00 00 00 00 00 00	r3 = r9
     334:	85 00 00 00 04 00 00 00	call 4
     335:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     336:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     337:	57 02 00 00 f0 00 00 00	r2 &= 240
     338:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB45_33>
     339:	bf a1 00 00 00 00 00 00	r1 = r10
     340:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     341:	b7 02 00 00 01 00 00 00	r2 = 1
     342:	bf 93 00 00 00 00 00 00	r3 = r9
     343:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     344:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     345:	67 01 00 00 02 00 00 00	r1 <<= 2
     346:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000ad8 <LBB45_33>:
;     return l3_header + transport_size;
     347:	0f 19 00 00 00 00 00 00	r9 += r1
     348:	bf a6 00 00 00 00 00 00	r6 = r10
     349:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     350:	bf 61 00 00 00 00 00 00	r1 = r6
     351:	b7 02 00 00 08 00 00 00	r2 = 8
     352:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
     353:	bf 93 00 00 00 00 00 00	r3 = r9
     354:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     355:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     356:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     357:	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 88)
     358:	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 96)
     359:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB45_40>
     360:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     361:	07 02 00 00 e8 ff ff ff	r2 += -24
     362:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     363:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB45_40>
     364:	05 00 0c 00 00 00 00 00	goto +12 <LBB45_92>

0000000000000b68 <LBB45_45>:
;     if (proto != 0 && proto != l4_proto)
     365:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     366:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB45_54>
     367:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
;     if (proto != 0 && icmpid != 0) {
     368:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB45_54>
     369:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     370:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB45_54>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     371:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     372:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB45_50>
     373:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB45_54>

0000000000000bb0 <LBB45_50>:
;         if (icmpid != ev_icmpid)
     374:	57 01 00 00 ff ff 00 00	r1 &= 65535
     375:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
     376:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB45_54>

0000000000000bc8 <LBB45_92>:
;     return do_trace(ctx, skb, "ip_rcv_finish");
     377:	b7 00 00 00 00 00 00 00	r0 = 0
     378:	95 00 00 00 00 00 00 00	exit

0000000000000bd8 <LBB45_52>:
     379:	b7 01 00 00 00 00 00 00	r1 = 0
     380:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     381:	bf 63 00 00 00 00 00 00	r3 = r6
     382:	0f 13 00 00 00 00 00 00	r3 += r1
     383:	bf a1 00 00 00 00 00 00	r1 = r10
     384:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     385:	b7 02 00 00 02 00 00 00	r2 = 2
     386:	85 00 00 00 71 00 00 00	call 113
     387:	b7 01 00 00 02 00 00 00	r1 = 2
     388:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     389:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     390:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     391:	bf a1 00 00 00 00 00 00	r1 = r10
     392:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     393:	b7 02 00 00 02 00 00 00	r2 = 2
     394:	bf 63 00 00 00 00 00 00	r3 = r6
     395:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     396:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     397:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     398:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB45_54>
     399:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     400:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB45_92>

0000000000000c88 <LBB45_54>:
;     event->flags |= SKBTRACER_EVENT_IF;
     401:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     402:	47 01 00 00 01 00 00 00	r1 |= 1
     403:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     404:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
;     ev->skb = (u64)skb;
     405:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     406:	85 00 00 00 05 00 00 00	call 5
     407:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     408:	b7 01 00 00 10 00 00 00	r1 = 16
     409:	bf 96 00 00 00 00 00 00	r6 = r9
     410:	0f 16 00 00 00 00 00 00	r6 += r1
     411:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     412:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     413:	b7 02 00 00 08 00 00 00	r2 = 8
     414:	bf 63 00 00 00 00 00 00	r3 = r6
     415:	85 00 00 00 71 00 00 00	call 113
     416:	b7 01 00 00 70 00 00 00	r1 = 112
     417:	bf 93 00 00 00 00 00 00	r3 = r9
     418:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     419:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     420:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     421:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     422:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     423:	b7 02 00 00 04 00 00 00	r2 = 4
     424:	85 00 00 00 71 00 00 00	call 113
     425:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     426:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     427:	85 00 00 00 08 00 00 00	call 8
     428:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     429:	85 00 00 00 0e 00 00 00	call 14
     430:	57 00 00 00 ff ff 00 00	r0 &= 65535
     431:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     432:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     433:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     434:	bf 91 00 00 00 00 00 00	r1 = r9
     435:	b7 02 00 00 08 00 00 00	r2 = 8
     436:	bf 63 00 00 00 00 00 00	r3 = r6
     437:	85 00 00 00 71 00 00 00	call 113
     438:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     439:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     440:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     441:	bf 91 00 00 00 00 00 00	r1 = r9
     442:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     443:	b7 02 00 00 08 00 00 00	r2 = 8
     444:	85 00 00 00 71 00 00 00	call 113
     445:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     446:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     447:	0f 13 00 00 00 00 00 00	r3 += r1
     448:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     449:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     450:	b7 02 00 00 04 00 00 00	r2 = 4
     451:	85 00 00 00 71 00 00 00	call 113
     452:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     453:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB45_57>
     454:	b7 01 00 00 18 00 00 00	r1 = 24
     455:	bf 93 00 00 00 00 00 00	r3 = r9
     456:	0f 13 00 00 00 00 00 00	r3 += r1
     457:	bf a1 00 00 00 00 00 00	r1 = r10
     458:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     459:	b7 02 00 00 08 00 00 00	r2 = 8
     460:	85 00 00 00 71 00 00 00	call 113
     461:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     462:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     463:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB45_57>
     464:	b7 01 00 00 30 00 00 00	r1 = 48
     465:	0f 13 00 00 00 00 00 00	r3 += r1
     466:	bf a1 00 00 00 00 00 00	r1 = r10
     467:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     468:	b7 02 00 00 08 00 00 00	r2 = 8
     469:	85 00 00 00 71 00 00 00	call 113
     470:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     471:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     472:	0f 13 00 00 00 00 00 00	r3 += r1
     473:	bf a1 00 00 00 00 00 00	r1 = r10
     474:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     475:	b7 02 00 00 04 00 00 00	r2 = 4
     476:	85 00 00 00 71 00 00 00	call 113
     477:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000ef0 <LBB45_57>:
;     pkt_info->netns = get_netns(skb);
     478:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     479:	b7 01 00 00 80 00 00 00	r1 = 128
     480:	bf 93 00 00 00 00 00 00	r3 = r9
     481:	0f 13 00 00 00 00 00 00	r3 += r1
     482:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     483:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     484:	bf a1 00 00 00 00 00 00	r1 = r10
     485:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     486:	b7 02 00 00 01 00 00 00	r2 = 1
     487:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     488:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     489:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     490:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     491:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     492:	b7 01 00 00 00 00 00 00	r1 = 0
     493:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     494:	0f 13 00 00 00 00 00 00	r3 += r1
;     pkt_info->ifname[0] = 0;
     495:	bf 71 00 00 00 00 00 00	r1 = r7
     496:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     497:	b7 02 00 00 10 00 00 00	r2 = 16
     498:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     499:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     500:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB45_59>
     501:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     502:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     503:	b7 01 00 00 69 00 00 00	r1 = 105
     504:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     505:	b7 01 00 00 6e 00 00 00	r1 = 110
     506:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000000fd8 <LBB45_59>:
     507:	b7 01 00 00 c0 00 00 00	r1 = 192
     508:	bf 93 00 00 00 00 00 00	r3 = r9
     509:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     510:	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r3
     511:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     512:	07 01 00 00 f8 ff ff ff	r1 += -8
     513:	b7 02 00 00 08 00 00 00	r2 = 8
     514:	85 00 00 00 71 00 00 00	call 113
     515:	b7 01 00 00 b6 00 00 00	r1 = 182
     516:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     517:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     518:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     519:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     520:	b7 02 00 00 02 00 00 00	r2 = 2
     521:	bf 93 00 00 00 00 00 00	r3 = r9
     522:	85 00 00 00 71 00 00 00	call 113
     523:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     524:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     525:	bf 71 00 00 00 00 00 00	r1 = r7
     526:	07 01 00 00 64 00 00 00	r1 += 100
     527:	b7 02 00 00 06 00 00 00	r2 = 6
     528:	bf 63 00 00 00 00 00 00	r3 = r6
     529:	85 00 00 00 04 00 00 00	call 4
     530:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     531:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	b7 02 00 00 08 00 00 00	r2 = 8
     533:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     534:	85 00 00 00 71 00 00 00	call 113
     535:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     536:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     537:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     538:	b7 02 00 00 02 00 00 00	r2 = 2
     539:	bf 93 00 00 00 00 00 00	r3 = r9
     540:	85 00 00 00 71 00 00 00	call 113
     541:	b7 01 00 00 b4 00 00 00	r1 = 180
     542:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
     543:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     544:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     547:	b7 02 00 00 02 00 00 00	r2 = 2
     548:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     549:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     550:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     551:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB45_61>
     552:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001148 <LBB45_61>:
;     return head + network_header;
     553:	57 09 00 00 ff ff 00 00	r9 &= 65535
     554:	0f 96 00 00 00 00 00 00	r6 += r9
     555:	bf a1 00 00 00 00 00 00	r1 = r10
     556:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     557:	b7 02 00 00 01 00 00 00	r2 = 1
     558:	bf 63 00 00 00 00 00 00	r3 = r6
     559:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     560:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     561:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     562:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB45_66>
     563:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB45_92>
     564:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     565:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     566:	b7 01 00 00 c0 00 00 00	r1 = 192
     567:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     568:	bf 93 00 00 00 00 00 00	r3 = r9
     569:	0f 13 00 00 00 00 00 00	r3 += r1
     570:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     572:	b7 02 00 00 08 00 00 00	r2 = 8
     573:	85 00 00 00 71 00 00 00	call 113
     574:	b7 01 00 00 b6 00 00 00	r1 = 182
     575:	bf 93 00 00 00 00 00 00	r3 = r9
     576:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     577:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     578:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     579:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     580:	b7 02 00 00 02 00 00 00	r2 = 2
     581:	85 00 00 00 71 00 00 00	call 113
     582:	b7 01 00 00 b4 00 00 00	r1 = 180
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     585:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     586:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     587:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     588:	b7 02 00 00 02 00 00 00	r2 = 2
     589:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     590:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     591:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     592:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB45_65>
     593:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001290 <LBB45_65>:
;     return head + network_header;
     594:	57 09 00 00 ff ff 00 00	r9 &= 65535
     595:	0f 96 00 00 00 00 00 00	r6 += r9
     596:	b7 01 00 00 0c 00 00 00	r1 = 12
     597:	bf 63 00 00 00 00 00 00	r3 = r6
     598:	0f 13 00 00 00 00 00 00	r3 += r1
     599:	bf a1 00 00 00 00 00 00	r1 = r10
     600:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     601:	b7 02 00 00 04 00 00 00	r2 = 4
     602:	85 00 00 00 71 00 00 00	call 113
     603:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     604:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     605:	b7 01 00 00 10 00 00 00	r1 = 16
     606:	bf 63 00 00 00 00 00 00	r3 = r6
     607:	0f 13 00 00 00 00 00 00	r3 += r1
     608:	bf a1 00 00 00 00 00 00	r1 = r10
     609:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     610:	b7 02 00 00 04 00 00 00	r2 = 4
     611:	85 00 00 00 71 00 00 00	call 113
     612:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     613:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     614:	b7 01 00 00 02 00 00 00	r1 = 2
     615:	bf 63 00 00 00 00 00 00	r3 = r6
     616:	0f 13 00 00 00 00 00 00	r3 += r1
     617:	bf a1 00 00 00 00 00 00	r1 = r10
     618:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     619:	b7 02 00 00 02 00 00 00	r2 = 2
     620:	85 00 00 00 71 00 00 00	call 113
     621:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     622:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     623:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     624:	b7 01 00 00 09 00 00 00	r1 = 9
     625:	05 00 38 00 00 00 00 00	goto +56 <LBB45_69>

0000000000001390 <LBB45_66>:
     626:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     627:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     628:	b7 01 00 00 c0 00 00 00	r1 = 192
     629:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     630:	bf 93 00 00 00 00 00 00	r3 = r9
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     634:	b7 02 00 00 08 00 00 00	r2 = 8
     635:	85 00 00 00 71 00 00 00	call 113
     636:	b7 01 00 00 b6 00 00 00	r1 = 182
     637:	bf 93 00 00 00 00 00 00	r3 = r9
     638:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     639:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     640:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     641:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     642:	b7 02 00 00 02 00 00 00	r2 = 2
     643:	85 00 00 00 71 00 00 00	call 113
     644:	b7 01 00 00 b4 00 00 00	r1 = 180
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     647:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     648:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     649:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     650:	b7 02 00 00 02 00 00 00	r2 = 2
     651:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     652:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     653:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     654:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB45_68>
     655:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001480 <LBB45_68>:
;     return head + network_header;
     656:	57 09 00 00 ff ff 00 00	r9 &= 65535
     657:	0f 96 00 00 00 00 00 00	r6 += r9
     658:	b7 01 00 00 08 00 00 00	r1 = 8
     659:	bf 63 00 00 00 00 00 00	r3 = r6
     660:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
     661:	bf 71 00 00 00 00 00 00	r1 = r7
     662:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     663:	b7 02 00 00 10 00 00 00	r2 = 16
     664:	85 00 00 00 04 00 00 00	call 4
     665:	b7 01 00 00 18 00 00 00	r1 = 24
     666:	bf 63 00 00 00 00 00 00	r3 = r6
     667:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     668:	bf 71 00 00 00 00 00 00	r1 = r7
     669:	07 01 00 00 80 00 00 00	r1 += 128
     670:	b7 02 00 00 10 00 00 00	r2 = 16
     671:	85 00 00 00 04 00 00 00	call 4
     672:	b7 01 00 00 04 00 00 00	r1 = 4
     673:	bf 63 00 00 00 00 00 00	r3 = r6
     674:	0f 13 00 00 00 00 00 00	r3 += r1
     675:	bf a1 00 00 00 00 00 00	r1 = r10
     676:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     677:	b7 02 00 00 02 00 00 00	r2 = 2
     678:	85 00 00 00 71 00 00 00	call 113
     679:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     680:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     681:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000001550 <LBB45_69>:
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
     684:	bf a1 00 00 00 00 00 00	r1 = r10
     685:	07 01 00 00 f8 ff ff ff	r1 += -8
     686:	b7 02 00 00 01 00 00 00	r2 = 1
     687:	85 00 00 00 71 00 00 00	call 113
     688:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     689:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     690:	bf a1 00 00 00 00 00 00	r1 = r10
     691:	07 01 00 00 f8 ff ff ff	r1 += -8
     692:	b7 02 00 00 01 00 00 00	r2 = 1
     693:	bf 63 00 00 00 00 00 00	r3 = r6
     694:	85 00 00 00 04 00 00 00	call 4
     695:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     696:	57 01 00 00 f0 00 00 00	r1 &= 240
     697:	77 01 00 00 04 00 00 00	r1 >>= 4
     698:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     699:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     700:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB45_72>
     701:	15 01 53 00 01 00 00 00	if r1 == 1 goto +83 <LBB45_84>
     702:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB45_74>
     703:	05 00 b9 fe 00 00 00 00	goto -327 <LBB45_92>

0000000000001600 <LBB45_74>:
     704:	b7 01 00 00 c0 00 00 00	r1 = 192
     705:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     706:	bf 93 00 00 00 00 00 00	r3 = r9
     707:	0f 13 00 00 00 00 00 00	r3 += r1
     708:	bf a1 00 00 00 00 00 00	r1 = r10
     709:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     710:	b7 02 00 00 08 00 00 00	r2 = 8
     711:	85 00 00 00 71 00 00 00	call 113
     712:	b7 01 00 00 b6 00 00 00	r1 = 182
     713:	bf 93 00 00 00 00 00 00	r3 = r9
     714:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     715:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     716:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     717:	bf a1 00 00 00 00 00 00	r1 = r10
     718:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     719:	b7 02 00 00 02 00 00 00	r2 = 2
     720:	85 00 00 00 71 00 00 00	call 113
     721:	b7 01 00 00 b4 00 00 00	r1 = 180
     722:	0f 19 00 00 00 00 00 00	r9 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     723:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     726:	b7 02 00 00 02 00 00 00	r2 = 2
     727:	bf 93 00 00 00 00 00 00	r3 = r9
     728:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     729:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     730:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     731:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB45_76>
     732:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000016e8 <LBB45_76>:
;     return head + network_header;
     733:	57 06 00 00 ff ff 00 00	r6 &= 65535
     734:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
     735:	0f 61 00 00 00 00 00 00	r1 += r6
     736:	bf 16 00 00 00 00 00 00	r6 = r1
     737:	bf a1 00 00 00 00 00 00	r1 = r10
     738:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     739:	b7 02 00 00 01 00 00 00	r2 = 1
     740:	bf 63 00 00 00 00 00 00	r3 = r6
     741:	85 00 00 00 04 00 00 00	call 4
     742:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     743:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     744:	57 02 00 00 f0 00 00 00	r2 &= 240
     745:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB45_78>
     746:	bf a1 00 00 00 00 00 00	r1 = r10
     747:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     748:	b7 02 00 00 01 00 00 00	r2 = 1
     749:	bf 63 00 00 00 00 00 00	r3 = r6
     750:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     751:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     752:	67 01 00 00 02 00 00 00	r1 <<= 2
     753:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001790 <LBB45_78>:
;     return l3_header + transport_size;
     754:	0f 16 00 00 00 00 00 00	r6 += r1
     755:	b7 01 00 00 00 00 00 00	r1 = 0
     756:	bf 63 00 00 00 00 00 00	r3 = r6
     757:	0f 13 00 00 00 00 00 00	r3 += r1
     758:	bf a1 00 00 00 00 00 00	r1 = r10
     759:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     760:	b7 02 00 00 02 00 00 00	r2 = 2
     761:	85 00 00 00 71 00 00 00	call 113
     762:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     763:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     764:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     765:	b7 01 00 00 02 00 00 00	r1 = 2
     766:	bf 63 00 00 00 00 00 00	r3 = r6
     767:	0f 13 00 00 00 00 00 00	r3 += r1
     768:	bf a1 00 00 00 00 00 00	r1 = r10
     769:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     770:	b7 02 00 00 02 00 00 00	r2 = 2
     771:	85 00 00 00 71 00 00 00	call 113
     772:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     773:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     774:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     775:	07 06 00 00 0c 00 00 00	r6 += 12
     776:	bf 71 00 00 00 00 00 00	r1 = r7
     777:	07 01 00 00 9c 00 00 00	r1 += 156
     778:	b7 02 00 00 02 00 00 00	r2 = 2
     779:	bf 63 00 00 00 00 00 00	r3 = r6
     780:	85 00 00 00 04 00 00 00	call 4
     781:	05 00 8a 00 00 00 00 00	goto +138 <LBB45_89>

0000000000001870 <LBB45_72>:
;     if (l4_proto == IPPROTO_TCP) {
     782:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB45_79>
     783:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB45_84>
     784:	05 00 68 fe 00 00 00 00	goto -408 <LBB45_92>

0000000000001888 <LBB45_84>:
     785:	b7 01 00 00 c0 00 00 00	r1 = 192
     786:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     787:	bf 63 00 00 00 00 00 00	r3 = r6
     788:	0f 13 00 00 00 00 00 00	r3 += r1
     789:	bf a1 00 00 00 00 00 00	r1 = r10
     790:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     791:	b7 02 00 00 08 00 00 00	r2 = 8
     792:	85 00 00 00 71 00 00 00	call 113
     793:	b7 01 00 00 b6 00 00 00	r1 = 182
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     796:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     797:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     798:	bf a1 00 00 00 00 00 00	r1 = r10
     799:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     800:	b7 02 00 00 02 00 00 00	r2 = 2
     801:	85 00 00 00 71 00 00 00	call 113
     802:	b7 01 00 00 b4 00 00 00	r1 = 180
     803:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     804:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     805:	bf a1 00 00 00 00 00 00	r1 = r10
     806:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     807:	b7 02 00 00 02 00 00 00	r2 = 2
     808:	bf 63 00 00 00 00 00 00	r3 = r6
     809:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     810:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     811:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     812:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB45_86>
     813:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001970 <LBB45_86>:
;     return head + network_header;
     814:	57 09 00 00 ff ff 00 00	r9 &= 65535
     815:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     816:	0f 96 00 00 00 00 00 00	r6 += r9
     817:	bf a1 00 00 00 00 00 00	r1 = r10
     818:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     819:	b7 02 00 00 01 00 00 00	r2 = 1
     820:	bf 63 00 00 00 00 00 00	r3 = r6
     821:	85 00 00 00 04 00 00 00	call 4
     822:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     823:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     824:	57 02 00 00 f0 00 00 00	r2 &= 240
     825:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB45_88>
     826:	bf a1 00 00 00 00 00 00	r1 = r10
     827:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     828:	b7 02 00 00 01 00 00 00	r2 = 1
     829:	bf 63 00 00 00 00 00 00	r3 = r6
     830:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     831:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     832:	67 01 00 00 02 00 00 00	r1 <<= 2
     833:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a10 <LBB45_88>:
;     return l3_header + transport_size;
     834:	0f 16 00 00 00 00 00 00	r6 += r1
     835:	bf a9 00 00 00 00 00 00	r9 = r10
     836:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     837:	bf 91 00 00 00 00 00 00	r1 = r9
     838:	b7 02 00 00 08 00 00 00	r2 = 8
     839:	bf 63 00 00 00 00 00 00	r3 = r6
     840:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     841:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     842:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     843:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     844:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     845:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     846:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     847:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     848:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     849:	05 00 46 00 00 00 00 00	goto +70 <LBB45_89>

0000000000001a90 <LBB45_79>:
     850:	b7 01 00 00 c0 00 00 00	r1 = 192
     851:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     852:	bf 63 00 00 00 00 00 00	r3 = r6
     853:	0f 13 00 00 00 00 00 00	r3 += r1
     854:	bf a1 00 00 00 00 00 00	r1 = r10
     855:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     856:	b7 02 00 00 08 00 00 00	r2 = 8
     857:	85 00 00 00 71 00 00 00	call 113
     858:	b7 01 00 00 b6 00 00 00	r1 = 182
     859:	bf 63 00 00 00 00 00 00	r3 = r6
     860:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     861:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     862:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     863:	bf a1 00 00 00 00 00 00	r1 = r10
     864:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     865:	b7 02 00 00 02 00 00 00	r2 = 2
     866:	85 00 00 00 71 00 00 00	call 113
     867:	b7 01 00 00 b4 00 00 00	r1 = 180
     868:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     869:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     870:	bf a1 00 00 00 00 00 00	r1 = r10
     871:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     872:	b7 02 00 00 02 00 00 00	r2 = 2
     873:	bf 63 00 00 00 00 00 00	r3 = r6
     874:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     875:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     876:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     877:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB45_81>
     878:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001b78 <LBB45_81>:
;     return head + network_header;
     879:	57 09 00 00 ff ff 00 00	r9 &= 65535
     880:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     881:	0f 96 00 00 00 00 00 00	r6 += r9
     882:	bf a1 00 00 00 00 00 00	r1 = r10
     883:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     884:	b7 02 00 00 01 00 00 00	r2 = 1
     885:	bf 63 00 00 00 00 00 00	r3 = r6
     886:	85 00 00 00 04 00 00 00	call 4
     887:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     888:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     889:	57 02 00 00 f0 00 00 00	r2 &= 240
     890:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB45_83>
     891:	bf a1 00 00 00 00 00 00	r1 = r10
     892:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     893:	b7 02 00 00 01 00 00 00	r2 = 1
     894:	bf 63 00 00 00 00 00 00	r3 = r6
     895:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     896:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     897:	67 01 00 00 02 00 00 00	r1 <<= 2
     898:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c18 <LBB45_83>:
;     return l3_header + transport_size;
     899:	0f 16 00 00 00 00 00 00	r6 += r1
     900:	b7 01 00 00 00 00 00 00	r1 = 0
     901:	bf 63 00 00 00 00 00 00	r3 = r6
     902:	0f 13 00 00 00 00 00 00	r3 += r1
     903:	bf a1 00 00 00 00 00 00	r1 = r10
     904:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     905:	b7 02 00 00 02 00 00 00	r2 = 2
     906:	85 00 00 00 71 00 00 00	call 113
     907:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     908:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     909:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     910:	b7 01 00 00 02 00 00 00	r1 = 2
     911:	0f 16 00 00 00 00 00 00	r6 += r1
     912:	bf a1 00 00 00 00 00 00	r1 = r10
     913:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     914:	b7 02 00 00 02 00 00 00	r2 = 2
     915:	bf 63 00 00 00 00 00 00	r3 = r6
     916:	85 00 00 00 71 00 00 00	call 113
     917:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     918:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     919:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001cc0 <LBB45_89>:
     920:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
;     return cfg->callstack == 0;
     921:	71 81 11 00 00 00 00 00	r1 = *(u8 *)(r8 + 17)
;     if (!filter_callstack(cfg))
     922:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB45_91>
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
     923:	bf 61 00 00 00 00 00 00	r1 = r6
     924:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     926:	b7 03 00 00 00 00 00 00	r3 = 0
     927:	85 00 00 00 1b 00 00 00	call 27
     928:	63 07 30 00 00 00 00 00	*(u32 *)(r7 + 48) = r0

0000000000001d08 <LBB45_91>:
     929:	b7 01 00 00 68 00 00 00	r1 = 104
;     for (j = 10; j < 64; j += 10) CPY(j);
     930:	73 17 0c 00 00 00 00 00	*(u8 *)(r7 + 12) = r1
     931:	b7 01 00 00 73 00 00 00	r1 = 115
     932:	73 17 0b 00 00 00 00 00	*(u8 *)(r7 + 11) = r1
     933:	b7 01 00 00 6e 00 00 00	r1 = 110
     934:	73 17 09 00 00 00 00 00	*(u8 *)(r7 + 9) = r1
     935:	b7 01 00 00 66 00 00 00	r1 = 102
     936:	73 17 07 00 00 00 00 00	*(u8 *)(r7 + 7) = r1
     937:	b7 01 00 00 76 00 00 00	r1 = 118
     938:	73 17 05 00 00 00 00 00	*(u8 *)(r7 + 5) = r1
     939:	b7 01 00 00 63 00 00 00	r1 = 99
     940:	73 17 04 00 00 00 00 00	*(u8 *)(r7 + 4) = r1
     941:	b7 01 00 00 72 00 00 00	r1 = 114
     942:	73 17 03 00 00 00 00 00	*(u8 *)(r7 + 3) = r1
     943:	b7 01 00 00 5f 00 00 00	r1 = 95
     944:	73 17 06 00 00 00 00 00	*(u8 *)(r7 + 6) = r1
     945:	73 17 02 00 00 00 00 00	*(u8 *)(r7 + 2) = r1
     946:	b7 01 00 00 70 00 00 00	r1 = 112
     947:	73 17 01 00 00 00 00 00	*(u8 *)(r7 + 1) = r1
     948:	b7 01 00 00 69 00 00 00	r1 = 105
     949:	73 17 0a 00 00 00 00 00	*(u8 *)(r7 + 10) = r1
     950:	73 17 08 00 00 00 00 00	*(u8 *)(r7 + 8) = r1
     951:	73 17 00 00 00 00 00 00	*(u8 *)(r7 + 0) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     952:	bf 61 00 00 00 00 00 00	r1 = r6
     953:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     955:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     957:	bf 74 00 00 00 00 00 00	r4 = r7
     958:	b7 05 00 00 e0 00 00 00	r5 = 224
     959:	85 00 00 00 19 00 00 00	call 25
     960:	05 00 b8 fd 00 00 00 00	goto -584 <LBB45_92>

Disassembly of section kprobe/ip_output:

0000000000000000 <k_ip_output>:
; int k_ip_output(struct pt_regs *ctx) {
       0:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM3(ctx);
       1:	79 11 60 00 00 00 00 00	r1 = *(u64 *)(r1 + 96)
       2:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       3:	b7 06 00 00 00 00 00 00	r6 = 0
;     GET_CFG();
       4:	63 6a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r6
       5:	bf a2 00 00 00 00 00 00	r2 = r10
       6:	07 02 00 00 e4 ff ff ff	r2 += -28
;     GET_CFG();
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	85 00 00 00 01 00 00 00	call 1
      10:	bf 08 00 00 00 00 00 00	r8 = r0
      11:	15 08 6d 01 00 00 00 00	if r8 == 0 goto +365 <LBB46_92>
      12:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
      13:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      14:	63 18 08 00 00 00 00 00	*(u32 *)(r8 + 8) = r1
;     u32 ev_buff_id = 0;
      15:	63 6a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r6
      16:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      17:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      18:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      20:	85 00 00 00 01 00 00 00	call 1
      21:	bf 07 00 00 00 00 00 00	r7 = r0
;     if (!ev) return NULL;
      22:	55 07 01 00 00 00 00 00	if r7 != 0 goto +1 <LBB46_3>
      23:	05 00 61 01 00 00 00 00	goto +353 <LBB46_92>

00000000000000c0 <LBB46_3>:
      24:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      25:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      26:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      27:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      28:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      29:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      30:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      31:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      32:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      33:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      34:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      35:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      36:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      37:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      38:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      39:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      40:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      41:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      42:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      43:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      44:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      45:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      46:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      47:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      48:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      49:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      50:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      51:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      52:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      53:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      54:	61 81 04 00 00 00 00 00	r1 = *(u32 *)(r8 + 4)
      55:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB46_5>
      56:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      57:	5d 01 3f 01 00 00 00 00	if r1 != r0 goto +319 <LBB46_92>

00000000000001d0 <LBB46_5>:
      58:	b7 01 00 00 10 00 00 00	r1 = 16
      59:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
      60:	bf 93 00 00 00 00 00 00	r3 = r9
      61:	0f 13 00 00 00 00 00 00	r3 += r1
      62:	bf a6 00 00 00 00 00 00	r6 = r10
      63:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      64:	bf 61 00 00 00 00 00 00	r1 = r6
      65:	b7 02 00 00 08 00 00 00	r2 = 8
      66:	85 00 00 00 71 00 00 00	call 113
      67:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      68:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      69:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      70:	bf 61 00 00 00 00 00 00	r1 = r6
      71:	b7 02 00 00 08 00 00 00	r2 = 8
      72:	85 00 00 00 71 00 00 00	call 113
      73:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      74:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      75:	0f 13 00 00 00 00 00 00	r3 += r1
      76:	bf a1 00 00 00 00 00 00	r1 = r10
      77:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      78:	b7 02 00 00 04 00 00 00	r2 = 4
      79:	85 00 00 00 71 00 00 00	call 113
      80:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      81:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB46_8>
      82:	b7 01 00 00 18 00 00 00	r1 = 24
      83:	bf 93 00 00 00 00 00 00	r3 = r9
      84:	0f 13 00 00 00 00 00 00	r3 += r1
      85:	bf a1 00 00 00 00 00 00	r1 = r10
      86:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
      87:	b7 02 00 00 08 00 00 00	r2 = 8
      88:	85 00 00 00 71 00 00 00	call 113
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
      90:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB46_11>
      91:	b7 01 00 00 30 00 00 00	r1 = 48
      92:	0f 13 00 00 00 00 00 00	r3 += r1
      93:	bf a1 00 00 00 00 00 00	r1 = r10
      94:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      95:	b7 02 00 00 08 00 00 00	r2 = 8
      96:	85 00 00 00 71 00 00 00	call 113
      97:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      98:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     102:	b7 02 00 00 04 00 00 00	r2 = 4
     103:	85 00 00 00 71 00 00 00	call 113
     104:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000348 <LBB46_8>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     105:	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0)
     106:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB46_11>
     107:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB46_11>
     108:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB46_92>

0000000000000368 <LBB46_11>:
;     u16 icmpid = cfg->icmpid;
     109:	69 81 0e 00 00 00 00 00	r1 = *(u16 *)(r8 + 14)
;     u16 port = cfg->port;
     110:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     111:	69 81 0c 00 00 00 00 00	r1 = *(u16 *)(r8 + 12)
;     u8 proto = cfg->proto;
     112:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     113:	71 81 12 00 00 00 00 00	r1 = *(u8 *)(r8 + 18)
;     u32 addr = cfg->ip;
     114:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     115:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
     116:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     117:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     118:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     119:	b7 01 00 00 c0 00 00 00	r1 = 192
     120:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     121:	bf 93 00 00 00 00 00 00	r3 = r9
     122:	0f 13 00 00 00 00 00 00	r3 += r1
     123:	bf a1 00 00 00 00 00 00	r1 = r10
     124:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     125:	b7 02 00 00 08 00 00 00	r2 = 8
     126:	85 00 00 00 71 00 00 00	call 113
     127:	b7 01 00 00 b6 00 00 00	r1 = 182
     128:	bf 93 00 00 00 00 00 00	r3 = r9
     129:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     130:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     131:	bf a1 00 00 00 00 00 00	r1 = r10
     132:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     133:	b7 02 00 00 02 00 00 00	r2 = 2
     134:	85 00 00 00 71 00 00 00	call 113
     135:	b7 01 00 00 b4 00 00 00	r1 = 180
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     138:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     139:	bf a1 00 00 00 00 00 00	r1 = r10
     140:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     141:	b7 02 00 00 02 00 00 00	r2 = 2
     142:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     143:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     144:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     145:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB46_13>
     146:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000498 <LBB46_13>:
;     return head + network_header;
     147:	57 09 00 00 ff ff 00 00	r9 &= 65535
     148:	0f 96 00 00 00 00 00 00	r6 += r9
     149:	bf a1 00 00 00 00 00 00	r1 = r10
     150:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     151:	b7 02 00 00 01 00 00 00	r2 = 1
     152:	bf 63 00 00 00 00 00 00	r3 = r6
     153:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     154:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     155:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     156:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB46_20>
     157:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB46_92>
;         if (addr != 0) {
     158:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     159:	bf 19 00 00 00 00 00 00	r9 = r1
     160:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB46_18>
     161:	b7 01 00 00 0c 00 00 00	r1 = 12
     162:	bf 63 00 00 00 00 00 00	r3 = r6
     163:	0f 13 00 00 00 00 00 00	r3 += r1
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     166:	b7 02 00 00 04 00 00 00	r2 = 4
     167:	85 00 00 00 71 00 00 00	call 113
     168:	b7 01 00 00 10 00 00 00	r1 = 16
     169:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     170:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     171:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     172:	bf a1 00 00 00 00 00 00	r1 = r10
     173:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     174:	b7 02 00 00 04 00 00 00	r2 = 4
     175:	bf 63 00 00 00 00 00 00	r3 = r6
     176:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     177:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     178:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB46_54>
     179:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     180:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     181:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB46_92>
     182:	05 00 da 00 00 00 00 00	goto +218 <LBB46_54>

00000000000005b8 <LBB46_20>:
     183:	b7 01 00 00 06 00 00 00	r1 = 6
     184:	0f 16 00 00 00 00 00 00	r6 += r1
     185:	bf a1 00 00 00 00 00 00	r1 = r10
     186:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     187:	b7 02 00 00 01 00 00 00	r2 = 1
     188:	bf 63 00 00 00 00 00 00	r3 = r6
     189:	85 00 00 00 04 00 00 00	call 4
     190:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     191:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     192:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     193:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB46_22>
     194:	b7 04 00 00 80 00 00 00	r4 = 128
     195:	b7 03 00 00 81 00 00 00	r3 = 129
     196:	b7 01 00 00 3a 00 00 00	r1 = 58
     197:	05 00 0d 00 00 00 00 00	goto +13 <LBB46_22>

0000000000000630 <LBB46_18>:
     198:	b7 01 00 00 09 00 00 00	r1 = 9
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     208:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB46_22>
     209:	b7 04 00 00 08 00 00 00	r4 = 8
     210:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000698 <LBB46_22>:
;     if (proto != 0 && proto != l4_proto)
     211:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     212:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB46_24>
     213:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB46_92>

00000000000006b0 <LBB46_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     214:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB46_27>
     215:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB46_29>
     216:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB46_35>
     217:	05 00 9f 00 00 00 00 00	goto +159 <LBB46_92>

00000000000006d0 <LBB46_35>:
     218:	b7 01 00 00 c0 00 00 00	r1 = 192
     219:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     220:	bf 63 00 00 00 00 00 00	r3 = r6
     221:	0f 13 00 00 00 00 00 00	r3 += r1
     222:	bf a1 00 00 00 00 00 00	r1 = r10
     223:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     224:	b7 02 00 00 08 00 00 00	r2 = 8
     225:	85 00 00 00 71 00 00 00	call 113
     226:	b7 01 00 00 b6 00 00 00	r1 = 182
     227:	bf 63 00 00 00 00 00 00	r3 = r6
     228:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     229:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     230:	bf a1 00 00 00 00 00 00	r1 = r10
     231:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     232:	b7 02 00 00 02 00 00 00	r2 = 2
     233:	85 00 00 00 71 00 00 00	call 113
     234:	b7 01 00 00 b4 00 00 00	r1 = 180
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     237:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     238:	bf a1 00 00 00 00 00 00	r1 = r10
     239:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     240:	b7 02 00 00 02 00 00 00	r2 = 2
     241:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     242:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     243:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     244:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB46_37>
     245:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000007b0 <LBB46_37>:
;     return head + network_header;
     246:	57 06 00 00 ff ff 00 00	r6 &= 65535
     247:	0f 69 00 00 00 00 00 00	r9 += r6
     248:	bf a1 00 00 00 00 00 00	r1 = r10
     249:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     250:	b7 02 00 00 01 00 00 00	r2 = 1
     251:	bf 93 00 00 00 00 00 00	r3 = r9
     252:	85 00 00 00 04 00 00 00	call 4
     253:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     254:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     255:	57 02 00 00 f0 00 00 00	r2 &= 240
     256:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB46_39>
     257:	bf a1 00 00 00 00 00 00	r1 = r10
     258:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     259:	b7 02 00 00 01 00 00 00	r2 = 1
     260:	bf 93 00 00 00 00 00 00	r3 = r9
     261:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     262:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     263:	67 01 00 00 02 00 00 00	r1 <<= 2
     264:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000848 <LBB46_39>:
;     return l3_header + transport_size;
     265:	0f 19 00 00 00 00 00 00	r9 += r1
     266:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9

0000000000000858 <LBB46_40>:
     267:	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 72)
;     if (port != 0) {
     268:	bf 92 00 00 00 00 00 00	r2 = r9
     269:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB46_45>
;         if (l4_proto == IPPROTO_TCP) {
     270:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     271:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB46_52>
     272:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB46_45>
     273:	b7 01 00 00 00 00 00 00	r1 = 0
     274:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     275:	bf 63 00 00 00 00 00 00	r3 = r6
     276:	0f 13 00 00 00 00 00 00	r3 += r1
     277:	bf a1 00 00 00 00 00 00	r1 = r10
     278:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     279:	b7 02 00 00 02 00 00 00	r2 = 2
     280:	85 00 00 00 71 00 00 00	call 113
     281:	b7 01 00 00 02 00 00 00	r1 = 2
     282:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     283:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     284:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     285:	bf a1 00 00 00 00 00 00	r1 = r10
     286:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     287:	b7 02 00 00 02 00 00 00	r2 = 2
     288:	bf 63 00 00 00 00 00 00	r3 = r6
     289:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     290:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     291:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     292:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB46_54>
     293:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     294:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB46_92>
     295:	05 00 69 00 00 00 00 00	goto +105 <LBB46_54>

0000000000000940 <LBB46_27>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     296:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB46_35>
     297:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB46_92>

0000000000000950 <LBB46_29>:
     298:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r4
     299:	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r3
     300:	b7 01 00 00 c0 00 00 00	r1 = 192
     301:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     302:	bf 63 00 00 00 00 00 00	r3 = r6
     303:	0f 13 00 00 00 00 00 00	r3 += r1
     304:	bf a1 00 00 00 00 00 00	r1 = r10
     305:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     306:	b7 02 00 00 08 00 00 00	r2 = 8
     307:	85 00 00 00 71 00 00 00	call 113
     308:	b7 01 00 00 b6 00 00 00	r1 = 182
     309:	bf 63 00 00 00 00 00 00	r3 = r6
     310:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     311:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     312:	bf a1 00 00 00 00 00 00	r1 = r10
     313:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     314:	b7 02 00 00 02 00 00 00	r2 = 2
     315:	85 00 00 00 71 00 00 00	call 113
     316:	b7 01 00 00 b4 00 00 00	r1 = 180
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     319:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     320:	bf a1 00 00 00 00 00 00	r1 = r10
     321:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     322:	b7 02 00 00 02 00 00 00	r2 = 2
     323:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     324:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     325:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     326:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB46_31>
     327:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000a40 <LBB46_31>:
;     return head + network_header;
     328:	57 06 00 00 ff ff 00 00	r6 &= 65535
     329:	0f 69 00 00 00 00 00 00	r9 += r6
     330:	bf a1 00 00 00 00 00 00	r1 = r10
     331:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     332:	b7 02 00 00 01 00 00 00	r2 = 1
     333:	bf 93 00 00 00 00 00 00	r3 = r9
     334:	85 00 00 00 04 00 00 00	call 4
     335:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     336:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     337:	57 02 00 00 f0 00 00 00	r2 &= 240
     338:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB46_33>
     339:	bf a1 00 00 00 00 00 00	r1 = r10
     340:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     341:	b7 02 00 00 01 00 00 00	r2 = 1
     342:	bf 93 00 00 00 00 00 00	r3 = r9
     343:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     344:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     345:	67 01 00 00 02 00 00 00	r1 <<= 2
     346:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000ad8 <LBB46_33>:
;     return l3_header + transport_size;
     347:	0f 19 00 00 00 00 00 00	r9 += r1
     348:	bf a6 00 00 00 00 00 00	r6 = r10
     349:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     350:	bf 61 00 00 00 00 00 00	r1 = r6
     351:	b7 02 00 00 08 00 00 00	r2 = 8
     352:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
     353:	bf 93 00 00 00 00 00 00	r3 = r9
     354:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     355:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     356:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     357:	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 88)
     358:	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 96)
     359:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB46_40>
     360:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     361:	07 02 00 00 e8 ff ff ff	r2 += -24
     362:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     363:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB46_40>
     364:	05 00 0c 00 00 00 00 00	goto +12 <LBB46_92>

0000000000000b68 <LBB46_45>:
;     if (proto != 0 && proto != l4_proto)
     365:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     366:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB46_54>
     367:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
;     if (proto != 0 && icmpid != 0) {
     368:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB46_54>
     369:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     370:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB46_54>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     371:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     372:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB46_50>
     373:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB46_54>

0000000000000bb0 <LBB46_50>:
;         if (icmpid != ev_icmpid)
     374:	57 01 00 00 ff ff 00 00	r1 &= 65535
     375:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
     376:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB46_54>

0000000000000bc8 <LBB46_92>:
;     return do_trace(ctx, skb, "ip_output");
     377:	b7 00 00 00 00 00 00 00	r0 = 0
     378:	95 00 00 00 00 00 00 00	exit

0000000000000bd8 <LBB46_52>:
     379:	b7 01 00 00 00 00 00 00	r1 = 0
     380:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     381:	bf 63 00 00 00 00 00 00	r3 = r6
     382:	0f 13 00 00 00 00 00 00	r3 += r1
     383:	bf a1 00 00 00 00 00 00	r1 = r10
     384:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     385:	b7 02 00 00 02 00 00 00	r2 = 2
     386:	85 00 00 00 71 00 00 00	call 113
     387:	b7 01 00 00 02 00 00 00	r1 = 2
     388:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     389:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     390:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     391:	bf a1 00 00 00 00 00 00	r1 = r10
     392:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     393:	b7 02 00 00 02 00 00 00	r2 = 2
     394:	bf 63 00 00 00 00 00 00	r3 = r6
     395:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     396:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     397:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     398:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB46_54>
     399:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     400:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB46_92>

0000000000000c88 <LBB46_54>:
;     event->flags |= SKBTRACER_EVENT_IF;
     401:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     402:	47 01 00 00 01 00 00 00	r1 |= 1
     403:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     404:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
;     ev->skb = (u64)skb;
     405:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     406:	85 00 00 00 05 00 00 00	call 5
     407:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     408:	b7 01 00 00 10 00 00 00	r1 = 16
     409:	bf 96 00 00 00 00 00 00	r6 = r9
     410:	0f 16 00 00 00 00 00 00	r6 += r1
     411:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     412:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     413:	b7 02 00 00 08 00 00 00	r2 = 8
     414:	bf 63 00 00 00 00 00 00	r3 = r6
     415:	85 00 00 00 71 00 00 00	call 113
     416:	b7 01 00 00 70 00 00 00	r1 = 112
     417:	bf 93 00 00 00 00 00 00	r3 = r9
     418:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     419:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     420:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     421:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     422:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     423:	b7 02 00 00 04 00 00 00	r2 = 4
     424:	85 00 00 00 71 00 00 00	call 113
     425:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     426:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     427:	85 00 00 00 08 00 00 00	call 8
     428:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     429:	85 00 00 00 0e 00 00 00	call 14
     430:	57 00 00 00 ff ff 00 00	r0 &= 65535
     431:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     432:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     433:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     434:	bf 91 00 00 00 00 00 00	r1 = r9
     435:	b7 02 00 00 08 00 00 00	r2 = 8
     436:	bf 63 00 00 00 00 00 00	r3 = r6
     437:	85 00 00 00 71 00 00 00	call 113
     438:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     439:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     440:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     441:	bf 91 00 00 00 00 00 00	r1 = r9
     442:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     443:	b7 02 00 00 08 00 00 00	r2 = 8
     444:	85 00 00 00 71 00 00 00	call 113
     445:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     446:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     447:	0f 13 00 00 00 00 00 00	r3 += r1
     448:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     449:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     450:	b7 02 00 00 04 00 00 00	r2 = 4
     451:	85 00 00 00 71 00 00 00	call 113
     452:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     453:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB46_57>
     454:	b7 01 00 00 18 00 00 00	r1 = 24
     455:	bf 93 00 00 00 00 00 00	r3 = r9
     456:	0f 13 00 00 00 00 00 00	r3 += r1
     457:	bf a1 00 00 00 00 00 00	r1 = r10
     458:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     459:	b7 02 00 00 08 00 00 00	r2 = 8
     460:	85 00 00 00 71 00 00 00	call 113
     461:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     462:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     463:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB46_57>
     464:	b7 01 00 00 30 00 00 00	r1 = 48
     465:	0f 13 00 00 00 00 00 00	r3 += r1
     466:	bf a1 00 00 00 00 00 00	r1 = r10
     467:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     468:	b7 02 00 00 08 00 00 00	r2 = 8
     469:	85 00 00 00 71 00 00 00	call 113
     470:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     471:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     472:	0f 13 00 00 00 00 00 00	r3 += r1
     473:	bf a1 00 00 00 00 00 00	r1 = r10
     474:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     475:	b7 02 00 00 04 00 00 00	r2 = 4
     476:	85 00 00 00 71 00 00 00	call 113
     477:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000ef0 <LBB46_57>:
;     pkt_info->netns = get_netns(skb);
     478:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     479:	b7 01 00 00 80 00 00 00	r1 = 128
     480:	bf 93 00 00 00 00 00 00	r3 = r9
     481:	0f 13 00 00 00 00 00 00	r3 += r1
     482:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     483:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     484:	bf a1 00 00 00 00 00 00	r1 = r10
     485:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     486:	b7 02 00 00 01 00 00 00	r2 = 1
     487:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     488:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     489:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     490:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     491:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     492:	b7 01 00 00 00 00 00 00	r1 = 0
     493:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     494:	0f 13 00 00 00 00 00 00	r3 += r1
;     pkt_info->ifname[0] = 0;
     495:	bf 71 00 00 00 00 00 00	r1 = r7
     496:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     497:	b7 02 00 00 10 00 00 00	r2 = 16
     498:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     499:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     500:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB46_59>
     501:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     502:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     503:	b7 01 00 00 69 00 00 00	r1 = 105
     504:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     505:	b7 01 00 00 6e 00 00 00	r1 = 110
     506:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000000fd8 <LBB46_59>:
     507:	b7 01 00 00 c0 00 00 00	r1 = 192
     508:	bf 93 00 00 00 00 00 00	r3 = r9
     509:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     510:	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r3
     511:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     512:	07 01 00 00 f8 ff ff ff	r1 += -8
     513:	b7 02 00 00 08 00 00 00	r2 = 8
     514:	85 00 00 00 71 00 00 00	call 113
     515:	b7 01 00 00 b6 00 00 00	r1 = 182
     516:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     517:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     518:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     519:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     520:	b7 02 00 00 02 00 00 00	r2 = 2
     521:	bf 93 00 00 00 00 00 00	r3 = r9
     522:	85 00 00 00 71 00 00 00	call 113
     523:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     524:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     525:	bf 71 00 00 00 00 00 00	r1 = r7
     526:	07 01 00 00 64 00 00 00	r1 += 100
     527:	b7 02 00 00 06 00 00 00	r2 = 6
     528:	bf 63 00 00 00 00 00 00	r3 = r6
     529:	85 00 00 00 04 00 00 00	call 4
     530:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     531:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	b7 02 00 00 08 00 00 00	r2 = 8
     533:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     534:	85 00 00 00 71 00 00 00	call 113
     535:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     536:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     537:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     538:	b7 02 00 00 02 00 00 00	r2 = 2
     539:	bf 93 00 00 00 00 00 00	r3 = r9
     540:	85 00 00 00 71 00 00 00	call 113
     541:	b7 01 00 00 b4 00 00 00	r1 = 180
     542:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
     543:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     544:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     547:	b7 02 00 00 02 00 00 00	r2 = 2
     548:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     549:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     550:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     551:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB46_61>
     552:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001148 <LBB46_61>:
;     return head + network_header;
     553:	57 09 00 00 ff ff 00 00	r9 &= 65535
     554:	0f 96 00 00 00 00 00 00	r6 += r9
     555:	bf a1 00 00 00 00 00 00	r1 = r10
     556:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     557:	b7 02 00 00 01 00 00 00	r2 = 1
     558:	bf 63 00 00 00 00 00 00	r3 = r6
     559:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     560:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     561:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     562:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB46_66>
     563:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB46_92>
     564:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     565:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     566:	b7 01 00 00 c0 00 00 00	r1 = 192
     567:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     568:	bf 93 00 00 00 00 00 00	r3 = r9
     569:	0f 13 00 00 00 00 00 00	r3 += r1
     570:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     572:	b7 02 00 00 08 00 00 00	r2 = 8
     573:	85 00 00 00 71 00 00 00	call 113
     574:	b7 01 00 00 b6 00 00 00	r1 = 182
     575:	bf 93 00 00 00 00 00 00	r3 = r9
     576:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     577:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     578:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     579:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     580:	b7 02 00 00 02 00 00 00	r2 = 2
     581:	85 00 00 00 71 00 00 00	call 113
     582:	b7 01 00 00 b4 00 00 00	r1 = 180
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     585:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     586:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     587:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     588:	b7 02 00 00 02 00 00 00	r2 = 2
     589:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     590:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     591:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     592:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB46_65>
     593:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001290 <LBB46_65>:
;     return head + network_header;
     594:	57 09 00 00 ff ff 00 00	r9 &= 65535
     595:	0f 96 00 00 00 00 00 00	r6 += r9
     596:	b7 01 00 00 0c 00 00 00	r1 = 12
     597:	bf 63 00 00 00 00 00 00	r3 = r6
     598:	0f 13 00 00 00 00 00 00	r3 += r1
     599:	bf a1 00 00 00 00 00 00	r1 = r10
     600:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     601:	b7 02 00 00 04 00 00 00	r2 = 4
     602:	85 00 00 00 71 00 00 00	call 113
     603:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     604:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     605:	b7 01 00 00 10 00 00 00	r1 = 16
     606:	bf 63 00 00 00 00 00 00	r3 = r6
     607:	0f 13 00 00 00 00 00 00	r3 += r1
     608:	bf a1 00 00 00 00 00 00	r1 = r10
     609:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     610:	b7 02 00 00 04 00 00 00	r2 = 4
     611:	85 00 00 00 71 00 00 00	call 113
     612:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     613:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     614:	b7 01 00 00 02 00 00 00	r1 = 2
     615:	bf 63 00 00 00 00 00 00	r3 = r6
     616:	0f 13 00 00 00 00 00 00	r3 += r1
     617:	bf a1 00 00 00 00 00 00	r1 = r10
     618:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     619:	b7 02 00 00 02 00 00 00	r2 = 2
     620:	85 00 00 00 71 00 00 00	call 113
     621:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     622:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     623:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     624:	b7 01 00 00 09 00 00 00	r1 = 9
     625:	05 00 38 00 00 00 00 00	goto +56 <LBB46_69>

0000000000001390 <LBB46_66>:
     626:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     627:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     628:	b7 01 00 00 c0 00 00 00	r1 = 192
     629:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     630:	bf 93 00 00 00 00 00 00	r3 = r9
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     634:	b7 02 00 00 08 00 00 00	r2 = 8
     635:	85 00 00 00 71 00 00 00	call 113
     636:	b7 01 00 00 b6 00 00 00	r1 = 182
     637:	bf 93 00 00 00 00 00 00	r3 = r9
     638:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     639:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     640:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     641:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     642:	b7 02 00 00 02 00 00 00	r2 = 2
     643:	85 00 00 00 71 00 00 00	call 113
     644:	b7 01 00 00 b4 00 00 00	r1 = 180
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     647:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     648:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     649:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     650:	b7 02 00 00 02 00 00 00	r2 = 2
     651:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     652:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     653:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     654:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB46_68>
     655:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001480 <LBB46_68>:
;     return head + network_header;
     656:	57 09 00 00 ff ff 00 00	r9 &= 65535
     657:	0f 96 00 00 00 00 00 00	r6 += r9
     658:	b7 01 00 00 08 00 00 00	r1 = 8
     659:	bf 63 00 00 00 00 00 00	r3 = r6
     660:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
     661:	bf 71 00 00 00 00 00 00	r1 = r7
     662:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     663:	b7 02 00 00 10 00 00 00	r2 = 16
     664:	85 00 00 00 04 00 00 00	call 4
     665:	b7 01 00 00 18 00 00 00	r1 = 24
     666:	bf 63 00 00 00 00 00 00	r3 = r6
     667:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     668:	bf 71 00 00 00 00 00 00	r1 = r7
     669:	07 01 00 00 80 00 00 00	r1 += 128
     670:	b7 02 00 00 10 00 00 00	r2 = 16
     671:	85 00 00 00 04 00 00 00	call 4
     672:	b7 01 00 00 04 00 00 00	r1 = 4
     673:	bf 63 00 00 00 00 00 00	r3 = r6
     674:	0f 13 00 00 00 00 00 00	r3 += r1
     675:	bf a1 00 00 00 00 00 00	r1 = r10
     676:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     677:	b7 02 00 00 02 00 00 00	r2 = 2
     678:	85 00 00 00 71 00 00 00	call 113
     679:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     680:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     681:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000001550 <LBB46_69>:
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
     684:	bf a1 00 00 00 00 00 00	r1 = r10
     685:	07 01 00 00 f8 ff ff ff	r1 += -8
     686:	b7 02 00 00 01 00 00 00	r2 = 1
     687:	85 00 00 00 71 00 00 00	call 113
     688:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     689:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     690:	bf a1 00 00 00 00 00 00	r1 = r10
     691:	07 01 00 00 f8 ff ff ff	r1 += -8
     692:	b7 02 00 00 01 00 00 00	r2 = 1
     693:	bf 63 00 00 00 00 00 00	r3 = r6
     694:	85 00 00 00 04 00 00 00	call 4
     695:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     696:	57 01 00 00 f0 00 00 00	r1 &= 240
     697:	77 01 00 00 04 00 00 00	r1 >>= 4
     698:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     699:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     700:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB46_72>
     701:	15 01 53 00 01 00 00 00	if r1 == 1 goto +83 <LBB46_84>
     702:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB46_74>
     703:	05 00 b9 fe 00 00 00 00	goto -327 <LBB46_92>

0000000000001600 <LBB46_74>:
     704:	b7 01 00 00 c0 00 00 00	r1 = 192
     705:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     706:	bf 93 00 00 00 00 00 00	r3 = r9
     707:	0f 13 00 00 00 00 00 00	r3 += r1
     708:	bf a1 00 00 00 00 00 00	r1 = r10
     709:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     710:	b7 02 00 00 08 00 00 00	r2 = 8
     711:	85 00 00 00 71 00 00 00	call 113
     712:	b7 01 00 00 b6 00 00 00	r1 = 182
     713:	bf 93 00 00 00 00 00 00	r3 = r9
     714:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     715:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     716:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     717:	bf a1 00 00 00 00 00 00	r1 = r10
     718:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     719:	b7 02 00 00 02 00 00 00	r2 = 2
     720:	85 00 00 00 71 00 00 00	call 113
     721:	b7 01 00 00 b4 00 00 00	r1 = 180
     722:	0f 19 00 00 00 00 00 00	r9 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     723:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     726:	b7 02 00 00 02 00 00 00	r2 = 2
     727:	bf 93 00 00 00 00 00 00	r3 = r9
     728:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     729:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     730:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     731:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB46_76>
     732:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000016e8 <LBB46_76>:
;     return head + network_header;
     733:	57 06 00 00 ff ff 00 00	r6 &= 65535
     734:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
     735:	0f 61 00 00 00 00 00 00	r1 += r6
     736:	bf 16 00 00 00 00 00 00	r6 = r1
     737:	bf a1 00 00 00 00 00 00	r1 = r10
     738:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     739:	b7 02 00 00 01 00 00 00	r2 = 1
     740:	bf 63 00 00 00 00 00 00	r3 = r6
     741:	85 00 00 00 04 00 00 00	call 4
     742:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     743:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     744:	57 02 00 00 f0 00 00 00	r2 &= 240
     745:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB46_78>
     746:	bf a1 00 00 00 00 00 00	r1 = r10
     747:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     748:	b7 02 00 00 01 00 00 00	r2 = 1
     749:	bf 63 00 00 00 00 00 00	r3 = r6
     750:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     751:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     752:	67 01 00 00 02 00 00 00	r1 <<= 2
     753:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001790 <LBB46_78>:
;     return l3_header + transport_size;
     754:	0f 16 00 00 00 00 00 00	r6 += r1
     755:	b7 01 00 00 00 00 00 00	r1 = 0
     756:	bf 63 00 00 00 00 00 00	r3 = r6
     757:	0f 13 00 00 00 00 00 00	r3 += r1
     758:	bf a1 00 00 00 00 00 00	r1 = r10
     759:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     760:	b7 02 00 00 02 00 00 00	r2 = 2
     761:	85 00 00 00 71 00 00 00	call 113
     762:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     763:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     764:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     765:	b7 01 00 00 02 00 00 00	r1 = 2
     766:	bf 63 00 00 00 00 00 00	r3 = r6
     767:	0f 13 00 00 00 00 00 00	r3 += r1
     768:	bf a1 00 00 00 00 00 00	r1 = r10
     769:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     770:	b7 02 00 00 02 00 00 00	r2 = 2
     771:	85 00 00 00 71 00 00 00	call 113
     772:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     773:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     774:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     775:	07 06 00 00 0c 00 00 00	r6 += 12
     776:	bf 71 00 00 00 00 00 00	r1 = r7
     777:	07 01 00 00 9c 00 00 00	r1 += 156
     778:	b7 02 00 00 02 00 00 00	r2 = 2
     779:	bf 63 00 00 00 00 00 00	r3 = r6
     780:	85 00 00 00 04 00 00 00	call 4
     781:	05 00 8a 00 00 00 00 00	goto +138 <LBB46_89>

0000000000001870 <LBB46_72>:
;     if (l4_proto == IPPROTO_TCP) {
     782:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB46_79>
     783:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB46_84>
     784:	05 00 68 fe 00 00 00 00	goto -408 <LBB46_92>

0000000000001888 <LBB46_84>:
     785:	b7 01 00 00 c0 00 00 00	r1 = 192
     786:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     787:	bf 63 00 00 00 00 00 00	r3 = r6
     788:	0f 13 00 00 00 00 00 00	r3 += r1
     789:	bf a1 00 00 00 00 00 00	r1 = r10
     790:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     791:	b7 02 00 00 08 00 00 00	r2 = 8
     792:	85 00 00 00 71 00 00 00	call 113
     793:	b7 01 00 00 b6 00 00 00	r1 = 182
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     796:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     797:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     798:	bf a1 00 00 00 00 00 00	r1 = r10
     799:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     800:	b7 02 00 00 02 00 00 00	r2 = 2
     801:	85 00 00 00 71 00 00 00	call 113
     802:	b7 01 00 00 b4 00 00 00	r1 = 180
     803:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     804:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     805:	bf a1 00 00 00 00 00 00	r1 = r10
     806:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     807:	b7 02 00 00 02 00 00 00	r2 = 2
     808:	bf 63 00 00 00 00 00 00	r3 = r6
     809:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     810:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     811:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     812:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB46_86>
     813:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001970 <LBB46_86>:
;     return head + network_header;
     814:	57 09 00 00 ff ff 00 00	r9 &= 65535
     815:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     816:	0f 96 00 00 00 00 00 00	r6 += r9
     817:	bf a1 00 00 00 00 00 00	r1 = r10
     818:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     819:	b7 02 00 00 01 00 00 00	r2 = 1
     820:	bf 63 00 00 00 00 00 00	r3 = r6
     821:	85 00 00 00 04 00 00 00	call 4
     822:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     823:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     824:	57 02 00 00 f0 00 00 00	r2 &= 240
     825:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB46_88>
     826:	bf a1 00 00 00 00 00 00	r1 = r10
     827:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     828:	b7 02 00 00 01 00 00 00	r2 = 1
     829:	bf 63 00 00 00 00 00 00	r3 = r6
     830:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     831:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     832:	67 01 00 00 02 00 00 00	r1 <<= 2
     833:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a10 <LBB46_88>:
;     return l3_header + transport_size;
     834:	0f 16 00 00 00 00 00 00	r6 += r1
     835:	bf a9 00 00 00 00 00 00	r9 = r10
     836:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     837:	bf 91 00 00 00 00 00 00	r1 = r9
     838:	b7 02 00 00 08 00 00 00	r2 = 8
     839:	bf 63 00 00 00 00 00 00	r3 = r6
     840:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     841:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     842:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     843:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     844:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     845:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     846:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     847:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     848:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     849:	05 00 46 00 00 00 00 00	goto +70 <LBB46_89>

0000000000001a90 <LBB46_79>:
     850:	b7 01 00 00 c0 00 00 00	r1 = 192
     851:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     852:	bf 63 00 00 00 00 00 00	r3 = r6
     853:	0f 13 00 00 00 00 00 00	r3 += r1
     854:	bf a1 00 00 00 00 00 00	r1 = r10
     855:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     856:	b7 02 00 00 08 00 00 00	r2 = 8
     857:	85 00 00 00 71 00 00 00	call 113
     858:	b7 01 00 00 b6 00 00 00	r1 = 182
     859:	bf 63 00 00 00 00 00 00	r3 = r6
     860:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     861:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     862:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     863:	bf a1 00 00 00 00 00 00	r1 = r10
     864:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     865:	b7 02 00 00 02 00 00 00	r2 = 2
     866:	85 00 00 00 71 00 00 00	call 113
     867:	b7 01 00 00 b4 00 00 00	r1 = 180
     868:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     869:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     870:	bf a1 00 00 00 00 00 00	r1 = r10
     871:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     872:	b7 02 00 00 02 00 00 00	r2 = 2
     873:	bf 63 00 00 00 00 00 00	r3 = r6
     874:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     875:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     876:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     877:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB46_81>
     878:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001b78 <LBB46_81>:
;     return head + network_header;
     879:	57 09 00 00 ff ff 00 00	r9 &= 65535
     880:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     881:	0f 96 00 00 00 00 00 00	r6 += r9
     882:	bf a1 00 00 00 00 00 00	r1 = r10
     883:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     884:	b7 02 00 00 01 00 00 00	r2 = 1
     885:	bf 63 00 00 00 00 00 00	r3 = r6
     886:	85 00 00 00 04 00 00 00	call 4
     887:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     888:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     889:	57 02 00 00 f0 00 00 00	r2 &= 240
     890:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB46_83>
     891:	bf a1 00 00 00 00 00 00	r1 = r10
     892:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     893:	b7 02 00 00 01 00 00 00	r2 = 1
     894:	bf 63 00 00 00 00 00 00	r3 = r6
     895:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     896:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     897:	67 01 00 00 02 00 00 00	r1 <<= 2
     898:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c18 <LBB46_83>:
;     return l3_header + transport_size;
     899:	0f 16 00 00 00 00 00 00	r6 += r1
     900:	b7 01 00 00 00 00 00 00	r1 = 0
     901:	bf 63 00 00 00 00 00 00	r3 = r6
     902:	0f 13 00 00 00 00 00 00	r3 += r1
     903:	bf a1 00 00 00 00 00 00	r1 = r10
     904:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     905:	b7 02 00 00 02 00 00 00	r2 = 2
     906:	85 00 00 00 71 00 00 00	call 113
     907:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     908:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     909:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     910:	b7 01 00 00 02 00 00 00	r1 = 2
     911:	0f 16 00 00 00 00 00 00	r6 += r1
     912:	bf a1 00 00 00 00 00 00	r1 = r10
     913:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     914:	b7 02 00 00 02 00 00 00	r2 = 2
     915:	bf 63 00 00 00 00 00 00	r3 = r6
     916:	85 00 00 00 71 00 00 00	call 113
     917:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     918:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     919:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001cc0 <LBB46_89>:
     920:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
;     return cfg->callstack == 0;
     921:	71 81 11 00 00 00 00 00	r1 = *(u8 *)(r8 + 17)
;     if (!filter_callstack(cfg))
     922:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB46_91>
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
     923:	bf 61 00 00 00 00 00 00	r1 = r6
     924:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     926:	b7 03 00 00 00 00 00 00	r3 = 0
     927:	85 00 00 00 1b 00 00 00	call 27
     928:	63 07 30 00 00 00 00 00	*(u32 *)(r7 + 48) = r0

0000000000001d08 <LBB46_91>:
     929:	b7 01 00 00 74 00 00 00	r1 = 116
;     for (j = 10; j < 64; j += 10) CPY(j);
     930:	73 17 08 00 00 00 00 00	*(u8 *)(r7 + 8) = r1
     931:	73 17 05 00 00 00 00 00	*(u8 *)(r7 + 5) = r1
     932:	b7 01 00 00 75 00 00 00	r1 = 117
     933:	73 17 07 00 00 00 00 00	*(u8 *)(r7 + 7) = r1
     934:	73 17 04 00 00 00 00 00	*(u8 *)(r7 + 4) = r1
     935:	b7 01 00 00 6f 00 00 00	r1 = 111
     936:	73 17 03 00 00 00 00 00	*(u8 *)(r7 + 3) = r1
     937:	b7 01 00 00 5f 00 00 00	r1 = 95
     938:	73 17 02 00 00 00 00 00	*(u8 *)(r7 + 2) = r1
     939:	b7 01 00 00 70 00 00 00	r1 = 112
     940:	73 17 06 00 00 00 00 00	*(u8 *)(r7 + 6) = r1
     941:	73 17 01 00 00 00 00 00	*(u8 *)(r7 + 1) = r1
     942:	b7 01 00 00 69 00 00 00	r1 = 105
     943:	73 17 00 00 00 00 00 00	*(u8 *)(r7 + 0) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     944:	bf 61 00 00 00 00 00 00	r1 = r6
     945:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     947:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     949:	bf 74 00 00 00 00 00 00	r4 = r7
     950:	b7 05 00 00 e0 00 00 00	r5 = 224
     951:	85 00 00 00 19 00 00 00	call 25
     952:	05 00 c0 fd 00 00 00 00	goto -576 <LBB46_92>

Disassembly of section kprobe/ip_finish_output:

0000000000000000 <k_ip_finish_out>:
; int k_ip_finish_out(struct pt_regs *ctx) {
       0:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM3(ctx);
       1:	79 11 60 00 00 00 00 00	r1 = *(u64 *)(r1 + 96)
       2:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       3:	b7 06 00 00 00 00 00 00	r6 = 0
;     GET_CFG();
       4:	63 6a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r6
       5:	bf a2 00 00 00 00 00 00	r2 = r10
       6:	07 02 00 00 e4 ff ff ff	r2 += -28
;     GET_CFG();
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	85 00 00 00 01 00 00 00	call 1
      10:	bf 08 00 00 00 00 00 00	r8 = r0
      11:	15 08 6d 01 00 00 00 00	if r8 == 0 goto +365 <LBB47_92>
      12:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
      13:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      14:	63 18 08 00 00 00 00 00	*(u32 *)(r8 + 8) = r1
;     u32 ev_buff_id = 0;
      15:	63 6a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r6
      16:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      17:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      18:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      20:	85 00 00 00 01 00 00 00	call 1
      21:	bf 07 00 00 00 00 00 00	r7 = r0
;     if (!ev) return NULL;
      22:	55 07 01 00 00 00 00 00	if r7 != 0 goto +1 <LBB47_3>
      23:	05 00 61 01 00 00 00 00	goto +353 <LBB47_92>

00000000000000c0 <LBB47_3>:
      24:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      25:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      26:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      27:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      28:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      29:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      30:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      31:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      32:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      33:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      34:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      35:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      36:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      37:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      38:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      39:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      40:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      41:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      42:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      43:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      44:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      45:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      46:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      47:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      48:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      49:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      50:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      51:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      52:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      53:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      54:	61 81 04 00 00 00 00 00	r1 = *(u32 *)(r8 + 4)
      55:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB47_5>
      56:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      57:	5d 01 3f 01 00 00 00 00	if r1 != r0 goto +319 <LBB47_92>

00000000000001d0 <LBB47_5>:
      58:	b7 01 00 00 10 00 00 00	r1 = 16
      59:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
      60:	bf 93 00 00 00 00 00 00	r3 = r9
      61:	0f 13 00 00 00 00 00 00	r3 += r1
      62:	bf a6 00 00 00 00 00 00	r6 = r10
      63:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      64:	bf 61 00 00 00 00 00 00	r1 = r6
      65:	b7 02 00 00 08 00 00 00	r2 = 8
      66:	85 00 00 00 71 00 00 00	call 113
      67:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      68:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      69:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      70:	bf 61 00 00 00 00 00 00	r1 = r6
      71:	b7 02 00 00 08 00 00 00	r2 = 8
      72:	85 00 00 00 71 00 00 00	call 113
      73:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      74:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      75:	0f 13 00 00 00 00 00 00	r3 += r1
      76:	bf a1 00 00 00 00 00 00	r1 = r10
      77:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      78:	b7 02 00 00 04 00 00 00	r2 = 4
      79:	85 00 00 00 71 00 00 00	call 113
      80:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      81:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB47_8>
      82:	b7 01 00 00 18 00 00 00	r1 = 24
      83:	bf 93 00 00 00 00 00 00	r3 = r9
      84:	0f 13 00 00 00 00 00 00	r3 += r1
      85:	bf a1 00 00 00 00 00 00	r1 = r10
      86:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
      87:	b7 02 00 00 08 00 00 00	r2 = 8
      88:	85 00 00 00 71 00 00 00	call 113
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
      90:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB47_11>
      91:	b7 01 00 00 30 00 00 00	r1 = 48
      92:	0f 13 00 00 00 00 00 00	r3 += r1
      93:	bf a1 00 00 00 00 00 00	r1 = r10
      94:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      95:	b7 02 00 00 08 00 00 00	r2 = 8
      96:	85 00 00 00 71 00 00 00	call 113
      97:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      98:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     102:	b7 02 00 00 04 00 00 00	r2 = 4
     103:	85 00 00 00 71 00 00 00	call 113
     104:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000348 <LBB47_8>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     105:	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0)
     106:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB47_11>
     107:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB47_11>
     108:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB47_92>

0000000000000368 <LBB47_11>:
;     u16 icmpid = cfg->icmpid;
     109:	69 81 0e 00 00 00 00 00	r1 = *(u16 *)(r8 + 14)
;     u16 port = cfg->port;
     110:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     111:	69 81 0c 00 00 00 00 00	r1 = *(u16 *)(r8 + 12)
;     u8 proto = cfg->proto;
     112:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     113:	71 81 12 00 00 00 00 00	r1 = *(u8 *)(r8 + 18)
;     u32 addr = cfg->ip;
     114:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     115:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
     116:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     117:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     118:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     119:	b7 01 00 00 c0 00 00 00	r1 = 192
     120:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     121:	bf 93 00 00 00 00 00 00	r3 = r9
     122:	0f 13 00 00 00 00 00 00	r3 += r1
     123:	bf a1 00 00 00 00 00 00	r1 = r10
     124:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     125:	b7 02 00 00 08 00 00 00	r2 = 8
     126:	85 00 00 00 71 00 00 00	call 113
     127:	b7 01 00 00 b6 00 00 00	r1 = 182
     128:	bf 93 00 00 00 00 00 00	r3 = r9
     129:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     130:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     131:	bf a1 00 00 00 00 00 00	r1 = r10
     132:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     133:	b7 02 00 00 02 00 00 00	r2 = 2
     134:	85 00 00 00 71 00 00 00	call 113
     135:	b7 01 00 00 b4 00 00 00	r1 = 180
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     138:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     139:	bf a1 00 00 00 00 00 00	r1 = r10
     140:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     141:	b7 02 00 00 02 00 00 00	r2 = 2
     142:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     143:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     144:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     145:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB47_13>
     146:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000498 <LBB47_13>:
;     return head + network_header;
     147:	57 09 00 00 ff ff 00 00	r9 &= 65535
     148:	0f 96 00 00 00 00 00 00	r6 += r9
     149:	bf a1 00 00 00 00 00 00	r1 = r10
     150:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     151:	b7 02 00 00 01 00 00 00	r2 = 1
     152:	bf 63 00 00 00 00 00 00	r3 = r6
     153:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     154:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     155:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     156:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB47_20>
     157:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB47_92>
;         if (addr != 0) {
     158:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     159:	bf 19 00 00 00 00 00 00	r9 = r1
     160:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB47_18>
     161:	b7 01 00 00 0c 00 00 00	r1 = 12
     162:	bf 63 00 00 00 00 00 00	r3 = r6
     163:	0f 13 00 00 00 00 00 00	r3 += r1
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     166:	b7 02 00 00 04 00 00 00	r2 = 4
     167:	85 00 00 00 71 00 00 00	call 113
     168:	b7 01 00 00 10 00 00 00	r1 = 16
     169:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     170:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     171:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     172:	bf a1 00 00 00 00 00 00	r1 = r10
     173:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     174:	b7 02 00 00 04 00 00 00	r2 = 4
     175:	bf 63 00 00 00 00 00 00	r3 = r6
     176:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     177:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     178:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB47_54>
     179:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     180:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     181:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB47_92>
     182:	05 00 da 00 00 00 00 00	goto +218 <LBB47_54>

00000000000005b8 <LBB47_20>:
     183:	b7 01 00 00 06 00 00 00	r1 = 6
     184:	0f 16 00 00 00 00 00 00	r6 += r1
     185:	bf a1 00 00 00 00 00 00	r1 = r10
     186:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     187:	b7 02 00 00 01 00 00 00	r2 = 1
     188:	bf 63 00 00 00 00 00 00	r3 = r6
     189:	85 00 00 00 04 00 00 00	call 4
     190:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     191:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     192:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     193:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB47_22>
     194:	b7 04 00 00 80 00 00 00	r4 = 128
     195:	b7 03 00 00 81 00 00 00	r3 = 129
     196:	b7 01 00 00 3a 00 00 00	r1 = 58
     197:	05 00 0d 00 00 00 00 00	goto +13 <LBB47_22>

0000000000000630 <LBB47_18>:
     198:	b7 01 00 00 09 00 00 00	r1 = 9
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     208:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB47_22>
     209:	b7 04 00 00 08 00 00 00	r4 = 8
     210:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000698 <LBB47_22>:
;     if (proto != 0 && proto != l4_proto)
     211:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     212:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB47_24>
     213:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB47_92>

00000000000006b0 <LBB47_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     214:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB47_27>
     215:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB47_29>
     216:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB47_35>
     217:	05 00 9f 00 00 00 00 00	goto +159 <LBB47_92>

00000000000006d0 <LBB47_35>:
     218:	b7 01 00 00 c0 00 00 00	r1 = 192
     219:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     220:	bf 63 00 00 00 00 00 00	r3 = r6
     221:	0f 13 00 00 00 00 00 00	r3 += r1
     222:	bf a1 00 00 00 00 00 00	r1 = r10
     223:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     224:	b7 02 00 00 08 00 00 00	r2 = 8
     225:	85 00 00 00 71 00 00 00	call 113
     226:	b7 01 00 00 b6 00 00 00	r1 = 182
     227:	bf 63 00 00 00 00 00 00	r3 = r6
     228:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     229:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     230:	bf a1 00 00 00 00 00 00	r1 = r10
     231:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     232:	b7 02 00 00 02 00 00 00	r2 = 2
     233:	85 00 00 00 71 00 00 00	call 113
     234:	b7 01 00 00 b4 00 00 00	r1 = 180
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     237:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     238:	bf a1 00 00 00 00 00 00	r1 = r10
     239:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     240:	b7 02 00 00 02 00 00 00	r2 = 2
     241:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     242:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     243:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     244:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB47_37>
     245:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000007b0 <LBB47_37>:
;     return head + network_header;
     246:	57 06 00 00 ff ff 00 00	r6 &= 65535
     247:	0f 69 00 00 00 00 00 00	r9 += r6
     248:	bf a1 00 00 00 00 00 00	r1 = r10
     249:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     250:	b7 02 00 00 01 00 00 00	r2 = 1
     251:	bf 93 00 00 00 00 00 00	r3 = r9
     252:	85 00 00 00 04 00 00 00	call 4
     253:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     254:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     255:	57 02 00 00 f0 00 00 00	r2 &= 240
     256:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB47_39>
     257:	bf a1 00 00 00 00 00 00	r1 = r10
     258:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     259:	b7 02 00 00 01 00 00 00	r2 = 1
     260:	bf 93 00 00 00 00 00 00	r3 = r9
     261:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     262:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     263:	67 01 00 00 02 00 00 00	r1 <<= 2
     264:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000848 <LBB47_39>:
;     return l3_header + transport_size;
     265:	0f 19 00 00 00 00 00 00	r9 += r1
     266:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9

0000000000000858 <LBB47_40>:
     267:	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 72)
;     if (port != 0) {
     268:	bf 92 00 00 00 00 00 00	r2 = r9
     269:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB47_45>
;         if (l4_proto == IPPROTO_TCP) {
     270:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     271:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB47_52>
     272:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB47_45>
     273:	b7 01 00 00 00 00 00 00	r1 = 0
     274:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     275:	bf 63 00 00 00 00 00 00	r3 = r6
     276:	0f 13 00 00 00 00 00 00	r3 += r1
     277:	bf a1 00 00 00 00 00 00	r1 = r10
     278:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     279:	b7 02 00 00 02 00 00 00	r2 = 2
     280:	85 00 00 00 71 00 00 00	call 113
     281:	b7 01 00 00 02 00 00 00	r1 = 2
     282:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     283:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     284:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     285:	bf a1 00 00 00 00 00 00	r1 = r10
     286:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     287:	b7 02 00 00 02 00 00 00	r2 = 2
     288:	bf 63 00 00 00 00 00 00	r3 = r6
     289:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     290:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     291:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     292:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB47_54>
     293:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     294:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB47_92>
     295:	05 00 69 00 00 00 00 00	goto +105 <LBB47_54>

0000000000000940 <LBB47_27>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     296:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB47_35>
     297:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB47_92>

0000000000000950 <LBB47_29>:
     298:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r4
     299:	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r3
     300:	b7 01 00 00 c0 00 00 00	r1 = 192
     301:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     302:	bf 63 00 00 00 00 00 00	r3 = r6
     303:	0f 13 00 00 00 00 00 00	r3 += r1
     304:	bf a1 00 00 00 00 00 00	r1 = r10
     305:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     306:	b7 02 00 00 08 00 00 00	r2 = 8
     307:	85 00 00 00 71 00 00 00	call 113
     308:	b7 01 00 00 b6 00 00 00	r1 = 182
     309:	bf 63 00 00 00 00 00 00	r3 = r6
     310:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     311:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     312:	bf a1 00 00 00 00 00 00	r1 = r10
     313:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     314:	b7 02 00 00 02 00 00 00	r2 = 2
     315:	85 00 00 00 71 00 00 00	call 113
     316:	b7 01 00 00 b4 00 00 00	r1 = 180
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     319:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     320:	bf a1 00 00 00 00 00 00	r1 = r10
     321:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     322:	b7 02 00 00 02 00 00 00	r2 = 2
     323:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     324:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     325:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     326:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB47_31>
     327:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000a40 <LBB47_31>:
;     return head + network_header;
     328:	57 06 00 00 ff ff 00 00	r6 &= 65535
     329:	0f 69 00 00 00 00 00 00	r9 += r6
     330:	bf a1 00 00 00 00 00 00	r1 = r10
     331:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     332:	b7 02 00 00 01 00 00 00	r2 = 1
     333:	bf 93 00 00 00 00 00 00	r3 = r9
     334:	85 00 00 00 04 00 00 00	call 4
     335:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     336:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     337:	57 02 00 00 f0 00 00 00	r2 &= 240
     338:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB47_33>
     339:	bf a1 00 00 00 00 00 00	r1 = r10
     340:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     341:	b7 02 00 00 01 00 00 00	r2 = 1
     342:	bf 93 00 00 00 00 00 00	r3 = r9
     343:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     344:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     345:	67 01 00 00 02 00 00 00	r1 <<= 2
     346:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000ad8 <LBB47_33>:
;     return l3_header + transport_size;
     347:	0f 19 00 00 00 00 00 00	r9 += r1
     348:	bf a6 00 00 00 00 00 00	r6 = r10
     349:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     350:	bf 61 00 00 00 00 00 00	r1 = r6
     351:	b7 02 00 00 08 00 00 00	r2 = 8
     352:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
     353:	bf 93 00 00 00 00 00 00	r3 = r9
     354:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     355:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     356:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     357:	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 88)
     358:	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 96)
     359:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB47_40>
     360:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     361:	07 02 00 00 e8 ff ff ff	r2 += -24
     362:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     363:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB47_40>
     364:	05 00 0c 00 00 00 00 00	goto +12 <LBB47_92>

0000000000000b68 <LBB47_45>:
;     if (proto != 0 && proto != l4_proto)
     365:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     366:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB47_54>
     367:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
;     if (proto != 0 && icmpid != 0) {
     368:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB47_54>
     369:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     370:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB47_54>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     371:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     372:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB47_50>
     373:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB47_54>

0000000000000bb0 <LBB47_50>:
;         if (icmpid != ev_icmpid)
     374:	57 01 00 00 ff ff 00 00	r1 &= 65535
     375:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
     376:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB47_54>

0000000000000bc8 <LBB47_92>:
;     return do_trace(ctx, skb, "ip_finish_output");
     377:	b7 00 00 00 00 00 00 00	r0 = 0
     378:	95 00 00 00 00 00 00 00	exit

0000000000000bd8 <LBB47_52>:
     379:	b7 01 00 00 00 00 00 00	r1 = 0
     380:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     381:	bf 63 00 00 00 00 00 00	r3 = r6
     382:	0f 13 00 00 00 00 00 00	r3 += r1
     383:	bf a1 00 00 00 00 00 00	r1 = r10
     384:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     385:	b7 02 00 00 02 00 00 00	r2 = 2
     386:	85 00 00 00 71 00 00 00	call 113
     387:	b7 01 00 00 02 00 00 00	r1 = 2
     388:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     389:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     390:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     391:	bf a1 00 00 00 00 00 00	r1 = r10
     392:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     393:	b7 02 00 00 02 00 00 00	r2 = 2
     394:	bf 63 00 00 00 00 00 00	r3 = r6
     395:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     396:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     397:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     398:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB47_54>
     399:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     400:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB47_92>

0000000000000c88 <LBB47_54>:
;     event->flags |= SKBTRACER_EVENT_IF;
     401:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     402:	47 01 00 00 01 00 00 00	r1 |= 1
     403:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     404:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
;     ev->skb = (u64)skb;
     405:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     406:	85 00 00 00 05 00 00 00	call 5
     407:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     408:	b7 01 00 00 10 00 00 00	r1 = 16
     409:	bf 96 00 00 00 00 00 00	r6 = r9
     410:	0f 16 00 00 00 00 00 00	r6 += r1
     411:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     412:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     413:	b7 02 00 00 08 00 00 00	r2 = 8
     414:	bf 63 00 00 00 00 00 00	r3 = r6
     415:	85 00 00 00 71 00 00 00	call 113
     416:	b7 01 00 00 70 00 00 00	r1 = 112
     417:	bf 93 00 00 00 00 00 00	r3 = r9
     418:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     419:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     420:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     421:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     422:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     423:	b7 02 00 00 04 00 00 00	r2 = 4
     424:	85 00 00 00 71 00 00 00	call 113
     425:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     426:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     427:	85 00 00 00 08 00 00 00	call 8
     428:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     429:	85 00 00 00 0e 00 00 00	call 14
     430:	57 00 00 00 ff ff 00 00	r0 &= 65535
     431:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     432:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     433:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     434:	bf 91 00 00 00 00 00 00	r1 = r9
     435:	b7 02 00 00 08 00 00 00	r2 = 8
     436:	bf 63 00 00 00 00 00 00	r3 = r6
     437:	85 00 00 00 71 00 00 00	call 113
     438:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     439:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     440:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     441:	bf 91 00 00 00 00 00 00	r1 = r9
     442:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     443:	b7 02 00 00 08 00 00 00	r2 = 8
     444:	85 00 00 00 71 00 00 00	call 113
     445:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     446:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     447:	0f 13 00 00 00 00 00 00	r3 += r1
     448:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     449:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     450:	b7 02 00 00 04 00 00 00	r2 = 4
     451:	85 00 00 00 71 00 00 00	call 113
     452:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     453:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB47_57>
     454:	b7 01 00 00 18 00 00 00	r1 = 24
     455:	bf 93 00 00 00 00 00 00	r3 = r9
     456:	0f 13 00 00 00 00 00 00	r3 += r1
     457:	bf a1 00 00 00 00 00 00	r1 = r10
     458:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     459:	b7 02 00 00 08 00 00 00	r2 = 8
     460:	85 00 00 00 71 00 00 00	call 113
     461:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     462:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     463:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB47_57>
     464:	b7 01 00 00 30 00 00 00	r1 = 48
     465:	0f 13 00 00 00 00 00 00	r3 += r1
     466:	bf a1 00 00 00 00 00 00	r1 = r10
     467:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     468:	b7 02 00 00 08 00 00 00	r2 = 8
     469:	85 00 00 00 71 00 00 00	call 113
     470:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     471:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     472:	0f 13 00 00 00 00 00 00	r3 += r1
     473:	bf a1 00 00 00 00 00 00	r1 = r10
     474:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     475:	b7 02 00 00 04 00 00 00	r2 = 4
     476:	85 00 00 00 71 00 00 00	call 113
     477:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000ef0 <LBB47_57>:
;     pkt_info->netns = get_netns(skb);
     478:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     479:	b7 01 00 00 80 00 00 00	r1 = 128
     480:	bf 93 00 00 00 00 00 00	r3 = r9
     481:	0f 13 00 00 00 00 00 00	r3 += r1
     482:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     483:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     484:	bf a1 00 00 00 00 00 00	r1 = r10
     485:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     486:	b7 02 00 00 01 00 00 00	r2 = 1
     487:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     488:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     489:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     490:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     491:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     492:	b7 01 00 00 00 00 00 00	r1 = 0
     493:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     494:	0f 13 00 00 00 00 00 00	r3 += r1
;     pkt_info->ifname[0] = 0;
     495:	bf 71 00 00 00 00 00 00	r1 = r7
     496:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     497:	b7 02 00 00 10 00 00 00	r2 = 16
     498:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     499:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     500:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB47_59>
     501:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     502:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     503:	b7 01 00 00 69 00 00 00	r1 = 105
     504:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     505:	b7 01 00 00 6e 00 00 00	r1 = 110
     506:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000000fd8 <LBB47_59>:
     507:	b7 01 00 00 c0 00 00 00	r1 = 192
     508:	bf 93 00 00 00 00 00 00	r3 = r9
     509:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     510:	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r3
     511:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     512:	07 01 00 00 f8 ff ff ff	r1 += -8
     513:	b7 02 00 00 08 00 00 00	r2 = 8
     514:	85 00 00 00 71 00 00 00	call 113
     515:	b7 01 00 00 b6 00 00 00	r1 = 182
     516:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     517:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     518:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     519:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     520:	b7 02 00 00 02 00 00 00	r2 = 2
     521:	bf 93 00 00 00 00 00 00	r3 = r9
     522:	85 00 00 00 71 00 00 00	call 113
     523:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     524:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     525:	bf 71 00 00 00 00 00 00	r1 = r7
     526:	07 01 00 00 64 00 00 00	r1 += 100
     527:	b7 02 00 00 06 00 00 00	r2 = 6
     528:	bf 63 00 00 00 00 00 00	r3 = r6
     529:	85 00 00 00 04 00 00 00	call 4
     530:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     531:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	b7 02 00 00 08 00 00 00	r2 = 8
     533:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     534:	85 00 00 00 71 00 00 00	call 113
     535:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     536:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     537:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     538:	b7 02 00 00 02 00 00 00	r2 = 2
     539:	bf 93 00 00 00 00 00 00	r3 = r9
     540:	85 00 00 00 71 00 00 00	call 113
     541:	b7 01 00 00 b4 00 00 00	r1 = 180
     542:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
     543:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     544:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     547:	b7 02 00 00 02 00 00 00	r2 = 2
     548:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     549:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     550:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     551:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB47_61>
     552:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001148 <LBB47_61>:
;     return head + network_header;
     553:	57 09 00 00 ff ff 00 00	r9 &= 65535
     554:	0f 96 00 00 00 00 00 00	r6 += r9
     555:	bf a1 00 00 00 00 00 00	r1 = r10
     556:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     557:	b7 02 00 00 01 00 00 00	r2 = 1
     558:	bf 63 00 00 00 00 00 00	r3 = r6
     559:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     560:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     561:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     562:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB47_66>
     563:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB47_92>
     564:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     565:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     566:	b7 01 00 00 c0 00 00 00	r1 = 192
     567:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     568:	bf 93 00 00 00 00 00 00	r3 = r9
     569:	0f 13 00 00 00 00 00 00	r3 += r1
     570:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     572:	b7 02 00 00 08 00 00 00	r2 = 8
     573:	85 00 00 00 71 00 00 00	call 113
     574:	b7 01 00 00 b6 00 00 00	r1 = 182
     575:	bf 93 00 00 00 00 00 00	r3 = r9
     576:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     577:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     578:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     579:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     580:	b7 02 00 00 02 00 00 00	r2 = 2
     581:	85 00 00 00 71 00 00 00	call 113
     582:	b7 01 00 00 b4 00 00 00	r1 = 180
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     585:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     586:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     587:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     588:	b7 02 00 00 02 00 00 00	r2 = 2
     589:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     590:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     591:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     592:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB47_65>
     593:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001290 <LBB47_65>:
;     return head + network_header;
     594:	57 09 00 00 ff ff 00 00	r9 &= 65535
     595:	0f 96 00 00 00 00 00 00	r6 += r9
     596:	b7 01 00 00 0c 00 00 00	r1 = 12
     597:	bf 63 00 00 00 00 00 00	r3 = r6
     598:	0f 13 00 00 00 00 00 00	r3 += r1
     599:	bf a1 00 00 00 00 00 00	r1 = r10
     600:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     601:	b7 02 00 00 04 00 00 00	r2 = 4
     602:	85 00 00 00 71 00 00 00	call 113
     603:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     604:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     605:	b7 01 00 00 10 00 00 00	r1 = 16
     606:	bf 63 00 00 00 00 00 00	r3 = r6
     607:	0f 13 00 00 00 00 00 00	r3 += r1
     608:	bf a1 00 00 00 00 00 00	r1 = r10
     609:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     610:	b7 02 00 00 04 00 00 00	r2 = 4
     611:	85 00 00 00 71 00 00 00	call 113
     612:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     613:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     614:	b7 01 00 00 02 00 00 00	r1 = 2
     615:	bf 63 00 00 00 00 00 00	r3 = r6
     616:	0f 13 00 00 00 00 00 00	r3 += r1
     617:	bf a1 00 00 00 00 00 00	r1 = r10
     618:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     619:	b7 02 00 00 02 00 00 00	r2 = 2
     620:	85 00 00 00 71 00 00 00	call 113
     621:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     622:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     623:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     624:	b7 01 00 00 09 00 00 00	r1 = 9
     625:	05 00 38 00 00 00 00 00	goto +56 <LBB47_69>

0000000000001390 <LBB47_66>:
     626:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     627:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     628:	b7 01 00 00 c0 00 00 00	r1 = 192
     629:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     630:	bf 93 00 00 00 00 00 00	r3 = r9
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     634:	b7 02 00 00 08 00 00 00	r2 = 8
     635:	85 00 00 00 71 00 00 00	call 113
     636:	b7 01 00 00 b6 00 00 00	r1 = 182
     637:	bf 93 00 00 00 00 00 00	r3 = r9
     638:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     639:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     640:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     641:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     642:	b7 02 00 00 02 00 00 00	r2 = 2
     643:	85 00 00 00 71 00 00 00	call 113
     644:	b7 01 00 00 b4 00 00 00	r1 = 180
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     647:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     648:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     649:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     650:	b7 02 00 00 02 00 00 00	r2 = 2
     651:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     652:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     653:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     654:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB47_68>
     655:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001480 <LBB47_68>:
;     return head + network_header;
     656:	57 09 00 00 ff ff 00 00	r9 &= 65535
     657:	0f 96 00 00 00 00 00 00	r6 += r9
     658:	b7 01 00 00 08 00 00 00	r1 = 8
     659:	bf 63 00 00 00 00 00 00	r3 = r6
     660:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
     661:	bf 71 00 00 00 00 00 00	r1 = r7
     662:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     663:	b7 02 00 00 10 00 00 00	r2 = 16
     664:	85 00 00 00 04 00 00 00	call 4
     665:	b7 01 00 00 18 00 00 00	r1 = 24
     666:	bf 63 00 00 00 00 00 00	r3 = r6
     667:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     668:	bf 71 00 00 00 00 00 00	r1 = r7
     669:	07 01 00 00 80 00 00 00	r1 += 128
     670:	b7 02 00 00 10 00 00 00	r2 = 16
     671:	85 00 00 00 04 00 00 00	call 4
     672:	b7 01 00 00 04 00 00 00	r1 = 4
     673:	bf 63 00 00 00 00 00 00	r3 = r6
     674:	0f 13 00 00 00 00 00 00	r3 += r1
     675:	bf a1 00 00 00 00 00 00	r1 = r10
     676:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     677:	b7 02 00 00 02 00 00 00	r2 = 2
     678:	85 00 00 00 71 00 00 00	call 113
     679:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     680:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     681:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000001550 <LBB47_69>:
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
     684:	bf a1 00 00 00 00 00 00	r1 = r10
     685:	07 01 00 00 f8 ff ff ff	r1 += -8
     686:	b7 02 00 00 01 00 00 00	r2 = 1
     687:	85 00 00 00 71 00 00 00	call 113
     688:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     689:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     690:	bf a1 00 00 00 00 00 00	r1 = r10
     691:	07 01 00 00 f8 ff ff ff	r1 += -8
     692:	b7 02 00 00 01 00 00 00	r2 = 1
     693:	bf 63 00 00 00 00 00 00	r3 = r6
     694:	85 00 00 00 04 00 00 00	call 4
     695:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     696:	57 01 00 00 f0 00 00 00	r1 &= 240
     697:	77 01 00 00 04 00 00 00	r1 >>= 4
     698:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     699:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     700:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB47_72>
     701:	15 01 53 00 01 00 00 00	if r1 == 1 goto +83 <LBB47_84>
     702:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB47_74>
     703:	05 00 b9 fe 00 00 00 00	goto -327 <LBB47_92>

0000000000001600 <LBB47_74>:
     704:	b7 01 00 00 c0 00 00 00	r1 = 192
     705:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     706:	bf 93 00 00 00 00 00 00	r3 = r9
     707:	0f 13 00 00 00 00 00 00	r3 += r1
     708:	bf a1 00 00 00 00 00 00	r1 = r10
     709:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     710:	b7 02 00 00 08 00 00 00	r2 = 8
     711:	85 00 00 00 71 00 00 00	call 113
     712:	b7 01 00 00 b6 00 00 00	r1 = 182
     713:	bf 93 00 00 00 00 00 00	r3 = r9
     714:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     715:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     716:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     717:	bf a1 00 00 00 00 00 00	r1 = r10
     718:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     719:	b7 02 00 00 02 00 00 00	r2 = 2
     720:	85 00 00 00 71 00 00 00	call 113
     721:	b7 01 00 00 b4 00 00 00	r1 = 180
     722:	0f 19 00 00 00 00 00 00	r9 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     723:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     726:	b7 02 00 00 02 00 00 00	r2 = 2
     727:	bf 93 00 00 00 00 00 00	r3 = r9
     728:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     729:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     730:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     731:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB47_76>
     732:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000016e8 <LBB47_76>:
;     return head + network_header;
     733:	57 06 00 00 ff ff 00 00	r6 &= 65535
     734:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
     735:	0f 61 00 00 00 00 00 00	r1 += r6
     736:	bf 16 00 00 00 00 00 00	r6 = r1
     737:	bf a1 00 00 00 00 00 00	r1 = r10
     738:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     739:	b7 02 00 00 01 00 00 00	r2 = 1
     740:	bf 63 00 00 00 00 00 00	r3 = r6
     741:	85 00 00 00 04 00 00 00	call 4
     742:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     743:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     744:	57 02 00 00 f0 00 00 00	r2 &= 240
     745:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB47_78>
     746:	bf a1 00 00 00 00 00 00	r1 = r10
     747:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     748:	b7 02 00 00 01 00 00 00	r2 = 1
     749:	bf 63 00 00 00 00 00 00	r3 = r6
     750:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     751:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     752:	67 01 00 00 02 00 00 00	r1 <<= 2
     753:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001790 <LBB47_78>:
;     return l3_header + transport_size;
     754:	0f 16 00 00 00 00 00 00	r6 += r1
     755:	b7 01 00 00 00 00 00 00	r1 = 0
     756:	bf 63 00 00 00 00 00 00	r3 = r6
     757:	0f 13 00 00 00 00 00 00	r3 += r1
     758:	bf a1 00 00 00 00 00 00	r1 = r10
     759:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     760:	b7 02 00 00 02 00 00 00	r2 = 2
     761:	85 00 00 00 71 00 00 00	call 113
     762:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     763:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     764:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     765:	b7 01 00 00 02 00 00 00	r1 = 2
     766:	bf 63 00 00 00 00 00 00	r3 = r6
     767:	0f 13 00 00 00 00 00 00	r3 += r1
     768:	bf a1 00 00 00 00 00 00	r1 = r10
     769:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     770:	b7 02 00 00 02 00 00 00	r2 = 2
     771:	85 00 00 00 71 00 00 00	call 113
     772:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     773:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     774:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     775:	07 06 00 00 0c 00 00 00	r6 += 12
     776:	bf 71 00 00 00 00 00 00	r1 = r7
     777:	07 01 00 00 9c 00 00 00	r1 += 156
     778:	b7 02 00 00 02 00 00 00	r2 = 2
     779:	bf 63 00 00 00 00 00 00	r3 = r6
     780:	85 00 00 00 04 00 00 00	call 4
     781:	05 00 8a 00 00 00 00 00	goto +138 <LBB47_89>

0000000000001870 <LBB47_72>:
;     if (l4_proto == IPPROTO_TCP) {
     782:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB47_79>
     783:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB47_84>
     784:	05 00 68 fe 00 00 00 00	goto -408 <LBB47_92>

0000000000001888 <LBB47_84>:
     785:	b7 01 00 00 c0 00 00 00	r1 = 192
     786:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     787:	bf 63 00 00 00 00 00 00	r3 = r6
     788:	0f 13 00 00 00 00 00 00	r3 += r1
     789:	bf a1 00 00 00 00 00 00	r1 = r10
     790:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     791:	b7 02 00 00 08 00 00 00	r2 = 8
     792:	85 00 00 00 71 00 00 00	call 113
     793:	b7 01 00 00 b6 00 00 00	r1 = 182
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     796:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     797:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     798:	bf a1 00 00 00 00 00 00	r1 = r10
     799:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     800:	b7 02 00 00 02 00 00 00	r2 = 2
     801:	85 00 00 00 71 00 00 00	call 113
     802:	b7 01 00 00 b4 00 00 00	r1 = 180
     803:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     804:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     805:	bf a1 00 00 00 00 00 00	r1 = r10
     806:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     807:	b7 02 00 00 02 00 00 00	r2 = 2
     808:	bf 63 00 00 00 00 00 00	r3 = r6
     809:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     810:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     811:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     812:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB47_86>
     813:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001970 <LBB47_86>:
;     return head + network_header;
     814:	57 09 00 00 ff ff 00 00	r9 &= 65535
     815:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     816:	0f 96 00 00 00 00 00 00	r6 += r9
     817:	bf a1 00 00 00 00 00 00	r1 = r10
     818:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     819:	b7 02 00 00 01 00 00 00	r2 = 1
     820:	bf 63 00 00 00 00 00 00	r3 = r6
     821:	85 00 00 00 04 00 00 00	call 4
     822:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     823:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     824:	57 02 00 00 f0 00 00 00	r2 &= 240
     825:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB47_88>
     826:	bf a1 00 00 00 00 00 00	r1 = r10
     827:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     828:	b7 02 00 00 01 00 00 00	r2 = 1
     829:	bf 63 00 00 00 00 00 00	r3 = r6
     830:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     831:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     832:	67 01 00 00 02 00 00 00	r1 <<= 2
     833:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a10 <LBB47_88>:
;     return l3_header + transport_size;
     834:	0f 16 00 00 00 00 00 00	r6 += r1
     835:	bf a9 00 00 00 00 00 00	r9 = r10
     836:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     837:	bf 91 00 00 00 00 00 00	r1 = r9
     838:	b7 02 00 00 08 00 00 00	r2 = 8
     839:	bf 63 00 00 00 00 00 00	r3 = r6
     840:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     841:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     842:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     843:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     844:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     845:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     846:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     847:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     848:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     849:	05 00 46 00 00 00 00 00	goto +70 <LBB47_89>

0000000000001a90 <LBB47_79>:
     850:	b7 01 00 00 c0 00 00 00	r1 = 192
     851:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     852:	bf 63 00 00 00 00 00 00	r3 = r6
     853:	0f 13 00 00 00 00 00 00	r3 += r1
     854:	bf a1 00 00 00 00 00 00	r1 = r10
     855:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     856:	b7 02 00 00 08 00 00 00	r2 = 8
     857:	85 00 00 00 71 00 00 00	call 113
     858:	b7 01 00 00 b6 00 00 00	r1 = 182
     859:	bf 63 00 00 00 00 00 00	r3 = r6
     860:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     861:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     862:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     863:	bf a1 00 00 00 00 00 00	r1 = r10
     864:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     865:	b7 02 00 00 02 00 00 00	r2 = 2
     866:	85 00 00 00 71 00 00 00	call 113
     867:	b7 01 00 00 b4 00 00 00	r1 = 180
     868:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     869:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     870:	bf a1 00 00 00 00 00 00	r1 = r10
     871:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     872:	b7 02 00 00 02 00 00 00	r2 = 2
     873:	bf 63 00 00 00 00 00 00	r3 = r6
     874:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     875:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     876:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     877:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB47_81>
     878:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001b78 <LBB47_81>:
;     return head + network_header;
     879:	57 09 00 00 ff ff 00 00	r9 &= 65535
     880:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     881:	0f 96 00 00 00 00 00 00	r6 += r9
     882:	bf a1 00 00 00 00 00 00	r1 = r10
     883:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     884:	b7 02 00 00 01 00 00 00	r2 = 1
     885:	bf 63 00 00 00 00 00 00	r3 = r6
     886:	85 00 00 00 04 00 00 00	call 4
     887:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     888:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     889:	57 02 00 00 f0 00 00 00	r2 &= 240
     890:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB47_83>
     891:	bf a1 00 00 00 00 00 00	r1 = r10
     892:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     893:	b7 02 00 00 01 00 00 00	r2 = 1
     894:	bf 63 00 00 00 00 00 00	r3 = r6
     895:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     896:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     897:	67 01 00 00 02 00 00 00	r1 <<= 2
     898:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c18 <LBB47_83>:
;     return l3_header + transport_size;
     899:	0f 16 00 00 00 00 00 00	r6 += r1
     900:	b7 01 00 00 00 00 00 00	r1 = 0
     901:	bf 63 00 00 00 00 00 00	r3 = r6
     902:	0f 13 00 00 00 00 00 00	r3 += r1
     903:	bf a1 00 00 00 00 00 00	r1 = r10
     904:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     905:	b7 02 00 00 02 00 00 00	r2 = 2
     906:	85 00 00 00 71 00 00 00	call 113
     907:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     908:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     909:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     910:	b7 01 00 00 02 00 00 00	r1 = 2
     911:	0f 16 00 00 00 00 00 00	r6 += r1
     912:	bf a1 00 00 00 00 00 00	r1 = r10
     913:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     914:	b7 02 00 00 02 00 00 00	r2 = 2
     915:	bf 63 00 00 00 00 00 00	r3 = r6
     916:	85 00 00 00 71 00 00 00	call 113
     917:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     918:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     919:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001cc0 <LBB47_89>:
     920:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
;     return cfg->callstack == 0;
     921:	71 81 11 00 00 00 00 00	r1 = *(u8 *)(r8 + 17)
;     if (!filter_callstack(cfg))
     922:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB47_91>
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
     923:	bf 61 00 00 00 00 00 00	r1 = r6
     924:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     926:	b7 03 00 00 00 00 00 00	r3 = 0
     927:	85 00 00 00 1b 00 00 00	call 27
     928:	63 07 30 00 00 00 00 00	*(u32 *)(r7 + 48) = r0

0000000000001d08 <LBB47_91>:
     929:	b7 01 00 00 74 00 00 00	r1 = 116
;     for (j = 10; j < 64; j += 10) CPY(j);
     930:	73 17 0f 00 00 00 00 00	*(u8 *)(r7 + 15) = r1
     931:	73 17 0c 00 00 00 00 00	*(u8 *)(r7 + 12) = r1
     932:	b7 01 00 00 75 00 00 00	r1 = 117
     933:	73 17 0e 00 00 00 00 00	*(u8 *)(r7 + 14) = r1
     934:	73 17 0b 00 00 00 00 00	*(u8 *)(r7 + 11) = r1
     935:	b7 01 00 00 6f 00 00 00	r1 = 111
     936:	73 17 0a 00 00 00 00 00	*(u8 *)(r7 + 10) = r1
     937:	b7 01 00 00 68 00 00 00	r1 = 104
     938:	73 17 08 00 00 00 00 00	*(u8 *)(r7 + 8) = r1
     939:	b7 01 00 00 73 00 00 00	r1 = 115
     940:	73 17 07 00 00 00 00 00	*(u8 *)(r7 + 7) = r1
     941:	b7 01 00 00 6e 00 00 00	r1 = 110
     942:	73 17 05 00 00 00 00 00	*(u8 *)(r7 + 5) = r1
     943:	b7 01 00 00 66 00 00 00	r1 = 102
     944:	73 17 03 00 00 00 00 00	*(u8 *)(r7 + 3) = r1
     945:	b7 01 00 00 5f 00 00 00	r1 = 95
     946:	73 17 09 00 00 00 00 00	*(u8 *)(r7 + 9) = r1
     947:	73 17 02 00 00 00 00 00	*(u8 *)(r7 + 2) = r1
     948:	b7 01 00 00 70 00 00 00	r1 = 112
     949:	73 17 0d 00 00 00 00 00	*(u8 *)(r7 + 13) = r1
     950:	73 17 01 00 00 00 00 00	*(u8 *)(r7 + 1) = r1
     951:	b7 01 00 00 69 00 00 00	r1 = 105
     952:	73 17 06 00 00 00 00 00	*(u8 *)(r7 + 6) = r1
     953:	73 17 04 00 00 00 00 00	*(u8 *)(r7 + 4) = r1
     954:	73 17 00 00 00 00 00 00	*(u8 *)(r7 + 0) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     955:	bf 61 00 00 00 00 00 00	r1 = r6
     956:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     958:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     960:	bf 74 00 00 00 00 00 00	r4 = r7
     961:	b7 05 00 00 e0 00 00 00	r5 = 224
     962:	85 00 00 00 19 00 00 00	call 25
     963:	05 00 b5 fd 00 00 00 00	goto -587 <LBB47_92>

Disassembly of section kprobe/ipt_do_table:

0000000000000000 <ipt_k_do_table>:
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM1(ctx);
       0:	79 12 70 00 00 00 00 00	r2 = *(u64 *)(r1 + 112)
;     struct nf_hook_state *state = (struct nf_hook_state *)PT_REGS_PARM2(ctx);
       1:	79 13 68 00 00 00 00 00	r3 = *(u64 *)(r1 + 104)
;     struct xt_table *table = (struct xt_table *)PT_REGS_PARM3(ctx);
       2:	79 11 60 00 00 00 00 00	r1 = *(u64 *)(r1 + 96)
;     struct ipt_do_table_args args = {
       3:	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r1
       4:	7b 3a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r3
       5:	7b 2a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r2
;     args.start_ns = bpf_ktime_get_ns();
       6:	85 00 00 00 05 00 00 00	call 5
       7:	7b 0a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r0
;     pid = bpf_get_current_pid_tgid();
       8:	85 00 00 00 0e 00 00 00	call 14
       9:	63 0a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r0
      10:	bf a2 00 00 00 00 00 00	r2 = r10
      11:	07 02 00 00 fc ff ff ff	r2 += -4
      12:	bf a3 00 00 00 00 00 00	r3 = r10
      13:	07 03 00 00 d8 ff ff ff	r3 += -40
;     bpf_map_update_elem(&skbtracer_ipt, &pid, &args, BPF_ANY);
      14:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      16:	b7 04 00 00 00 00 00 00	r4 = 0
      17:	85 00 00 00 02 00 00 00	call 2
;     return __ipt_do_table_in(ctx, skb, state, table);
      18:	b7 00 00 00 00 00 00 00	r0 = 0
      19:	95 00 00 00 00 00 00 00	exit

Disassembly of section kretprobe/ipt_do_table:

0000000000000000 <ipt_kr_do_table>:
; int ipt_kr_do_table(struct pt_regs *ctx) {
       0:	bf 16 00 00 00 00 00 00	r6 = r1
;     pid = bpf_get_current_pid_tgid();
       1:	85 00 00 00 0e 00 00 00	call 14
       2:	63 0a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r0
       3:	bf a2 00 00 00 00 00 00	r2 = r10
       4:	07 02 00 00 e4 ff ff ff	r2 += -28
;     args = bpf_map_lookup_elem(&skbtracer_ipt, &pid);
       5:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       7:	85 00 00 00 01 00 00 00	call 1
       8:	bf 08 00 00 00 00 00 00	r8 = r0
;     if (args == NULL) return 0;
       9:	15 08 7e 01 00 00 00 00	if r8 == 0 goto +382 <LBB51_91>
      10:	7b 6a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r6
      11:	bf a2 00 00 00 00 00 00	r2 = r10
      12:	07 02 00 00 e4 ff ff ff	r2 += -28
;     bpf_map_delete_elem(&skbtracer_ipt, &pid);
      13:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      15:	85 00 00 00 03 00 00 00	call 3
      16:	b7 07 00 00 00 00 00 00	r7 = 0
;     GET_CFG();
      17:	63 7a e0 ff 00 00 00 00	*(u32 *)(r10 - 32) = r7
      18:	bf a2 00 00 00 00 00 00	r2 = r10
      19:	07 02 00 00 e0 ff ff ff	r2 += -32
;     GET_CFG();
      20:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      22:	85 00 00 00 01 00 00 00	call 1
      23:	bf 06 00 00 00 00 00 00	r6 = r0
      24:	15 06 6f 01 00 00 00 00	if r6 == 0 goto +367 <LBB51_91>
      25:	61 61 08 00 00 00 00 00	r1 = *(u32 *)(r6 + 8)
      26:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      27:	63 16 08 00 00 00 00 00	*(u32 *)(r6 + 8) = r1
;     u32 ev_buff_id = 0;
      28:	63 7a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r7
      29:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      30:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      31:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      33:	85 00 00 00 01 00 00 00	call 1
;     if (!ev) return NULL;
      34:	55 00 01 00 00 00 00 00	if r0 != 0 goto +1 <LBB51_4>
      35:	05 00 64 01 00 00 00 00	goto +356 <LBB51_91>

0000000000000120 <LBB51_4>:
      36:	7b 0a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r0
      37:	bf 07 00 00 00 00 00 00	r7 = r0
      38:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      39:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      40:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      41:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      42:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      43:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      44:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      45:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      46:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      47:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      48:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      49:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      50:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      51:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      52:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      53:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      54:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      55:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      56:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      57:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      58:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      59:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      60:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      61:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      62:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      63:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      64:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      65:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      66:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     if (!do_trace_skb(event, cfg, ctx, args->skb)) return 0;
      67:	79 81 00 00 00 00 00 00	r1 = *(u64 *)(r8 + 0)
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      68:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
      69:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      70:	61 61 04 00 00 00 00 00	r1 = *(u32 *)(r6 + 4)
      71:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB51_6>
      72:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      73:	5d 01 3e 01 00 00 00 00	if r1 != r0 goto +318 <LBB51_91>

0000000000000250 <LBB51_6>:
      74:	b7 01 00 00 10 00 00 00	r1 = 16
      75:	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 48)
      76:	0f 13 00 00 00 00 00 00	r3 += r1
      77:	bf a9 00 00 00 00 00 00	r9 = r10
      78:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      79:	bf 91 00 00 00 00 00 00	r1 = r9
      80:	b7 02 00 00 08 00 00 00	r2 = 8
      81:	85 00 00 00 71 00 00 00	call 113
      82:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      83:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      84:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      85:	bf 91 00 00 00 00 00 00	r1 = r9
      86:	b7 02 00 00 08 00 00 00	r2 = 8
      87:	85 00 00 00 71 00 00 00	call 113
      88:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      90:	0f 13 00 00 00 00 00 00	r3 += r1
      91:	bf a1 00 00 00 00 00 00	r1 = r10
      92:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      93:	b7 02 00 00 04 00 00 00	r2 = 4
      94:	85 00 00 00 71 00 00 00	call 113
      95:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      96:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB51_9>
      97:	b7 01 00 00 18 00 00 00	r1 = 24
      98:	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 48)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     102:	b7 02 00 00 08 00 00 00	r2 = 8
     103:	85 00 00 00 71 00 00 00	call 113
     104:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     105:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB51_12>
     106:	b7 01 00 00 30 00 00 00	r1 = 48
     107:	0f 13 00 00 00 00 00 00	r3 += r1
     108:	bf a1 00 00 00 00 00 00	r1 = r10
     109:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     110:	b7 02 00 00 08 00 00 00	r2 = 8
     111:	85 00 00 00 71 00 00 00	call 113
     112:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     113:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     114:	0f 13 00 00 00 00 00 00	r3 += r1
     115:	bf a1 00 00 00 00 00 00	r1 = r10
     116:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     117:	b7 02 00 00 04 00 00 00	r2 = 4
     118:	85 00 00 00 71 00 00 00	call 113
     119:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

00000000000003c0 <LBB51_9>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     120:	61 62 00 00 00 00 00 00	r2 = *(u32 *)(r6 + 0)
     121:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB51_12>
     122:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB51_12>
     123:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB51_91>

00000000000003e0 <LBB51_12>:
;     u16 icmpid = cfg->icmpid;
     124:	69 61 0e 00 00 00 00 00	r1 = *(u16 *)(r6 + 14)
;     u16 port = cfg->port;
     125:	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r1
     126:	69 61 0c 00 00 00 00 00	r1 = *(u16 *)(r6 + 12)
;     u8 proto = cfg->proto;
     127:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     128:	71 61 12 00 00 00 00 00	r1 = *(u8 *)(r6 + 18)
;     u32 addr = cfg->ip;
     129:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     130:	61 61 08 00 00 00 00 00	r1 = *(u32 *)(r6 + 8)
     131:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     132:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     133:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     134:	b7 01 00 00 c0 00 00 00	r1 = 192
     135:	79 a9 d0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 48)
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
     138:	bf a1 00 00 00 00 00 00	r1 = r10
     139:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     140:	b7 02 00 00 08 00 00 00	r2 = 8
     141:	85 00 00 00 71 00 00 00	call 113
     142:	b7 01 00 00 b6 00 00 00	r1 = 182
     143:	bf 93 00 00 00 00 00 00	r3 = r9
     144:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     145:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     146:	bf a1 00 00 00 00 00 00	r1 = r10
     147:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     148:	b7 02 00 00 02 00 00 00	r2 = 2
     149:	85 00 00 00 71 00 00 00	call 113
     150:	b7 01 00 00 b4 00 00 00	r1 = 180
     151:	bf 93 00 00 00 00 00 00	r3 = r9
     152:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     153:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     154:	bf a1 00 00 00 00 00 00	r1 = r10
     155:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     156:	b7 02 00 00 02 00 00 00	r2 = 2
     157:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     158:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     159:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     160:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB51_14>
     161:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000510 <LBB51_14>:
;     return head + network_header;
     162:	57 09 00 00 ff ff 00 00	r9 &= 65535
     163:	0f 96 00 00 00 00 00 00	r6 += r9
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     166:	b7 02 00 00 01 00 00 00	r2 = 1
     167:	bf 63 00 00 00 00 00 00	r3 = r6
     168:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     169:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     170:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     171:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB51_21>
     172:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB51_91>
;         if (addr != 0) {
     173:	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 72)
     174:	bf 19 00 00 00 00 00 00	r9 = r1
     175:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB51_19>
     176:	b7 01 00 00 0c 00 00 00	r1 = 12
     177:	bf 63 00 00 00 00 00 00	r3 = r6
     178:	0f 13 00 00 00 00 00 00	r3 += r1
     179:	bf a1 00 00 00 00 00 00	r1 = r10
     180:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     181:	b7 02 00 00 04 00 00 00	r2 = 4
     182:	85 00 00 00 71 00 00 00	call 113
     183:	b7 01 00 00 10 00 00 00	r1 = 16
     184:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     185:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     186:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     187:	bf a1 00 00 00 00 00 00	r1 = r10
     188:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     189:	b7 02 00 00 04 00 00 00	r2 = 4
     190:	bf 63 00 00 00 00 00 00	r3 = r6
     191:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     192:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     193:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB51_55>
     194:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     195:	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 72)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     196:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB51_91>
     197:	05 00 da 00 00 00 00 00	goto +218 <LBB51_55>

0000000000000630 <LBB51_21>:
     198:	b7 01 00 00 06 00 00 00	r1 = 6
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     208:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB51_23>
     209:	b7 04 00 00 80 00 00 00	r4 = 128
     210:	b7 03 00 00 81 00 00 00	r3 = 129
     211:	b7 01 00 00 3a 00 00 00	r1 = 58
     212:	05 00 0d 00 00 00 00 00	goto +13 <LBB51_23>

00000000000006a8 <LBB51_19>:
     213:	b7 01 00 00 09 00 00 00	r1 = 9
     214:	0f 16 00 00 00 00 00 00	r6 += r1
     215:	bf a1 00 00 00 00 00 00	r1 = r10
     216:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     217:	b7 02 00 00 01 00 00 00	r2 = 1
     218:	bf 63 00 00 00 00 00 00	r3 = r6
     219:	85 00 00 00 04 00 00 00	call 4
     220:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     221:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     222:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     223:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB51_23>
     224:	b7 04 00 00 08 00 00 00	r4 = 8
     225:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000710 <LBB51_23>:
;     if (proto != 0 && proto != l4_proto)
     226:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
     227:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB51_25>
     228:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB51_91>

0000000000000728 <LBB51_25>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     229:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB51_28>
     230:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB51_30>
     231:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB51_36>
     232:	05 00 9f 00 00 00 00 00	goto +159 <LBB51_91>

0000000000000748 <LBB51_36>:
     233:	b7 01 00 00 c0 00 00 00	r1 = 192
     234:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
     237:	bf a1 00 00 00 00 00 00	r1 = r10
     238:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     239:	b7 02 00 00 08 00 00 00	r2 = 8
     240:	85 00 00 00 71 00 00 00	call 113
     241:	b7 01 00 00 b6 00 00 00	r1 = 182
     242:	bf 63 00 00 00 00 00 00	r3 = r6
     243:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     244:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     245:	bf a1 00 00 00 00 00 00	r1 = r10
     246:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     247:	b7 02 00 00 02 00 00 00	r2 = 2
     248:	85 00 00 00 71 00 00 00	call 113
     249:	b7 01 00 00 b4 00 00 00	r1 = 180
     250:	bf 63 00 00 00 00 00 00	r3 = r6
     251:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     252:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     253:	bf a1 00 00 00 00 00 00	r1 = r10
     254:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     255:	b7 02 00 00 02 00 00 00	r2 = 2
     256:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     257:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     258:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     259:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB51_38>
     260:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000828 <LBB51_38>:
;     return head + network_header;
     261:	57 06 00 00 ff ff 00 00	r6 &= 65535
     262:	0f 69 00 00 00 00 00 00	r9 += r6
     263:	bf a1 00 00 00 00 00 00	r1 = r10
     264:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     265:	b7 02 00 00 01 00 00 00	r2 = 1
     266:	bf 93 00 00 00 00 00 00	r3 = r9
     267:	85 00 00 00 04 00 00 00	call 4
     268:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     269:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     270:	57 02 00 00 f0 00 00 00	r2 &= 240
     271:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB51_40>
     272:	bf a1 00 00 00 00 00 00	r1 = r10
     273:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     274:	b7 02 00 00 01 00 00 00	r2 = 1
     275:	bf 93 00 00 00 00 00 00	r3 = r9
     276:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     277:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     278:	67 01 00 00 02 00 00 00	r1 <<= 2
     279:	57 01 00 00 3c 00 00 00	r1 &= 60

00000000000008c0 <LBB51_40>:
;     return l3_header + transport_size;
     280:	0f 19 00 00 00 00 00 00	r9 += r1
     281:	7b 9a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r9

00000000000008d0 <LBB51_41>:
     282:	79 a9 b0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 80)
;     if (port != 0) {
     283:	bf 92 00 00 00 00 00 00	r2 = r9
     284:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB51_46>
;         if (l4_proto == IPPROTO_TCP) {
     285:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     286:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB51_53>
     287:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB51_46>
     288:	b7 01 00 00 00 00 00 00	r1 = 0
     289:	79 a6 b8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 72)
     290:	bf 63 00 00 00 00 00 00	r3 = r6
     291:	0f 13 00 00 00 00 00 00	r3 += r1
     292:	bf a1 00 00 00 00 00 00	r1 = r10
     293:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     294:	b7 02 00 00 02 00 00 00	r2 = 2
     295:	85 00 00 00 71 00 00 00	call 113
     296:	b7 01 00 00 02 00 00 00	r1 = 2
     297:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     298:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     299:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     300:	bf a1 00 00 00 00 00 00	r1 = r10
     301:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     302:	b7 02 00 00 02 00 00 00	r2 = 2
     303:	bf 63 00 00 00 00 00 00	r3 = r6
     304:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     305:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     306:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
     307:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB51_55>
     308:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     309:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB51_91>
     310:	05 00 69 00 00 00 00 00	goto +105 <LBB51_55>

00000000000009b8 <LBB51_28>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     311:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB51_36>
     312:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB51_91>

00000000000009c8 <LBB51_30>:
     313:	7b 4a 98 ff 00 00 00 00	*(u64 *)(r10 - 104) = r4
     314:	7b 3a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r3
     315:	b7 01 00 00 c0 00 00 00	r1 = 192
     316:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
     319:	bf a1 00 00 00 00 00 00	r1 = r10
     320:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     321:	b7 02 00 00 08 00 00 00	r2 = 8
     322:	85 00 00 00 71 00 00 00	call 113
     323:	b7 01 00 00 b6 00 00 00	r1 = 182
     324:	bf 63 00 00 00 00 00 00	r3 = r6
     325:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     326:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     327:	bf a1 00 00 00 00 00 00	r1 = r10
     328:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     329:	b7 02 00 00 02 00 00 00	r2 = 2
     330:	85 00 00 00 71 00 00 00	call 113
     331:	b7 01 00 00 b4 00 00 00	r1 = 180
     332:	bf 63 00 00 00 00 00 00	r3 = r6
     333:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     334:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     335:	bf a1 00 00 00 00 00 00	r1 = r10
     336:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     337:	b7 02 00 00 02 00 00 00	r2 = 2
     338:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     339:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     340:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     341:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB51_32>
     342:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000ab8 <LBB51_32>:
;     return head + network_header;
     343:	57 06 00 00 ff ff 00 00	r6 &= 65535
     344:	0f 69 00 00 00 00 00 00	r9 += r6
     345:	bf a1 00 00 00 00 00 00	r1 = r10
     346:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     347:	b7 02 00 00 01 00 00 00	r2 = 1
     348:	bf 93 00 00 00 00 00 00	r3 = r9
     349:	85 00 00 00 04 00 00 00	call 4
     350:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     351:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     352:	57 02 00 00 f0 00 00 00	r2 &= 240
     353:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB51_34>
     354:	bf a1 00 00 00 00 00 00	r1 = r10
     355:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     356:	b7 02 00 00 01 00 00 00	r2 = 1
     357:	bf 93 00 00 00 00 00 00	r3 = r9
     358:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     359:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     360:	67 01 00 00 02 00 00 00	r1 <<= 2
     361:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000b50 <LBB51_34>:
;     return l3_header + transport_size;
     362:	0f 19 00 00 00 00 00 00	r9 += r1
     363:	bf a6 00 00 00 00 00 00	r6 = r10
     364:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     365:	bf 61 00 00 00 00 00 00	r1 = r6
     366:	b7 02 00 00 08 00 00 00	r2 = 8
     367:	7b 9a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r9
     368:	bf 93 00 00 00 00 00 00	r3 = r9
     369:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     370:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     371:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     372:	79 a3 a0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 96)
     373:	79 a4 98 ff 00 00 00 00	r4 = *(u64 *)(r10 - 104)
     374:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB51_41>
     375:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     376:	07 02 00 00 e8 ff ff ff	r2 += -24
     377:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     378:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB51_41>
     379:	05 00 0c 00 00 00 00 00	goto +12 <LBB51_91>

0000000000000be0 <LBB51_46>:
;     if (proto != 0 && proto != l4_proto)
     380:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (proto != 0 && icmpid != 0) {
     381:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB51_55>
     382:	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 88)
;     if (proto != 0 && icmpid != 0) {
     383:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB51_55>
     384:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (proto != 0 && icmpid != 0) {
     385:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB51_55>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     386:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     387:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB51_51>
     388:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB51_55>

0000000000000c28 <LBB51_51>:
;         if (icmpid != ev_icmpid)
     389:	57 01 00 00 ff ff 00 00	r1 &= 65535
     390:	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 88)
     391:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB51_55>

0000000000000c40 <LBB51_91>:
;     return __ipt_do_table_out(ctx, skb);
     392:	b7 00 00 00 00 00 00 00	r0 = 0
     393:	95 00 00 00 00 00 00 00	exit

0000000000000c50 <LBB51_53>:
     394:	b7 01 00 00 00 00 00 00	r1 = 0
     395:	79 a6 b8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 72)
     396:	bf 63 00 00 00 00 00 00	r3 = r6
     397:	0f 13 00 00 00 00 00 00	r3 += r1
     398:	bf a1 00 00 00 00 00 00	r1 = r10
     399:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     400:	b7 02 00 00 02 00 00 00	r2 = 2
     401:	85 00 00 00 71 00 00 00	call 113
     402:	b7 01 00 00 02 00 00 00	r1 = 2
     403:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     404:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     405:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     406:	bf a1 00 00 00 00 00 00	r1 = r10
     407:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     408:	b7 02 00 00 02 00 00 00	r2 = 2
     409:	bf 63 00 00 00 00 00 00	r3 = r6
     410:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     411:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     412:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
     413:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB51_55>
     414:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     415:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB51_91>

0000000000000d00 <LBB51_55>:
;     event->flags |= SKBTRACER_EVENT_IF;
     416:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     417:	47 01 00 00 01 00 00 00	r1 |= 1
     418:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     419:	79 a9 d0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 48)
;     ev->skb = (u64)skb;
     420:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     421:	85 00 00 00 05 00 00 00	call 5
     422:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     423:	b7 01 00 00 10 00 00 00	r1 = 16
     424:	bf 96 00 00 00 00 00 00	r6 = r9
     425:	0f 16 00 00 00 00 00 00	r6 += r1
     426:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     427:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     428:	b7 02 00 00 08 00 00 00	r2 = 8
     429:	bf 63 00 00 00 00 00 00	r3 = r6
     430:	85 00 00 00 71 00 00 00	call 113
     431:	b7 01 00 00 70 00 00 00	r1 = 112
     432:	bf 93 00 00 00 00 00 00	r3 = r9
     433:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     434:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     435:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     436:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     437:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     438:	b7 02 00 00 04 00 00 00	r2 = 4
     439:	85 00 00 00 71 00 00 00	call 113
     440:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     441:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     442:	85 00 00 00 08 00 00 00	call 8
     443:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     444:	85 00 00 00 0e 00 00 00	call 14
     445:	57 00 00 00 ff ff 00 00	r0 &= 65535
     446:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     447:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     448:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     449:	bf 91 00 00 00 00 00 00	r1 = r9
     450:	b7 02 00 00 08 00 00 00	r2 = 8
     451:	bf 63 00 00 00 00 00 00	r3 = r6
     452:	85 00 00 00 71 00 00 00	call 113
     453:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     454:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     455:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     456:	bf 91 00 00 00 00 00 00	r1 = r9
     457:	79 a9 d0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 48)
     458:	b7 02 00 00 08 00 00 00	r2 = 8
     459:	85 00 00 00 71 00 00 00	call 113
     460:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     461:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     462:	0f 13 00 00 00 00 00 00	r3 += r1
     463:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     464:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     465:	b7 02 00 00 04 00 00 00	r2 = 4
     466:	85 00 00 00 71 00 00 00	call 113
     467:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     468:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB51_58>
     469:	b7 01 00 00 18 00 00 00	r1 = 24
     470:	bf 93 00 00 00 00 00 00	r3 = r9
     471:	0f 13 00 00 00 00 00 00	r3 += r1
     472:	bf a1 00 00 00 00 00 00	r1 = r10
     473:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     474:	b7 02 00 00 08 00 00 00	r2 = 8
     475:	85 00 00 00 71 00 00 00	call 113
     476:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     477:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     478:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB51_58>
     479:	b7 01 00 00 30 00 00 00	r1 = 48
     480:	0f 13 00 00 00 00 00 00	r3 += r1
     481:	bf a1 00 00 00 00 00 00	r1 = r10
     482:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     483:	b7 02 00 00 08 00 00 00	r2 = 8
     484:	85 00 00 00 71 00 00 00	call 113
     485:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     486:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     487:	0f 13 00 00 00 00 00 00	r3 += r1
     488:	bf a1 00 00 00 00 00 00	r1 = r10
     489:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     490:	b7 02 00 00 04 00 00 00	r2 = 4
     491:	85 00 00 00 71 00 00 00	call 113
     492:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000f68 <LBB51_58>:
;     pkt_info->netns = get_netns(skb);
     493:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     494:	b7 01 00 00 80 00 00 00	r1 = 128
     495:	bf 93 00 00 00 00 00 00	r3 = r9
     496:	0f 13 00 00 00 00 00 00	r3 += r1
     497:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     498:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     499:	bf a1 00 00 00 00 00 00	r1 = r10
     500:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     501:	b7 02 00 00 01 00 00 00	r2 = 1
     502:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     503:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     504:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     505:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     506:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     507:	b7 01 00 00 00 00 00 00	r1 = 0
     508:	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 64)
     509:	0f 13 00 00 00 00 00 00	r3 += r1
     510:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     pkt_info->ifname[0] = 0;
     511:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     512:	b7 02 00 00 10 00 00 00	r2 = 16
     513:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     514:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     515:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB51_60>
     516:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     517:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     518:	b7 01 00 00 69 00 00 00	r1 = 105
     519:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     520:	b7 01 00 00 6e 00 00 00	r1 = 110
     521:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000001050 <LBB51_60>:
     522:	b7 01 00 00 c0 00 00 00	r1 = 192
     523:	bf 93 00 00 00 00 00 00	r3 = r9
     524:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     525:	7b 3a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r3
     526:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     527:	07 01 00 00 f8 ff ff ff	r1 += -8
     528:	b7 02 00 00 08 00 00 00	r2 = 8
     529:	85 00 00 00 71 00 00 00	call 113
     530:	b7 01 00 00 b6 00 00 00	r1 = 182
     531:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     533:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     534:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     535:	b7 02 00 00 02 00 00 00	r2 = 2
     536:	bf 93 00 00 00 00 00 00	r3 = r9
     537:	85 00 00 00 71 00 00 00	call 113
     538:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     539:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     540:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     541:	07 01 00 00 64 00 00 00	r1 += 100
     542:	b7 02 00 00 06 00 00 00	r2 = 6
     543:	bf 63 00 00 00 00 00 00	r3 = r6
     544:	85 00 00 00 04 00 00 00	call 4
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     547:	b7 02 00 00 08 00 00 00	r2 = 8
     548:	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 64)
     549:	85 00 00 00 71 00 00 00	call 113
     550:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     551:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     552:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     553:	b7 02 00 00 02 00 00 00	r2 = 2
     554:	bf 93 00 00 00 00 00 00	r3 = r9
     555:	85 00 00 00 71 00 00 00	call 113
     556:	b7 01 00 00 b4 00 00 00	r1 = 180
     557:	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 48)
     558:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     559:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     560:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     561:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     562:	b7 02 00 00 02 00 00 00	r2 = 2
     563:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     564:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     565:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     566:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB51_62>
     567:	bf 19 00 00 00 00 00 00	r9 = r1

00000000000011c0 <LBB51_62>:
;     return head + network_header;
     568:	57 09 00 00 ff ff 00 00	r9 &= 65535
     569:	0f 96 00 00 00 00 00 00	r6 += r9
     570:	bf a1 00 00 00 00 00 00	r1 = r10
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     572:	b7 02 00 00 01 00 00 00	r2 = 1
     573:	bf 63 00 00 00 00 00 00	r3 = r6
     574:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     575:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     576:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     577:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB51_67>
     578:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB51_91>
     579:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     580:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     581:	b7 01 00 00 c0 00 00 00	r1 = 192
     582:	79 a9 d0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 48)
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
     585:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     586:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     587:	b7 02 00 00 08 00 00 00	r2 = 8
     588:	85 00 00 00 71 00 00 00	call 113
     589:	b7 01 00 00 b6 00 00 00	r1 = 182
     590:	bf 93 00 00 00 00 00 00	r3 = r9
     591:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     592:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     593:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     594:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     595:	b7 02 00 00 02 00 00 00	r2 = 2
     596:	85 00 00 00 71 00 00 00	call 113
     597:	b7 01 00 00 b4 00 00 00	r1 = 180
     598:	bf 93 00 00 00 00 00 00	r3 = r9
     599:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     600:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     601:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     602:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     603:	b7 02 00 00 02 00 00 00	r2 = 2
     604:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     605:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     606:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     607:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB51_66>
     608:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001308 <LBB51_66>:
;     return head + network_header;
     609:	57 09 00 00 ff ff 00 00	r9 &= 65535
     610:	0f 96 00 00 00 00 00 00	r6 += r9
     611:	b7 01 00 00 0c 00 00 00	r1 = 12
     612:	bf 63 00 00 00 00 00 00	r3 = r6
     613:	0f 13 00 00 00 00 00 00	r3 += r1
     614:	bf a1 00 00 00 00 00 00	r1 = r10
     615:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     616:	b7 02 00 00 04 00 00 00	r2 = 4
     617:	85 00 00 00 71 00 00 00	call 113
     618:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     619:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     620:	b7 01 00 00 10 00 00 00	r1 = 16
     621:	bf 63 00 00 00 00 00 00	r3 = r6
     622:	0f 13 00 00 00 00 00 00	r3 += r1
     623:	bf a1 00 00 00 00 00 00	r1 = r10
     624:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     625:	b7 02 00 00 04 00 00 00	r2 = 4
     626:	85 00 00 00 71 00 00 00	call 113
     627:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     628:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     629:	b7 01 00 00 02 00 00 00	r1 = 2
     630:	bf 63 00 00 00 00 00 00	r3 = r6
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     634:	b7 02 00 00 02 00 00 00	r2 = 2
     635:	85 00 00 00 71 00 00 00	call 113
     636:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     637:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     638:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     639:	b7 01 00 00 09 00 00 00	r1 = 9
     640:	05 00 39 00 00 00 00 00	goto +57 <LBB51_70>

0000000000001408 <LBB51_67>:
     641:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     642:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     643:	b7 01 00 00 c0 00 00 00	r1 = 192
     644:	79 a9 d0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 48)
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
     647:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     648:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     649:	b7 02 00 00 08 00 00 00	r2 = 8
     650:	85 00 00 00 71 00 00 00	call 113
     651:	b7 01 00 00 b6 00 00 00	r1 = 182
     652:	bf 93 00 00 00 00 00 00	r3 = r9
     653:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     654:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     655:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     656:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     657:	b7 02 00 00 02 00 00 00	r2 = 2
     658:	85 00 00 00 71 00 00 00	call 113
     659:	b7 01 00 00 b4 00 00 00	r1 = 180
     660:	bf 93 00 00 00 00 00 00	r3 = r9
     661:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     662:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     663:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     664:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     665:	b7 02 00 00 02 00 00 00	r2 = 2
     666:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     667:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     668:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     669:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB51_69>
     670:	bf 19 00 00 00 00 00 00	r9 = r1

00000000000014f8 <LBB51_69>:
;     return head + network_header;
     671:	57 09 00 00 ff ff 00 00	r9 &= 65535
     672:	0f 96 00 00 00 00 00 00	r6 += r9
     673:	b7 01 00 00 08 00 00 00	r1 = 8
     674:	bf 63 00 00 00 00 00 00	r3 = r6
     675:	0f 13 00 00 00 00 00 00	r3 += r1
     676:	79 a9 c8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 56)
;         set_ipv6_info(skb, &event->l3_info);
     677:	bf 91 00 00 00 00 00 00	r1 = r9
     678:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     679:	b7 02 00 00 10 00 00 00	r2 = 16
     680:	85 00 00 00 04 00 00 00	call 4
     681:	b7 01 00 00 18 00 00 00	r1 = 24
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     684:	bf 91 00 00 00 00 00 00	r1 = r9
     685:	07 01 00 00 80 00 00 00	r1 += 128
     686:	b7 02 00 00 10 00 00 00	r2 = 16
     687:	85 00 00 00 04 00 00 00	call 4
     688:	b7 01 00 00 04 00 00 00	r1 = 4
     689:	bf 63 00 00 00 00 00 00	r3 = r6
     690:	0f 13 00 00 00 00 00 00	r3 += r1
     691:	bf a1 00 00 00 00 00 00	r1 = r10
     692:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     693:	b7 02 00 00 02 00 00 00	r2 = 2
     694:	85 00 00 00 71 00 00 00	call 113
     695:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     696:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     697:	b7 01 00 00 06 00 00 00	r1 = 6

00000000000015d0 <LBB51_70>:
     698:	bf 63 00 00 00 00 00 00	r3 = r6
     699:	0f 13 00 00 00 00 00 00	r3 += r1
     700:	bf a1 00 00 00 00 00 00	r1 = r10
     701:	07 01 00 00 f8 ff ff ff	r1 += -8
     702:	b7 02 00 00 01 00 00 00	r2 = 1
     703:	85 00 00 00 71 00 00 00	call 113
     704:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     705:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     706:	bf a1 00 00 00 00 00 00	r1 = r10
     707:	07 01 00 00 f8 ff ff ff	r1 += -8
     708:	b7 02 00 00 01 00 00 00	r2 = 1
     709:	bf 63 00 00 00 00 00 00	r3 = r6
     710:	85 00 00 00 04 00 00 00	call 4
     711:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     712:	57 01 00 00 f0 00 00 00	r1 &= 240
     713:	77 01 00 00 04 00 00 00	r1 >>= 4
     714:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     715:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     716:	65 01 50 00 10 00 00 00	if r1 s> 16 goto +80 <LBB51_73>
     717:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB51_85>
     718:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB51_75>
     719:	05 00 b8 fe 00 00 00 00	goto -328 <LBB51_91>

0000000000001680 <LBB51_75>:
     720:	b7 01 00 00 c0 00 00 00	r1 = 192
     721:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
     722:	bf 63 00 00 00 00 00 00	r3 = r6
     723:	0f 13 00 00 00 00 00 00	r3 += r1
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     726:	b7 02 00 00 08 00 00 00	r2 = 8
     727:	85 00 00 00 71 00 00 00	call 113
     728:	b7 01 00 00 b6 00 00 00	r1 = 182
     729:	bf 63 00 00 00 00 00 00	r3 = r6
     730:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     731:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     732:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     733:	bf a1 00 00 00 00 00 00	r1 = r10
     734:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     735:	b7 02 00 00 02 00 00 00	r2 = 2
     736:	85 00 00 00 71 00 00 00	call 113
     737:	b7 01 00 00 b4 00 00 00	r1 = 180
     738:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     739:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     740:	bf a1 00 00 00 00 00 00	r1 = r10
     741:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     742:	b7 02 00 00 02 00 00 00	r2 = 2
     743:	bf 63 00 00 00 00 00 00	r3 = r6
     744:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     745:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     746:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     747:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB51_77>
     748:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001768 <LBB51_77>:
;     return head + network_header;
     749:	57 09 00 00 ff ff 00 00	r9 &= 65535
     750:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
;     return head + network_header;
     751:	0f 96 00 00 00 00 00 00	r6 += r9
     752:	bf a1 00 00 00 00 00 00	r1 = r10
     753:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     754:	b7 02 00 00 01 00 00 00	r2 = 1
     755:	bf 63 00 00 00 00 00 00	r3 = r6
     756:	85 00 00 00 04 00 00 00	call 4
     757:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     758:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     759:	57 02 00 00 f0 00 00 00	r2 &= 240
     760:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB51_79>
     761:	bf a1 00 00 00 00 00 00	r1 = r10
     762:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     763:	b7 02 00 00 01 00 00 00	r2 = 1
     764:	bf 63 00 00 00 00 00 00	r3 = r6
     765:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     766:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     767:	67 01 00 00 02 00 00 00	r1 <<= 2
     768:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001808 <LBB51_79>:
;     return l3_header + transport_size;
     769:	0f 16 00 00 00 00 00 00	r6 += r1
     770:	b7 01 00 00 00 00 00 00	r1 = 0
     771:	bf 63 00 00 00 00 00 00	r3 = r6
     772:	0f 13 00 00 00 00 00 00	r3 += r1
     773:	bf a1 00 00 00 00 00 00	r1 = r10
     774:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     775:	b7 02 00 00 02 00 00 00	r2 = 2
     776:	85 00 00 00 71 00 00 00	call 113
     777:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     778:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     779:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     780:	b7 01 00 00 02 00 00 00	r1 = 2
     781:	bf 63 00 00 00 00 00 00	r3 = r6
     782:	0f 13 00 00 00 00 00 00	r3 += r1
     783:	bf a1 00 00 00 00 00 00	r1 = r10
     784:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     785:	b7 02 00 00 02 00 00 00	r2 = 2
     786:	85 00 00 00 71 00 00 00	call 113
     787:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     788:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     789:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     790:	07 06 00 00 0c 00 00 00	r6 += 12
     791:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     792:	07 01 00 00 9c 00 00 00	r1 += 156
     793:	b7 02 00 00 02 00 00 00	r2 = 2
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	85 00 00 00 04 00 00 00	call 4
     796:	05 00 8a 00 00 00 00 00	goto +138 <LBB51_90>

00000000000018e8 <LBB51_73>:
;     if (l4_proto == IPPROTO_TCP) {
     797:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB51_80>
     798:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB51_85>
     799:	05 00 68 fe 00 00 00 00	goto -408 <LBB51_91>

0000000000001900 <LBB51_85>:
     800:	b7 01 00 00 c0 00 00 00	r1 = 192
     801:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
     802:	bf 63 00 00 00 00 00 00	r3 = r6
     803:	0f 13 00 00 00 00 00 00	r3 += r1
     804:	bf a1 00 00 00 00 00 00	r1 = r10
     805:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     806:	b7 02 00 00 08 00 00 00	r2 = 8
     807:	85 00 00 00 71 00 00 00	call 113
     808:	b7 01 00 00 b6 00 00 00	r1 = 182
     809:	bf 63 00 00 00 00 00 00	r3 = r6
     810:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     811:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     812:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     813:	bf a1 00 00 00 00 00 00	r1 = r10
     814:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     815:	b7 02 00 00 02 00 00 00	r2 = 2
     816:	85 00 00 00 71 00 00 00	call 113
     817:	b7 01 00 00 b4 00 00 00	r1 = 180
     818:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     819:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     820:	bf a1 00 00 00 00 00 00	r1 = r10
     821:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     822:	b7 02 00 00 02 00 00 00	r2 = 2
     823:	bf 63 00 00 00 00 00 00	r3 = r6
     824:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     825:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     826:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     827:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB51_87>
     828:	bf 19 00 00 00 00 00 00	r9 = r1

00000000000019e8 <LBB51_87>:
;     return head + network_header;
     829:	57 09 00 00 ff ff 00 00	r9 &= 65535
     830:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
;     return head + network_header;
     831:	0f 96 00 00 00 00 00 00	r6 += r9
     832:	bf a1 00 00 00 00 00 00	r1 = r10
     833:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     834:	b7 02 00 00 01 00 00 00	r2 = 1
     835:	bf 63 00 00 00 00 00 00	r3 = r6
     836:	85 00 00 00 04 00 00 00	call 4
     837:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     838:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     839:	57 02 00 00 f0 00 00 00	r2 &= 240
     840:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB51_89>
     841:	bf a1 00 00 00 00 00 00	r1 = r10
     842:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     843:	b7 02 00 00 01 00 00 00	r2 = 1
     844:	bf 63 00 00 00 00 00 00	r3 = r6
     845:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     846:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     847:	67 01 00 00 02 00 00 00	r1 <<= 2
     848:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a88 <LBB51_89>:
;     return l3_header + transport_size;
     849:	0f 16 00 00 00 00 00 00	r6 += r1
     850:	bf a9 00 00 00 00 00 00	r9 = r10
     851:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     852:	bf 91 00 00 00 00 00 00	r1 = r9
     853:	b7 02 00 00 08 00 00 00	r2 = 8
     854:	bf 63 00 00 00 00 00 00	r3 = r6
     855:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     856:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     857:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     858:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     859:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     860:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     861:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     862:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     863:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     864:	05 00 46 00 00 00 00 00	goto +70 <LBB51_90>

0000000000001b08 <LBB51_80>:
     865:	b7 01 00 00 c0 00 00 00	r1 = 192
     866:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
     867:	bf 63 00 00 00 00 00 00	r3 = r6
     868:	0f 13 00 00 00 00 00 00	r3 += r1
     869:	bf a1 00 00 00 00 00 00	r1 = r10
     870:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     871:	b7 02 00 00 08 00 00 00	r2 = 8
     872:	85 00 00 00 71 00 00 00	call 113
     873:	b7 01 00 00 b6 00 00 00	r1 = 182
     874:	bf 63 00 00 00 00 00 00	r3 = r6
     875:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     876:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     877:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     878:	bf a1 00 00 00 00 00 00	r1 = r10
     879:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     880:	b7 02 00 00 02 00 00 00	r2 = 2
     881:	85 00 00 00 71 00 00 00	call 113
     882:	b7 01 00 00 b4 00 00 00	r1 = 180
     883:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     884:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     885:	bf a1 00 00 00 00 00 00	r1 = r10
     886:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     887:	b7 02 00 00 02 00 00 00	r2 = 2
     888:	bf 63 00 00 00 00 00 00	r3 = r6
     889:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     890:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     891:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     892:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB51_82>
     893:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001bf0 <LBB51_82>:
;     return head + network_header;
     894:	57 09 00 00 ff ff 00 00	r9 &= 65535
     895:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
;     return head + network_header;
     896:	0f 96 00 00 00 00 00 00	r6 += r9
     897:	bf a1 00 00 00 00 00 00	r1 = r10
     898:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     899:	b7 02 00 00 01 00 00 00	r2 = 1
     900:	bf 63 00 00 00 00 00 00	r3 = r6
     901:	85 00 00 00 04 00 00 00	call 4
     902:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     903:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     904:	57 02 00 00 f0 00 00 00	r2 &= 240
     905:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB51_84>
     906:	bf a1 00 00 00 00 00 00	r1 = r10
     907:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     908:	b7 02 00 00 01 00 00 00	r2 = 1
     909:	bf 63 00 00 00 00 00 00	r3 = r6
     910:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     911:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     912:	67 01 00 00 02 00 00 00	r1 <<= 2
     913:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c90 <LBB51_84>:
;     return l3_header + transport_size;
     914:	0f 16 00 00 00 00 00 00	r6 += r1
     915:	b7 01 00 00 00 00 00 00	r1 = 0
     916:	bf 63 00 00 00 00 00 00	r3 = r6
     917:	0f 13 00 00 00 00 00 00	r3 += r1
     918:	bf a1 00 00 00 00 00 00	r1 = r10
     919:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     920:	b7 02 00 00 02 00 00 00	r2 = 2
     921:	85 00 00 00 71 00 00 00	call 113
     922:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     923:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     924:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     925:	b7 01 00 00 02 00 00 00	r1 = 2
     926:	0f 16 00 00 00 00 00 00	r6 += r1
     927:	bf a1 00 00 00 00 00 00	r1 = r10
     928:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     929:	b7 02 00 00 02 00 00 00	r2 = 2
     930:	bf 63 00 00 00 00 00 00	r3 = r6
     931:	85 00 00 00 71 00 00 00	call 113
     932:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     933:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     934:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001d38 <LBB51_90>:
;     event->flags |= SKBTRACER_EVENT_IPTABLE;
     935:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     936:	47 01 00 00 02 00 00 00	r1 |= 2
     937:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     938:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
;     verdict = PT_REGS_RC(ctx);
     939:	79 11 50 00 00 00 00 00	r1 = *(u64 *)(r1 + 80)
;     ipt_delay = bpf_ktime_get_ns() - args->start_ns;
     940:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
     941:	85 00 00 00 05 00 00 00	call 5
     942:	bf 09 00 00 00 00 00 00	r9 = r0
     943:	b7 01 00 00 38 00 00 00	r1 = 56
;     set_iptables_info(args->table, args->state, verdict, ipt_delay,
     944:	79 83 10 00 00 00 00 00	r3 = *(u64 *)(r8 + 16)
     945:	0f 13 00 00 00 00 00 00	r3 += r1
;     ipt_delay = bpf_ktime_get_ns() - args->start_ns;
     946:	79 81 18 00 00 00 00 00	r1 = *(u64 *)(r8 + 24)
;     set_iptables_info(args->table, args->state, verdict, ipt_delay,
     947:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     948:	79 86 08 00 00 00 00 00	r6 = *(u64 *)(r8 + 8)
     949:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;                       &event->ipt_info);
     950:	07 01 00 00 a8 00 00 00	r1 += 168
;     bpf_probe_read(&ipt_info->tablename, XT_TABLE_MAXNAMELEN, &table->name);
     951:	b7 02 00 00 20 00 00 00	r2 = 32
     952:	85 00 00 00 04 00 00 00	call 4
     953:	b7 01 00 00 00 00 00 00	r1 = 0
     954:	bf 63 00 00 00 00 00 00	r3 = r6
     955:	0f 13 00 00 00 00 00 00	r3 += r1
     956:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IPTABLE;
     957:	07 01 00 00 f8 ff ff ff	r1 += -8
;     ipt_info->hook = BPF_CORE_READ(state, hook);
     958:	b7 02 00 00 04 00 00 00	r2 = 4
     959:	85 00 00 00 71 00 00 00	call 113
;     ipt_delay = bpf_ktime_get_ns() - args->start_ns;
     960:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     961:	1f 19 00 00 00 00 00 00	r9 -= r1
;     ipt_info->hook = BPF_CORE_READ(state, hook);
     962:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;     ipt_info->delay = delay;
     963:	7b 97 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r9
;     ipt_info->verdict = verdict;
     964:	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 48)
     965:	63 27 cc 00 00 00 00 00	*(u32 *)(r7 + 204) = r2
;     ipt_info->hook = BPF_CORE_READ(state, hook);
     966:	63 17 c8 00 00 00 00 00	*(u32 *)(r7 + 200) = r1
     967:	b7 01 00 00 04 00 00 00	r1 = 4
     968:	0f 16 00 00 00 00 00 00	r6 += r1
     969:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IPTABLE;
     970:	07 01 00 00 f8 ff ff ff	r1 += -8
;     ipt_info->pf = BPF_CORE_READ(state, pf);
     971:	b7 02 00 00 01 00 00 00	r2 = 1
     972:	bf 63 00 00 00 00 00 00	r3 = r6
     973:	85 00 00 00 71 00 00 00	call 113
     974:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     975:	73 17 d8 00 00 00 00 00	*(u8 *)(r7 + 216) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     976:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
     977:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     979:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     981:	bf 74 00 00 00 00 00 00	r4 = r7
     982:	b7 05 00 00 e0 00 00 00	r5 = 224
     983:	85 00 00 00 19 00 00 00	call 25
     984:	05 00 af fd 00 00 00 00	goto -593 <LBB51_91>

Disassembly of section kprobe/ip6t_do_table:

0000000000000000 <ipt_k_do_tbl6>:
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM1(ctx);
       0:	79 12 70 00 00 00 00 00	r2 = *(u64 *)(r1 + 112)
;     struct nf_hook_state *state = (struct nf_hook_state *)PT_REGS_PARM2(ctx);
       1:	79 13 68 00 00 00 00 00	r3 = *(u64 *)(r1 + 104)
;     struct xt_table *table = (struct xt_table *)PT_REGS_PARM3(ctx);
       2:	79 11 60 00 00 00 00 00	r1 = *(u64 *)(r1 + 96)
;     struct ipt_do_table_args args = {
       3:	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r1
       4:	7b 3a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r3
       5:	7b 2a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r2
;     args.start_ns = bpf_ktime_get_ns();
       6:	85 00 00 00 05 00 00 00	call 5
       7:	7b 0a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r0
;     pid = bpf_get_current_pid_tgid();
       8:	85 00 00 00 0e 00 00 00	call 14
       9:	63 0a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r0
      10:	bf a2 00 00 00 00 00 00	r2 = r10
      11:	07 02 00 00 fc ff ff ff	r2 += -4
      12:	bf a3 00 00 00 00 00 00	r3 = r10
      13:	07 03 00 00 d8 ff ff ff	r3 += -40
;     bpf_map_update_elem(&skbtracer_ipt, &pid, &args, BPF_ANY);
      14:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      16:	b7 04 00 00 00 00 00 00	r4 = 0
      17:	85 00 00 00 02 00 00 00	call 2
;     return __ipt_do_table_in(ctx, skb, state, table);
      18:	b7 00 00 00 00 00 00 00	r0 = 0
      19:	95 00 00 00 00 00 00 00	exit

Disassembly of section kretprobe/ip6t_do_table:

0000000000000000 <ipt_kr_do_tbl6>:
; int ipt_kr_do_tbl6(struct pt_regs *ctx) {
       0:	bf 16 00 00 00 00 00 00	r6 = r1
;     pid = bpf_get_current_pid_tgid();
       1:	85 00 00 00 0e 00 00 00	call 14
       2:	63 0a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r0
       3:	bf a2 00 00 00 00 00 00	r2 = r10
       4:	07 02 00 00 e4 ff ff ff	r2 += -28
;     args = bpf_map_lookup_elem(&skbtracer_ipt, &pid);
       5:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       7:	85 00 00 00 01 00 00 00	call 1
       8:	bf 08 00 00 00 00 00 00	r8 = r0
;     if (args == NULL) return 0;
       9:	15 08 7e 01 00 00 00 00	if r8 == 0 goto +382 <LBB53_91>
      10:	7b 6a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r6
      11:	bf a2 00 00 00 00 00 00	r2 = r10
      12:	07 02 00 00 e4 ff ff ff	r2 += -28
;     bpf_map_delete_elem(&skbtracer_ipt, &pid);
      13:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      15:	85 00 00 00 03 00 00 00	call 3
      16:	b7 07 00 00 00 00 00 00	r7 = 0
;     GET_CFG();
      17:	63 7a e0 ff 00 00 00 00	*(u32 *)(r10 - 32) = r7
      18:	bf a2 00 00 00 00 00 00	r2 = r10
      19:	07 02 00 00 e0 ff ff ff	r2 += -32
;     GET_CFG();
      20:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      22:	85 00 00 00 01 00 00 00	call 1
      23:	bf 06 00 00 00 00 00 00	r6 = r0
      24:	15 06 6f 01 00 00 00 00	if r6 == 0 goto +367 <LBB53_91>
      25:	61 61 08 00 00 00 00 00	r1 = *(u32 *)(r6 + 8)
      26:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      27:	63 16 08 00 00 00 00 00	*(u32 *)(r6 + 8) = r1
;     u32 ev_buff_id = 0;
      28:	63 7a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r7
      29:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      30:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      31:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      33:	85 00 00 00 01 00 00 00	call 1
;     if (!ev) return NULL;
      34:	55 00 01 00 00 00 00 00	if r0 != 0 goto +1 <LBB53_4>
      35:	05 00 64 01 00 00 00 00	goto +356 <LBB53_91>

0000000000000120 <LBB53_4>:
      36:	7b 0a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r0
      37:	bf 07 00 00 00 00 00 00	r7 = r0
      38:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      39:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      40:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      41:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      42:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      43:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      44:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      45:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      46:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      47:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      48:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      49:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      50:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      51:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      52:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      53:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      54:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      55:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      56:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      57:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      58:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      59:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      60:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      61:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      62:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      63:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      64:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      65:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      66:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     if (!do_trace_skb(event, cfg, ctx, args->skb)) return 0;
      67:	79 81 00 00 00 00 00 00	r1 = *(u64 *)(r8 + 0)
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      68:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
      69:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      70:	61 61 04 00 00 00 00 00	r1 = *(u32 *)(r6 + 4)
      71:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB53_6>
      72:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      73:	5d 01 3e 01 00 00 00 00	if r1 != r0 goto +318 <LBB53_91>

0000000000000250 <LBB53_6>:
      74:	b7 01 00 00 10 00 00 00	r1 = 16
      75:	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 48)
      76:	0f 13 00 00 00 00 00 00	r3 += r1
      77:	bf a9 00 00 00 00 00 00	r9 = r10
      78:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      79:	bf 91 00 00 00 00 00 00	r1 = r9
      80:	b7 02 00 00 08 00 00 00	r2 = 8
      81:	85 00 00 00 71 00 00 00	call 113
      82:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      83:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      84:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      85:	bf 91 00 00 00 00 00 00	r1 = r9
      86:	b7 02 00 00 08 00 00 00	r2 = 8
      87:	85 00 00 00 71 00 00 00	call 113
      88:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      90:	0f 13 00 00 00 00 00 00	r3 += r1
      91:	bf a1 00 00 00 00 00 00	r1 = r10
      92:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      93:	b7 02 00 00 04 00 00 00	r2 = 4
      94:	85 00 00 00 71 00 00 00	call 113
      95:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      96:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB53_9>
      97:	b7 01 00 00 18 00 00 00	r1 = 24
      98:	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 48)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     102:	b7 02 00 00 08 00 00 00	r2 = 8
     103:	85 00 00 00 71 00 00 00	call 113
     104:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     105:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB53_12>
     106:	b7 01 00 00 30 00 00 00	r1 = 48
     107:	0f 13 00 00 00 00 00 00	r3 += r1
     108:	bf a1 00 00 00 00 00 00	r1 = r10
     109:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     110:	b7 02 00 00 08 00 00 00	r2 = 8
     111:	85 00 00 00 71 00 00 00	call 113
     112:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     113:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     114:	0f 13 00 00 00 00 00 00	r3 += r1
     115:	bf a1 00 00 00 00 00 00	r1 = r10
     116:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     117:	b7 02 00 00 04 00 00 00	r2 = 4
     118:	85 00 00 00 71 00 00 00	call 113
     119:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

00000000000003c0 <LBB53_9>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     120:	61 62 00 00 00 00 00 00	r2 = *(u32 *)(r6 + 0)
     121:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB53_12>
     122:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB53_12>
     123:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB53_91>

00000000000003e0 <LBB53_12>:
;     u16 icmpid = cfg->icmpid;
     124:	69 61 0e 00 00 00 00 00	r1 = *(u16 *)(r6 + 14)
;     u16 port = cfg->port;
     125:	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r1
     126:	69 61 0c 00 00 00 00 00	r1 = *(u16 *)(r6 + 12)
;     u8 proto = cfg->proto;
     127:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     128:	71 61 12 00 00 00 00 00	r1 = *(u8 *)(r6 + 18)
;     u32 addr = cfg->ip;
     129:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     130:	61 61 08 00 00 00 00 00	r1 = *(u32 *)(r6 + 8)
     131:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     132:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     133:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     134:	b7 01 00 00 c0 00 00 00	r1 = 192
     135:	79 a9 d0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 48)
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
     138:	bf a1 00 00 00 00 00 00	r1 = r10
     139:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     140:	b7 02 00 00 08 00 00 00	r2 = 8
     141:	85 00 00 00 71 00 00 00	call 113
     142:	b7 01 00 00 b6 00 00 00	r1 = 182
     143:	bf 93 00 00 00 00 00 00	r3 = r9
     144:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     145:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     146:	bf a1 00 00 00 00 00 00	r1 = r10
     147:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     148:	b7 02 00 00 02 00 00 00	r2 = 2
     149:	85 00 00 00 71 00 00 00	call 113
     150:	b7 01 00 00 b4 00 00 00	r1 = 180
     151:	bf 93 00 00 00 00 00 00	r3 = r9
     152:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     153:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     154:	bf a1 00 00 00 00 00 00	r1 = r10
     155:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     156:	b7 02 00 00 02 00 00 00	r2 = 2
     157:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     158:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     159:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     160:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB53_14>
     161:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000510 <LBB53_14>:
;     return head + network_header;
     162:	57 09 00 00 ff ff 00 00	r9 &= 65535
     163:	0f 96 00 00 00 00 00 00	r6 += r9
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     166:	b7 02 00 00 01 00 00 00	r2 = 1
     167:	bf 63 00 00 00 00 00 00	r3 = r6
     168:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     169:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     170:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     171:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB53_21>
     172:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB53_91>
;         if (addr != 0) {
     173:	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 72)
     174:	bf 19 00 00 00 00 00 00	r9 = r1
     175:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB53_19>
     176:	b7 01 00 00 0c 00 00 00	r1 = 12
     177:	bf 63 00 00 00 00 00 00	r3 = r6
     178:	0f 13 00 00 00 00 00 00	r3 += r1
     179:	bf a1 00 00 00 00 00 00	r1 = r10
     180:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     181:	b7 02 00 00 04 00 00 00	r2 = 4
     182:	85 00 00 00 71 00 00 00	call 113
     183:	b7 01 00 00 10 00 00 00	r1 = 16
     184:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     185:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     186:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     187:	bf a1 00 00 00 00 00 00	r1 = r10
     188:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     189:	b7 02 00 00 04 00 00 00	r2 = 4
     190:	bf 63 00 00 00 00 00 00	r3 = r6
     191:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     192:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     193:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB53_55>
     194:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     195:	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 72)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     196:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB53_91>
     197:	05 00 da 00 00 00 00 00	goto +218 <LBB53_55>

0000000000000630 <LBB53_21>:
     198:	b7 01 00 00 06 00 00 00	r1 = 6
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     208:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB53_23>
     209:	b7 04 00 00 80 00 00 00	r4 = 128
     210:	b7 03 00 00 81 00 00 00	r3 = 129
     211:	b7 01 00 00 3a 00 00 00	r1 = 58
     212:	05 00 0d 00 00 00 00 00	goto +13 <LBB53_23>

00000000000006a8 <LBB53_19>:
     213:	b7 01 00 00 09 00 00 00	r1 = 9
     214:	0f 16 00 00 00 00 00 00	r6 += r1
     215:	bf a1 00 00 00 00 00 00	r1 = r10
     216:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     217:	b7 02 00 00 01 00 00 00	r2 = 1
     218:	bf 63 00 00 00 00 00 00	r3 = r6
     219:	85 00 00 00 04 00 00 00	call 4
     220:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     221:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     222:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     223:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB53_23>
     224:	b7 04 00 00 08 00 00 00	r4 = 8
     225:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000710 <LBB53_23>:
;     if (proto != 0 && proto != l4_proto)
     226:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
     227:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB53_25>
     228:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB53_91>

0000000000000728 <LBB53_25>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     229:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB53_28>
     230:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB53_30>
     231:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB53_36>
     232:	05 00 9f 00 00 00 00 00	goto +159 <LBB53_91>

0000000000000748 <LBB53_36>:
     233:	b7 01 00 00 c0 00 00 00	r1 = 192
     234:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
     237:	bf a1 00 00 00 00 00 00	r1 = r10
     238:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     239:	b7 02 00 00 08 00 00 00	r2 = 8
     240:	85 00 00 00 71 00 00 00	call 113
     241:	b7 01 00 00 b6 00 00 00	r1 = 182
     242:	bf 63 00 00 00 00 00 00	r3 = r6
     243:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     244:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     245:	bf a1 00 00 00 00 00 00	r1 = r10
     246:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     247:	b7 02 00 00 02 00 00 00	r2 = 2
     248:	85 00 00 00 71 00 00 00	call 113
     249:	b7 01 00 00 b4 00 00 00	r1 = 180
     250:	bf 63 00 00 00 00 00 00	r3 = r6
     251:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     252:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     253:	bf a1 00 00 00 00 00 00	r1 = r10
     254:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     255:	b7 02 00 00 02 00 00 00	r2 = 2
     256:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     257:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     258:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     259:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB53_38>
     260:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000828 <LBB53_38>:
;     return head + network_header;
     261:	57 06 00 00 ff ff 00 00	r6 &= 65535
     262:	0f 69 00 00 00 00 00 00	r9 += r6
     263:	bf a1 00 00 00 00 00 00	r1 = r10
     264:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     265:	b7 02 00 00 01 00 00 00	r2 = 1
     266:	bf 93 00 00 00 00 00 00	r3 = r9
     267:	85 00 00 00 04 00 00 00	call 4
     268:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     269:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     270:	57 02 00 00 f0 00 00 00	r2 &= 240
     271:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB53_40>
     272:	bf a1 00 00 00 00 00 00	r1 = r10
     273:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     274:	b7 02 00 00 01 00 00 00	r2 = 1
     275:	bf 93 00 00 00 00 00 00	r3 = r9
     276:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     277:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     278:	67 01 00 00 02 00 00 00	r1 <<= 2
     279:	57 01 00 00 3c 00 00 00	r1 &= 60

00000000000008c0 <LBB53_40>:
;     return l3_header + transport_size;
     280:	0f 19 00 00 00 00 00 00	r9 += r1
     281:	7b 9a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r9

00000000000008d0 <LBB53_41>:
     282:	79 a9 b0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 80)
;     if (port != 0) {
     283:	bf 92 00 00 00 00 00 00	r2 = r9
     284:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB53_46>
;         if (l4_proto == IPPROTO_TCP) {
     285:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     286:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB53_53>
     287:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB53_46>
     288:	b7 01 00 00 00 00 00 00	r1 = 0
     289:	79 a6 b8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 72)
     290:	bf 63 00 00 00 00 00 00	r3 = r6
     291:	0f 13 00 00 00 00 00 00	r3 += r1
     292:	bf a1 00 00 00 00 00 00	r1 = r10
     293:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     294:	b7 02 00 00 02 00 00 00	r2 = 2
     295:	85 00 00 00 71 00 00 00	call 113
     296:	b7 01 00 00 02 00 00 00	r1 = 2
     297:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     298:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     299:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     300:	bf a1 00 00 00 00 00 00	r1 = r10
     301:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     302:	b7 02 00 00 02 00 00 00	r2 = 2
     303:	bf 63 00 00 00 00 00 00	r3 = r6
     304:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     305:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     306:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
     307:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB53_55>
     308:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     309:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB53_91>
     310:	05 00 69 00 00 00 00 00	goto +105 <LBB53_55>

00000000000009b8 <LBB53_28>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     311:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB53_36>
     312:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB53_91>

00000000000009c8 <LBB53_30>:
     313:	7b 4a 98 ff 00 00 00 00	*(u64 *)(r10 - 104) = r4
     314:	7b 3a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r3
     315:	b7 01 00 00 c0 00 00 00	r1 = 192
     316:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
     319:	bf a1 00 00 00 00 00 00	r1 = r10
     320:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     321:	b7 02 00 00 08 00 00 00	r2 = 8
     322:	85 00 00 00 71 00 00 00	call 113
     323:	b7 01 00 00 b6 00 00 00	r1 = 182
     324:	bf 63 00 00 00 00 00 00	r3 = r6
     325:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     326:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     327:	bf a1 00 00 00 00 00 00	r1 = r10
     328:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     329:	b7 02 00 00 02 00 00 00	r2 = 2
     330:	85 00 00 00 71 00 00 00	call 113
     331:	b7 01 00 00 b4 00 00 00	r1 = 180
     332:	bf 63 00 00 00 00 00 00	r3 = r6
     333:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     334:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     335:	bf a1 00 00 00 00 00 00	r1 = r10
     336:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     337:	b7 02 00 00 02 00 00 00	r2 = 2
     338:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     339:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     340:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     341:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB53_32>
     342:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000ab8 <LBB53_32>:
;     return head + network_header;
     343:	57 06 00 00 ff ff 00 00	r6 &= 65535
     344:	0f 69 00 00 00 00 00 00	r9 += r6
     345:	bf a1 00 00 00 00 00 00	r1 = r10
     346:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     347:	b7 02 00 00 01 00 00 00	r2 = 1
     348:	bf 93 00 00 00 00 00 00	r3 = r9
     349:	85 00 00 00 04 00 00 00	call 4
     350:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     351:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     352:	57 02 00 00 f0 00 00 00	r2 &= 240
     353:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB53_34>
     354:	bf a1 00 00 00 00 00 00	r1 = r10
     355:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     356:	b7 02 00 00 01 00 00 00	r2 = 1
     357:	bf 93 00 00 00 00 00 00	r3 = r9
     358:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     359:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     360:	67 01 00 00 02 00 00 00	r1 <<= 2
     361:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000b50 <LBB53_34>:
;     return l3_header + transport_size;
     362:	0f 19 00 00 00 00 00 00	r9 += r1
     363:	bf a6 00 00 00 00 00 00	r6 = r10
     364:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     365:	bf 61 00 00 00 00 00 00	r1 = r6
     366:	b7 02 00 00 08 00 00 00	r2 = 8
     367:	7b 9a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r9
     368:	bf 93 00 00 00 00 00 00	r3 = r9
     369:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     370:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     371:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     372:	79 a3 a0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 96)
     373:	79 a4 98 ff 00 00 00 00	r4 = *(u64 *)(r10 - 104)
     374:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB53_41>
     375:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     376:	07 02 00 00 e8 ff ff ff	r2 += -24
     377:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     378:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB53_41>
     379:	05 00 0c 00 00 00 00 00	goto +12 <LBB53_91>

0000000000000be0 <LBB53_46>:
;     if (proto != 0 && proto != l4_proto)
     380:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (proto != 0 && icmpid != 0) {
     381:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB53_55>
     382:	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 88)
;     if (proto != 0 && icmpid != 0) {
     383:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB53_55>
     384:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (proto != 0 && icmpid != 0) {
     385:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB53_55>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     386:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     387:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB53_51>
     388:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB53_55>

0000000000000c28 <LBB53_51>:
;         if (icmpid != ev_icmpid)
     389:	57 01 00 00 ff ff 00 00	r1 &= 65535
     390:	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 88)
     391:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB53_55>

0000000000000c40 <LBB53_91>:
;     return __ipt_do_table_out(ctx, skb);
     392:	b7 00 00 00 00 00 00 00	r0 = 0
     393:	95 00 00 00 00 00 00 00	exit

0000000000000c50 <LBB53_53>:
     394:	b7 01 00 00 00 00 00 00	r1 = 0
     395:	79 a6 b8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 72)
     396:	bf 63 00 00 00 00 00 00	r3 = r6
     397:	0f 13 00 00 00 00 00 00	r3 += r1
     398:	bf a1 00 00 00 00 00 00	r1 = r10
     399:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     400:	b7 02 00 00 02 00 00 00	r2 = 2
     401:	85 00 00 00 71 00 00 00	call 113
     402:	b7 01 00 00 02 00 00 00	r1 = 2
     403:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     404:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     405:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     406:	bf a1 00 00 00 00 00 00	r1 = r10
     407:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     408:	b7 02 00 00 02 00 00 00	r2 = 2
     409:	bf 63 00 00 00 00 00 00	r3 = r6
     410:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     411:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     412:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
     413:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB53_55>
     414:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     415:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB53_91>

0000000000000d00 <LBB53_55>:
;     event->flags |= SKBTRACER_EVENT_IF;
     416:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     417:	47 01 00 00 01 00 00 00	r1 |= 1
     418:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     419:	79 a9 d0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 48)
;     ev->skb = (u64)skb;
     420:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     421:	85 00 00 00 05 00 00 00	call 5
     422:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     423:	b7 01 00 00 10 00 00 00	r1 = 16
     424:	bf 96 00 00 00 00 00 00	r6 = r9
     425:	0f 16 00 00 00 00 00 00	r6 += r1
     426:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     427:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     428:	b7 02 00 00 08 00 00 00	r2 = 8
     429:	bf 63 00 00 00 00 00 00	r3 = r6
     430:	85 00 00 00 71 00 00 00	call 113
     431:	b7 01 00 00 70 00 00 00	r1 = 112
     432:	bf 93 00 00 00 00 00 00	r3 = r9
     433:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     434:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     435:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     436:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     437:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     438:	b7 02 00 00 04 00 00 00	r2 = 4
     439:	85 00 00 00 71 00 00 00	call 113
     440:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     441:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     442:	85 00 00 00 08 00 00 00	call 8
     443:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     444:	85 00 00 00 0e 00 00 00	call 14
     445:	57 00 00 00 ff ff 00 00	r0 &= 65535
     446:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     447:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     448:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     449:	bf 91 00 00 00 00 00 00	r1 = r9
     450:	b7 02 00 00 08 00 00 00	r2 = 8
     451:	bf 63 00 00 00 00 00 00	r3 = r6
     452:	85 00 00 00 71 00 00 00	call 113
     453:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     454:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     455:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     456:	bf 91 00 00 00 00 00 00	r1 = r9
     457:	79 a9 d0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 48)
     458:	b7 02 00 00 08 00 00 00	r2 = 8
     459:	85 00 00 00 71 00 00 00	call 113
     460:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     461:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     462:	0f 13 00 00 00 00 00 00	r3 += r1
     463:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     464:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     465:	b7 02 00 00 04 00 00 00	r2 = 4
     466:	85 00 00 00 71 00 00 00	call 113
     467:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     468:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB53_58>
     469:	b7 01 00 00 18 00 00 00	r1 = 24
     470:	bf 93 00 00 00 00 00 00	r3 = r9
     471:	0f 13 00 00 00 00 00 00	r3 += r1
     472:	bf a1 00 00 00 00 00 00	r1 = r10
     473:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     474:	b7 02 00 00 08 00 00 00	r2 = 8
     475:	85 00 00 00 71 00 00 00	call 113
     476:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     477:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     478:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB53_58>
     479:	b7 01 00 00 30 00 00 00	r1 = 48
     480:	0f 13 00 00 00 00 00 00	r3 += r1
     481:	bf a1 00 00 00 00 00 00	r1 = r10
     482:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     483:	b7 02 00 00 08 00 00 00	r2 = 8
     484:	85 00 00 00 71 00 00 00	call 113
     485:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     486:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     487:	0f 13 00 00 00 00 00 00	r3 += r1
     488:	bf a1 00 00 00 00 00 00	r1 = r10
     489:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     490:	b7 02 00 00 04 00 00 00	r2 = 4
     491:	85 00 00 00 71 00 00 00	call 113
     492:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000f68 <LBB53_58>:
;     pkt_info->netns = get_netns(skb);
     493:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     494:	b7 01 00 00 80 00 00 00	r1 = 128
     495:	bf 93 00 00 00 00 00 00	r3 = r9
     496:	0f 13 00 00 00 00 00 00	r3 += r1
     497:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     498:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     499:	bf a1 00 00 00 00 00 00	r1 = r10
     500:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     501:	b7 02 00 00 01 00 00 00	r2 = 1
     502:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     503:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     504:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     505:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     506:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     507:	b7 01 00 00 00 00 00 00	r1 = 0
     508:	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 64)
     509:	0f 13 00 00 00 00 00 00	r3 += r1
     510:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     pkt_info->ifname[0] = 0;
     511:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     512:	b7 02 00 00 10 00 00 00	r2 = 16
     513:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     514:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     515:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB53_60>
     516:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     517:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     518:	b7 01 00 00 69 00 00 00	r1 = 105
     519:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     520:	b7 01 00 00 6e 00 00 00	r1 = 110
     521:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000001050 <LBB53_60>:
     522:	b7 01 00 00 c0 00 00 00	r1 = 192
     523:	bf 93 00 00 00 00 00 00	r3 = r9
     524:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     525:	7b 3a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r3
     526:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     527:	07 01 00 00 f8 ff ff ff	r1 += -8
     528:	b7 02 00 00 08 00 00 00	r2 = 8
     529:	85 00 00 00 71 00 00 00	call 113
     530:	b7 01 00 00 b6 00 00 00	r1 = 182
     531:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     533:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     534:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     535:	b7 02 00 00 02 00 00 00	r2 = 2
     536:	bf 93 00 00 00 00 00 00	r3 = r9
     537:	85 00 00 00 71 00 00 00	call 113
     538:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     539:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     540:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     541:	07 01 00 00 64 00 00 00	r1 += 100
     542:	b7 02 00 00 06 00 00 00	r2 = 6
     543:	bf 63 00 00 00 00 00 00	r3 = r6
     544:	85 00 00 00 04 00 00 00	call 4
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     547:	b7 02 00 00 08 00 00 00	r2 = 8
     548:	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 64)
     549:	85 00 00 00 71 00 00 00	call 113
     550:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     551:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     552:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     553:	b7 02 00 00 02 00 00 00	r2 = 2
     554:	bf 93 00 00 00 00 00 00	r3 = r9
     555:	85 00 00 00 71 00 00 00	call 113
     556:	b7 01 00 00 b4 00 00 00	r1 = 180
     557:	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 48)
     558:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     559:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     560:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     561:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     562:	b7 02 00 00 02 00 00 00	r2 = 2
     563:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     564:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     565:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     566:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB53_62>
     567:	bf 19 00 00 00 00 00 00	r9 = r1

00000000000011c0 <LBB53_62>:
;     return head + network_header;
     568:	57 09 00 00 ff ff 00 00	r9 &= 65535
     569:	0f 96 00 00 00 00 00 00	r6 += r9
     570:	bf a1 00 00 00 00 00 00	r1 = r10
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     572:	b7 02 00 00 01 00 00 00	r2 = 1
     573:	bf 63 00 00 00 00 00 00	r3 = r6
     574:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     575:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     576:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     577:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB53_67>
     578:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB53_91>
     579:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     580:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     581:	b7 01 00 00 c0 00 00 00	r1 = 192
     582:	79 a9 d0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 48)
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
     585:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     586:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     587:	b7 02 00 00 08 00 00 00	r2 = 8
     588:	85 00 00 00 71 00 00 00	call 113
     589:	b7 01 00 00 b6 00 00 00	r1 = 182
     590:	bf 93 00 00 00 00 00 00	r3 = r9
     591:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     592:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     593:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     594:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     595:	b7 02 00 00 02 00 00 00	r2 = 2
     596:	85 00 00 00 71 00 00 00	call 113
     597:	b7 01 00 00 b4 00 00 00	r1 = 180
     598:	bf 93 00 00 00 00 00 00	r3 = r9
     599:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     600:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     601:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     602:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     603:	b7 02 00 00 02 00 00 00	r2 = 2
     604:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     605:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     606:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     607:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB53_66>
     608:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001308 <LBB53_66>:
;     return head + network_header;
     609:	57 09 00 00 ff ff 00 00	r9 &= 65535
     610:	0f 96 00 00 00 00 00 00	r6 += r9
     611:	b7 01 00 00 0c 00 00 00	r1 = 12
     612:	bf 63 00 00 00 00 00 00	r3 = r6
     613:	0f 13 00 00 00 00 00 00	r3 += r1
     614:	bf a1 00 00 00 00 00 00	r1 = r10
     615:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     616:	b7 02 00 00 04 00 00 00	r2 = 4
     617:	85 00 00 00 71 00 00 00	call 113
     618:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     619:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     620:	b7 01 00 00 10 00 00 00	r1 = 16
     621:	bf 63 00 00 00 00 00 00	r3 = r6
     622:	0f 13 00 00 00 00 00 00	r3 += r1
     623:	bf a1 00 00 00 00 00 00	r1 = r10
     624:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     625:	b7 02 00 00 04 00 00 00	r2 = 4
     626:	85 00 00 00 71 00 00 00	call 113
     627:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     628:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     629:	b7 01 00 00 02 00 00 00	r1 = 2
     630:	bf 63 00 00 00 00 00 00	r3 = r6
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     634:	b7 02 00 00 02 00 00 00	r2 = 2
     635:	85 00 00 00 71 00 00 00	call 113
     636:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     637:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     638:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     639:	b7 01 00 00 09 00 00 00	r1 = 9
     640:	05 00 39 00 00 00 00 00	goto +57 <LBB53_70>

0000000000001408 <LBB53_67>:
     641:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     642:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     643:	b7 01 00 00 c0 00 00 00	r1 = 192
     644:	79 a9 d0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 48)
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
     647:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     648:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     649:	b7 02 00 00 08 00 00 00	r2 = 8
     650:	85 00 00 00 71 00 00 00	call 113
     651:	b7 01 00 00 b6 00 00 00	r1 = 182
     652:	bf 93 00 00 00 00 00 00	r3 = r9
     653:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     654:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     655:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     656:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     657:	b7 02 00 00 02 00 00 00	r2 = 2
     658:	85 00 00 00 71 00 00 00	call 113
     659:	b7 01 00 00 b4 00 00 00	r1 = 180
     660:	bf 93 00 00 00 00 00 00	r3 = r9
     661:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     662:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     663:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     664:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     665:	b7 02 00 00 02 00 00 00	r2 = 2
     666:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     667:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     668:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     669:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB53_69>
     670:	bf 19 00 00 00 00 00 00	r9 = r1

00000000000014f8 <LBB53_69>:
;     return head + network_header;
     671:	57 09 00 00 ff ff 00 00	r9 &= 65535
     672:	0f 96 00 00 00 00 00 00	r6 += r9
     673:	b7 01 00 00 08 00 00 00	r1 = 8
     674:	bf 63 00 00 00 00 00 00	r3 = r6
     675:	0f 13 00 00 00 00 00 00	r3 += r1
     676:	79 a9 c8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 56)
;         set_ipv6_info(skb, &event->l3_info);
     677:	bf 91 00 00 00 00 00 00	r1 = r9
     678:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     679:	b7 02 00 00 10 00 00 00	r2 = 16
     680:	85 00 00 00 04 00 00 00	call 4
     681:	b7 01 00 00 18 00 00 00	r1 = 24
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     684:	bf 91 00 00 00 00 00 00	r1 = r9
     685:	07 01 00 00 80 00 00 00	r1 += 128
     686:	b7 02 00 00 10 00 00 00	r2 = 16
     687:	85 00 00 00 04 00 00 00	call 4
     688:	b7 01 00 00 04 00 00 00	r1 = 4
     689:	bf 63 00 00 00 00 00 00	r3 = r6
     690:	0f 13 00 00 00 00 00 00	r3 += r1
     691:	bf a1 00 00 00 00 00 00	r1 = r10
     692:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     693:	b7 02 00 00 02 00 00 00	r2 = 2
     694:	85 00 00 00 71 00 00 00	call 113
     695:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     696:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     697:	b7 01 00 00 06 00 00 00	r1 = 6

00000000000015d0 <LBB53_70>:
     698:	bf 63 00 00 00 00 00 00	r3 = r6
     699:	0f 13 00 00 00 00 00 00	r3 += r1
     700:	bf a1 00 00 00 00 00 00	r1 = r10
     701:	07 01 00 00 f8 ff ff ff	r1 += -8
     702:	b7 02 00 00 01 00 00 00	r2 = 1
     703:	85 00 00 00 71 00 00 00	call 113
     704:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     705:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     706:	bf a1 00 00 00 00 00 00	r1 = r10
     707:	07 01 00 00 f8 ff ff ff	r1 += -8
     708:	b7 02 00 00 01 00 00 00	r2 = 1
     709:	bf 63 00 00 00 00 00 00	r3 = r6
     710:	85 00 00 00 04 00 00 00	call 4
     711:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     712:	57 01 00 00 f0 00 00 00	r1 &= 240
     713:	77 01 00 00 04 00 00 00	r1 >>= 4
     714:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     715:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     716:	65 01 50 00 10 00 00 00	if r1 s> 16 goto +80 <LBB53_73>
     717:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB53_85>
     718:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB53_75>
     719:	05 00 b8 fe 00 00 00 00	goto -328 <LBB53_91>

0000000000001680 <LBB53_75>:
     720:	b7 01 00 00 c0 00 00 00	r1 = 192
     721:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
     722:	bf 63 00 00 00 00 00 00	r3 = r6
     723:	0f 13 00 00 00 00 00 00	r3 += r1
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     726:	b7 02 00 00 08 00 00 00	r2 = 8
     727:	85 00 00 00 71 00 00 00	call 113
     728:	b7 01 00 00 b6 00 00 00	r1 = 182
     729:	bf 63 00 00 00 00 00 00	r3 = r6
     730:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     731:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     732:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     733:	bf a1 00 00 00 00 00 00	r1 = r10
     734:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     735:	b7 02 00 00 02 00 00 00	r2 = 2
     736:	85 00 00 00 71 00 00 00	call 113
     737:	b7 01 00 00 b4 00 00 00	r1 = 180
     738:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     739:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     740:	bf a1 00 00 00 00 00 00	r1 = r10
     741:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     742:	b7 02 00 00 02 00 00 00	r2 = 2
     743:	bf 63 00 00 00 00 00 00	r3 = r6
     744:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     745:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     746:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     747:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB53_77>
     748:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001768 <LBB53_77>:
;     return head + network_header;
     749:	57 09 00 00 ff ff 00 00	r9 &= 65535
     750:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
;     return head + network_header;
     751:	0f 96 00 00 00 00 00 00	r6 += r9
     752:	bf a1 00 00 00 00 00 00	r1 = r10
     753:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     754:	b7 02 00 00 01 00 00 00	r2 = 1
     755:	bf 63 00 00 00 00 00 00	r3 = r6
     756:	85 00 00 00 04 00 00 00	call 4
     757:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     758:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     759:	57 02 00 00 f0 00 00 00	r2 &= 240
     760:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB53_79>
     761:	bf a1 00 00 00 00 00 00	r1 = r10
     762:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     763:	b7 02 00 00 01 00 00 00	r2 = 1
     764:	bf 63 00 00 00 00 00 00	r3 = r6
     765:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     766:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     767:	67 01 00 00 02 00 00 00	r1 <<= 2
     768:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001808 <LBB53_79>:
;     return l3_header + transport_size;
     769:	0f 16 00 00 00 00 00 00	r6 += r1
     770:	b7 01 00 00 00 00 00 00	r1 = 0
     771:	bf 63 00 00 00 00 00 00	r3 = r6
     772:	0f 13 00 00 00 00 00 00	r3 += r1
     773:	bf a1 00 00 00 00 00 00	r1 = r10
     774:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     775:	b7 02 00 00 02 00 00 00	r2 = 2
     776:	85 00 00 00 71 00 00 00	call 113
     777:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     778:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     779:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     780:	b7 01 00 00 02 00 00 00	r1 = 2
     781:	bf 63 00 00 00 00 00 00	r3 = r6
     782:	0f 13 00 00 00 00 00 00	r3 += r1
     783:	bf a1 00 00 00 00 00 00	r1 = r10
     784:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     785:	b7 02 00 00 02 00 00 00	r2 = 2
     786:	85 00 00 00 71 00 00 00	call 113
     787:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     788:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     789:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     790:	07 06 00 00 0c 00 00 00	r6 += 12
     791:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     792:	07 01 00 00 9c 00 00 00	r1 += 156
     793:	b7 02 00 00 02 00 00 00	r2 = 2
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	85 00 00 00 04 00 00 00	call 4
     796:	05 00 8a 00 00 00 00 00	goto +138 <LBB53_90>

00000000000018e8 <LBB53_73>:
;     if (l4_proto == IPPROTO_TCP) {
     797:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB53_80>
     798:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB53_85>
     799:	05 00 68 fe 00 00 00 00	goto -408 <LBB53_91>

0000000000001900 <LBB53_85>:
     800:	b7 01 00 00 c0 00 00 00	r1 = 192
     801:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
     802:	bf 63 00 00 00 00 00 00	r3 = r6
     803:	0f 13 00 00 00 00 00 00	r3 += r1
     804:	bf a1 00 00 00 00 00 00	r1 = r10
     805:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     806:	b7 02 00 00 08 00 00 00	r2 = 8
     807:	85 00 00 00 71 00 00 00	call 113
     808:	b7 01 00 00 b6 00 00 00	r1 = 182
     809:	bf 63 00 00 00 00 00 00	r3 = r6
     810:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     811:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     812:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     813:	bf a1 00 00 00 00 00 00	r1 = r10
     814:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     815:	b7 02 00 00 02 00 00 00	r2 = 2
     816:	85 00 00 00 71 00 00 00	call 113
     817:	b7 01 00 00 b4 00 00 00	r1 = 180
     818:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     819:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     820:	bf a1 00 00 00 00 00 00	r1 = r10
     821:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     822:	b7 02 00 00 02 00 00 00	r2 = 2
     823:	bf 63 00 00 00 00 00 00	r3 = r6
     824:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     825:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     826:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     827:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB53_87>
     828:	bf 19 00 00 00 00 00 00	r9 = r1

00000000000019e8 <LBB53_87>:
;     return head + network_header;
     829:	57 09 00 00 ff ff 00 00	r9 &= 65535
     830:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
;     return head + network_header;
     831:	0f 96 00 00 00 00 00 00	r6 += r9
     832:	bf a1 00 00 00 00 00 00	r1 = r10
     833:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     834:	b7 02 00 00 01 00 00 00	r2 = 1
     835:	bf 63 00 00 00 00 00 00	r3 = r6
     836:	85 00 00 00 04 00 00 00	call 4
     837:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     838:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     839:	57 02 00 00 f0 00 00 00	r2 &= 240
     840:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB53_89>
     841:	bf a1 00 00 00 00 00 00	r1 = r10
     842:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     843:	b7 02 00 00 01 00 00 00	r2 = 1
     844:	bf 63 00 00 00 00 00 00	r3 = r6
     845:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     846:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     847:	67 01 00 00 02 00 00 00	r1 <<= 2
     848:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a88 <LBB53_89>:
;     return l3_header + transport_size;
     849:	0f 16 00 00 00 00 00 00	r6 += r1
     850:	bf a9 00 00 00 00 00 00	r9 = r10
     851:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     852:	bf 91 00 00 00 00 00 00	r1 = r9
     853:	b7 02 00 00 08 00 00 00	r2 = 8
     854:	bf 63 00 00 00 00 00 00	r3 = r6
     855:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     856:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     857:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     858:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     859:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     860:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     861:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     862:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     863:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     864:	05 00 46 00 00 00 00 00	goto +70 <LBB53_90>

0000000000001b08 <LBB53_80>:
     865:	b7 01 00 00 c0 00 00 00	r1 = 192
     866:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
     867:	bf 63 00 00 00 00 00 00	r3 = r6
     868:	0f 13 00 00 00 00 00 00	r3 += r1
     869:	bf a1 00 00 00 00 00 00	r1 = r10
     870:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     871:	b7 02 00 00 08 00 00 00	r2 = 8
     872:	85 00 00 00 71 00 00 00	call 113
     873:	b7 01 00 00 b6 00 00 00	r1 = 182
     874:	bf 63 00 00 00 00 00 00	r3 = r6
     875:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     876:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     877:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     878:	bf a1 00 00 00 00 00 00	r1 = r10
     879:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     880:	b7 02 00 00 02 00 00 00	r2 = 2
     881:	85 00 00 00 71 00 00 00	call 113
     882:	b7 01 00 00 b4 00 00 00	r1 = 180
     883:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     884:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     885:	bf a1 00 00 00 00 00 00	r1 = r10
     886:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     887:	b7 02 00 00 02 00 00 00	r2 = 2
     888:	bf 63 00 00 00 00 00 00	r3 = r6
     889:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     890:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     891:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     892:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB53_82>
     893:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001bf0 <LBB53_82>:
;     return head + network_header;
     894:	57 09 00 00 ff ff 00 00	r9 &= 65535
     895:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
;     return head + network_header;
     896:	0f 96 00 00 00 00 00 00	r6 += r9
     897:	bf a1 00 00 00 00 00 00	r1 = r10
     898:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     899:	b7 02 00 00 01 00 00 00	r2 = 1
     900:	bf 63 00 00 00 00 00 00	r3 = r6
     901:	85 00 00 00 04 00 00 00	call 4
     902:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     903:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     904:	57 02 00 00 f0 00 00 00	r2 &= 240
     905:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB53_84>
     906:	bf a1 00 00 00 00 00 00	r1 = r10
     907:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     908:	b7 02 00 00 01 00 00 00	r2 = 1
     909:	bf 63 00 00 00 00 00 00	r3 = r6
     910:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     911:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     912:	67 01 00 00 02 00 00 00	r1 <<= 2
     913:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c90 <LBB53_84>:
;     return l3_header + transport_size;
     914:	0f 16 00 00 00 00 00 00	r6 += r1
     915:	b7 01 00 00 00 00 00 00	r1 = 0
     916:	bf 63 00 00 00 00 00 00	r3 = r6
     917:	0f 13 00 00 00 00 00 00	r3 += r1
     918:	bf a1 00 00 00 00 00 00	r1 = r10
     919:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     920:	b7 02 00 00 02 00 00 00	r2 = 2
     921:	85 00 00 00 71 00 00 00	call 113
     922:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     923:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     924:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     925:	b7 01 00 00 02 00 00 00	r1 = 2
     926:	0f 16 00 00 00 00 00 00	r6 += r1
     927:	bf a1 00 00 00 00 00 00	r1 = r10
     928:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     929:	b7 02 00 00 02 00 00 00	r2 = 2
     930:	bf 63 00 00 00 00 00 00	r3 = r6
     931:	85 00 00 00 71 00 00 00	call 113
     932:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     933:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     934:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001d38 <LBB53_90>:
;     event->flags |= SKBTRACER_EVENT_IPTABLE;
     935:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     936:	47 01 00 00 02 00 00 00	r1 |= 2
     937:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     938:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
;     verdict = PT_REGS_RC(ctx);
     939:	79 11 50 00 00 00 00 00	r1 = *(u64 *)(r1 + 80)
;     ipt_delay = bpf_ktime_get_ns() - args->start_ns;
     940:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
     941:	85 00 00 00 05 00 00 00	call 5
     942:	bf 09 00 00 00 00 00 00	r9 = r0
     943:	b7 01 00 00 38 00 00 00	r1 = 56
;     set_iptables_info(args->table, args->state, verdict, ipt_delay,
     944:	79 83 10 00 00 00 00 00	r3 = *(u64 *)(r8 + 16)
     945:	0f 13 00 00 00 00 00 00	r3 += r1
;     ipt_delay = bpf_ktime_get_ns() - args->start_ns;
     946:	79 81 18 00 00 00 00 00	r1 = *(u64 *)(r8 + 24)
;     set_iptables_info(args->table, args->state, verdict, ipt_delay,
     947:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     948:	79 86 08 00 00 00 00 00	r6 = *(u64 *)(r8 + 8)
     949:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;                       &event->ipt_info);
     950:	07 01 00 00 a8 00 00 00	r1 += 168
;     bpf_probe_read(&ipt_info->tablename, XT_TABLE_MAXNAMELEN, &table->name);
     951:	b7 02 00 00 20 00 00 00	r2 = 32
     952:	85 00 00 00 04 00 00 00	call 4
     953:	b7 01 00 00 00 00 00 00	r1 = 0
     954:	bf 63 00 00 00 00 00 00	r3 = r6
     955:	0f 13 00 00 00 00 00 00	r3 += r1
     956:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IPTABLE;
     957:	07 01 00 00 f8 ff ff ff	r1 += -8
;     ipt_info->hook = BPF_CORE_READ(state, hook);
     958:	b7 02 00 00 04 00 00 00	r2 = 4
     959:	85 00 00 00 71 00 00 00	call 113
;     ipt_delay = bpf_ktime_get_ns() - args->start_ns;
     960:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     961:	1f 19 00 00 00 00 00 00	r9 -= r1
;     ipt_info->hook = BPF_CORE_READ(state, hook);
     962:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;     ipt_info->delay = delay;
     963:	7b 97 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r9
;     ipt_info->verdict = verdict;
     964:	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 48)
     965:	63 27 cc 00 00 00 00 00	*(u32 *)(r7 + 204) = r2
;     ipt_info->hook = BPF_CORE_READ(state, hook);
     966:	63 17 c8 00 00 00 00 00	*(u32 *)(r7 + 200) = r1
     967:	b7 01 00 00 04 00 00 00	r1 = 4
     968:	0f 16 00 00 00 00 00 00	r6 += r1
     969:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IPTABLE;
     970:	07 01 00 00 f8 ff ff ff	r1 += -8
;     ipt_info->pf = BPF_CORE_READ(state, pf);
     971:	b7 02 00 00 01 00 00 00	r2 = 1
     972:	bf 63 00 00 00 00 00 00	r3 = r6
     973:	85 00 00 00 71 00 00 00	call 113
     974:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     975:	73 17 d8 00 00 00 00 00	*(u8 *)(r7 + 216) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     976:	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 40)
     977:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     979:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     981:	bf 74 00 00 00 00 00 00	r4 = r7
     982:	b7 05 00 00 e0 00 00 00	r5 = 224
     983:	85 00 00 00 19 00 00 00	call 25
     984:	05 00 af fd 00 00 00 00	goto -593 <LBB53_91>

Disassembly of section kprobe/__kfree_skb:

0000000000000000 <k___kfree_skb>:
; int k___kfree_skb(struct pt_regs *ctx) {
       0:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
;     struct sk_buff *skb = (struct sk_buff *)PT_REGS_PARM1(ctx);
       1:	79 11 70 00 00 00 00 00	r1 = *(u64 *)(r1 + 112)
       2:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
       3:	b7 06 00 00 00 00 00 00	r6 = 0
;     GET_CFG();
       4:	63 6a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r6
       5:	bf a2 00 00 00 00 00 00	r2 = r10
       6:	07 02 00 00 e4 ff ff ff	r2 += -28
;     GET_CFG();
       7:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
       9:	85 00 00 00 01 00 00 00	call 1
      10:	bf 08 00 00 00 00 00 00	r8 = r0
      11:	15 08 6d 01 00 00 00 00	if r8 == 0 goto +365 <LBB54_92>
      12:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
      13:	dc 01 00 00 20 00 00 00	r1 = be32 r1
      14:	63 18 08 00 00 00 00 00	*(u32 *)(r8 + 8) = r1
;     u32 ev_buff_id = 0;
      15:	63 6a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r6
      16:	bf a2 00 00 00 00 00 00	r2 = r10
;     GET_CFG();
      17:	07 02 00 00 f8 ff ff ff	r2 += -8
;     ev = bpf_map_lookup_elem(&event_buf, &ev_buff_id);
      18:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      20:	85 00 00 00 01 00 00 00	call 1
      21:	bf 07 00 00 00 00 00 00	r7 = r0
;     if (!ev) return NULL;
      22:	55 07 01 00 00 00 00 00	if r7 != 0 goto +1 <LBB54_3>
      23:	05 00 61 01 00 00 00 00	goto +353 <LBB54_92>

00000000000000c0 <LBB54_3>:
      24:	b7 01 00 00 00 00 00 00	r1 = 0
;     memset(ev, 0, sizeof(*ev));
      25:	7b 17 d8 00 00 00 00 00	*(u64 *)(r7 + 216) = r1
      26:	7b 17 d0 00 00 00 00 00	*(u64 *)(r7 + 208) = r1
      27:	7b 17 c8 00 00 00 00 00	*(u64 *)(r7 + 200) = r1
      28:	7b 17 c0 00 00 00 00 00	*(u64 *)(r7 + 192) = r1
      29:	7b 17 b8 00 00 00 00 00	*(u64 *)(r7 + 184) = r1
      30:	7b 17 b0 00 00 00 00 00	*(u64 *)(r7 + 176) = r1
      31:	7b 17 a8 00 00 00 00 00	*(u64 *)(r7 + 168) = r1
      32:	7b 17 a0 00 00 00 00 00	*(u64 *)(r7 + 160) = r1
      33:	7b 17 98 00 00 00 00 00	*(u64 *)(r7 + 152) = r1
      34:	7b 17 90 00 00 00 00 00	*(u64 *)(r7 + 144) = r1
      35:	7b 17 88 00 00 00 00 00	*(u64 *)(r7 + 136) = r1
      36:	7b 17 80 00 00 00 00 00	*(u64 *)(r7 + 128) = r1
      37:	7b 17 78 00 00 00 00 00	*(u64 *)(r7 + 120) = r1
      38:	7b 17 70 00 00 00 00 00	*(u64 *)(r7 + 112) = r1
      39:	7b 17 68 00 00 00 00 00	*(u64 *)(r7 + 104) = r1
      40:	7b 17 60 00 00 00 00 00	*(u64 *)(r7 + 96) = r1
      41:	7b 17 58 00 00 00 00 00	*(u64 *)(r7 + 88) = r1
      42:	7b 17 50 00 00 00 00 00	*(u64 *)(r7 + 80) = r1
      43:	7b 17 48 00 00 00 00 00	*(u64 *)(r7 + 72) = r1
      44:	7b 17 40 00 00 00 00 00	*(u64 *)(r7 + 64) = r1
      45:	7b 17 38 00 00 00 00 00	*(u64 *)(r7 + 56) = r1
      46:	7b 17 30 00 00 00 00 00	*(u64 *)(r7 + 48) = r1
      47:	7b 17 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r1
      48:	7b 17 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r1
      49:	7b 17 18 00 00 00 00 00	*(u64 *)(r7 + 24) = r1
      50:	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 16) = r1
      51:	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 8) = r1
      52:	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0) = r1
;     u32 pid = bpf_get_current_pid_tgid() >> 32;
      53:	85 00 00 00 0e 00 00 00	call 14
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      54:	61 81 04 00 00 00 00 00	r1 = *(u32 *)(r8 + 4)
      55:	15 01 02 00 00 00 00 00	if r1 == 0 goto +2 <LBB54_5>
      56:	77 00 00 00 20 00 00 00	r0 >>= 32
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
      57:	5d 01 3f 01 00 00 00 00	if r1 != r0 goto +319 <LBB54_92>

00000000000001d0 <LBB54_5>:
      58:	b7 01 00 00 10 00 00 00	r1 = 16
      59:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
      60:	bf 93 00 00 00 00 00 00	r3 = r9
      61:	0f 13 00 00 00 00 00 00	r3 += r1
      62:	bf a6 00 00 00 00 00 00	r6 = r10
      63:	07 06 00 00 f8 ff ff ff	r6 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      64:	bf 61 00 00 00 00 00 00	r1 = r6
      65:	b7 02 00 00 08 00 00 00	r2 = 8
      66:	85 00 00 00 71 00 00 00	call 113
      67:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      68:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      69:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      70:	bf 61 00 00 00 00 00 00	r1 = r6
      71:	b7 02 00 00 08 00 00 00	r2 = 8
      72:	85 00 00 00 71 00 00 00	call 113
      73:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      74:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      75:	0f 13 00 00 00 00 00 00	r3 += r1
      76:	bf a1 00 00 00 00 00 00	r1 = r10
      77:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
      78:	b7 02 00 00 04 00 00 00	r2 = 4
      79:	85 00 00 00 71 00 00 00	call 113
      80:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
      81:	55 01 17 00 00 00 00 00	if r1 != 0 goto +23 <LBB54_8>
      82:	b7 01 00 00 18 00 00 00	r1 = 24
      83:	bf 93 00 00 00 00 00 00	r3 = r9
      84:	0f 13 00 00 00 00 00 00	r3 += r1
      85:	bf a1 00 00 00 00 00 00	r1 = r10
      86:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
      87:	b7 02 00 00 08 00 00 00	r2 = 8
      88:	85 00 00 00 71 00 00 00	call 113
      89:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
      90:	15 03 12 00 00 00 00 00	if r3 == 0 goto +18 <LBB54_11>
      91:	b7 01 00 00 30 00 00 00	r1 = 48
      92:	0f 13 00 00 00 00 00 00	r3 += r1
      93:	bf a1 00 00 00 00 00 00	r1 = r10
      94:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      95:	b7 02 00 00 08 00 00 00	r2 = 8
      96:	85 00 00 00 71 00 00 00	call 113
      97:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
      98:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
      99:	0f 13 00 00 00 00 00 00	r3 += r1
     100:	bf a1 00 00 00 00 00 00	r1 = r10
     101:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     102:	b7 02 00 00 04 00 00 00	r2 = 4
     103:	85 00 00 00 71 00 00 00	call 113
     104:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000348 <LBB54_8>:
;     return cfg->netns != 0 && netns != 0 && cfg->netns != netns;
     105:	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0)
     106:	15 02 02 00 00 00 00 00	if r2 == 0 goto +2 <LBB54_11>
     107:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB54_11>
     108:	5d 12 0c 01 00 00 00 00	if r2 != r1 goto +268 <LBB54_92>

0000000000000368 <LBB54_11>:
;     u16 icmpid = cfg->icmpid;
     109:	69 81 0e 00 00 00 00 00	r1 = *(u16 *)(r8 + 14)
;     u16 port = cfg->port;
     110:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
     111:	69 81 0c 00 00 00 00 00	r1 = *(u16 *)(r8 + 12)
;     u8 proto = cfg->proto;
     112:	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r1
     113:	71 81 12 00 00 00 00 00	r1 = *(u8 *)(r8 + 18)
;     u32 addr = cfg->ip;
     114:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     115:	61 81 08 00 00 00 00 00	r1 = *(u32 *)(r8 + 8)
     116:	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r1
     117:	b7 01 00 00 00 00 00 00	r1 = 0
;     u8 l4_proto = 0;
     118:	73 1a f7 ff 00 00 00 00	*(u8 *)(r10 - 9) = r1
     119:	b7 01 00 00 c0 00 00 00	r1 = 192
     120:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     121:	bf 93 00 00 00 00 00 00	r3 = r9
     122:	0f 13 00 00 00 00 00 00	r3 += r1
     123:	bf a1 00 00 00 00 00 00	r1 = r10
     124:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     125:	b7 02 00 00 08 00 00 00	r2 = 8
     126:	85 00 00 00 71 00 00 00	call 113
     127:	b7 01 00 00 b6 00 00 00	r1 = 182
     128:	bf 93 00 00 00 00 00 00	r3 = r9
     129:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     130:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     131:	bf a1 00 00 00 00 00 00	r1 = r10
     132:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     133:	b7 02 00 00 02 00 00 00	r2 = 2
     134:	85 00 00 00 71 00 00 00	call 113
     135:	b7 01 00 00 b4 00 00 00	r1 = 180
     136:	bf 93 00 00 00 00 00 00	r3 = r9
     137:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     138:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     139:	bf a1 00 00 00 00 00 00	r1 = r10
     140:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     141:	b7 02 00 00 02 00 00 00	r2 = 2
     142:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     143:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     144:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     145:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB54_13>
     146:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000000498 <LBB54_13>:
;     return head + network_header;
     147:	57 09 00 00 ff ff 00 00	r9 &= 65535
     148:	0f 96 00 00 00 00 00 00	r6 += r9
     149:	bf a1 00 00 00 00 00 00	r1 = r10
     150:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     151:	b7 02 00 00 01 00 00 00	r2 = 1
     152:	bf 63 00 00 00 00 00 00	r3 = r6
     153:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     154:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     155:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     156:	15 01 1a 00 06 00 00 00	if r1 == 6 goto +26 <LBB54_20>
     157:	55 01 db 00 04 00 00 00	if r1 != 4 goto +219 <LBB54_92>
;         if (addr != 0) {
     158:	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 64)
     159:	bf 19 00 00 00 00 00 00	r9 = r1
     160:	15 09 25 00 00 00 00 00	if r9 == 0 goto +37 <LBB54_18>
     161:	b7 01 00 00 0c 00 00 00	r1 = 12
     162:	bf 63 00 00 00 00 00 00	r3 = r6
     163:	0f 13 00 00 00 00 00 00	r3 += r1
     164:	bf a1 00 00 00 00 00 00	r1 = r10
     165:	07 01 00 00 f8 ff ff ff	r1 += -8
;             saddr = BPF_CORE_READ(iph, saddr);
     166:	b7 02 00 00 04 00 00 00	r2 = 4
     167:	85 00 00 00 71 00 00 00	call 113
     168:	b7 01 00 00 10 00 00 00	r1 = 16
     169:	0f 16 00 00 00 00 00 00	r6 += r1
;             saddr = BPF_CORE_READ(iph, saddr);
     170:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
;             daddr = BPF_CORE_READ(iph, daddr);
     171:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     172:	bf a1 00 00 00 00 00 00	r1 = r10
     173:	07 01 00 00 f8 ff ff ff	r1 += -8
;             daddr = BPF_CORE_READ(iph, daddr);
     174:	b7 02 00 00 04 00 00 00	r2 = 4
     175:	bf 63 00 00 00 00 00 00	r3 = r6
     176:	85 00 00 00 71 00 00 00	call 113
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     177:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
     178:	1d 19 de 00 00 00 00 00	if r9 == r1 goto +222 <LBB54_54>
     179:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     180:	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 64)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     181:	5d 12 c3 00 00 00 00 00	if r2 != r1 goto +195 <LBB54_92>
     182:	05 00 da 00 00 00 00 00	goto +218 <LBB54_54>

00000000000005b8 <LBB54_20>:
     183:	b7 01 00 00 06 00 00 00	r1 = 6
     184:	0f 16 00 00 00 00 00 00	r6 += r1
     185:	bf a1 00 00 00 00 00 00	r1 = r10
     186:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &ip6h->nexthdr);
     187:	b7 02 00 00 01 00 00 00	r2 = 1
     188:	bf 63 00 00 00 00 00 00	r3 = r6
     189:	85 00 00 00 04 00 00 00	call 4
     190:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     191:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     192:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMPV6) {
     193:	55 01 11 00 3a 00 00 00	if r1 != 58 goto +17 <LBB54_22>
     194:	b7 04 00 00 80 00 00 00	r4 = 128
     195:	b7 03 00 00 81 00 00 00	r3 = 129
     196:	b7 01 00 00 3a 00 00 00	r1 = 58
     197:	05 00 0d 00 00 00 00 00	goto +13 <LBB54_22>

0000000000000630 <LBB54_18>:
     198:	b7 01 00 00 09 00 00 00	r1 = 9
     199:	0f 16 00 00 00 00 00 00	r6 += r1
     200:	bf a1 00 00 00 00 00 00	r1 = r10
     201:	07 01 00 00 f7 ff ff ff	r1 += -9
;         bpf_probe_read(&l4_proto, 1, &iph->protocol);
     202:	b7 02 00 00 01 00 00 00	r2 = 1
     203:	bf 63 00 00 00 00 00 00	r3 = r6
     204:	85 00 00 00 04 00 00 00	call 4
     205:	b7 03 00 00 00 00 00 00	r3 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     206:	71 a1 f7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 9)
     207:	b7 04 00 00 00 00 00 00	r4 = 0
;         if (l4_proto == IPPROTO_ICMP) {
     208:	55 01 02 00 01 00 00 00	if r1 != 1 goto +2 <LBB54_22>
     209:	b7 04 00 00 08 00 00 00	r4 = 8
     210:	b7 01 00 00 01 00 00 00	r1 = 1

0000000000000698 <LBB54_22>:
;     if (proto != 0 && proto != l4_proto)
     211:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     212:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB54_24>
     213:	5d 12 a3 00 00 00 00 00	if r2 != r1 goto +163 <LBB54_92>

00000000000006b0 <LBB54_24>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     214:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB54_27>
     215:	15 01 52 00 01 00 00 00	if r1 == 1 goto +82 <LBB54_29>
     216:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB54_35>
     217:	05 00 9f 00 00 00 00 00	goto +159 <LBB54_92>

00000000000006d0 <LBB54_35>:
     218:	b7 01 00 00 c0 00 00 00	r1 = 192
     219:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     220:	bf 63 00 00 00 00 00 00	r3 = r6
     221:	0f 13 00 00 00 00 00 00	r3 += r1
     222:	bf a1 00 00 00 00 00 00	r1 = r10
     223:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     224:	b7 02 00 00 08 00 00 00	r2 = 8
     225:	85 00 00 00 71 00 00 00	call 113
     226:	b7 01 00 00 b6 00 00 00	r1 = 182
     227:	bf 63 00 00 00 00 00 00	r3 = r6
     228:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     229:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     230:	bf a1 00 00 00 00 00 00	r1 = r10
     231:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     232:	b7 02 00 00 02 00 00 00	r2 = 2
     233:	85 00 00 00 71 00 00 00	call 113
     234:	b7 01 00 00 b4 00 00 00	r1 = 180
     235:	bf 63 00 00 00 00 00 00	r3 = r6
     236:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     237:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     238:	bf a1 00 00 00 00 00 00	r1 = r10
     239:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     240:	b7 02 00 00 02 00 00 00	r2 = 2
     241:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     242:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     243:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     244:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB54_37>
     245:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000007b0 <LBB54_37>:
;     return head + network_header;
     246:	57 06 00 00 ff ff 00 00	r6 &= 65535
     247:	0f 69 00 00 00 00 00 00	r9 += r6
     248:	bf a1 00 00 00 00 00 00	r1 = r10
     249:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     250:	b7 02 00 00 01 00 00 00	r2 = 1
     251:	bf 93 00 00 00 00 00 00	r3 = r9
     252:	85 00 00 00 04 00 00 00	call 4
     253:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     254:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     255:	57 02 00 00 f0 00 00 00	r2 &= 240
     256:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB54_39>
     257:	bf a1 00 00 00 00 00 00	r1 = r10
     258:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     259:	b7 02 00 00 01 00 00 00	r2 = 1
     260:	bf 93 00 00 00 00 00 00	r3 = r9
     261:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     262:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     263:	67 01 00 00 02 00 00 00	r1 <<= 2
     264:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000848 <LBB54_39>:
;     return l3_header + transport_size;
     265:	0f 19 00 00 00 00 00 00	r9 += r1
     266:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9

0000000000000858 <LBB54_40>:
     267:	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 72)
;     if (port != 0) {
     268:	bf 92 00 00 00 00 00 00	r2 = r9
     269:	15 02 5f 00 00 00 00 00	if r2 == 0 goto +95 <LBB54_45>
;         if (l4_proto == IPPROTO_TCP) {
     270:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     271:	15 02 6b 00 11 00 00 00	if r2 == 17 goto +107 <LBB54_52>
     272:	55 02 5c 00 06 00 00 00	if r2 != 6 goto +92 <LBB54_45>
     273:	b7 01 00 00 00 00 00 00	r1 = 0
     274:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     275:	bf 63 00 00 00 00 00 00	r3 = r6
     276:	0f 13 00 00 00 00 00 00	r3 += r1
     277:	bf a1 00 00 00 00 00 00	r1 = r10
     278:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(th, source);
     279:	b7 02 00 00 02 00 00 00	r2 = 2
     280:	85 00 00 00 71 00 00 00	call 113
     281:	b7 01 00 00 02 00 00 00	r1 = 2
     282:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(th, source);
     283:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(th, dest);
     284:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     285:	bf a1 00 00 00 00 00 00	r1 = r10
     286:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(th, dest);
     287:	b7 02 00 00 02 00 00 00	r2 = 2
     288:	bf 63 00 00 00 00 00 00	r3 = r6
     289:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     290:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     291:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     292:	1d 21 6c 00 00 00 00 00	if r1 == r2 goto +108 <LBB54_54>
     293:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     294:	5d 21 52 00 00 00 00 00	if r1 != r2 goto +82 <LBB54_92>
     295:	05 00 69 00 00 00 00 00	goto +105 <LBB54_54>

0000000000000940 <LBB54_27>:
;     if (l4_proto == IPPROTO_ICMP || l4_proto == IPPROTO_ICMPV6) {
     296:	15 01 b1 ff 11 00 00 00	if r1 == 17 goto -79 <LBB54_35>
     297:	55 01 4f 00 3a 00 00 00	if r1 != 58 goto +79 <LBB54_92>

0000000000000950 <LBB54_29>:
     298:	7b 4a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r4
     299:	7b 3a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r3
     300:	b7 01 00 00 c0 00 00 00	r1 = 192
     301:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     302:	bf 63 00 00 00 00 00 00	r3 = r6
     303:	0f 13 00 00 00 00 00 00	r3 += r1
     304:	bf a1 00 00 00 00 00 00	r1 = r10
     305:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     306:	b7 02 00 00 08 00 00 00	r2 = 8
     307:	85 00 00 00 71 00 00 00	call 113
     308:	b7 01 00 00 b6 00 00 00	r1 = 182
     309:	bf 63 00 00 00 00 00 00	r3 = r6
     310:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     311:	79 a9 f8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 8)
     312:	bf a1 00 00 00 00 00 00	r1 = r10
     313:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     314:	b7 02 00 00 02 00 00 00	r2 = 2
     315:	85 00 00 00 71 00 00 00	call 113
     316:	b7 01 00 00 b4 00 00 00	r1 = 180
     317:	bf 63 00 00 00 00 00 00	r3 = r6
     318:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     319:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     320:	bf a1 00 00 00 00 00 00	r1 = r10
     321:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     322:	b7 02 00 00 02 00 00 00	r2 = 2
     323:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     324:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     325:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     326:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB54_31>
     327:	bf 16 00 00 00 00 00 00	r6 = r1

0000000000000a40 <LBB54_31>:
;     return head + network_header;
     328:	57 06 00 00 ff ff 00 00	r6 &= 65535
     329:	0f 69 00 00 00 00 00 00	r9 += r6
     330:	bf a1 00 00 00 00 00 00	r1 = r10
     331:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     332:	b7 02 00 00 01 00 00 00	r2 = 1
     333:	bf 93 00 00 00 00 00 00	r3 = r9
     334:	85 00 00 00 04 00 00 00	call 4
     335:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     336:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     337:	57 02 00 00 f0 00 00 00	r2 &= 240
     338:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB54_33>
     339:	bf a1 00 00 00 00 00 00	r1 = r10
     340:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     341:	b7 02 00 00 01 00 00 00	r2 = 1
     342:	bf 93 00 00 00 00 00 00	r3 = r9
     343:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     344:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     345:	67 01 00 00 02 00 00 00	r1 <<= 2
     346:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000000ad8 <LBB54_33>:
;     return l3_header + transport_size;
     347:	0f 19 00 00 00 00 00 00	r9 += r1
     348:	bf a6 00 00 00 00 00 00	r6 = r10
     349:	07 06 00 00 e8 ff ff ff	r6 += -24
;         bpf_probe_read(&ih, sizeof(ih), l4_header);
     350:	bf 61 00 00 00 00 00 00	r1 = r6
     351:	b7 02 00 00 08 00 00 00	r2 = 8
     352:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
     353:	bf 93 00 00 00 00 00 00	r3 = r9
     354:	85 00 00 00 04 00 00 00	call 4
;         ev_icmpid = ih.un.echo.id;
     355:	69 61 04 00 00 00 00 00	r1 = *(u16 *)(r6 + 4)
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     356:	71 62 00 00 00 00 00 00	r2 = *(u8 *)(r6 + 0)
     357:	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 88)
     358:	79 a4 a0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 96)
     359:	1d 24 a3 ff 00 00 00 00	if r4 == r2 goto -93 <LBB54_40>
     360:	bf a2 00 00 00 00 00 00	r2 = r10
;         if (ih.type != proto_icmp_echo_request && ih.type != proto_icmp_echo_reply)
     361:	07 02 00 00 e8 ff ff ff	r2 += -24
     362:	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0)
     363:	1d 23 9f ff 00 00 00 00	if r3 == r2 goto -97 <LBB54_40>
     364:	05 00 0c 00 00 00 00 00	goto +12 <LBB54_92>

0000000000000b68 <LBB54_45>:
;     if (proto != 0 && proto != l4_proto)
     365:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     366:	15 02 22 00 00 00 00 00	if r2 == 0 goto +34 <LBB54_54>
     367:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
;     if (proto != 0 && icmpid != 0) {
     368:	15 02 20 00 00 00 00 00	if r2 == 0 goto +32 <LBB54_54>
     369:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
;     if (proto != 0 && icmpid != 0) {
     370:	55 02 1e 00 01 00 00 00	if r2 != 1 goto +30 <LBB54_54>
;         if (l4_proto != IPPROTO_ICMP && l4_proto != IPPROTO_ICMPV6)
     371:	71 a2 f7 ff 00 00 00 00	r2 = *(u8 *)(r10 - 9)
     372:	15 02 01 00 3a 00 00 00	if r2 == 58 goto +1 <LBB54_50>
     373:	55 02 1b 00 01 00 00 00	if r2 != 1 goto +27 <LBB54_54>

0000000000000bb0 <LBB54_50>:
;         if (icmpid != ev_icmpid)
     374:	57 01 00 00 ff ff 00 00	r1 &= 65535
     375:	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 80)
     376:	1d 12 18 00 00 00 00 00	if r2 == r1 goto +24 <LBB54_54>

0000000000000bc8 <LBB54_92>:
; }
     377:	b7 00 00 00 00 00 00 00	r0 = 0
     378:	95 00 00 00 00 00 00 00	exit

0000000000000bd8 <LBB54_52>:
     379:	b7 01 00 00 00 00 00 00	r1 = 0
     380:	79 a6 c0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 64)
     381:	bf 63 00 00 00 00 00 00	r3 = r6
     382:	0f 13 00 00 00 00 00 00	r3 += r1
     383:	bf a1 00 00 00 00 00 00	r1 = r10
     384:	07 01 00 00 f8 ff ff ff	r1 += -8
;             sport = BPF_CORE_READ(uh, source);
     385:	b7 02 00 00 02 00 00 00	r2 = 2
     386:	85 00 00 00 71 00 00 00	call 113
     387:	b7 01 00 00 02 00 00 00	r1 = 2
     388:	0f 16 00 00 00 00 00 00	r6 += r1
;             sport = BPF_CORE_READ(uh, source);
     389:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;             dport = BPF_CORE_READ(uh, dest);
     390:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     391:	bf a1 00 00 00 00 00 00	r1 = r10
     392:	07 01 00 00 f8 ff ff ff	r1 += -8
;             dport = BPF_CORE_READ(uh, dest);
     393:	b7 02 00 00 02 00 00 00	r2 = 2
     394:	bf 63 00 00 00 00 00 00	r3 = r6
     395:	85 00 00 00 71 00 00 00	call 113
;             return port != sport && port != dport;
     396:	bf 91 00 00 00 00 00 00	r1 = r9
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     397:	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 56)
     398:	1d 21 02 00 00 00 00 00	if r1 == r2 goto +2 <LBB54_54>
     399:	69 a2 f8 ff 00 00 00 00	r2 = *(u16 *)(r10 - 8)
;     if (filter_pid(cfg) || filter_netns(cfg, skb) || filter_l3_and_l4_info(cfg, skb))
     400:	5d 21 e8 ff 00 00 00 00	if r1 != r2 goto -24 <LBB54_92>

0000000000000c88 <LBB54_54>:
;     event->flags |= SKBTRACER_EVENT_IF;
     401:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     402:	47 01 00 00 01 00 00 00	r1 |= 1
     403:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
     404:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
;     ev->skb = (u64)skb;
     405:	7b 97 20 00 00 00 00 00	*(u64 *)(r7 + 32) = r9
;     ev->start_ns = bpf_ktime_get_ns();
     406:	85 00 00 00 05 00 00 00	call 5
     407:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     408:	b7 01 00 00 10 00 00 00	r1 = 16
     409:	bf 96 00 00 00 00 00 00	r6 = r9
     410:	0f 16 00 00 00 00 00 00	r6 += r1
     411:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     412:	07 01 00 00 f8 ff ff ff	r1 += -8
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     413:	b7 02 00 00 08 00 00 00	r2 = 8
     414:	bf 63 00 00 00 00 00 00	r3 = r6
     415:	85 00 00 00 71 00 00 00	call 113
     416:	b7 01 00 00 70 00 00 00	r1 = 112
     417:	bf 93 00 00 00 00 00 00	r3 = r9
     418:	0f 13 00 00 00 00 00 00	r3 += r1
;     struct net_device *dev = BPF_CORE_READ(skb, dev);
     419:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     pkt_info->len = BPF_CORE_READ(skb, len);
     420:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     421:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     422:	07 01 00 00 f8 ff ff ff	r1 += -8
;     pkt_info->len = BPF_CORE_READ(skb, len);
     423:	b7 02 00 00 04 00 00 00	r2 = 4
     424:	85 00 00 00 71 00 00 00	call 113
     425:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     426:	63 17 4c 00 00 00 00 00	*(u32 *)(r7 + 76) = r1
;     pkt_info->cpu = bpf_get_smp_processor_id();
     427:	85 00 00 00 08 00 00 00	call 8
     428:	63 07 50 00 00 00 00 00	*(u32 *)(r7 + 80) = r0
;     pkt_info->pid = bpf_get_current_pid_tgid() & 0xffff;
     429:	85 00 00 00 0e 00 00 00	call 14
     430:	57 00 00 00 ff ff 00 00	r0 &= 65535
     431:	63 07 54 00 00 00 00 00	*(u32 *)(r7 + 84) = r0
     432:	bf a9 00 00 00 00 00 00	r9 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     433:	07 09 00 00 f8 ff ff ff	r9 += -8
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     434:	bf 91 00 00 00 00 00 00	r1 = r9
     435:	b7 02 00 00 08 00 00 00	r2 = 8
     436:	bf 63 00 00 00 00 00 00	r3 = r6
     437:	85 00 00 00 71 00 00 00	call 113
     438:	b7 01 00 00 30 05 00 00	r1 = 1328
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     439:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     440:	0f 13 00 00 00 00 00 00	r3 += r1
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     441:	bf 91 00 00 00 00 00 00	r1 = r9
     442:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     443:	b7 02 00 00 08 00 00 00	r2 = 8
     444:	85 00 00 00 71 00 00 00	call 113
     445:	b7 01 00 00 88 00 00 00	r1 = 136
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     446:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     447:	0f 13 00 00 00 00 00 00	r3 += r1
     448:	bf a1 00 00 00 00 00 00	r1 = r10
;     event->flags |= SKBTRACER_EVENT_IF;
     449:	07 01 00 00 e8 ff ff ff	r1 += -24
;     netns = BPF_CORE_READ(skb, dev, nd_net.net, ns.inum);
     450:	b7 02 00 00 04 00 00 00	r2 = 4
     451:	85 00 00 00 71 00 00 00	call 113
     452:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)
;     if (netns == 0) {
     453:	55 01 18 00 00 00 00 00	if r1 != 0 goto +24 <LBB54_57>
     454:	b7 01 00 00 18 00 00 00	r1 = 24
     455:	bf 93 00 00 00 00 00 00	r3 = r9
     456:	0f 13 00 00 00 00 00 00	r3 += r1
     457:	bf a1 00 00 00 00 00 00	r1 = r10
     458:	07 01 00 00 f8 ff ff ff	r1 += -8
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     459:	b7 02 00 00 08 00 00 00	r2 = 8
     460:	85 00 00 00 71 00 00 00	call 113
     461:	b7 01 00 00 00 00 00 00	r1 = 0
;         struct sock *sk = BPF_CORE_READ(skb, sk);
     462:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
;         if (sk != NULL)
     463:	15 03 0e 00 00 00 00 00	if r3 == 0 goto +14 <LBB54_57>
     464:	b7 01 00 00 30 00 00 00	r1 = 48
     465:	0f 13 00 00 00 00 00 00	r3 += r1
     466:	bf a1 00 00 00 00 00 00	r1 = r10
     467:	07 01 00 00 f8 ff ff ff	r1 += -8
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     468:	b7 02 00 00 08 00 00 00	r2 = 8
     469:	85 00 00 00 71 00 00 00	call 113
     470:	b7 01 00 00 88 00 00 00	r1 = 136
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     471:	79 a3 f8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 8)
     472:	0f 13 00 00 00 00 00 00	r3 += r1
     473:	bf a1 00 00 00 00 00 00	r1 = r10
     474:	07 01 00 00 e8 ff ff ff	r1 += -24
;             netns = BPF_CORE_READ(sk, __sk_common.skc_net.net, ns.inum);
     475:	b7 02 00 00 04 00 00 00	r2 = 4
     476:	85 00 00 00 71 00 00 00	call 113
     477:	61 a1 e8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 24)

0000000000000ef0 <LBB54_57>:
;     pkt_info->netns = get_netns(skb);
     478:	63 17 58 00 00 00 00 00	*(u32 *)(r7 + 88) = r1
     479:	b7 01 00 00 80 00 00 00	r1 = 128
     480:	bf 93 00 00 00 00 00 00	r3 = r9
     481:	0f 13 00 00 00 00 00 00	r3 += r1
     482:	b7 06 00 00 00 00 00 00	r6 = 0
;     union ___skb_pkt_type type = {};
     483:	73 6a f8 ff 00 00 00 00	*(u8 *)(r10 - 8) = r6
     484:	bf a1 00 00 00 00 00 00	r1 = r10
     485:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&type.value, 1, &skb->__pkt_type_offset);
     486:	b7 02 00 00 01 00 00 00	r2 = 1
     487:	85 00 00 00 04 00 00 00	call 4
;     return type.pkt_type;
     488:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
;     pkt_info->ifname[0] = 0;
     489:	73 67 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r6
;     return type.pkt_type;
     490:	57 01 00 00 07 00 00 00	r1 &= 7
;     pkt_info->pkt_type = get_pkt_type(skb);
     491:	73 17 5c 00 00 00 00 00	*(u8 *)(r7 + 92) = r1
     492:	b7 01 00 00 00 00 00 00	r1 = 0
     493:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     494:	0f 13 00 00 00 00 00 00	r3 += r1
;     pkt_info->ifname[0] = 0;
     495:	bf 71 00 00 00 00 00 00	r1 = r7
     496:	07 01 00 00 3c 00 00 00	r1 += 60
;     bpf_probe_read(&pkt_info->ifname, IFNAMSIZ, &dev->name);
     497:	b7 02 00 00 10 00 00 00	r2 = 16
     498:	85 00 00 00 04 00 00 00	call 4
;     if (pkt_info->ifname[0] == 0) bpf_strncpy(pkt_info->ifname, "nil", IFNAMSIZ);
     499:	71 71 3c 00 00 00 00 00	r1 = *(u8 *)(r7 + 60)
     500:	55 01 06 00 00 00 00 00	if r1 != 0 goto +6 <LBB54_59>
     501:	b7 01 00 00 6c 00 00 00	r1 = 108
;     for (j = 10; j < 64; j += 10) CPY(j);
     502:	73 17 3e 00 00 00 00 00	*(u8 *)(r7 + 62) = r1
     503:	b7 01 00 00 69 00 00 00	r1 = 105
     504:	73 17 3d 00 00 00 00 00	*(u8 *)(r7 + 61) = r1
     505:	b7 01 00 00 6e 00 00 00	r1 = 110
     506:	73 17 3c 00 00 00 00 00	*(u8 *)(r7 + 60) = r1

0000000000000fd8 <LBB54_59>:
     507:	b7 01 00 00 c0 00 00 00	r1 = 192
     508:	bf 93 00 00 00 00 00 00	r3 = r9
     509:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     510:	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r3
     511:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     512:	07 01 00 00 f8 ff ff ff	r1 += -8
     513:	b7 02 00 00 08 00 00 00	r2 = 8
     514:	85 00 00 00 71 00 00 00	call 113
     515:	b7 01 00 00 b6 00 00 00	r1 = 182
     516:	0f 19 00 00 00 00 00 00	r9 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     517:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     518:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     519:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     520:	b7 02 00 00 02 00 00 00	r2 = 2
     521:	bf 93 00 00 00 00 00 00	r3 = r9
     522:	85 00 00 00 71 00 00 00	call 113
     523:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     return head + mac_header;
     524:	0f 16 00 00 00 00 00 00	r6 += r1
;     bpf_probe_read(&l2_info->dest_mac, 6, l2_header);
     525:	bf 71 00 00 00 00 00 00	r1 = r7
     526:	07 01 00 00 64 00 00 00	r1 += 100
     527:	b7 02 00 00 06 00 00 00	r2 = 6
     528:	bf 63 00 00 00 00 00 00	r3 = r6
     529:	85 00 00 00 04 00 00 00	call 4
     530:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     531:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     532:	b7 02 00 00 08 00 00 00	r2 = 8
     533:	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 56)
     534:	85 00 00 00 71 00 00 00	call 113
     535:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     536:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     537:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     538:	b7 02 00 00 02 00 00 00	r2 = 2
     539:	bf 93 00 00 00 00 00 00	r3 = r9
     540:	85 00 00 00 71 00 00 00	call 113
     541:	b7 01 00 00 b4 00 00 00	r1 = 180
     542:	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 40)
     543:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     544:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     545:	bf a1 00 00 00 00 00 00	r1 = r10
;     unsigned char *head = BPF_CORE_READ(skb, head);
     546:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     547:	b7 02 00 00 02 00 00 00	r2 = 2
     548:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     549:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     550:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     551:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB54_61>
     552:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001148 <LBB54_61>:
;     return head + network_header;
     553:	57 09 00 00 ff ff 00 00	r9 &= 65535
     554:	0f 96 00 00 00 00 00 00	r6 += r9
     555:	bf a1 00 00 00 00 00 00	r1 = r10
     556:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     557:	b7 02 00 00 01 00 00 00	r2 = 1
     558:	bf 63 00 00 00 00 00 00	r3 = r6
     559:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte >> 4) & 0x0f;
     560:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     561:	77 01 00 00 04 00 00 00	r1 >>= 4
;     if (ip_version == 4) {
     562:	15 01 3f 00 06 00 00 00	if r1 == 6 goto +63 <LBB54_66>
     563:	55 01 45 ff 04 00 00 00	if r1 != 4 goto -187 <LBB54_92>
     564:	b7 01 00 00 00 08 00 00	r1 = 2048
;         event->l2_info.l3_proto = ETH_P_IP;
     565:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     566:	b7 01 00 00 c0 00 00 00	r1 = 192
     567:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     568:	bf 93 00 00 00 00 00 00	r3 = r9
     569:	0f 13 00 00 00 00 00 00	r3 += r1
     570:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     571:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     572:	b7 02 00 00 08 00 00 00	r2 = 8
     573:	85 00 00 00 71 00 00 00	call 113
     574:	b7 01 00 00 b6 00 00 00	r1 = 182
     575:	bf 93 00 00 00 00 00 00	r3 = r9
     576:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     577:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     578:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     579:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     580:	b7 02 00 00 02 00 00 00	r2 = 2
     581:	85 00 00 00 71 00 00 00	call 113
     582:	b7 01 00 00 b4 00 00 00	r1 = 180
     583:	bf 93 00 00 00 00 00 00	r3 = r9
     584:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     585:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     586:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IP;
     587:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     588:	b7 02 00 00 02 00 00 00	r2 = 2
     589:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     590:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     591:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     592:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB54_65>
     593:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001290 <LBB54_65>:
;     return head + network_header;
     594:	57 09 00 00 ff ff 00 00	r9 &= 65535
     595:	0f 96 00 00 00 00 00 00	r6 += r9
     596:	b7 01 00 00 0c 00 00 00	r1 = 12
     597:	bf 63 00 00 00 00 00 00	r3 = r6
     598:	0f 13 00 00 00 00 00 00	r3 += r1
     599:	bf a1 00 00 00 00 00 00	r1 = r10
     600:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->saddr.v4addr = BPF_CORE_READ(iph, saddr);
     601:	b7 02 00 00 04 00 00 00	r2 = 4
     602:	85 00 00 00 71 00 00 00	call 113
     603:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     604:	63 17 70 00 00 00 00 00	*(u32 *)(r7 + 112) = r1
     605:	b7 01 00 00 10 00 00 00	r1 = 16
     606:	bf 63 00 00 00 00 00 00	r3 = r6
     607:	0f 13 00 00 00 00 00 00	r3 += r1
     608:	bf a1 00 00 00 00 00 00	r1 = r10
     609:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->daddr.v4addr = BPF_CORE_READ(iph, daddr);
     610:	b7 02 00 00 04 00 00 00	r2 = 4
     611:	85 00 00 00 71 00 00 00	call 113
     612:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     613:	63 17 80 00 00 00 00 00	*(u32 *)(r7 + 128) = r1
     614:	b7 01 00 00 02 00 00 00	r1 = 2
     615:	bf 63 00 00 00 00 00 00	r3 = r6
     616:	0f 13 00 00 00 00 00 00	r3 += r1
     617:	bf a1 00 00 00 00 00 00	r1 = r10
     618:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, tot_len);
     619:	b7 02 00 00 02 00 00 00	r2 = 2
     620:	85 00 00 00 71 00 00 00	call 113
     621:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l3_info->tot_len = bpf_ntohs(l3_info->tot_len);
     622:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     623:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     624:	b7 01 00 00 09 00 00 00	r1 = 9
     625:	05 00 38 00 00 00 00 00	goto +56 <LBB54_69>

0000000000001390 <LBB54_66>:
     626:	b7 01 00 00 dd 86 00 00	r1 = 34525
;         event->l2_info.l3_proto = ETH_P_IPV6;
     627:	6b 17 6a 00 00 00 00 00	*(u16 *)(r7 + 106) = r1
     628:	b7 01 00 00 c0 00 00 00	r1 = 192
     629:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     630:	bf 93 00 00 00 00 00 00	r3 = r9
     631:	0f 13 00 00 00 00 00 00	r3 += r1
     632:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     633:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     634:	b7 02 00 00 08 00 00 00	r2 = 8
     635:	85 00 00 00 71 00 00 00	call 113
     636:	b7 01 00 00 b6 00 00 00	r1 = 182
     637:	bf 93 00 00 00 00 00 00	r3 = r9
     638:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     639:	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 8)
     640:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     641:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     642:	b7 02 00 00 02 00 00 00	r2 = 2
     643:	85 00 00 00 71 00 00 00	call 113
     644:	b7 01 00 00 b4 00 00 00	r1 = 180
     645:	bf 93 00 00 00 00 00 00	r3 = r9
     646:	0f 13 00 00 00 00 00 00	r3 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     647:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     648:	bf a1 00 00 00 00 00 00	r1 = r10
;         event->l2_info.l3_proto = ETH_P_IPV6;
     649:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     650:	b7 02 00 00 02 00 00 00	r2 = 2
     651:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     652:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     653:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     654:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB54_68>
     655:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001480 <LBB54_68>:
;     return head + network_header;
     656:	57 09 00 00 ff ff 00 00	r9 &= 65535
     657:	0f 96 00 00 00 00 00 00	r6 += r9
     658:	b7 01 00 00 08 00 00 00	r1 = 8
     659:	bf 63 00 00 00 00 00 00	r3 = r6
     660:	0f 13 00 00 00 00 00 00	r3 += r1
;         set_ipv6_info(skb, &event->l3_info);
     661:	bf 71 00 00 00 00 00 00	r1 = r7
     662:	07 01 00 00 70 00 00 00	r1 += 112
;     bpf_probe_read(&l3_info->saddr.v6addr, ADDRSIZE, &iph->saddr);
     663:	b7 02 00 00 10 00 00 00	r2 = 16
     664:	85 00 00 00 04 00 00 00	call 4
     665:	b7 01 00 00 18 00 00 00	r1 = 24
     666:	bf 63 00 00 00 00 00 00	r3 = r6
     667:	0f 13 00 00 00 00 00 00	r3 += r1
;     bpf_probe_read(&l3_info->daddr.v6addr, ADDRSIZE, &iph->daddr);
     668:	bf 71 00 00 00 00 00 00	r1 = r7
     669:	07 01 00 00 80 00 00 00	r1 += 128
     670:	b7 02 00 00 10 00 00 00	r2 = 16
     671:	85 00 00 00 04 00 00 00	call 4
     672:	b7 01 00 00 04 00 00 00	r1 = 4
     673:	bf 63 00 00 00 00 00 00	r3 = r6
     674:	0f 13 00 00 00 00 00 00	r3 += r1
     675:	bf a1 00 00 00 00 00 00	r1 = r10
     676:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l3_info->tot_len = BPF_CORE_READ(iph, payload_len);
     677:	b7 02 00 00 02 00 00 00	r2 = 2
     678:	85 00 00 00 71 00 00 00	call 113
     679:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
     680:	6b 17 90 00 00 00 00 00	*(u16 *)(r7 + 144) = r1
     681:	b7 01 00 00 06 00 00 00	r1 = 6

0000000000001550 <LBB54_69>:
     682:	bf 63 00 00 00 00 00 00	r3 = r6
     683:	0f 13 00 00 00 00 00 00	r3 += r1
     684:	bf a1 00 00 00 00 00 00	r1 = r10
     685:	07 01 00 00 f8 ff ff ff	r1 += -8
     686:	b7 02 00 00 01 00 00 00	r2 = 1
     687:	85 00 00 00 71 00 00 00	call 113
     688:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     689:	73 17 93 00 00 00 00 00	*(u8 *)(r7 + 147) = r1
     690:	bf a1 00 00 00 00 00 00	r1 = r10
     691:	07 01 00 00 f8 ff ff ff	r1 += -8
     692:	b7 02 00 00 01 00 00 00	r2 = 1
     693:	bf 63 00 00 00 00 00 00	r3 = r6
     694:	85 00 00 00 04 00 00 00	call 4
     695:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     696:	57 01 00 00 f0 00 00 00	r1 &= 240
     697:	77 01 00 00 04 00 00 00	r1 >>= 4
     698:	73 17 92 00 00 00 00 00	*(u8 *)(r7 + 146) = r1
;     l4_proto = event->l3_info.l4_proto;
     699:	71 71 93 00 00 00 00 00	r1 = *(u8 *)(r7 + 147)
;     if (l4_proto == IPPROTO_TCP) {
     700:	65 01 51 00 10 00 00 00	if r1 s> 16 goto +81 <LBB54_72>
     701:	15 01 53 00 01 00 00 00	if r1 == 1 goto +83 <LBB54_84>
     702:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB54_74>
     703:	05 00 b9 fe 00 00 00 00	goto -327 <LBB54_92>

0000000000001600 <LBB54_74>:
     704:	b7 01 00 00 c0 00 00 00	r1 = 192
     705:	79 a9 d8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 40)
     706:	bf 93 00 00 00 00 00 00	r3 = r9
     707:	0f 13 00 00 00 00 00 00	r3 += r1
     708:	bf a1 00 00 00 00 00 00	r1 = r10
     709:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     710:	b7 02 00 00 08 00 00 00	r2 = 8
     711:	85 00 00 00 71 00 00 00	call 113
     712:	b7 01 00 00 b6 00 00 00	r1 = 182
     713:	bf 93 00 00 00 00 00 00	r3 = r9
     714:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     715:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     716:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     717:	bf a1 00 00 00 00 00 00	r1 = r10
     718:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     719:	b7 02 00 00 02 00 00 00	r2 = 2
     720:	85 00 00 00 71 00 00 00	call 113
     721:	b7 01 00 00 b4 00 00 00	r1 = 180
     722:	0f 19 00 00 00 00 00 00	r9 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     723:	69 a6 f8 ff 00 00 00 00	r6 = *(u16 *)(r10 - 8)
     724:	bf a1 00 00 00 00 00 00	r1 = r10
     725:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     726:	b7 02 00 00 02 00 00 00	r2 = 2
     727:	bf 93 00 00 00 00 00 00	r3 = r9
     728:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     729:	07 06 00 00 0e 00 00 00	r6 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     730:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     731:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB54_76>
     732:	bf 16 00 00 00 00 00 00	r6 = r1

00000000000016e8 <LBB54_76>:
;     return head + network_header;
     733:	57 06 00 00 ff ff 00 00	r6 &= 65535
     734:	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 56)
;     return head + network_header;
     735:	0f 61 00 00 00 00 00 00	r1 += r6
     736:	bf 16 00 00 00 00 00 00	r6 = r1
     737:	bf a1 00 00 00 00 00 00	r1 = r10
     738:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     739:	b7 02 00 00 01 00 00 00	r2 = 1
     740:	bf 63 00 00 00 00 00 00	r3 = r6
     741:	85 00 00 00 04 00 00 00	call 4
     742:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     743:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     744:	57 02 00 00 f0 00 00 00	r2 &= 240
     745:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB54_78>
     746:	bf a1 00 00 00 00 00 00	r1 = r10
     747:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     748:	b7 02 00 00 01 00 00 00	r2 = 1
     749:	bf 63 00 00 00 00 00 00	r3 = r6
     750:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     751:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     752:	67 01 00 00 02 00 00 00	r1 <<= 2
     753:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001790 <LBB54_78>:
;     return l3_header + transport_size;
     754:	0f 16 00 00 00 00 00 00	r6 += r1
     755:	b7 01 00 00 00 00 00 00	r1 = 0
     756:	bf 63 00 00 00 00 00 00	r3 = r6
     757:	0f 13 00 00 00 00 00 00	r3 += r1
     758:	bf a1 00 00 00 00 00 00	r1 = r10
     759:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(th, source);
     760:	b7 02 00 00 02 00 00 00	r2 = 2
     761:	85 00 00 00 71 00 00 00	call 113
     762:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     763:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     764:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     765:	b7 01 00 00 02 00 00 00	r1 = 2
     766:	bf 63 00 00 00 00 00 00	r3 = r6
     767:	0f 13 00 00 00 00 00 00	r3 += r1
     768:	bf a1 00 00 00 00 00 00	r1 = r10
     769:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(th, dest);
     770:	b7 02 00 00 02 00 00 00	r2 = 2
     771:	85 00 00 00 71 00 00 00	call 113
     772:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     773:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     774:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1
;     bpf_probe_read(&l4_info->tcpflags, 2, (char *)th + 12);
     775:	07 06 00 00 0c 00 00 00	r6 += 12
     776:	bf 71 00 00 00 00 00 00	r1 = r7
     777:	07 01 00 00 9c 00 00 00	r1 += 156
     778:	b7 02 00 00 02 00 00 00	r2 = 2
     779:	bf 63 00 00 00 00 00 00	r3 = r6
     780:	85 00 00 00 04 00 00 00	call 4
     781:	05 00 8a 00 00 00 00 00	goto +138 <LBB54_89>

0000000000001870 <LBB54_72>:
;     if (l4_proto == IPPROTO_TCP) {
     782:	15 01 43 00 11 00 00 00	if r1 == 17 goto +67 <LBB54_79>
     783:	15 01 01 00 3a 00 00 00	if r1 == 58 goto +1 <LBB54_84>
     784:	05 00 68 fe 00 00 00 00	goto -408 <LBB54_92>

0000000000001888 <LBB54_84>:
     785:	b7 01 00 00 c0 00 00 00	r1 = 192
     786:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     787:	bf 63 00 00 00 00 00 00	r3 = r6
     788:	0f 13 00 00 00 00 00 00	r3 += r1
     789:	bf a1 00 00 00 00 00 00	r1 = r10
     790:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     791:	b7 02 00 00 08 00 00 00	r2 = 8
     792:	85 00 00 00 71 00 00 00	call 113
     793:	b7 01 00 00 b6 00 00 00	r1 = 182
     794:	bf 63 00 00 00 00 00 00	r3 = r6
     795:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     796:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     797:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     798:	bf a1 00 00 00 00 00 00	r1 = r10
     799:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     800:	b7 02 00 00 02 00 00 00	r2 = 2
     801:	85 00 00 00 71 00 00 00	call 113
     802:	b7 01 00 00 b4 00 00 00	r1 = 180
     803:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     804:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     805:	bf a1 00 00 00 00 00 00	r1 = r10
     806:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     807:	b7 02 00 00 02 00 00 00	r2 = 2
     808:	bf 63 00 00 00 00 00 00	r3 = r6
     809:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     810:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     811:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     812:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB54_86>
     813:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001970 <LBB54_86>:
;     return head + network_header;
     814:	57 09 00 00 ff ff 00 00	r9 &= 65535
     815:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     816:	0f 96 00 00 00 00 00 00	r6 += r9
     817:	bf a1 00 00 00 00 00 00	r1 = r10
     818:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     819:	b7 02 00 00 01 00 00 00	r2 = 1
     820:	bf 63 00 00 00 00 00 00	r3 = r6
     821:	85 00 00 00 04 00 00 00	call 4
     822:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     823:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     824:	57 02 00 00 f0 00 00 00	r2 &= 240
     825:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB54_88>
     826:	bf a1 00 00 00 00 00 00	r1 = r10
     827:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     828:	b7 02 00 00 01 00 00 00	r2 = 1
     829:	bf 63 00 00 00 00 00 00	r3 = r6
     830:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     831:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     832:	67 01 00 00 02 00 00 00	r1 <<= 2
     833:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001a10 <LBB54_88>:
;     return l3_header + transport_size;
     834:	0f 16 00 00 00 00 00 00	r6 += r1
     835:	bf a9 00 00 00 00 00 00	r9 = r10
     836:	07 09 00 00 f8 ff ff ff	r9 += -8
;     bpf_probe_read(&ih, sizeof(ih), l4_header);
     837:	bf 91 00 00 00 00 00 00	r1 = r9
     838:	b7 02 00 00 08 00 00 00	r2 = 8
     839:	bf 63 00 00 00 00 00 00	r3 = r6
     840:	85 00 00 00 04 00 00 00	call 4
;     icmp_info->icmptype = ih.type;
     841:	71 91 00 00 00 00 00 00	r1 = *(u8 *)(r9 + 0)
     842:	73 17 a4 00 00 00 00 00	*(u8 *)(r7 + 164) = r1
;     icmp_info->icmpid = bpf_ntohs(ih.un.echo.id);
     843:	69 91 04 00 00 00 00 00	r1 = *(u16 *)(r9 + 4)
     844:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     845:	6b 17 a0 00 00 00 00 00	*(u16 *)(r7 + 160) = r1
;     icmp_info->icmpseq = bpf_ntohs(ih.un.echo.sequence);
     846:	69 91 06 00 00 00 00 00	r1 = *(u16 *)(r9 + 6)
     847:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     848:	6b 17 a2 00 00 00 00 00	*(u16 *)(r7 + 162) = r1
     849:	05 00 46 00 00 00 00 00	goto +70 <LBB54_89>

0000000000001a90 <LBB54_79>:
     850:	b7 01 00 00 c0 00 00 00	r1 = 192
     851:	79 a6 d8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 40)
     852:	bf 63 00 00 00 00 00 00	r3 = r6
     853:	0f 13 00 00 00 00 00 00	r3 += r1
     854:	bf a1 00 00 00 00 00 00	r1 = r10
     855:	07 01 00 00 f8 ff ff ff	r1 += -8
;     unsigned char *head = BPF_CORE_READ(skb, head);
     856:	b7 02 00 00 08 00 00 00	r2 = 8
     857:	85 00 00 00 71 00 00 00	call 113
     858:	b7 01 00 00 b6 00 00 00	r1 = 182
     859:	bf 63 00 00 00 00 00 00	r3 = r6
     860:	0f 13 00 00 00 00 00 00	r3 += r1
;     unsigned char *head = BPF_CORE_READ(skb, head);
     861:	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 8)
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     862:	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r1
     863:	bf a1 00 00 00 00 00 00	r1 = r10
     864:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     865:	b7 02 00 00 02 00 00 00	r2 = 2
     866:	85 00 00 00 71 00 00 00	call 113
     867:	b7 01 00 00 b4 00 00 00	r1 = 180
     868:	0f 16 00 00 00 00 00 00	r6 += r1
;     u16 mac_header = BPF_CORE_READ(skb, mac_header);
     869:	69 a9 f8 ff 00 00 00 00	r9 = *(u16 *)(r10 - 8)
     870:	bf a1 00 00 00 00 00 00	r1 = r10
     871:	07 01 00 00 f8 ff ff ff	r1 += -8
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     872:	b7 02 00 00 02 00 00 00	r2 = 2
     873:	bf 63 00 00 00 00 00 00	r3 = r6
     874:	85 00 00 00 71 00 00 00	call 113
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     875:	07 09 00 00 0e 00 00 00	r9 += 14
;     u16 network_header = BPF_CORE_READ(skb, network_header);
     876:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     if (network_header == 0) network_header = mac_header + MAC_HEADER_SIZE;
     877:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB54_81>
     878:	bf 19 00 00 00 00 00 00	r9 = r1

0000000000001b78 <LBB54_81>:
;     return head + network_header;
     879:	57 09 00 00 ff ff 00 00	r9 &= 65535
     880:	79 a6 c8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 56)
;     return head + network_header;
     881:	0f 96 00 00 00 00 00 00	r6 += r9
     882:	bf a1 00 00 00 00 00 00	r1 = r10
     883:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     884:	b7 02 00 00 01 00 00 00	r2 = 1
     885:	bf 63 00 00 00 00 00 00	r3 = r6
     886:	85 00 00 00 04 00 00 00	call 4
     887:	b7 01 00 00 28 00 00 00	r1 = 40
;     return (first_byte >> 4) & 0x0f;
     888:	71 a2 f8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 8)
;     if (ip_version == 6)
     889:	57 02 00 00 f0 00 00 00	r2 &= 240
     890:	15 02 08 00 60 00 00 00	if r2 == 96 goto +8 <LBB54_83>
     891:	bf a1 00 00 00 00 00 00	r1 = r10
     892:	07 01 00 00 f8 ff ff ff	r1 += -8
;     bpf_probe_read(&first_byte, 1, hdr);
     893:	b7 02 00 00 01 00 00 00	r2 = 1
     894:	bf 63 00 00 00 00 00 00	r3 = r6
     895:	85 00 00 00 04 00 00 00	call 4
;     return (first_byte & 0x0f) * 4;
     896:	71 a1 f8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 8)
     897:	67 01 00 00 02 00 00 00	r1 <<= 2
     898:	57 01 00 00 3c 00 00 00	r1 &= 60

0000000000001c18 <LBB54_83>:
;     return l3_header + transport_size;
     899:	0f 16 00 00 00 00 00 00	r6 += r1
     900:	b7 01 00 00 00 00 00 00	r1 = 0
     901:	bf 63 00 00 00 00 00 00	r3 = r6
     902:	0f 13 00 00 00 00 00 00	r3 += r1
     903:	bf a1 00 00 00 00 00 00	r1 = r10
     904:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->sport = BPF_CORE_READ(uh, source);
     905:	b7 02 00 00 02 00 00 00	r2 = 2
     906:	85 00 00 00 71 00 00 00	call 113
     907:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->sport = bpf_ntohs(l4_info->sport);
     908:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     909:	6b 17 98 00 00 00 00 00	*(u16 *)(r7 + 152) = r1
     910:	b7 01 00 00 02 00 00 00	r1 = 2
     911:	0f 16 00 00 00 00 00 00	r6 += r1
     912:	bf a1 00 00 00 00 00 00	r1 = r10
     913:	07 01 00 00 f8 ff ff ff	r1 += -8
;     l4_info->dport = BPF_CORE_READ(uh, dest);
     914:	b7 02 00 00 02 00 00 00	r2 = 2
     915:	bf 63 00 00 00 00 00 00	r3 = r6
     916:	85 00 00 00 71 00 00 00	call 113
     917:	69 a1 f8 ff 00 00 00 00	r1 = *(u16 *)(r10 - 8)
;     l4_info->dport = bpf_ntohs(l4_info->dport);
     918:	dc 01 00 00 10 00 00 00	r1 = be16 r1
     919:	6b 17 9a 00 00 00 00 00	*(u16 *)(r7 + 154) = r1

0000000000001cc0 <LBB54_89>:
     920:	79 a6 d0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 48)
;     return cfg->dropstack == 0;
     921:	71 81 10 00 00 00 00 00	r1 = *(u8 *)(r8 + 16)
;     if (!filter_dropstack(cfg))
     922:	15 01 06 00 00 00 00 00	if r1 == 0 goto +6 <LBB54_91>
;     event->kernel_stack_id = bpf_get_stackid(ctx, &skbtracer_stack, 0);
     923:	bf 61 00 00 00 00 00 00	r1 = r6
     924:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     926:	b7 03 00 00 00 00 00 00	r3 = 0
     927:	85 00 00 00 1b 00 00 00	call 27
     928:	63 07 30 00 00 00 00 00	*(u32 *)(r7 + 48) = r0

0000000000001d08 <LBB54_91>:
;     event->flags |= SKBTRACER_EVENT_DROP;
     929:	71 71 34 00 00 00 00 00	r1 = *(u8 *)(r7 + 52)
     930:	47 01 00 00 04 00 00 00	r1 |= 4
     931:	73 17 34 00 00 00 00 00	*(u8 *)(r7 + 52) = r1
;     event->start_ns = bpf_ktime_get_ns();
     932:	85 00 00 00 05 00 00 00	call 5
     933:	7b 07 28 00 00 00 00 00	*(u64 *)(r7 + 40) = r0
     934:	b7 01 00 00 62 00 00 00	r1 = 98
;     for (j = 10; j < 64; j += 10) CPY(j);
     935:	73 17 0a 00 00 00 00 00	*(u8 *)(r7 + 10) = r1
     936:	b7 01 00 00 73 00 00 00	r1 = 115
     937:	73 17 08 00 00 00 00 00	*(u8 *)(r7 + 8) = r1
     938:	b7 01 00 00 65 00 00 00	r1 = 101
     939:	73 17 06 00 00 00 00 00	*(u8 *)(r7 + 6) = r1
     940:	73 17 05 00 00 00 00 00	*(u8 *)(r7 + 5) = r1
     941:	b7 01 00 00 72 00 00 00	r1 = 114
     942:	73 17 04 00 00 00 00 00	*(u8 *)(r7 + 4) = r1
     943:	b7 01 00 00 66 00 00 00	r1 = 102
     944:	73 17 03 00 00 00 00 00	*(u8 *)(r7 + 3) = r1
     945:	b7 01 00 00 6b 00 00 00	r1 = 107
     946:	73 17 09 00 00 00 00 00	*(u8 *)(r7 + 9) = r1
     947:	73 17 02 00 00 00 00 00	*(u8 *)(r7 + 2) = r1
     948:	b7 01 00 00 5f 00 00 00	r1 = 95
     949:	73 17 07 00 00 00 00 00	*(u8 *)(r7 + 7) = r1
     950:	73 17 01 00 00 00 00 00	*(u8 *)(r7 + 1) = r1
     951:	73 17 00 00 00 00 00 00	*(u8 *)(r7 + 0) = r1
;     bpf_perf_event_output(ctx, &skbtracer_event, BPF_F_CURRENT_CPU, event,
     952:	bf 61 00 00 00 00 00 00	r1 = r6
     953:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     955:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     957:	bf 74 00 00 00 00 00 00	r4 = r7
     958:	b7 05 00 00 e0 00 00 00	r5 = 224
     959:	85 00 00 00 19 00 00 00	call 25
     960:	05 00 b8 fd 00 00 00 00	goto -584 <LBB54_92>
